{
  "usage" : {
    "file" : "helper_unsafe.go",
    "label1" : "memory-access",
    "label2" : "serialization",
    "line" : "151",
    "module" : "github.com/hashicorp/go-msgpack",
    "pkg" : "github.com/hashicorp/go-msgpack/codec",
    "project" : "mattermost/mattermost-server",
    "snippet" : "isnil := urv.ptr == nil || *(*unsafe.Pointer)(urv.ptr) == nil",
    "version" : "v1.1.5"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 2, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0, 2, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 5, 0, 2, 1 ],
      "decl-vars" : [ 5 ],
      "line-start" : 111,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "urv"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 34,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 34,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "unsafeReflectValue"
              }
            },
            "go-type" : 33,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 33,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 36,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 111,
      "code" : "urv := (*unsafeReflectValue)(unsafe.Pointer(&v))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 3, 5, 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 2, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 112,
      "ast" : {
        "condition" : {
          "go-type" : 37,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "flag",
              "variable" : 6
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 33,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "urv",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 114,
      "code" : "if urv.flag == 0 {\n\treturn true\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 113,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 113,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 47, 54, 56, 58 ],
      "in-vars" : [ 5, 0, 2, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 5, 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 115,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Kind"
            },
            "go-type" : 40,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 173,
      "code" : "switch v.Kind() {\ncase reflect.Invalid:\n\treturn true\ncase reflect.String:\n\treturn (*unsafeString)(urv.ptr).Len == 0\ncase reflect.Slice:\n\treturn (*unsafeSlice)(urv.ptr).Len == 0\ncase reflect.Bool:\n\treturn !*(*bool)(urv.ptr)\ncase reflect.Int:\n\treturn *(*int)(urv.ptr) == 0\ncase reflect.Int8:\n\treturn *(*int8)(urv.ptr) == 0\ncase reflect.Int16:\n\treturn *(*int16)(urv.ptr) == 0\ncase reflect.Int32:\n\treturn *(*int32)(urv.ptr) == 0\ncase reflect.Int64:\n\treturn *(*int64)(urv.ptr) == 0\ncase reflect.Uint:\n\treturn *(*uint)(urv.ptr) == 0\ncase reflect.Uint8:\n\treturn *(*uint8)(urv.ptr) == 0\ncase reflect.Uint16:\n\treturn *(*uint16)(urv.ptr) == 0\ncase reflect.Uint32:\n\treturn *(*uint32)(urv.ptr) == 0\ncase reflect.Uint64:\n\treturn *(*uint64)(urv.ptr) == 0\ncase reflect.Uintptr:\n\treturn *(*uintptr)(urv.ptr) == 0\ncase reflect.Float32:\n\treturn *(*float32)(urv.ptr) == 0\ncase reflect.Float64:\n\treturn *(*float64)(urv.ptr) == 0\ncase reflect.Interface:\n\tisnil := urv.ptr == nil || *(*unsafe.Pointer)(urv.ptr) == nil\n\tif deref {\n\t\tif isnil {\n\t\t\treturn true\n\t\t}\n\t\treturn isEmptyValue(v.Elem(), tinfos, deref, checkStruct)\n\t}\n\treturn isnil\ncase reflect.Ptr:\n\n\tisnil := urv.ptr == nil || *(*unsafe.Pointer)(urv.ptr) == nil\n\tif deref {\n\t\tif isnil {\n\t\t\treturn true\n\t\t}\n\t\treturn isEmptyValue(v.Elem(), tinfos, deref, checkStruct)\n\t}\n\treturn isnil\ncase reflect.Struct:\n\treturn isEmptyStruct(v, tinfos, deref, checkStruct)\ncase reflect.Map, reflect.Array, reflect.Chan:\n\treturn v.Len() == 0\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 116,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 117,
      "code" : "case reflect.Invalid:\n\treturn true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 117,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 117,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 118,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "24"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 119,
      "code" : "case reflect.String:\n\treturn (*unsafeString)(urv.ptr).Len == 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 119,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Len",
              "variable" : 9
            },
            "go-type" : 44,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 46,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 46,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "unsafeString"
                  }
                },
                "go-type" : 45,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 45,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 8
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "urv",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 44,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 119,
      "code" : "return (*unsafeString)(urv.ptr).Len == 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 120,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "23"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 121,
      "code" : "case reflect.Slice:\n\treturn (*unsafeSlice)(urv.ptr).Len == 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 121,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Len",
              "variable" : 10
            },
            "go-type" : 44,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 49,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 49,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "unsafeSlice"
                  }
                },
                "go-type" : 48,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 48,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 8
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "urv",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 44,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 121,
      "code" : "return (*unsafeSlice)(urv.ptr).Len == 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 122,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 123,
      "code" : "case reflect.Bool:\n\treturn !*(*bool)(urv.ptr)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 123,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 15,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 15,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "bool"
                  }
                },
                "go-type" : 51,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 51,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 8
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "urv",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "type" : "unary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 123,
      "code" : "return !*(*bool)(urv.ptr)",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 124,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "2"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 125,
      "code" : "case reflect.Int:\n\treturn *(*int)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 125,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 44,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 44,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 44,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "go-type" : 52,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 52,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 8
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "urv",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 44,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 125,
      "code" : "return *(*int)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 126,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "3"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 127,
      "code" : "case reflect.Int8:\n\treturn *(*int8)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 127,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 53,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 53,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 53,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int8"
                  }
                },
                "go-type" : 54,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 54,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 8
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "urv",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 53,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 127,
      "code" : "return *(*int8)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 128,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "4"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 129,
      "code" : "case reflect.Int16:\n\treturn *(*int16)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 129,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 55,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 55,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 55,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int16"
                  }
                },
                "go-type" : 56,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 56,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 8
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "urv",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 55,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 129,
      "code" : "return *(*int16)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 130,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "5"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 131,
      "code" : "case reflect.Int32:\n\treturn *(*int32)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 131,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 19,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 19,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int32"
                  }
                },
                "go-type" : 57,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 57,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 8
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "urv",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 19,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 131,
      "code" : "return *(*int32)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 132,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "6"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 133,
      "code" : "case reflect.Int64:\n\treturn *(*int64)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 133,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 58,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 58,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 58,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int64"
                  }
                },
                "go-type" : 59,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 59,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 8
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "urv",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 58,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 133,
      "code" : "return *(*int64)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 134,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "7"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 135,
      "code" : "case reflect.Uint:\n\treturn *(*uint)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 135,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 39,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 39,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 39,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint"
                  }
                },
                "go-type" : 60,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 60,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 8
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "urv",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 135,
      "code" : "return *(*uint)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 136,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 137,
      "code" : "case reflect.Uint8:\n\treturn *(*uint8)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 137,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 10,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 10,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint8"
                  }
                },
                "go-type" : 61,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 61,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 8
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "urv",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 137,
      "code" : "return *(*uint8)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 138,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "9"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 139,
      "code" : "case reflect.Uint16:\n\treturn *(*uint16)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 139,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 62,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 62,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 62,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint16"
                  }
                },
                "go-type" : 63,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 63,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 8
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "urv",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 139,
      "code" : "return *(*uint16)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 140,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "10"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 141,
      "code" : "case reflect.Uint32:\n\treturn *(*uint32)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 141,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 8,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 8,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint32"
                  }
                },
                "go-type" : 64,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 64,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 8
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "urv",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 141,
      "code" : "return *(*uint32)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 142,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "11"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 143,
      "code" : "case reflect.Uint64:\n\treturn *(*uint64)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 143,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 32,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 32,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 32,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint64"
                  }
                },
                "go-type" : 65,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 65,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 8
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "urv",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 32,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 143,
      "code" : "return *(*uint64)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 144,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "12"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 145,
      "code" : "case reflect.Uintptr:\n\treturn *(*uintptr)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 145,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 66,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 66,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 8
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "urv",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 145,
      "code" : "return *(*uintptr)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 146,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "13"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 147,
      "code" : "case reflect.Float32:\n\treturn *(*float32)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 147,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 67,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 67,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 67,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "float32"
                  }
                },
                "go-type" : 68,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 68,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 8
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "urv",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 67,
            "kind" : "constant",
            "value" : {
              "denominator" : {
                "type" : "INT",
                "value" : "1"
              },
              "numerator" : {
                "type" : "INT",
                "value" : "0"
              },
              "type" : "FLOAT"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 147,
      "code" : "return *(*float32)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 148,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "14"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 149,
      "code" : "case reflect.Float64:\n\treturn *(*float64)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 149,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 69,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 69,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 69,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "float64"
                  }
                },
                "go-type" : 70,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 70,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 8
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "urv",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 69,
            "kind" : "constant",
            "value" : {
              "denominator" : {
                "type" : "INT",
                "value" : "1"
              },
              "numerator" : {
                "type" : "INT",
                "value" : "0"
              },
              "type" : "FLOAT"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 149,
      "code" : "return *(*float64)(urv.ptr) == 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 5, 0, 2, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 2, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 150,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "20"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 158,
      "code" : "case reflect.Interface:\n\tisnil := urv.ptr == nil || *(*unsafe.Pointer)(urv.ptr) == nil\n\tif deref {\n\t\tif isnil {\n\t\t\treturn true\n\t\t}\n\t\treturn isEmptyValue(v.Elem(), tinfos, deref, checkStruct)\n\t}\n\treturn isnil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42 ],
      "in-vars" : [ 5, 0, 2, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 0, 2, 11 ],
      "decl-vars" : [ 11 ],
      "line-start" : 151,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isnil"
          }
        } ],
        "right" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptr",
                "variable" : 8
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 33,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "urv",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "contained" : {
                    "go-type" : 13,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 2,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 13,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 71,
                  "kind" : "type",
                  "type" : "pointer"
                },
                "go-type" : 71,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ptr",
                    "variable" : 8
                  },
                  "go-type" : 13,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 33,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "urv",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "star"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 151,
      "code" : "isnil := urv.ptr == nil || *(*unsafe.Pointer)(urv.ptr) == nil",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43, 46 ],
      "in-vars" : [ 11, 1, 3, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 0, 2, 11 ],
      "decl-vars" : [ ],
      "line-start" : 152,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "deref",
            "variable" : 2
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 157,
      "code" : "if deref {\n\tif isnil {\n\t\treturn true\n\t}\n\treturn isEmptyValue(v.Elem(), tinfos, deref, checkStruct)\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44, 45 ],
      "in-vars" : [ 0, 2, 11, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 153,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isnil",
            "variable" : 11
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 155,
      "code" : "if isnil {\n\treturn true\n}",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 154,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 154,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0, 2, 1, 3 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 156,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 2,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Elem"
              },
              "go-type" : 72,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tinfos",
              "variable" : 1
            }
          }, {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "deref",
              "variable" : 2
            }
          }, {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "checkStruct",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 0,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "isEmptyValue"
            }
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 156,
      "code" : "return isEmptyValue(v.Elem(), tinfos, deref, checkStruct)",
      "entry" : false,
      "use-vars" : [ 0, 1, 2, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 11 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 158,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isnil",
            "variable" : 11
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 158,
      "code" : "return isnil",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 5, 0, 2, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1, 3, 5 ],
      "decl-vars" : [ ],
      "line-start" : 159,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 168,
      "code" : "case reflect.Ptr:\n\n\tisnil := urv.ptr == nil || *(*unsafe.Pointer)(urv.ptr) == nil\n\tif deref {\n\t\tif isnil {\n\t\t\treturn true\n\t\t}\n\t\treturn isEmptyValue(v.Elem(), tinfos, deref, checkStruct)\n\t}\n\treturn isnil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 5, 0, 2, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 13, 0, 2, 1 ],
      "decl-vars" : [ 13 ],
      "line-start" : 161,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isnil"
          }
        } ],
        "right" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptr",
                "variable" : 8
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 33,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "urv",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "contained" : {
                    "go-type" : 13,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 2,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 13,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 71,
                  "kind" : "type",
                  "type" : "pointer"
                },
                "go-type" : 71,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ptr",
                    "variable" : 8
                  },
                  "go-type" : 13,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 33,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "urv",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "star"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 161,
      "code" : "isnil := urv.ptr == nil || *(*unsafe.Pointer)(urv.ptr) == nil",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50, 53 ],
      "in-vars" : [ 0, 2, 1, 3, 13 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1, 3, 13 ],
      "decl-vars" : [ ],
      "line-start" : 162,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "deref",
            "variable" : 2
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 167,
      "code" : "if deref {\n\tif isnil {\n\t\treturn true\n\t}\n\treturn isEmptyValue(v.Elem(), tinfos, deref, checkStruct)\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51, 52 ],
      "in-vars" : [ 2, 1, 3, 13, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 163,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isnil",
            "variable" : 13
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 165,
      "code" : "if isnil {\n\treturn true\n}",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 164,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 164,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 3, 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 166,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 2,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Elem"
              },
              "go-type" : 72,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tinfos",
              "variable" : 1
            }
          }, {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "deref",
              "variable" : 2
            }
          }, {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "checkStruct",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 0,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "isEmptyValue"
            }
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 166,
      "code" : "return isEmptyValue(v.Elem(), tinfos, deref, checkStruct)",
      "entry" : false,
      "use-vars" : [ 0, 1, 2, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 13 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 168,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isnil",
            "variable" : 13
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 168,
      "code" : "return isnil",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 2, 1, 3, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 169,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "25"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 170,
      "code" : "case reflect.Struct:\n\treturn isEmptyStruct(v, tinfos, deref, checkStruct)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0, 2, 1, 3 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 170,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 0
            }
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tinfos",
              "variable" : 1
            }
          }, {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "deref",
              "variable" : 2
            }
          }, {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "checkStruct",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "isEmptyStruct"
            }
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 170,
      "code" : "return isEmptyStruct(v, tinfos, deref, checkStruct)",
      "entry" : false,
      "use-vars" : [ 0, 1, 2, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 171,
      "ast" : {
        "expressions" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "21"
          }
        }, {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "17"
          }
        }, {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "18"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 172,
      "code" : "case reflect.Map, reflect.Array, reflect.Chan:\n\treturn v.Len() == 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 172,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 4,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Len"
              },
              "go-type" : 75,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "go-type" : 44,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 44,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 172,
      "code" : "return v.Len() == 0",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 174,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 174,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func isEmptyValue(v reflect.Value, tinfos *TypeInfos, deref, checkStruct bool) bool {\n\turv := (*unsafeReflectValue)(unsafe.Pointer(&v))\n\tif urv.flag == 0 {\n\t\treturn true\n\t}\n\tswitch v.Kind() {\n\tcase reflect.Invalid:\n\t\treturn true\n\tcase reflect.String:\n\t\treturn (*unsafeString)(urv.ptr).Len == 0\n\tcase reflect.Slice:\n\t\treturn (*unsafeSlice)(urv.ptr).Len == 0\n\tcase reflect.Bool:\n\t\treturn !*(*bool)(urv.ptr)\n\tcase reflect.Int:\n\t\treturn *(*int)(urv.ptr) == 0\n\tcase reflect.Int8:\n\t\treturn *(*int8)(urv.ptr) == 0\n\tcase reflect.Int16:\n\t\treturn *(*int16)(urv.ptr) == 0\n\tcase reflect.Int32:\n\t\treturn *(*int32)(urv.ptr) == 0\n\tcase reflect.Int64:\n\t\treturn *(*int64)(urv.ptr) == 0\n\tcase reflect.Uint:\n\t\treturn *(*uint)(urv.ptr) == 0\n\tcase reflect.Uint8:\n\t\treturn *(*uint8)(urv.ptr) == 0\n\tcase reflect.Uint16:\n\t\treturn *(*uint16)(urv.ptr) == 0\n\tcase reflect.Uint32:\n\t\treturn *(*uint32)(urv.ptr) == 0\n\tcase reflect.Uint64:\n\t\treturn *(*uint64)(urv.ptr) == 0\n\tcase reflect.Uintptr:\n\t\treturn *(*uintptr)(urv.ptr) == 0\n\tcase reflect.Float32:\n\t\treturn *(*float32)(urv.ptr) == 0\n\tcase reflect.Float64:\n\t\treturn *(*float64)(urv.ptr) == 0\n\tcase reflect.Interface:\n\t\tisnil := urv.ptr == nil || *(*unsafe.Pointer)(urv.ptr) == nil\n\t\tif deref {\n\t\t\tif isnil {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\treturn isEmptyValue(v.Elem(), tinfos, deref, checkStruct)\n\t\t}\n\t\treturn isnil\n\tcase reflect.Ptr:\n\n\t\tisnil := urv.ptr == nil || *(*unsafe.Pointer)(urv.ptr) == nil\n\t\tif deref {\n\t\t\tif isnil {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\treturn isEmptyValue(v.Elem(), tinfos, deref, checkStruct)\n\t\t}\n\t\treturn isnil\n\tcase reflect.Struct:\n\t\treturn isEmptyStruct(v, tinfos, deref, checkStruct)\n\tcase reflect.Map, reflect.Array, reflect.Chan:\n\t\treturn v.Len() == 0\n\t}\n\treturn false\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "isEmptyValue",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Kind",
      "package" : 1,
      "type" : 43,
      "exported" : true
    }, {
      "name" : "Elem",
      "package" : 1,
      "type" : 74,
      "exported" : true
    }, {
      "name" : "isEmptyStruct",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Len",
      "package" : 1,
      "type" : 77,
      "exported" : true
    } ],
    "line-end" : 175,
    "line-start" : 110,
    "names" : [ "isEmptyValue" ],
    "package" : 0,
    "packages" : [ {
      "name" : "codec",
      "path" : "github.com/hashicorp/go-msgpack/codec"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sync",
      "path" : "sync"
    } ],
    "params" : [ 0, 1, 2, 3 ],
    "receivers" : [ ],
    "results" : [ 4 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(v reflect.Value, tinfos *github.com/hashicorp/go-msgpack/codec.TypeInfos, deref bool, checkStruct bool) bool",
      "params" : 1,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 2
      }, {
        "name" : "tinfos",
        "type" : 22
      }, {
        "name" : "deref",
        "type" : 15
      }, {
        "name" : "checkStruct",
        "type" : 15
      } ],
      "name" : "(v reflect.Value, tinfos *github.com/hashicorp/go-msgpack/codec.TypeInfos, deref bool, checkStruct bool)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 1,
      "type" : "Named",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 4
      }, {
        "name" : "ptr",
        "type" : 13
      }, {
        "name" : "flag",
        "type" : 21
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 4
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 1,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      }, {
        "name" : "ptrdata",
        "type" : 7
      }, {
        "name" : "hash",
        "type" : 8
      }, {
        "name" : "tflag",
        "type" : 9
      }, {
        "name" : "align",
        "type" : 10
      }, {
        "name" : "fieldAlign",
        "type" : 10
      }, {
        "name" : "kind",
        "type" : 10
      }, {
        "name" : "equal",
        "type" : 11
      }, {
        "name" : "gcdata",
        "type" : 16
      }, {
        "name" : "str",
        "type" : 18
      }, {
        "name" : "ptrToThis",
        "type" : 20
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 10
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 12,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 19
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 19
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "elem" : 23,
      "name" : "*github.com/hashicorp/go-msgpack/codec.TypeInfos",
      "type" : "Pointer",
      "underlying" : 22
    }, {
      "local-name" : "TypeInfos",
      "name" : "github.com/hashicorp/go-msgpack/codec.TypeInfos",
      "package" : 0,
      "type" : "Named",
      "underlying" : 24
    }, {
      "fields" : [ {
        "name" : "infos",
        "type" : 25
      }, {
        "name" : "mu",
        "type" : 27
      }, {
        "name" : "tags",
        "type" : 29
      }, {
        "name" : "_",
        "type" : 31
      } ],
      "name" : "struct{infos github.com/hashicorp/go-msgpack/codec.atomicTypeInfoSlice; mu sync.Mutex; tags []string; _ [2]uint64}",
      "type" : "Struct",
      "underlying" : 24
    }, {
      "local-name" : "atomicTypeInfoSlice",
      "name" : "github.com/hashicorp/go-msgpack/codec.atomicTypeInfoSlice",
      "package" : 0,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 13
      }, {
        "name" : "_",
        "type" : 7
      } ],
      "name" : "struct{v unsafe.Pointer; _ uintptr}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "local-name" : "Mutex",
      "name" : "sync.Mutex",
      "package" : 3,
      "type" : "Named",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "state",
        "type" : 19
      }, {
        "name" : "sema",
        "type" : 8
      } ],
      "name" : "struct{state int32; sema uint32}",
      "type" : "Struct",
      "underlying" : 28
    }, {
      "elem" : 30,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 29
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 30
    }, {
      "elem" : 32,
      "name" : "[2]uint64",
      "type" : "Array",
      "underlying" : 31
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 32
    }, {
      "elem" : 34,
      "name" : "*github.com/hashicorp/go-msgpack/codec.unsafeReflectValue",
      "type" : "Pointer",
      "underlying" : 33
    }, {
      "local-name" : "unsafeReflectValue",
      "name" : "github.com/hashicorp/go-msgpack/codec.unsafeReflectValue",
      "package" : 0,
      "type" : "Named",
      "underlying" : 35
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 13
      }, {
        "name" : "ptr",
        "type" : 13
      }, {
        "name" : "flag",
        "type" : 7
      } ],
      "name" : "struct{typ unsafe.Pointer; ptr unsafe.Pointer; flag uintptr}",
      "type" : "Struct",
      "underlying" : 35
    }, {
      "elem" : 2,
      "name" : "*reflect.Value",
      "type" : "Pointer",
      "underlying" : 36
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 37
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 1,
      "type" : "Named",
      "underlying" : 39
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 39
    }, {
      "name" : "func() reflect.Kind",
      "params" : 41,
      "recv" : -1,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 40,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 38
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "name" : "(reflect.Value) func() reflect.Kind",
      "params" : 41,
      "recv" : 7,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 44
    }, {
      "elem" : 46,
      "name" : "*github.com/hashicorp/go-msgpack/codec.unsafeString",
      "type" : "Pointer",
      "underlying" : 45
    }, {
      "local-name" : "unsafeString",
      "name" : "github.com/hashicorp/go-msgpack/codec.unsafeString",
      "package" : 0,
      "type" : "Named",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 13
      }, {
        "name" : "Len",
        "type" : 44
      } ],
      "name" : "struct{Data unsafe.Pointer; Len int}",
      "type" : "Struct",
      "underlying" : 47
    }, {
      "elem" : 49,
      "name" : "*github.com/hashicorp/go-msgpack/codec.unsafeSlice",
      "type" : "Pointer",
      "underlying" : 48
    }, {
      "local-name" : "unsafeSlice",
      "name" : "github.com/hashicorp/go-msgpack/codec.unsafeSlice",
      "package" : 0,
      "type" : "Named",
      "underlying" : 50
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 13
      }, {
        "name" : "Len",
        "type" : 44
      }, {
        "name" : "Cap",
        "type" : 44
      } ],
      "name" : "struct{Data unsafe.Pointer; Len int; Cap int}",
      "type" : "Struct",
      "underlying" : 50
    }, {
      "elem" : 15,
      "name" : "*bool",
      "type" : "Pointer",
      "underlying" : 51
    }, {
      "elem" : 44,
      "name" : "*int",
      "type" : "Pointer",
      "underlying" : 52
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 53
    }, {
      "elem" : 53,
      "name" : "*int8",
      "type" : "Pointer",
      "underlying" : 54
    }, {
      "name" : "int16",
      "type" : "Basic",
      "underlying" : 55
    }, {
      "elem" : 55,
      "name" : "*int16",
      "type" : "Pointer",
      "underlying" : 56
    }, {
      "elem" : 19,
      "name" : "*int32",
      "type" : "Pointer",
      "underlying" : 57
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 58
    }, {
      "elem" : 58,
      "name" : "*int64",
      "type" : "Pointer",
      "underlying" : 59
    }, {
      "elem" : 39,
      "name" : "*uint",
      "type" : "Pointer",
      "underlying" : 60
    }, {
      "elem" : 10,
      "name" : "*uint8",
      "type" : "Pointer",
      "underlying" : 61
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 62
    }, {
      "elem" : 62,
      "name" : "*uint16",
      "type" : "Pointer",
      "underlying" : 63
    }, {
      "elem" : 8,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 64
    }, {
      "elem" : 32,
      "name" : "*uint64",
      "type" : "Pointer",
      "underlying" : 65
    }, {
      "elem" : 7,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 66
    }, {
      "name" : "float32",
      "type" : "Basic",
      "underlying" : 67
    }, {
      "elem" : 67,
      "name" : "*float32",
      "type" : "Pointer",
      "underlying" : 68
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 69
    }, {
      "elem" : 69,
      "name" : "*float64",
      "type" : "Pointer",
      "underlying" : 70
    }, {
      "elem" : 13,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 71
    }, {
      "name" : "func() reflect.Value",
      "params" : 41,
      "recv" : -1,
      "results" : 73,
      "type" : "Signature",
      "underlying" : 72,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(reflect.Value)",
      "type" : "Tuple",
      "underlying" : 73
    }, {
      "name" : "(reflect.Value) func() reflect.Value",
      "params" : 41,
      "recv" : 12,
      "results" : 73,
      "type" : "Signature",
      "underlying" : 74,
      "variadic" : false
    }, {
      "name" : "func() int",
      "params" : 41,
      "recv" : -1,
      "results" : 76,
      "type" : "Signature",
      "underlying" : 75,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 44
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 76
    }, {
      "name" : "(reflect.Value) func() int",
      "params" : 41,
      "recv" : 14,
      "results" : 76,
      "type" : "Signature",
      "underlying" : 77,
      "variadic" : false
    } ],
    "variables" : [ {
      "name" : "v",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tinfos",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "deref",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "checkStruct",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "urv",
      "package" : 0,
      "type" : 33,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "flag",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "v",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Len",
      "package" : 0,
      "type" : 44,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Len",
      "package" : 0,
      "type" : 44,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "isnil",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isnil",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}