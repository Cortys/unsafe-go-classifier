{
  "usage" : {
    "file" : "helper_unsafe.go",
    "label1" : "memory-access",
    "label2" : "serialization",
    "line" : "288",
    "module" : "github.com/hashicorp/go-msgpack",
    "pkg" : "github.com/hashicorp/go-msgpack/codec",
    "project" : "mattermost/mattermost-server",
    "snippet" : "((*unsafeReflectValue)(unsafe.Pointer(&v))).ptr = unsafe.Pointer(&n.l)",
    "version" : "v1.1.5"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 2, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 3 ],
      "in-vars" : [ 2, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 287,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "v",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "rl",
            "variable" : 3
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 46,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defUnsafeDecNakedWrapper",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 287,
      "code" : "v = defUnsafeDecNakedWrapper.rl",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 4 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 288,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 4
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 48,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 49,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 49,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "unsafeReflectValue"
                  }
                },
                "go-type" : 48,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 48,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 14,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 2,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 14,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 14,
                "kind" : "expression",
                "target" : {
                  "go-type" : 51,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 3,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "v",
                      "variable" : 1
                    }
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "paren"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 14,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 14,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 52,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "l",
                "variable" : 5
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "go-type" : 23,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "n",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 288,
      "code" : "((*unsafeReflectValue)(unsafe.Pointer(&v))).ptr = unsafe.Pointer(&n.l)",
      "entry" : false,
      "use-vars" : [ 1, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 289,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 289,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func (n *decNaked) rl() (v reflect.Value) {\n\tv = defUnsafeDecNakedWrapper.rl\n\t((*unsafeReflectValue)(unsafe.Pointer(&v))).ptr = unsafe.Pointer(&n.l)\n\treturn\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "rl",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ],
    "line-end" : 290,
    "line-start" : 286,
    "names" : [ "rl" ],
    "package" : 0,
    "packages" : [ {
      "name" : "codec",
      "path" : "github.com/hashicorp/go-msgpack/codec"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "time",
      "path" : "time"
    } ],
    "params" : [ ],
    "receivers" : [ 0 ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func() (v reflect.Value)",
      "params" : 1,
      "recv" : 0,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 3
      } ],
      "name" : "(v reflect.Value)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 1,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 5
      }, {
        "name" : "ptr",
        "type" : 14
      }, {
        "name" : "flag",
        "type" : 22
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 5
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 8
      }, {
        "name" : "ptrdata",
        "type" : 8
      }, {
        "name" : "hash",
        "type" : 9
      }, {
        "name" : "tflag",
        "type" : 10
      }, {
        "name" : "align",
        "type" : 11
      }, {
        "name" : "fieldAlign",
        "type" : 11
      }, {
        "name" : "kind",
        "type" : 11
      }, {
        "name" : "equal",
        "type" : 12
      }, {
        "name" : "gcdata",
        "type" : 17
      }, {
        "name" : "str",
        "type" : 19
      }, {
        "name" : "ptrToThis",
        "type" : 21
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 11
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 13,
      "recv" : -1,
      "results" : 15,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      }, {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "elem" : 18,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 17
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 20
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 20
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 24,
      "name" : "*github.com/hashicorp/go-msgpack/codec.decNaked",
      "type" : "Pointer",
      "underlying" : 23
    }, {
      "local-name" : "decNaked",
      "name" : "github.com/hashicorp/go-msgpack/codec.decNaked",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 26
      }, {
        "name" : "i",
        "type" : 27
      }, {
        "name" : "f",
        "type" : 28
      }, {
        "name" : "l",
        "type" : 29
      }, {
        "name" : "s",
        "type" : 30
      }, {
        "name" : "t",
        "type" : 31
      }, {
        "name" : "b",
        "type" : 16
      }, {
        "name" : "v",
        "type" : 44
      }, {
        "name" : "_",
        "type" : 45
      } ],
      "name" : "struct{u uint64; i int64; f float64; l []byte; s string; t time.Time; b bool; v github.com/hashicorp/go-msgpack/codec.valueType; _ [6]bool}",
      "type" : "Struct",
      "underlying" : 25
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "elem" : 18,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 29
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 30
    }, {
      "local-name" : "Time",
      "name" : "time.Time",
      "package" : 3,
      "type" : "Named",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "wall",
        "type" : 26
      }, {
        "name" : "ext",
        "type" : 27
      }, {
        "name" : "loc",
        "type" : 33
      } ],
      "name" : "struct{wall uint64; ext int64; loc *time.Location}",
      "type" : "Struct",
      "underlying" : 32
    }, {
      "elem" : 34,
      "name" : "*time.Location",
      "type" : "Pointer",
      "underlying" : 33
    }, {
      "local-name" : "Location",
      "name" : "time.Location",
      "package" : 3,
      "type" : "Named",
      "underlying" : 35
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 30
      }, {
        "name" : "zone",
        "type" : 36
      }, {
        "name" : "tx",
        "type" : 40
      }, {
        "name" : "cacheStart",
        "type" : 27
      }, {
        "name" : "cacheEnd",
        "type" : 27
      }, {
        "name" : "cacheZone",
        "type" : 43
      } ],
      "name" : "struct{name string; zone []time.zone; tx []time.zoneTrans; cacheStart int64; cacheEnd int64; cacheZone *time.zone}",
      "type" : "Struct",
      "underlying" : 35
    }, {
      "elem" : 37,
      "name" : "[]time.zone",
      "type" : "Slice",
      "underlying" : 36
    }, {
      "local-name" : "zone",
      "name" : "time.zone",
      "package" : 3,
      "type" : "Named",
      "underlying" : 38
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 30
      }, {
        "name" : "offset",
        "type" : 39
      }, {
        "name" : "isDST",
        "type" : 16
      } ],
      "name" : "struct{name string; offset int; isDST bool}",
      "type" : "Struct",
      "underlying" : 38
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 39
    }, {
      "elem" : 41,
      "name" : "[]time.zoneTrans",
      "type" : "Slice",
      "underlying" : 40
    }, {
      "local-name" : "zoneTrans",
      "name" : "time.zoneTrans",
      "package" : 3,
      "type" : "Named",
      "underlying" : 42
    }, {
      "fields" : [ {
        "name" : "when",
        "type" : 27
      }, {
        "name" : "index",
        "type" : 11
      }, {
        "name" : "isstd",
        "type" : 16
      }, {
        "name" : "isutc",
        "type" : 16
      } ],
      "name" : "struct{when int64; index uint8; isstd bool; isutc bool}",
      "type" : "Struct",
      "underlying" : 42
    }, {
      "elem" : 37,
      "name" : "*time.zone",
      "type" : "Pointer",
      "underlying" : 43
    }, {
      "local-name" : "valueType",
      "name" : "github.com/hashicorp/go-msgpack/codec.valueType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "elem" : 16,
      "name" : "[6]bool",
      "type" : "Array",
      "underlying" : 45
    }, {
      "local-name" : "unsafeDecNakedWrapper",
      "name" : "github.com/hashicorp/go-msgpack/codec.unsafeDecNakedWrapper",
      "package" : 0,
      "type" : "Named",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "decNaked",
        "type" : 24
      }, {
        "name" : "ru",
        "type" : 3
      }, {
        "name" : "ri",
        "type" : 3
      }, {
        "name" : "rf",
        "type" : 3
      }, {
        "name" : "rl",
        "type" : 3
      }, {
        "name" : "rs",
        "type" : 3
      }, {
        "name" : "rb",
        "type" : 3
      }, {
        "name" : "rt",
        "type" : 3
      } ],
      "name" : "struct{github.com/hashicorp/go-msgpack/codec.decNaked; ru reflect.Value; ri reflect.Value; rf reflect.Value; rl reflect.Value; rs reflect.Value; rb reflect.Value; rt reflect.Value}",
      "type" : "Struct",
      "underlying" : 47
    }, {
      "elem" : 49,
      "name" : "*github.com/hashicorp/go-msgpack/codec.unsafeReflectValue",
      "type" : "Pointer",
      "underlying" : 48
    }, {
      "local-name" : "unsafeReflectValue",
      "name" : "github.com/hashicorp/go-msgpack/codec.unsafeReflectValue",
      "package" : 0,
      "type" : "Named",
      "underlying" : 50
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 14
      }, {
        "name" : "ptr",
        "type" : 14
      }, {
        "name" : "flag",
        "type" : 8
      } ],
      "name" : "struct{typ unsafe.Pointer; ptr unsafe.Pointer; flag uintptr}",
      "type" : "Struct",
      "underlying" : 50
    }, {
      "elem" : 3,
      "name" : "*reflect.Value",
      "type" : "Pointer",
      "underlying" : 51
    }, {
      "elem" : 29,
      "name" : "*[]byte",
      "type" : "Pointer",
      "underlying" : 52
    } ],
    "variables" : [ {
      "name" : "n",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "defUnsafeDecNakedWrapper",
      "package" : 0,
      "type" : 46,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rl",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "l",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}