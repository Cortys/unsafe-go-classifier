{
  "usage" : {
    "file" : "reflect_optional.go",
    "label1" : "memory-access",
    "label2" : "serialization",
    "line" : "102",
    "module" : "github.com/json-iterator/go",
    "pkg" : "github.com/json-iterator/go",
    "project" : "elastic/beats",
    "snippet" : "func (encoder *dereferenceEncoder) IsEmbeddedPtrNil(ptr unsafe.Pointer) bool {",
    "version" : "v1.1.7"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 40, 41 ],
      "exit" : false,
      "out-vars" : [ 40, 41 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 40, 41 ],
      "exit" : false,
      "out-vars" : [ 43, 40 ],
      "decl-vars" : [ 43 ],
      "line-start" : 103,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "deReferenced"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 2,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 2,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 180,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 180,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 41
                }
              },
              "type" : "cast"
            },
            "type" : "paren"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 103,
      "code" : "deReferenced := *((*unsafe.Pointer)(ptr))",
      "entry" : false,
      "use-vars" : [ 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 40, 43 ],
      "exit" : false,
      "out-vars" : [ 43, 40 ],
      "decl-vars" : [ ],
      "line-start" : 104,
      "ast" : {
        "condition" : {
          "go-type" : 181,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "deReferenced",
              "variable" : 43
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 106,
      "code" : "if deReferenced == nil {\n\treturn true\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 105,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 105,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 43, 40 ],
      "exit" : false,
      "out-vars" : [ 43, 45, 46 ],
      "decl-vars" : [ 46, 45 ],
      "line-start" : 107,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isEmbeddedPtrNil"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "converted"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 183,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 183,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "IsEmbeddedPtrNil"
            }
          },
          "go-type" : 182,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ValueEncoder",
              "variable" : 44
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "encoder",
                "variable" : 40
              }
            },
            "type" : "selector"
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 107,
      "code" : "isEmbeddedPtrNil, converted := encoder.ValueEncoder.(IsEmbeddedPtrNil)",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 8 ],
      "in-vars" : [ 43, 45, 46 ],
      "exit" : false,
      "out-vars" : [ 43, 46 ],
      "decl-vars" : [ ],
      "line-start" : 108,
      "ast" : {
        "condition" : {
          "go-type" : 4,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "converted",
              "variable" : 45
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 110,
      "code" : "if !converted {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 45 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 109,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 109,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 43, 46 ],
      "exit" : false,
      "out-vars" : [ 47, 46 ],
      "decl-vars" : [ 47 ],
      "line-start" : 111,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fieldPtr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 2,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "deReferenced",
              "variable" : 43
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 111,
      "code" : "fieldPtr := unsafe.Pointer(deReferenced)",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 47, 46 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 112,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fieldPtr",
              "variable" : 47
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "IsEmbeddedPtrNil"
            },
            "go-type" : 0,
            "kind" : "expression",
            "target" : {
              "go-type" : 183,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "isEmbeddedPtrNil",
                "variable" : 46
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 112,
      "code" : "return isEmbeddedPtrNil.IsEmbeddedPtrNil(fieldPtr)",
      "entry" : false,
      "use-vars" : [ 46, 47 ]
    } ],
    "code" : "func (encoder *dereferenceEncoder) IsEmbeddedPtrNil(ptr unsafe.Pointer) bool {\n\tdeReferenced := *((*unsafe.Pointer)(ptr))\n\tif deReferenced == nil {\n\t\treturn true\n\t}\n\tisEmbeddedPtrNil, converted := encoder.ValueEncoder.(IsEmbeddedPtrNil)\n\tif !converted {\n\t\treturn false\n\t}\n\tfieldPtr := unsafe.Pointer(deReferenced)\n\treturn isEmbeddedPtrNil.IsEmbeddedPtrNil(fieldPtr)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "IsEmbeddedPtrNil",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "IsEmbeddedPtrNil",
      "package" : 0,
      "type" : 0,
      "exported" : true
    } ],
    "line-end" : 113,
    "line-start" : 102,
    "names" : [ "IsEmbeddedPtrNil" ],
    "package" : 0,
    "packages" : [ {
      "name" : "jsoniter",
      "path" : "github.com/json-iterator/go"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "concurrent",
      "path" : "github.com/modern-go/concurrent"
    }, {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "atomic",
      "path" : "sync/atomic"
    }, {
      "name" : "reflect2",
      "path" : "github.com/modern-go/reflect2"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "io",
      "path" : "io"
    } ],
    "params" : [ 41 ],
    "receivers" : [ 40 ],
    "results" : [ 42 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(ptr unsafe.Pointer) bool",
      "params" : 1,
      "recv" : 40,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 2
      } ],
      "name" : "(ptr unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "*github.com/json-iterator/go.dereferenceEncoder",
      "type" : "Pointer",
      "underlying" : 5
    }, {
      "local-name" : "dereferenceEncoder",
      "name" : "github.com/json-iterator/go.dereferenceEncoder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "ValueEncoder",
        "type" : 8
      } ],
      "name" : "struct{ValueEncoder github.com/json-iterator/go.ValEncoder}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "local-name" : "ValEncoder",
      "name" : "github.com/json-iterator/go.ValEncoder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "methods" : [ {
        "name" : "Encode",
        "type" : 10
      }, {
        "name" : "IsEmpty",
        "type" : 0
      } ],
      "name" : "interface{Encode(ptr unsafe.Pointer, stream *github.com/json-iterator/go.Stream); IsEmpty(ptr unsafe.Pointer) bool}",
      "type" : "Interface",
      "underlying" : 9
    }, {
      "name" : "func(ptr unsafe.Pointer, stream *github.com/json-iterator/go.Stream)",
      "params" : 11,
      "recv" : 39,
      "results" : 53,
      "type" : "Signature",
      "underlying" : 10,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 2
      }, {
        "name" : "stream",
        "type" : 12
      } ],
      "name" : "(ptr unsafe.Pointer, stream *github.com/json-iterator/go.Stream)",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "*github.com/json-iterator/go.Stream",
      "type" : "Pointer",
      "underlying" : 12
    }, {
      "local-name" : "Stream",
      "name" : "github.com/json-iterator/go.Stream",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "cfg",
        "type" : 15
      }, {
        "name" : "out",
        "type" : 178
      }, {
        "name" : "buf",
        "type" : 138
      }, {
        "name" : "Error",
        "type" : 140
      }, {
        "name" : "indention",
        "type" : 20
      }, {
        "name" : "Attachment",
        "type" : 33
      } ],
      "name" : "struct{cfg *github.com/json-iterator/go.frozenConfig; out io.Writer; buf []byte; Error error; indention int; Attachment interface{}}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "elem" : 16,
      "name" : "*github.com/json-iterator/go.frozenConfig",
      "type" : "Pointer",
      "underlying" : 15
    }, {
      "local-name" : "frozenConfig",
      "name" : "github.com/json-iterator/go.frozenConfig",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "configBeforeFrozen",
        "type" : 18
      }, {
        "name" : "sortMapKeys",
        "type" : 4
      }, {
        "name" : "indentionStep",
        "type" : 20
      }, {
        "name" : "objectFieldMustBeSimpleString",
        "type" : 4
      }, {
        "name" : "onlyTaggedField",
        "type" : 4
      }, {
        "name" : "disallowUnknownFields",
        "type" : 4
      }, {
        "name" : "decoderCache",
        "type" : 22
      }, {
        "name" : "encoderCache",
        "type" : 22
      }, {
        "name" : "encoderExtension",
        "type" : 38
      }, {
        "name" : "decoderExtension",
        "type" : 38
      }, {
        "name" : "extraExtensions",
        "type" : 172
      }, {
        "name" : "streamPool",
        "type" : 173
      }, {
        "name" : "iteratorPool",
        "type" : 173
      }, {
        "name" : "caseSensitive",
        "type" : 4
      } ],
      "name" : "struct{configBeforeFrozen github.com/json-iterator/go.Config; sortMapKeys bool; indentionStep int; objectFieldMustBeSimpleString bool; onlyTaggedField bool; disallowUnknownFields bool; decoderCache *github.com/modern-go/concurrent.Map; encoderCache *github.com/modern-go/concurrent.Map; encoderExtension github.com/json-iterator/go.Extension; decoderExtension github.com/json-iterator/go.Extension; extraExtensions []github.com/json-iterator/go.Extension; streamPool *sync.Pool; iteratorPool *sync.Pool; caseSensitive bool}",
      "type" : "Struct",
      "underlying" : 17
    }, {
      "local-name" : "Config",
      "name" : "github.com/json-iterator/go.Config",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "IndentionStep",
        "type" : 20
      }, {
        "name" : "MarshalFloatWith6Digits",
        "type" : 4
      }, {
        "name" : "EscapeHTML",
        "type" : 4
      }, {
        "name" : "SortMapKeys",
        "type" : 4
      }, {
        "name" : "UseNumber",
        "type" : 4
      }, {
        "name" : "DisallowUnknownFields",
        "type" : 4
      }, {
        "name" : "TagKey",
        "type" : 21
      }, {
        "name" : "OnlyTaggedField",
        "type" : 4
      }, {
        "name" : "ValidateJsonRawMessage",
        "type" : 4
      }, {
        "name" : "ObjectFieldMustBeSimpleString",
        "type" : 4
      }, {
        "name" : "CaseSensitive",
        "type" : 4
      } ],
      "name" : "struct{IndentionStep int; MarshalFloatWith6Digits bool; EscapeHTML bool; SortMapKeys bool; UseNumber bool; DisallowUnknownFields bool; TagKey string; OnlyTaggedField bool; ValidateJsonRawMessage bool; ObjectFieldMustBeSimpleString bool; CaseSensitive bool}",
      "type" : "Struct",
      "underlying" : 19
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "elem" : 23,
      "name" : "*github.com/modern-go/concurrent.Map",
      "type" : "Pointer",
      "underlying" : 22
    }, {
      "local-name" : "Map",
      "name" : "github.com/modern-go/concurrent.Map",
      "package" : 2,
      "type" : "Named",
      "underlying" : 24
    }, {
      "fields" : [ {
        "name" : "Map",
        "type" : 25
      } ],
      "name" : "struct{sync.Map}",
      "type" : "Struct",
      "underlying" : 24
    }, {
      "local-name" : "Map",
      "name" : "sync.Map",
      "package" : 3,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "mu",
        "type" : 27
      }, {
        "name" : "read",
        "type" : 31
      }, {
        "name" : "dirty",
        "type" : 34
      }, {
        "name" : "misses",
        "type" : 20
      } ],
      "name" : "struct{mu sync.Mutex; read sync/atomic.Value; dirty map[interface{}]*sync.entry; misses int}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "local-name" : "Mutex",
      "name" : "sync.Mutex",
      "package" : 3,
      "type" : "Named",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "state",
        "type" : 29
      }, {
        "name" : "sema",
        "type" : 30
      } ],
      "name" : "struct{state int32; sema uint32}",
      "type" : "Struct",
      "underlying" : 28
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 29
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 30
    }, {
      "local-name" : "Value",
      "name" : "sync/atomic.Value",
      "package" : 4,
      "type" : "Named",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 33
      } ],
      "name" : "struct{v interface{}}",
      "type" : "Struct",
      "underlying" : 32
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 33
    }, {
      "elem" : 35,
      "key" : 33,
      "name" : "map[interface{}]*sync.entry",
      "type" : "Map",
      "underlying" : 34
    }, {
      "elem" : 36,
      "name" : "*sync.entry",
      "type" : "Pointer",
      "underlying" : 35
    }, {
      "local-name" : "entry",
      "name" : "sync.entry",
      "package" : 3,
      "type" : "Named",
      "underlying" : 37
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 2
      } ],
      "name" : "struct{p unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 37
    }, {
      "local-name" : "Extension",
      "name" : "github.com/json-iterator/go.Extension",
      "package" : 0,
      "type" : "Named",
      "underlying" : 39
    }, {
      "methods" : [ {
        "name" : "CreateDecoder",
        "type" : 40
      }, {
        "name" : "CreateEncoder",
        "type" : 142
      }, {
        "name" : "CreateMapKeyDecoder",
        "type" : 40
      }, {
        "name" : "CreateMapKeyEncoder",
        "type" : 142
      }, {
        "name" : "DecorateDecoder",
        "type" : 144
      }, {
        "name" : "DecorateEncoder",
        "type" : 146
      }, {
        "name" : "UpdateStructDescriptor",
        "type" : 148
      } ],
      "name" : "interface{CreateDecoder(typ github.com/modern-go/reflect2.Type) github.com/json-iterator/go.ValDecoder; CreateEncoder(typ github.com/modern-go/reflect2.Type) github.com/json-iterator/go.ValEncoder; CreateMapKeyDecoder(typ github.com/modern-go/reflect2.Type) github.com/json-iterator/go.ValDecoder; CreateMapKeyEncoder(typ github.com/modern-go/reflect2.Type) github.com/json-iterator/go.ValEncoder; DecorateDecoder(typ github.com/modern-go/reflect2.Type, decoder github.com/json-iterator/go.ValDecoder) github.com/json-iterator/go.ValDecoder; DecorateEncoder(typ github.com/modern-go/reflect2.Type, encoder github.com/json-iterator/go.ValEncoder) github.com/json-iterator/go.ValEncoder; UpdateStructDescriptor(structDescriptor *github.com/json-iterator/go.StructDescriptor)}",
      "type" : "Interface",
      "underlying" : 39
    }, {
      "name" : "func(typ github.com/modern-go/reflect2.Type) github.com/json-iterator/go.ValDecoder",
      "params" : 41,
      "recv" : 28,
      "results" : 126,
      "type" : "Signature",
      "underlying" : 40,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 42
      } ],
      "name" : "(typ github.com/modern-go/reflect2.Type)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "local-name" : "Type",
      "name" : "github.com/modern-go/reflect2.Type",
      "package" : 5,
      "type" : "Named",
      "underlying" : 43
    }, {
      "methods" : [ {
        "name" : "AssignableTo",
        "type" : 44
      }, {
        "name" : "Implements",
        "type" : 46
      }, {
        "name" : "Indirect",
        "type" : 48
      }, {
        "name" : "IsNil",
        "type" : 51
      }, {
        "name" : "IsNullable",
        "type" : 52
      }, {
        "name" : "Kind",
        "type" : 54
      }, {
        "name" : "LikePtr",
        "type" : 52
      }, {
        "name" : "New",
        "type" : 58
      }, {
        "name" : "PackEFace",
        "type" : 59
      }, {
        "name" : "RType",
        "type" : 60
      }, {
        "name" : "Set",
        "type" : 63
      }, {
        "name" : "String",
        "type" : 65
      }, {
        "name" : "Type1",
        "type" : 67
      }, {
        "name" : "UnsafeIndirect",
        "type" : 59
      }, {
        "name" : "UnsafeIsNil",
        "type" : 0
      }, {
        "name" : "UnsafeNew",
        "type" : 122
      }, {
        "name" : "UnsafeSet",
        "type" : 124
      } ],
      "name" : "interface{AssignableTo(anotherType github.com/modern-go/reflect2.Type) bool; Implements(thatType github.com/modern-go/reflect2.Type) bool; Indirect(obj interface{}) interface{}; IsNil(obj interface{}) bool; IsNullable() bool; Kind() reflect.Kind; LikePtr() bool; New() interface{}; PackEFace(ptr unsafe.Pointer) interface{}; RType() uintptr; Set(obj interface{}, val interface{}); String() string; Type1() reflect.Type; UnsafeIndirect(ptr unsafe.Pointer) interface{}; UnsafeIsNil(ptr unsafe.Pointer) bool; UnsafeNew() unsafe.Pointer; UnsafeSet(ptr unsafe.Pointer, val unsafe.Pointer)}",
      "type" : "Interface",
      "underlying" : 43
    }, {
      "name" : "func(anotherType github.com/modern-go/reflect2.Type) bool",
      "params" : 45,
      "recv" : 0,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 44,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "anotherType",
        "type" : 42
      } ],
      "name" : "(anotherType github.com/modern-go/reflect2.Type)",
      "type" : "Tuple",
      "underlying" : 45
    }, {
      "name" : "func(thatType github.com/modern-go/reflect2.Type) bool",
      "params" : 47,
      "recv" : 1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "thatType",
        "type" : 42
      } ],
      "name" : "(thatType github.com/modern-go/reflect2.Type)",
      "type" : "Tuple",
      "underlying" : 47
    }, {
      "name" : "func(obj interface{}) interface{}",
      "params" : 49,
      "recv" : 2,
      "results" : 50,
      "type" : "Signature",
      "underlying" : 48,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "obj",
        "type" : 33
      } ],
      "name" : "(obj interface{})",
      "type" : "Tuple",
      "underlying" : 49
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 33
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "name" : "func(obj interface{}) bool",
      "params" : 49,
      "recv" : 3,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "name" : "func() bool",
      "params" : 53,
      "recv" : 4,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 52,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 53
    }, {
      "name" : "func() reflect.Kind",
      "params" : 53,
      "recv" : 5,
      "results" : 55,
      "type" : "Signature",
      "underlying" : 54,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 56
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 55
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 6,
      "type" : "Named",
      "underlying" : 57
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 57
    }, {
      "name" : "func() interface{}",
      "params" : 53,
      "recv" : 6,
      "results" : 50,
      "type" : "Signature",
      "underlying" : 58,
      "variadic" : false
    }, {
      "name" : "func(ptr unsafe.Pointer) interface{}",
      "params" : 1,
      "recv" : 7,
      "results" : 50,
      "type" : "Signature",
      "underlying" : 59,
      "variadic" : false
    }, {
      "name" : "func() uintptr",
      "params" : 53,
      "recv" : 8,
      "results" : 61,
      "type" : "Signature",
      "underlying" : 60,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 62
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 61
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 62
    }, {
      "name" : "func(obj interface{}, val interface{})",
      "params" : 64,
      "recv" : 9,
      "results" : 53,
      "type" : "Signature",
      "underlying" : 63,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "obj",
        "type" : 33
      }, {
        "name" : "val",
        "type" : 33
      } ],
      "name" : "(obj interface{}, val interface{})",
      "type" : "Tuple",
      "underlying" : 64
    }, {
      "name" : "func() string",
      "params" : 53,
      "recv" : 10,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 65,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 66
    }, {
      "name" : "func() reflect.Type",
      "params" : 53,
      "recv" : 23,
      "results" : 68,
      "type" : "Signature",
      "underlying" : 67,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 69
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 68
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 6,
      "type" : "Named",
      "underlying" : 70
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 71
      }, {
        "name" : "AssignableTo",
        "type" : 73
      }, {
        "name" : "Bits",
        "type" : 71
      }, {
        "name" : "ChanDir",
        "type" : 75
      }, {
        "name" : "Comparable",
        "type" : 52
      }, {
        "name" : "ConvertibleTo",
        "type" : 73
      }, {
        "name" : "Elem",
        "type" : 67
      }, {
        "name" : "Field",
        "type" : 78
      }, {
        "name" : "FieldAlign",
        "type" : 71
      }, {
        "name" : "FieldByIndex",
        "type" : 85
      }, {
        "name" : "FieldByName",
        "type" : 87
      }, {
        "name" : "FieldByNameFunc",
        "type" : 90
      }, {
        "name" : "Implements",
        "type" : 73
      }, {
        "name" : "In",
        "type" : 93
      }, {
        "name" : "IsVariadic",
        "type" : 52
      }, {
        "name" : "Key",
        "type" : 67
      }, {
        "name" : "Kind",
        "type" : 54
      }, {
        "name" : "Len",
        "type" : 71
      }, {
        "name" : "Method",
        "type" : 94
      }, {
        "name" : "MethodByName",
        "type" : 112
      }, {
        "name" : "Name",
        "type" : 65
      }, {
        "name" : "NumField",
        "type" : 71
      }, {
        "name" : "NumIn",
        "type" : 71
      }, {
        "name" : "NumMethod",
        "type" : 71
      }, {
        "name" : "NumOut",
        "type" : 71
      }, {
        "name" : "Out",
        "type" : 93
      }, {
        "name" : "PkgPath",
        "type" : 65
      }, {
        "name" : "Size",
        "type" : 60
      }, {
        "name" : "String",
        "type" : 65
      }, {
        "name" : "common",
        "type" : 114
      }, {
        "name" : "uncommon",
        "type" : 116
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 70
    }, {
      "name" : "func() int",
      "params" : 53,
      "recv" : 11,
      "results" : 72,
      "type" : "Signature",
      "underlying" : 71,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 20
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 72
    }, {
      "name" : "func(u reflect.Type) bool",
      "params" : 74,
      "recv" : 12,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 73,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 69
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 74
    }, {
      "name" : "func() reflect.ChanDir",
      "params" : 53,
      "recv" : 13,
      "results" : 76,
      "type" : "Signature",
      "underlying" : 75,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 77
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 76
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 6,
      "type" : "Named",
      "underlying" : 20
    }, {
      "name" : "func(i int) reflect.StructField",
      "params" : 79,
      "recv" : 14,
      "results" : 80,
      "type" : "Signature",
      "underlying" : 78,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 20
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 79
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 81
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 80
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 6,
      "type" : "Named",
      "underlying" : 82
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 21
      }, {
        "name" : "PkgPath",
        "type" : 21
      }, {
        "name" : "Type",
        "type" : 69
      }, {
        "name" : "Tag",
        "type" : 83
      }, {
        "name" : "Offset",
        "type" : 62
      }, {
        "name" : "Index",
        "type" : 84
      }, {
        "name" : "Anonymous",
        "type" : 4
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 82
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 6,
      "type" : "Named",
      "underlying" : 21
    }, {
      "elem" : 20,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 84
    }, {
      "name" : "func(index []int) reflect.StructField",
      "params" : 86,
      "recv" : 15,
      "results" : 80,
      "type" : "Signature",
      "underlying" : 85,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 84
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 86
    }, {
      "name" : "func(name string) (reflect.StructField, bool)",
      "params" : 88,
      "recv" : 16,
      "results" : 89,
      "type" : "Signature",
      "underlying" : 87,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 21
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 88
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 81
      }, {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 89
    }, {
      "name" : "func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 91,
      "recv" : 17,
      "results" : 89,
      "type" : "Signature",
      "underlying" : 90,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 92
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 91
    }, {
      "name" : "func(string) bool",
      "params" : 66,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 92,
      "variadic" : false
    }, {
      "name" : "func(i int) reflect.Type",
      "params" : 79,
      "recv" : 18,
      "results" : 68,
      "type" : "Signature",
      "underlying" : 93,
      "variadic" : false
    }, {
      "name" : "func(int) reflect.Method",
      "params" : 72,
      "recv" : 19,
      "results" : 95,
      "type" : "Signature",
      "underlying" : 94,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 96
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 95
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 6,
      "type" : "Named",
      "underlying" : 97
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 21
      }, {
        "name" : "PkgPath",
        "type" : 21
      }, {
        "name" : "Type",
        "type" : 69
      }, {
        "name" : "Func",
        "type" : 98
      }, {
        "name" : "Index",
        "type" : 20
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 97
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 6,
      "type" : "Named",
      "underlying" : 99
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 100
      }, {
        "name" : "ptr",
        "type" : 2
      }, {
        "name" : "flag",
        "type" : 111
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 99
    }, {
      "elem" : 101,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 100
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 6,
      "type" : "Named",
      "underlying" : 102
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 62
      }, {
        "name" : "ptrdata",
        "type" : 62
      }, {
        "name" : "hash",
        "type" : 30
      }, {
        "name" : "tflag",
        "type" : 103
      }, {
        "name" : "align",
        "type" : 104
      }, {
        "name" : "fieldAlign",
        "type" : 104
      }, {
        "name" : "kind",
        "type" : 104
      }, {
        "name" : "equal",
        "type" : 105
      }, {
        "name" : "gcdata",
        "type" : 107
      }, {
        "name" : "str",
        "type" : 109
      }, {
        "name" : "ptrToThis",
        "type" : 110
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 102
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 6,
      "type" : "Named",
      "underlying" : 104
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 104
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 106,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 105,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 106
    }, {
      "elem" : 108,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 107
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 108
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 6,
      "type" : "Named",
      "underlying" : 29
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 6,
      "type" : "Named",
      "underlying" : 29
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 6,
      "type" : "Named",
      "underlying" : 62
    }, {
      "name" : "func(string) (reflect.Method, bool)",
      "params" : 66,
      "recv" : 20,
      "results" : 113,
      "type" : "Signature",
      "underlying" : 112,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 96
      }, {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 113
    }, {
      "name" : "func() *reflect.rtype",
      "params" : 53,
      "recv" : 21,
      "results" : 115,
      "type" : "Signature",
      "underlying" : 114,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 100
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 115
    }, {
      "name" : "func() *reflect.uncommonType",
      "params" : 53,
      "recv" : 22,
      "results" : 117,
      "type" : "Signature",
      "underlying" : 116,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 118
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 117
    }, {
      "elem" : 119,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 118
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 6,
      "type" : "Named",
      "underlying" : 120
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 109
      }, {
        "name" : "mcount",
        "type" : 121
      }, {
        "name" : "xcount",
        "type" : 121
      }, {
        "name" : "moff",
        "type" : 30
      }, {
        "name" : "_",
        "type" : 30
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 120
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 121
    }, {
      "name" : "func() unsafe.Pointer",
      "params" : 53,
      "recv" : 24,
      "results" : 123,
      "type" : "Signature",
      "underlying" : 122,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 123
    }, {
      "name" : "func(ptr unsafe.Pointer, val unsafe.Pointer)",
      "params" : 125,
      "recv" : 25,
      "results" : 53,
      "type" : "Signature",
      "underlying" : 124,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 2
      }, {
        "name" : "val",
        "type" : 2
      } ],
      "name" : "(ptr unsafe.Pointer, val unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 125
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 127
      } ],
      "name" : "(github.com/json-iterator/go.ValDecoder)",
      "type" : "Tuple",
      "underlying" : 126
    }, {
      "local-name" : "ValDecoder",
      "name" : "github.com/json-iterator/go.ValDecoder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 128
    }, {
      "methods" : [ {
        "name" : "Decode",
        "type" : 129
      } ],
      "name" : "interface{Decode(ptr unsafe.Pointer, iter *github.com/json-iterator/go.Iterator)}",
      "type" : "Interface",
      "underlying" : 128
    }, {
      "name" : "func(ptr unsafe.Pointer, iter *github.com/json-iterator/go.Iterator)",
      "params" : 130,
      "recv" : 27,
      "results" : 53,
      "type" : "Signature",
      "underlying" : 129,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 2
      }, {
        "name" : "iter",
        "type" : 131
      } ],
      "name" : "(ptr unsafe.Pointer, iter *github.com/json-iterator/go.Iterator)",
      "type" : "Tuple",
      "underlying" : 130
    }, {
      "elem" : 132,
      "name" : "*github.com/json-iterator/go.Iterator",
      "type" : "Pointer",
      "underlying" : 131
    }, {
      "local-name" : "Iterator",
      "name" : "github.com/json-iterator/go.Iterator",
      "package" : 0,
      "type" : "Named",
      "underlying" : 133
    }, {
      "fields" : [ {
        "name" : "cfg",
        "type" : 15
      }, {
        "name" : "reader",
        "type" : 134
      }, {
        "name" : "buf",
        "type" : 138
      }, {
        "name" : "head",
        "type" : 20
      }, {
        "name" : "tail",
        "type" : 20
      }, {
        "name" : "captureStartedAt",
        "type" : 20
      }, {
        "name" : "captured",
        "type" : 138
      }, {
        "name" : "Error",
        "type" : 140
      }, {
        "name" : "Attachment",
        "type" : 33
      } ],
      "name" : "struct{cfg *github.com/json-iterator/go.frozenConfig; reader io.Reader; buf []byte; head int; tail int; captureStartedAt int; captured []byte; Error error; Attachment interface{}}",
      "type" : "Struct",
      "underlying" : 133
    }, {
      "local-name" : "Reader",
      "name" : "io.Reader",
      "package" : 7,
      "type" : "Named",
      "underlying" : 135
    }, {
      "methods" : [ {
        "name" : "Read",
        "type" : 136
      } ],
      "name" : "interface{Read(p []byte) (n int, err error)}",
      "type" : "Interface",
      "underlying" : 135
    }, {
      "name" : "func(p []byte) (n int, err error)",
      "params" : 137,
      "recv" : 26,
      "results" : 139,
      "type" : "Signature",
      "underlying" : 136,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 138
      } ],
      "name" : "(p []byte)",
      "type" : "Tuple",
      "underlying" : 137
    }, {
      "elem" : 108,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 138
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 20
      }, {
        "name" : "err",
        "type" : 140
      } ],
      "name" : "(n int, err error)",
      "type" : "Tuple",
      "underlying" : 139
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 141
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 65
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 141
    }, {
      "name" : "func(typ github.com/modern-go/reflect2.Type) github.com/json-iterator/go.ValEncoder",
      "params" : 41,
      "recv" : 29,
      "results" : 143,
      "type" : "Signature",
      "underlying" : 142,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(github.com/json-iterator/go.ValEncoder)",
      "type" : "Tuple",
      "underlying" : 143
    }, {
      "name" : "func(typ github.com/modern-go/reflect2.Type, decoder github.com/json-iterator/go.ValDecoder) github.com/json-iterator/go.ValDecoder",
      "params" : 145,
      "recv" : 30,
      "results" : 126,
      "type" : "Signature",
      "underlying" : 144,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 42
      }, {
        "name" : "decoder",
        "type" : 127
      } ],
      "name" : "(typ github.com/modern-go/reflect2.Type, decoder github.com/json-iterator/go.ValDecoder)",
      "type" : "Tuple",
      "underlying" : 145
    }, {
      "name" : "func(typ github.com/modern-go/reflect2.Type, encoder github.com/json-iterator/go.ValEncoder) github.com/json-iterator/go.ValEncoder",
      "params" : 147,
      "recv" : 31,
      "results" : 143,
      "type" : "Signature",
      "underlying" : 146,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 42
      }, {
        "name" : "encoder",
        "type" : 8
      } ],
      "name" : "(typ github.com/modern-go/reflect2.Type, encoder github.com/json-iterator/go.ValEncoder)",
      "type" : "Tuple",
      "underlying" : 147
    }, {
      "name" : "func(structDescriptor *github.com/json-iterator/go.StructDescriptor)",
      "params" : 149,
      "recv" : 38,
      "results" : 53,
      "type" : "Signature",
      "underlying" : 148,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "structDescriptor",
        "type" : 150
      } ],
      "name" : "(structDescriptor *github.com/json-iterator/go.StructDescriptor)",
      "type" : "Tuple",
      "underlying" : 149
    }, {
      "elem" : 151,
      "name" : "*github.com/json-iterator/go.StructDescriptor",
      "type" : "Pointer",
      "underlying" : 150
    }, {
      "local-name" : "StructDescriptor",
      "name" : "github.com/json-iterator/go.StructDescriptor",
      "package" : 0,
      "type" : "Named",
      "underlying" : 152
    }, {
      "fields" : [ {
        "name" : "Type",
        "type" : 42
      }, {
        "name" : "Fields",
        "type" : 153
      } ],
      "name" : "struct{Type github.com/modern-go/reflect2.Type; Fields []*github.com/json-iterator/go.Binding}",
      "type" : "Struct",
      "underlying" : 152
    }, {
      "elem" : 154,
      "name" : "[]*github.com/json-iterator/go.Binding",
      "type" : "Slice",
      "underlying" : 153
    }, {
      "elem" : 155,
      "name" : "*github.com/json-iterator/go.Binding",
      "type" : "Pointer",
      "underlying" : 154
    }, {
      "local-name" : "Binding",
      "name" : "github.com/json-iterator/go.Binding",
      "package" : 0,
      "type" : "Named",
      "underlying" : 156
    }, {
      "fields" : [ {
        "name" : "levels",
        "type" : 84
      }, {
        "name" : "Field",
        "type" : 157
      }, {
        "name" : "FromNames",
        "type" : 171
      }, {
        "name" : "ToNames",
        "type" : 171
      }, {
        "name" : "Encoder",
        "type" : 8
      }, {
        "name" : "Decoder",
        "type" : 127
      } ],
      "name" : "struct{levels []int; Field github.com/modern-go/reflect2.StructField; FromNames []string; ToNames []string; Encoder github.com/json-iterator/go.ValEncoder; Decoder github.com/json-iterator/go.ValDecoder}",
      "type" : "Struct",
      "underlying" : 156
    }, {
      "local-name" : "StructField",
      "name" : "github.com/modern-go/reflect2.StructField",
      "package" : 5,
      "type" : "Named",
      "underlying" : 158
    }, {
      "methods" : [ {
        "name" : "Anonymous",
        "type" : 52
      }, {
        "name" : "Get",
        "type" : 48
      }, {
        "name" : "Index",
        "type" : 159
      }, {
        "name" : "Name",
        "type" : 65
      }, {
        "name" : "Offset",
        "type" : 60
      }, {
        "name" : "PkgPath",
        "type" : 65
      }, {
        "name" : "Set",
        "type" : 161
      }, {
        "name" : "Tag",
        "type" : 163
      }, {
        "name" : "Type",
        "type" : 165
      }, {
        "name" : "UnsafeGet",
        "type" : 167
      }, {
        "name" : "UnsafeSet",
        "type" : 169
      } ],
      "name" : "interface{Anonymous() bool; Get(obj interface{}) interface{}; Index() []int; Name() string; Offset() uintptr; PkgPath() string; Set(obj interface{}, value interface{}); Tag() reflect.StructTag; Type() github.com/modern-go/reflect2.Type; UnsafeGet(obj unsafe.Pointer) unsafe.Pointer; UnsafeSet(obj unsafe.Pointer, value unsafe.Pointer)}",
      "type" : "Interface",
      "underlying" : 158
    }, {
      "name" : "func() []int",
      "params" : 53,
      "recv" : 32,
      "results" : 160,
      "type" : "Signature",
      "underlying" : 159,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 84
      } ],
      "name" : "([]int)",
      "type" : "Tuple",
      "underlying" : 160
    }, {
      "name" : "func(obj interface{}, value interface{})",
      "params" : 162,
      "recv" : 33,
      "results" : 53,
      "type" : "Signature",
      "underlying" : 161,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "obj",
        "type" : 33
      }, {
        "name" : "value",
        "type" : 33
      } ],
      "name" : "(obj interface{}, value interface{})",
      "type" : "Tuple",
      "underlying" : 162
    }, {
      "name" : "func() reflect.StructTag",
      "params" : 53,
      "recv" : 34,
      "results" : 164,
      "type" : "Signature",
      "underlying" : 163,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 83
      } ],
      "name" : "(reflect.StructTag)",
      "type" : "Tuple",
      "underlying" : 164
    }, {
      "name" : "func() github.com/modern-go/reflect2.Type",
      "params" : 53,
      "recv" : 35,
      "results" : 166,
      "type" : "Signature",
      "underlying" : 165,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 42
      } ],
      "name" : "(github.com/modern-go/reflect2.Type)",
      "type" : "Tuple",
      "underlying" : 166
    }, {
      "name" : "func(obj unsafe.Pointer) unsafe.Pointer",
      "params" : 168,
      "recv" : 36,
      "results" : 123,
      "type" : "Signature",
      "underlying" : 167,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "obj",
        "type" : 2
      } ],
      "name" : "(obj unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 168
    }, {
      "name" : "func(obj unsafe.Pointer, value unsafe.Pointer)",
      "params" : 170,
      "recv" : 37,
      "results" : 53,
      "type" : "Signature",
      "underlying" : 169,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "obj",
        "type" : 2
      }, {
        "name" : "value",
        "type" : 2
      } ],
      "name" : "(obj unsafe.Pointer, value unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 170
    }, {
      "elem" : 21,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 171
    }, {
      "elem" : 38,
      "name" : "[]github.com/json-iterator/go.Extension",
      "type" : "Slice",
      "underlying" : 172
    }, {
      "elem" : 174,
      "name" : "*sync.Pool",
      "type" : "Pointer",
      "underlying" : 173
    }, {
      "local-name" : "Pool",
      "name" : "sync.Pool",
      "package" : 3,
      "type" : "Named",
      "underlying" : 175
    }, {
      "fields" : [ {
        "name" : "noCopy",
        "type" : 176
      }, {
        "name" : "local",
        "type" : 2
      }, {
        "name" : "localSize",
        "type" : 62
      }, {
        "name" : "victim",
        "type" : 2
      }, {
        "name" : "victimSize",
        "type" : 62
      }, {
        "name" : "New",
        "type" : 58
      } ],
      "name" : "struct{noCopy sync.noCopy; local unsafe.Pointer; localSize uintptr; victim unsafe.Pointer; victimSize uintptr; New func() interface{}}",
      "type" : "Struct",
      "underlying" : 175
    }, {
      "local-name" : "noCopy",
      "name" : "sync.noCopy",
      "package" : 3,
      "type" : "Named",
      "underlying" : 177
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 177
    }, {
      "local-name" : "Writer",
      "name" : "io.Writer",
      "package" : 7,
      "type" : "Named",
      "underlying" : 179
    }, {
      "methods" : [ {
        "name" : "Write",
        "type" : 136
      } ],
      "name" : "interface{Write(p []byte) (n int, err error)}",
      "type" : "Interface",
      "underlying" : 179
    }, {
      "elem" : 2,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 180
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 181
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 183
      }, {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(github.com/json-iterator/go.IsEmbeddedPtrNil, bool)",
      "type" : "Tuple",
      "underlying" : 182
    }, {
      "local-name" : "IsEmbeddedPtrNil",
      "name" : "github.com/json-iterator/go.IsEmbeddedPtrNil",
      "package" : 0,
      "type" : "Named",
      "underlying" : 184
    }, {
      "methods" : [ {
        "name" : "IsEmbeddedPtrNil",
        "type" : 0
      } ],
      "name" : "interface{IsEmbeddedPtrNil(ptr unsafe.Pointer) bool}",
      "type" : "Interface",
      "underlying" : 184
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 5,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 7,
      "type" : 134,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 127,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 157,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 157,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 157,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 157,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 157,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 157,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "encoder",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "deReferenced",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ValueEncoder",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "converted",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isEmbeddedPtrNil",
      "package" : 0,
      "type" : 183,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fieldPtr",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}