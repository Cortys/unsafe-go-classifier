{
  "usage" : {
    "file" : "fold_map_inline.generated.go",
    "label1" : "cast-struct",
    "label2" : "serialization",
    "line" : "236",
    "module" : "github.com/elastic/go-structform",
    "pkg" : "github.com/elastic/go-structform/gotype",
    "project" : "elastic/beats",
    "snippet" : "m := *((*map[string]int16)(unsafe.Pointer(&ptr)))",
    "version" : "v0.0.6"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 23, 22 ],
      "exit" : false,
      "out-vars" : [ 23, 22 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 23, 22 ],
      "exit" : false,
      "out-vars" : [ 25, 22 ],
      "decl-vars" : [ 25 ],
      "line-start" : 231,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 39,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 39,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Pointer"
              },
              "go-type" : 80,
              "kind" : "expression",
              "target" : {
                "go-type" : 30,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 23
                }
              },
              "type" : "selector"
            },
            "go-type" : 35,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 231,
      "code" : "ptr := unsafe.Pointer(v.Pointer())",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 25, 22 ],
      "exit" : false,
      "out-vars" : [ 22, 25 ],
      "decl-vars" : [ ],
      "line-start" : 232,
      "ast" : {
        "condition" : {
          "go-type" : 98,
          "kind" : "expression",
          "left" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 25
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 234,
      "code" : "if ptr == nil {\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 233,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 99,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 233,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 25, 22 ],
      "exit" : false,
      "out-vars" : [ 26, 22 ],
      "decl-vars" : [ 26 ],
      "line-start" : 236,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "m"
          }
        } ],
        "right" : [ {
          "go-type" : 102,
          "kind" : "expression",
          "target" : {
            "go-type" : 100,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 102,
                  "key" : {
                    "go-type" : 14,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 14,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "string"
                    }
                  },
                  "kind" : "type",
                  "type" : "map",
                  "value" : {
                    "go-type" : 22,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 22,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "int16"
                    }
                  }
                },
                "go-type" : 100,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 100,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 39,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 39,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 39,
                "kind" : "expression",
                "target" : {
                  "go-type" : 101,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 39,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "ptr",
                      "variable" : 25
                    }
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "paren"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 236,
      "code" : "m := *((*map[string]int16)(unsafe.Pointer(&ptr)))",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 13 ],
      "in-vars" : [ 26, 22 ],
      "exit" : false,
      "out-vars" : [ 28, 27, 26, 22 ],
      "decl-vars" : [ 28, 27 ],
      "line-start" : 237,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "k"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 102,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "m",
            "variable" : 26
          }
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "v"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 244,
      "code" : "for k, v := range m {\n\tif err = C.OnKey(k); err != nil {\n\t\treturn err\n\t}\n\tif err = C.OnInt16(v); err != nil {\n\t\treturn err\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 11 ],
      "in-vars" : [ 24, 28, 26, 22 ],
      "exit" : false,
      "out-vars" : [ 24, 28, 26, 22 ],
      "decl-vars" : [ ],
      "line-start" : 238,
      "ast" : {
        "condition" : {
          "go-type" : 98,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 24
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 99,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 240,
      "code" : "if err = C.OnKey(k); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 7 ],
      "in-vars" : [ 27, 26, 22, 28 ],
      "exit" : false,
      "out-vars" : [ 26, 22, 24, 28 ],
      "decl-vars" : [ ],
      "line-start" : 238,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 24
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 27
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "OnKey"
            },
            "go-type" : 32,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "C",
                "variable" : 22
              }
            },
            "type" : "selector"
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 24 ],
      "line-end" : 238,
      "code" : "err = C.OnKey(k)",
      "entry" : false,
      "use-vars" : [ 22, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 24 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 239,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 24
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 239,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 12 ],
      "in-vars" : [ 24, 26, 22 ],
      "exit" : false,
      "out-vars" : [ 24, 26, 22 ],
      "decl-vars" : [ ],
      "line-start" : 241,
      "ast" : {
        "condition" : {
          "go-type" : 98,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 24
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 99,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 243,
      "code" : "if err = C.OnInt16(v); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 10 ],
      "in-vars" : [ 28, 26, 22 ],
      "exit" : false,
      "out-vars" : [ 22, 24, 26 ],
      "decl-vars" : [ ],
      "line-start" : 241,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 24
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 28
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "OnInt16"
            },
            "go-type" : 20,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "C",
                "variable" : 22
              }
            },
            "type" : "selector"
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 24 ],
      "line-end" : 241,
      "code" : "err = C.OnInt16(v)",
      "entry" : false,
      "use-vars" : [ 28, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 24 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 242,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 24
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 242,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 245,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 245,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func foldMapInlineInt16(C *foldContext, v reflect.Value) (err error) {\n\tptr := unsafe.Pointer(v.Pointer())\n\tif ptr == nil {\n\t\treturn nil\n\t}\n\n\tm := *((*map[string]int16)(unsafe.Pointer(&ptr)))\n\tfor k, v := range m {\n\t\tif err = C.OnKey(k); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err = C.OnInt16(v); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "foldMapInlineInt16",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Pointer",
      "package" : 2,
      "type" : 80,
      "exported" : true
    }, {
      "name" : "OnKey",
      "package" : 1,
      "type" : 32,
      "exported" : true
    }, {
      "name" : "OnInt16",
      "package" : 1,
      "type" : 20,
      "exported" : true
    } ],
    "line-end" : 246,
    "line-start" : 230,
    "names" : [ "foldMapInlineInt16" ],
    "package" : 0,
    "packages" : [ {
      "name" : "gotype",
      "path" : "github.com/elastic/go-structform/gotype"
    }, {
      "name" : "structform",
      "path" : "github.com/elastic/go-structform"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 22, 23 ],
    "receivers" : [ ],
    "results" : [ 24 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(C *github.com/elastic/go-structform/gotype.foldContext, v reflect.Value) (err error)",
      "params" : 1,
      "recv" : -1,
      "results" : 97,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "C",
        "type" : 2
      }, {
        "name" : "v",
        "type" : 30
      } ],
      "name" : "(C *github.com/elastic/go-structform/gotype.foldContext, v reflect.Value)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*github.com/elastic/go-structform/gotype.foldContext",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "foldContext",
      "name" : "github.com/elastic/go-structform/gotype.foldContext",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "visitor",
        "type" : 5
      }, {
        "name" : "userReg",
        "type" : 26
      }, {
        "name" : "reg",
        "type" : 89
      }, {
        "name" : "opts",
        "type" : 95
      } ],
      "name" : "struct{github.com/elastic/go-structform/gotype.visitor; userReg map[reflect.Type]github.com/elastic/go-structform/gotype.reFoldFn; reg *github.com/elastic/go-structform/gotype.typeFoldRegistry; opts github.com/elastic/go-structform/gotype.options}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "visitor",
      "name" : "github.com/elastic/go-structform/gotype.visitor",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "methods" : [ {
        "name" : "OnArrayFinished",
        "type" : 7
      }, {
        "name" : "OnArrayStart",
        "type" : 2
      }, {
        "name" : "OnBool",
        "type" : 15
      }, {
        "name" : "OnBoolArray",
        "type" : 18
      }, {
        "name" : "OnBoolObject",
        "type" : 21
      }, {
        "name" : "OnByte",
        "type" : 9
      }, {
        "name" : "OnBytes",
        "type" : 50
      }, {
        "name" : "OnFloat32",
        "type" : 12
      }, {
        "name" : "OnFloat32Array",
        "type" : 53
      }, {
        "name" : "OnFloat32Object",
        "type" : 94
      }, {
        "name" : "OnFloat64",
        "type" : 15
      }, {
        "name" : "OnFloat64Array",
        "type" : 56
      }, {
        "name" : "OnFloat64Object",
        "type" : 97
      }, {
        "name" : "OnInt",
        "type" : 18
      }, {
        "name" : "OnInt16",
        "type" : 20
      }, {
        "name" : "OnInt16Array",
        "type" : 59
      }, {
        "name" : "OnInt16Object",
        "type" : 100
      }, {
        "name" : "OnInt32",
        "type" : 23
      }, {
        "name" : "OnInt32Array",
        "type" : 62
      }, {
        "name" : "OnInt32Object",
        "type" : 103
      }, {
        "name" : "OnInt64",
        "type" : 26
      }, {
        "name" : "OnInt64Array",
        "type" : 65
      }, {
        "name" : "OnInt64Object",
        "type" : 106
      }, {
        "name" : "OnInt8",
        "type" : 29
      }, {
        "name" : "OnInt8Array",
        "type" : 68
      }, {
        "name" : "OnInt8Object",
        "type" : 109
      }, {
        "name" : "OnIntArray",
        "type" : 71
      }, {
        "name" : "OnIntObject",
        "type" : 112
      }, {
        "name" : "OnKey",
        "type" : 32
      }, {
        "name" : "OnKeyRef",
        "type" : 24
      }, {
        "name" : "OnNil",
        "type" : 7
      }, {
        "name" : "OnObjectFinished",
        "type" : 7
      }, {
        "name" : "OnObjectStart",
        "type" : 2
      }, {
        "name" : "OnString",
        "type" : 32
      }, {
        "name" : "OnStringArray",
        "type" : 74
      }, {
        "name" : "OnStringObject",
        "type" : 115
      }, {
        "name" : "OnStringRef",
        "type" : 24
      }, {
        "name" : "OnUint",
        "type" : 34
      }, {
        "name" : "OnUint16",
        "type" : 37
      }, {
        "name" : "OnUint16Array",
        "type" : 77
      }, {
        "name" : "OnUint16Object",
        "type" : 118
      }, {
        "name" : "OnUint32",
        "type" : 40
      }, {
        "name" : "OnUint32Array",
        "type" : 80
      }, {
        "name" : "OnUint32Object",
        "type" : 121
      }, {
        "name" : "OnUint64",
        "type" : 43
      }, {
        "name" : "OnUint64Array",
        "type" : 83
      }, {
        "name" : "OnUint64Object",
        "type" : 124
      }, {
        "name" : "OnUint8",
        "type" : 46
      }, {
        "name" : "OnUint8Array",
        "type" : 86
      }, {
        "name" : "OnUint8Object",
        "type" : 127
      }, {
        "name" : "OnUintArray",
        "type" : 89
      }, {
        "name" : "OnUintObject",
        "type" : 130
      } ],
      "name" : "interface{github.com/elastic/go-structform.ExtVisitor}",
      "type" : "Interface",
      "underlying" : 6
    }, {
      "name" : "func() error",
      "params" : 8,
      "recv" : 1,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 7,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 11
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 12
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 11
    }, {
      "name" : "func() string",
      "params" : 8,
      "recv" : 0,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "name" : "func(b bool) error",
      "params" : 16,
      "recv" : 2,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 15,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 17
      } ],
      "name" : "(b bool)",
      "type" : "Tuple",
      "underlying" : 16
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "name" : "func([]bool) error",
      "params" : 19,
      "recv" : 3,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 20
      } ],
      "name" : "([]bool)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "elem" : 17,
      "name" : "[]bool",
      "type" : "Slice",
      "underlying" : 20
    }, {
      "name" : "func(map[string]bool) error",
      "params" : 22,
      "recv" : 4,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(map[string]bool)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "elem" : 17,
      "key" : 14,
      "name" : "map[string]bool",
      "type" : "Map",
      "underlying" : 23
    }, {
      "name" : "func(s []byte) error",
      "params" : 25,
      "recv" : 5,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 52
      } ],
      "name" : "(s []byte)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "elem" : 27,
      "key" : 45,
      "name" : "map[reflect.Type]github.com/elastic/go-structform/gotype.reFoldFn",
      "type" : "Map",
      "underlying" : 26
    }, {
      "local-name" : "reFoldFn",
      "name" : "github.com/elastic/go-structform/gotype.reFoldFn",
      "package" : 0,
      "type" : "Named",
      "underlying" : 28
    }, {
      "name" : "func(c *github.com/elastic/go-structform/gotype.foldContext, v reflect.Value) error",
      "params" : 29,
      "recv" : -1,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 28,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "c",
        "type" : 2
      }, {
        "name" : "v",
        "type" : 30
      } ],
      "name" : "(c *github.com/elastic/go-structform/gotype.foldContext, v reflect.Value)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 2,
      "type" : "Named",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 32
      }, {
        "name" : "ptr",
        "type" : 39
      }, {
        "name" : "flag",
        "type" : 44
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 31
    }, {
      "elem" : 33,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 32
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 2,
      "type" : "Named",
      "underlying" : 34
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 35
      }, {
        "name" : "ptrdata",
        "type" : 35
      }, {
        "name" : "hash",
        "type" : 42
      }, {
        "name" : "tflag",
        "type" : 36
      }, {
        "name" : "align",
        "type" : 6
      }, {
        "name" : "fieldAlign",
        "type" : 6
      }, {
        "name" : "kind",
        "type" : 6
      }, {
        "name" : "equal",
        "type" : 37
      }, {
        "name" : "gcdata",
        "type" : 41
      }, {
        "name" : "str",
        "type" : 42
      }, {
        "name" : "ptrToThis",
        "type" : 43
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 34
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 35
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 2,
      "type" : "Named",
      "underlying" : 6
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 38,
      "recv" : -1,
      "results" : 40,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 3,
      "type" : "Basic",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 40
    }, {
      "elem" : 11,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 41
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 2,
      "type" : "Named",
      "underlying" : 25
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 2,
      "type" : "Named",
      "underlying" : 25
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 2,
      "type" : "Named",
      "underlying" : 35
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 2,
      "type" : "Named",
      "underlying" : 46
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 47
      }, {
        "name" : "AssignableTo",
        "type" : 49
      }, {
        "name" : "Bits",
        "type" : 47
      }, {
        "name" : "ChanDir",
        "type" : 51
      }, {
        "name" : "Comparable",
        "type" : 54
      }, {
        "name" : "ConvertibleTo",
        "type" : 49
      }, {
        "name" : "Elem",
        "type" : 55
      }, {
        "name" : "Field",
        "type" : 57
      }, {
        "name" : "FieldAlign",
        "type" : 47
      }, {
        "name" : "FieldByIndex",
        "type" : 62
      }, {
        "name" : "FieldByName",
        "type" : 64
      }, {
        "name" : "FieldByNameFunc",
        "type" : 67
      }, {
        "name" : "Implements",
        "type" : 49
      }, {
        "name" : "In",
        "type" : 70
      }, {
        "name" : "IsVariadic",
        "type" : 54
      }, {
        "name" : "Key",
        "type" : 55
      }, {
        "name" : "Kind",
        "type" : 71
      }, {
        "name" : "Len",
        "type" : 47
      }, {
        "name" : "Method",
        "type" : 74
      }, {
        "name" : "MethodByName",
        "type" : 78
      }, {
        "name" : "Name",
        "type" : 12
      }, {
        "name" : "NumField",
        "type" : 47
      }, {
        "name" : "NumIn",
        "type" : 47
      }, {
        "name" : "NumMethod",
        "type" : 47
      }, {
        "name" : "NumOut",
        "type" : 47
      }, {
        "name" : "Out",
        "type" : 70
      }, {
        "name" : "PkgPath",
        "type" : 12
      }, {
        "name" : "Size",
        "type" : 80
      }, {
        "name" : "String",
        "type" : 12
      }, {
        "name" : "common",
        "type" : 82
      }, {
        "name" : "uncommon",
        "type" : 84
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 46
    }, {
      "name" : "func() int",
      "params" : 8,
      "recv" : 6,
      "results" : 48,
      "type" : "Signature",
      "underlying" : 47,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 48
    }, {
      "name" : "func(u reflect.Type) bool",
      "params" : 50,
      "recv" : 7,
      "results" : 40,
      "type" : "Signature",
      "underlying" : 49,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 45
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "name" : "func() reflect.ChanDir",
      "params" : 8,
      "recv" : 8,
      "results" : 52,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 53
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 52
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 2,
      "type" : "Named",
      "underlying" : 4
    }, {
      "name" : "func() bool",
      "params" : 8,
      "recv" : 9,
      "results" : 40,
      "type" : "Signature",
      "underlying" : 54,
      "variadic" : false
    }, {
      "name" : "func() reflect.Type",
      "params" : 8,
      "recv" : 10,
      "results" : 56,
      "type" : "Signature",
      "underlying" : 55,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 45
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 56
    }, {
      "name" : "func(i int) reflect.StructField",
      "params" : 19,
      "recv" : 11,
      "results" : 58,
      "type" : "Signature",
      "underlying" : 57,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 59
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 58
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 2,
      "type" : "Named",
      "underlying" : 60
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 14
      }, {
        "name" : "PkgPath",
        "type" : 14
      }, {
        "name" : "Type",
        "type" : 45
      }, {
        "name" : "Tag",
        "type" : 61
      }, {
        "name" : "Offset",
        "type" : 35
      }, {
        "name" : "Index",
        "type" : 73
      }, {
        "name" : "Anonymous",
        "type" : 17
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 60
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 2,
      "type" : "Named",
      "underlying" : 14
    }, {
      "name" : "func(index []int) reflect.StructField",
      "params" : 63,
      "recv" : 12,
      "results" : 58,
      "type" : "Signature",
      "underlying" : 62,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 73
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 63
    }, {
      "name" : "func(name string) (reflect.StructField, bool)",
      "params" : 65,
      "recv" : 13,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 64,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 14
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 65
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 59
      }, {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 66
    }, {
      "name" : "func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 68,
      "recv" : 14,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 67,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 69
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 68
    }, {
      "name" : "func(string) bool",
      "params" : 13,
      "recv" : -1,
      "results" : 40,
      "type" : "Signature",
      "underlying" : 69,
      "variadic" : false
    }, {
      "name" : "func(i int) reflect.Type",
      "params" : 19,
      "recv" : 15,
      "results" : 56,
      "type" : "Signature",
      "underlying" : 70,
      "variadic" : false
    }, {
      "name" : "func() reflect.Kind",
      "params" : 8,
      "recv" : 16,
      "results" : 72,
      "type" : "Signature",
      "underlying" : 71,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 73
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 72
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 2,
      "type" : "Named",
      "underlying" : 36
    }, {
      "name" : "func(int) reflect.Method",
      "params" : 48,
      "recv" : 17,
      "results" : 75,
      "type" : "Signature",
      "underlying" : 74,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 76
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 75
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 2,
      "type" : "Named",
      "underlying" : 77
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 14
      }, {
        "name" : "PkgPath",
        "type" : 14
      }, {
        "name" : "Type",
        "type" : 45
      }, {
        "name" : "Func",
        "type" : 30
      }, {
        "name" : "Index",
        "type" : 4
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 77
    }, {
      "name" : "func(string) (reflect.Method, bool)",
      "params" : 13,
      "recv" : 18,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 78,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 76
      }, {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 79
    }, {
      "name" : "func() uintptr",
      "params" : 8,
      "recv" : 19,
      "results" : 81,
      "type" : "Signature",
      "underlying" : 80,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 35
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 81
    }, {
      "name" : "func() *reflect.rtype",
      "params" : 8,
      "recv" : 20,
      "results" : 83,
      "type" : "Signature",
      "underlying" : 82,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 32
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 83
    }, {
      "name" : "func() *reflect.uncommonType",
      "params" : 8,
      "recv" : 21,
      "results" : 85,
      "type" : "Signature",
      "underlying" : 84,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 86
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 85
    }, {
      "elem" : 87,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 86
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 2,
      "type" : "Named",
      "underlying" : 88
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 42
      }, {
        "name" : "mcount",
        "type" : 39
      }, {
        "name" : "xcount",
        "type" : 39
      }, {
        "name" : "moff",
        "type" : 42
      }, {
        "name" : "_",
        "type" : 42
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 88
    }, {
      "elem" : 90,
      "name" : "*github.com/elastic/go-structform/gotype.typeFoldRegistry",
      "type" : "Pointer",
      "underlying" : 89
    }, {
      "local-name" : "typeFoldRegistry",
      "name" : "github.com/elastic/go-structform/gotype.typeFoldRegistry",
      "package" : 0,
      "type" : "Named",
      "underlying" : 91
    }, {
      "fields" : [ {
        "name" : "m",
        "type" : 92
      } ],
      "name" : "struct{m map[github.com/elastic/go-structform/gotype.typeFoldKey]github.com/elastic/go-structform/gotype.reFoldFn}",
      "type" : "Struct",
      "underlying" : 91
    }, {
      "elem" : 27,
      "key" : 93,
      "name" : "map[github.com/elastic/go-structform/gotype.typeFoldKey]github.com/elastic/go-structform/gotype.reFoldFn",
      "type" : "Map",
      "underlying" : 92
    }, {
      "local-name" : "typeFoldKey",
      "name" : "github.com/elastic/go-structform/gotype.typeFoldKey",
      "package" : 0,
      "type" : "Named",
      "underlying" : 94
    }, {
      "fields" : [ {
        "name" : "ty",
        "type" : 45
      }, {
        "name" : "inline",
        "type" : 17
      } ],
      "name" : "struct{ty reflect.Type; inline bool}",
      "type" : "Struct",
      "underlying" : 94
    }, {
      "local-name" : "options",
      "name" : "github.com/elastic/go-structform/gotype.options",
      "package" : 0,
      "type" : "Named",
      "underlying" : 96
    }, {
      "fields" : [ {
        "name" : "tag",
        "type" : 14
      } ],
      "name" : "struct{tag string}",
      "type" : "Struct",
      "underlying" : 96
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 10
      } ],
      "name" : "(err error)",
      "type" : "Tuple",
      "underlying" : 97
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 98
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 99
    }, {
      "elem" : 102,
      "name" : "*map[string]int16",
      "type" : "Pointer",
      "underlying" : 100
    }, {
      "elem" : 39,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 101
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 48,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 92,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 133,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "C",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 30,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 39,
      "exported" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 102,
      "exported" : false
    }, {
      "name" : "k",
      "package" : 0,
      "type" : 14,
      "exported" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 22,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}