{
  "usage" : {
    "file" : "control_pktinfo.go",
    "label1" : "cast-struct",
    "label2" : "serialization",
    "line" : "21",
    "module" : "golang.org/x/net",
    "pkg" : "golang.org/x/net/ipv4",
    "project" : "rook/rook",
    "snippet" : "pi := (*inetPktinfo)(unsafe.Pointer(&m.Data(sizeofInetPktinfo)[0]))",
    "version" : "v0.0.0-20200226121028-0de0cce0169b"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 1 ],
      "decl-vars" : [ 3 ],
      "line-start" : 18,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "m"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 10,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "socket"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 10,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "ControlMessage"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 0
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 18,
      "code" : "m := socket.ControlMessage(b)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 3, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 19,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "12"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MarshalHeader"
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "go-type" : 11,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 19,
      "code" : "m.MarshalHeader(iana.ProtocolIP, sysIP_PKTINFO, sizeofInetPktinfo)",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 11 ],
      "in-vars" : [ 3, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 20,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cm",
              "variable" : 1
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 28,
      "code" : "if cm != nil {\n\tpi := (*inetPktinfo)(unsafe.Pointer(&m.Data(sizeofInetPktinfo)[0]))\n\tif ip := cm.Src.To4(); ip != nil {\n\t\tcopy(pi.Spec_dst[:], ip)\n\t}\n\tif cm.IfIndex > 0 {\n\t\tpi.setIfindex(cm.IfIndex)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 3, 1 ],
      "exit" : false,
      "out-vars" : [ 7, 3, 1 ],
      "decl-vars" : [ 7 ],
      "line-start" : 21,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pi"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "inetPktinfo"
              }
            },
            "go-type" : 22,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 22,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 27,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 27,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 27,
            "kind" : "expression",
            "target" : {
              "go-type" : 28,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 3,
                "index" : {
                  "go-type" : 7,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "arguments" : [ {
                    "go-type" : 7,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "12"
                    }
                  } ],
                  "ellipsis" : false,
                  "function" : {
                    "field" : {
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "Data"
                    },
                    "go-type" : 29,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 10,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "m",
                        "variable" : 3
                      }
                    },
                    "type" : "selector"
                  },
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "call"
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 21,
      "code" : "pi := (*inetPktinfo)(unsafe.Pointer(&m.Data(sizeofInetPktinfo)[0]))",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 3, 1, 7, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 3, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 22,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ip",
              "variable" : 6
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 24,
      "code" : "if ip := cm.Src.To4(); ip != nil {\n\tcopy(pi.Spec_dst[:], ip)\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 3, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 7, 6 ],
      "decl-vars" : [ 6 ],
      "line-start" : 22,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ip"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "To4"
            },
            "go-type" : 31,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Src",
                "variable" : 5
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "cm",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 22,
      "code" : "ip := cm.Src.To4()",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 6, 3, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 1, 7, 3 ],
      "decl-vars" : [ ],
      "line-start" : 23,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Spec_dst",
                "variable" : 8
              },
              "go-type" : 26,
              "kind" : "expression",
              "target" : {
                "go-type" : 22,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pi",
                  "variable" : 7
                }
              },
              "type" : "selector"
            }
          }, {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ip",
              "variable" : 6
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 23,
      "code" : "copy(pi.Spec_dst[:], ip)",
      "entry" : false,
      "use-vars" : [ 7, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 11 ],
      "in-vars" : [ 3, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 25,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "IfIndex",
              "variable" : 9
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cm",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 27,
      "code" : "if cm.IfIndex > 0 {\n\tpi.setIfindex(cm.IfIndex)\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 3, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 26,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "IfIndex",
              "variable" : 9
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cm",
                "variable" : 1
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "setIfindex"
            },
            "go-type" : 36,
            "kind" : "expression",
            "target" : {
              "go-type" : 22,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pi",
                "variable" : 7
              }
            },
            "type" : "selector"
          },
          "go-type" : 14,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 26,
      "code" : "pi.setIfindex(cm.IfIndex)",
      "entry" : false,
      "use-vars" : [ 7, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 29,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "12"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Next"
            },
            "go-type" : 38,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 29,
      "code" : "return m.Next(sizeofInetPktinfo)",
      "entry" : false,
      "use-vars" : [ 3 ]
    } ],
    "code" : "func marshalPacketInfo(b []byte, cm *ControlMessage) []byte {\n\tm := socket.ControlMessage(b)\n\tm.MarshalHeader(iana.ProtocolIP, sysIP_PKTINFO, sizeofInetPktinfo)\n\tif cm != nil {\n\t\tpi := (*inetPktinfo)(unsafe.Pointer(&m.Data(sizeofInetPktinfo)[0]))\n\t\tif ip := cm.Src.To4(); ip != nil {\n\t\t\tcopy(pi.Spec_dst[:], ip)\n\t\t}\n\t\tif cm.IfIndex > 0 {\n\t\t\tpi.setIfindex(cm.IfIndex)\n\t\t}\n\t}\n\treturn m.Next(sizeofInetPktinfo)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "marshalPacketInfo",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "MarshalHeader",
      "package" : 2,
      "type" : 17,
      "exported" : true
    }, {
      "name" : "Data",
      "package" : 2,
      "type" : 29,
      "exported" : true
    }, {
      "name" : "To4",
      "package" : 1,
      "type" : 31,
      "exported" : true
    }, {
      "name" : "setIfindex",
      "package" : 0,
      "type" : 36,
      "exported" : false
    }, {
      "name" : "Next",
      "package" : 2,
      "type" : 38,
      "exported" : true
    } ],
    "line-end" : 30,
    "line-start" : 17,
    "names" : [ "marshalPacketInfo" ],
    "package" : 0,
    "packages" : [ {
      "name" : "ipv4",
      "path" : "golang.org/x/net/ipv4"
    }, {
      "name" : "net",
      "path" : "net"
    }, {
      "name" : "socket",
      "path" : "golang.org/x/net/internal/socket"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1 ],
    "receivers" : [ ],
    "results" : [ 2 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(b []byte, cm *golang.org/x/net/ipv4.ControlMessage) []byte",
      "params" : 1,
      "recv" : -1,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 2
      }, {
        "name" : "cm",
        "type" : 4
      } ],
      "name" : "(b []byte, cm *golang.org/x/net/ipv4.ControlMessage)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 2
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "*golang.org/x/net/ipv4.ControlMessage",
      "type" : "Pointer",
      "underlying" : 4
    }, {
      "local-name" : "ControlMessage",
      "name" : "golang.org/x/net/ipv4.ControlMessage",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "TTL",
        "type" : 7
      }, {
        "name" : "Src",
        "type" : 8
      }, {
        "name" : "Dst",
        "type" : 8
      }, {
        "name" : "IfIndex",
        "type" : 7
      } ],
      "name" : "struct{TTL int; Src net.IP; Dst net.IP; IfIndex int}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "local-name" : "IP",
      "name" : "net.IP",
      "package" : 1,
      "type" : "Named",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "local-name" : "ControlMessage",
      "name" : "golang.org/x/net/internal/socket.ControlMessage",
      "package" : 2,
      "type" : "Named",
      "underlying" : 2
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 12
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 13
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 12
    }, {
      "name" : "func() string",
      "params" : 14,
      "recv" : 4,
      "results" : 15,
      "type" : "Signature",
      "underlying" : 13,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "name" : "func(lvl int, typ int, dataLen int) error",
      "params" : 18,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 17,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "lvl",
        "type" : 7
      }, {
        "name" : "typ",
        "type" : 7
      }, {
        "name" : "dataLen",
        "type" : 7
      } ],
      "name" : "(lvl int, typ int, dataLen int)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "elem" : 23,
      "name" : "*golang.org/x/net/ipv4.inetPktinfo",
      "type" : "Pointer",
      "underlying" : 22
    }, {
      "local-name" : "inetPktinfo",
      "name" : "golang.org/x/net/ipv4.inetPktinfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 24
    }, {
      "fields" : [ {
        "name" : "Ifindex",
        "type" : 25
      }, {
        "name" : "Spec_dst",
        "type" : 26
      }, {
        "name" : "Addr",
        "type" : 26
      } ],
      "name" : "struct{Ifindex int32; Spec_dst [4]byte; Addr [4]byte}",
      "type" : "Struct",
      "underlying" : 24
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "elem" : 3,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 26
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 3,
      "type" : "Basic",
      "underlying" : 27
    }, {
      "elem" : 3,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 28
    }, {
      "name" : "func(dataLen int) []byte",
      "params" : 30,
      "recv" : -1,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dataLen",
        "type" : 7
      } ],
      "name" : "(dataLen int)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "name" : "func() net.IP",
      "params" : 14,
      "recv" : -1,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 31,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(net.IP)",
      "type" : "Tuple",
      "underlying" : 32
    }, {
      "name" : "func([]byte, net.IP) int",
      "params" : 34,
      "recv" : -1,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 8
      } ],
      "name" : "([]byte, net.IP)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "name" : "func(i int)",
      "params" : 37,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 36,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 7
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 37
    }, {
      "name" : "func(dataLen int) golang.org/x/net/internal/socket.ControlMessage",
      "params" : 30,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 38,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(golang.org/x/net/internal/socket.ControlMessage)",
      "type" : "Tuple",
      "underlying" : 39
    } ],
    "variables" : [ {
      "name" : "b",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "cm",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : -1,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Src",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ip",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pi",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Spec_dst",
      "package" : 0,
      "type" : 26,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "IfIndex",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}