{
  "usage" : {
    "file" : "same.go",
    "label1" : "cast-basic",
    "label2" : "layout",
    "line" : "26",
    "module" : "gonum.org/v1/gonum",
    "pkg" : "gonum.org/v1/gonum/graph/internal/set",
    "project" : "gorgonia/gorgonia",
    "snippet" : "return *(*uintptr)(unsafe.Pointer(&a)) == *(*uintptr)(unsafe.Pointer(&b))",
    "version" : "v0.7.0"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 26,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 8,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 8,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 9,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 9,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 10,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 10,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 11,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "a",
                      "variable" : 0
                    }
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 8,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 8,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 9,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 9,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 10,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 10,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 11,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "b",
                      "variable" : 1
                    }
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 26,
      "code" : "return *(*uintptr)(unsafe.Pointer(&a)) == *(*uintptr)(unsafe.Pointer(&b))",
      "entry" : false,
      "use-vars" : [ 1, 0 ]
    } ],
    "code" : "// intsSame determines whether two sets are backed by the same store. In the\n// current implementation using hash maps it makes use of the fact that\n// hash maps are passed as a pointer to a runtime Hmap struct. A map is\n// not seen by the runtime as a pointer though, so we use unsafe to get\n// the maps' pointer values to compare.\nfunc intsSame(a, b Ints) bool {\n\treturn *(*uintptr)(unsafe.Pointer(&a)) == *(*uintptr)(unsafe.Pointer(&b))\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "intsSame",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ],
    "line-end" : 27,
    "line-start" : 25,
    "names" : [ "intsSame" ],
    "package" : 0,
    "packages" : [ {
      "name" : "set",
      "path" : "gonum.org/v1/gonum/graph/internal/set"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1 ],
    "receivers" : [ ],
    "results" : [ 2 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(a gonum.org/v1/gonum/graph/internal/set.Ints, b gonum.org/v1/gonum/graph/internal/set.Ints) bool",
      "params" : 1,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 2
      }, {
        "name" : "b",
        "type" : 2
      } ],
      "name" : "(a gonum.org/v1/gonum/graph/internal/set.Ints, b gonum.org/v1/gonum/graph/internal/set.Ints)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Ints",
      "name" : "gonum.org/v1/gonum/graph/internal/set.Ints",
      "package" : 0,
      "type" : "Named",
      "underlying" : 3
    }, {
      "elem" : 4,
      "key" : 5,
      "name" : "map[int]struct{}",
      "type" : "Map",
      "underlying" : 3
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "elem" : 8,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 9
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 10
    }, {
      "elem" : 2,
      "name" : "*gonum.org/v1/gonum/graph/internal/set.Ints",
      "type" : "Pointer",
      "underlying" : 11
    } ],
    "variables" : [ {
      "name" : "a",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 7,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}