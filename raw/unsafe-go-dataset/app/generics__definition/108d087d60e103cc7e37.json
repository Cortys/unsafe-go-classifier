{
  "usage" : {
    "file" : "eng_map.go",
    "label1" : "definition",
    "label2" : "generics",
    "line" : "615",
    "module" : "gorgonia.org/tensor",
    "pkg" : "gorgonia.org/tensor/internal/execution",
    "project" : "gorgonia/gorgonia",
    "snippet" : "case func(unsafe.Pointer) unsafe.Pointer:",
    "version" : "v0.9.6"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 23, 24, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 19, 20, 37, 38, 18, 39, 40 ],
      "exit" : false,
      "out-vars" : [ 36, 21, 20, 30, 38, 27, 33, 35, 23, 29, 18, 37, 28, 25, 19, 26, 34, 39, 40, 24, 31, 32 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 31, 23, 40, 26, 38, 18, 37, 30, 20, 32, 27, 33, 34, 21, 25, 19, 35, 36, 39, 28, 24, 29 ],
      "exit" : false,
      "out-vars" : [ 20, 39, 21, 37, 31, 32, 33, 40, 41, 19, 26, 38, 27, 23, 24, 25, 18, 30, 34, 35, 36, 28, 29 ],
      "decl-vars" : [ 41 ],
      "line-start" : 14,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "as"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 76,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "a",
              "variable" : 20
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 84,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "isScalar"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 14,
      "code" : "as := isScalar(a)",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 27, 60, 93, 126, 159, 192, 225, 258, 291, 324, 357, 380, 413, 446, 479, 512, 545, 568 ],
      "in-vars" : [ 24, 20, 18, 32, 33, 36, 39, 40, 29, 41, 37, 27, 25, 31, 38, 35, 21, 19, 30, 26, 34, 23, 28 ],
      "exit" : false,
      "out-vars" : [ 20, 32, 35, 39, 21, 18, 37, 38, 33, 40, 29, 25, 30, 26, 31, 23, 28, 24, 41, 19, 27, 34, 36 ],
      "decl-vars" : [ ],
      "line-start" : 15,
      "ast" : {
        "condition" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "t",
            "variable" : 18
          }
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 640,
      "code" : "switch t {\ncase Bool:\n\tvar f0 func(bool) bool\n\tvar f1 func(bool) (bool, error)\n\n\tswitch f := fn.(type) {\n\tcase func(bool) bool:\n\t\tf0 = f\n\tcase func(bool) (bool, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Bools()\n\tif incr {\n\t\treturn errors.Errorf(\"Cannot perform increment on t of %v\", t)\n\t}\n\tswitch {\n\tcase as && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && f0 == nil:\n\t\terr = MapErrB(f1, at)\n\tdefault:\n\t\tMapB(f0, at)\n\t}\ncase Int:\n\tvar f0 func(int) int\n\tvar f1 func(int) (int, error)\n\n\tswitch f := fn.(type) {\n\tcase func(int) int:\n\t\tf0 = f\n\tcase func(int) (int, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Ints()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp int\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrI(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrI(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrI(f1, at)\n\tdefault:\n\t\tMapI(f0, at)\n\t}\ncase Int8:\n\tvar f0 func(int8) int8\n\tvar f1 func(int8) (int8, error)\n\n\tswitch f := fn.(type) {\n\tcase func(int8) int8:\n\t\tf0 = f\n\tcase func(int8) (int8, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Int8s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp int8\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrI8(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrI8(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrI8(f1, at)\n\tdefault:\n\t\tMapI8(f0, at)\n\t}\ncase Int16:\n\tvar f0 func(int16) int16\n\tvar f1 func(int16) (int16, error)\n\n\tswitch f := fn.(type) {\n\tcase func(int16) int16:\n\t\tf0 = f\n\tcase func(int16) (int16, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Int16s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp int16\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrI16(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrI16(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrI16(f1, at)\n\tdefault:\n\t\tMapI16(f0, at)\n\t}\ncase Int32:\n\tvar f0 func(int32) int32\n\tvar f1 func(int32) (int32, error)\n\n\tswitch f := fn.(type) {\n\tcase func(int32) int32:\n\t\tf0 = f\n\tcase func(int32) (int32, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Int32s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp int32\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrI32(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrI32(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrI32(f1, at)\n\tdefault:\n\t\tMapI32(f0, at)\n\t}\ncase Int64:\n\tvar f0 func(int64) int64\n\tvar f1 func(int64) (int64, error)\n\n\tswitch f := fn.(type) {\n\tcase func(int64) int64:\n\t\tf0 = f\n\tcase func(int64) (int64, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Int64s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp int64\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrI64(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrI64(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrI64(f1, at)\n\tdefault:\n\t\tMapI64(f0, at)\n\t}\ncase Uint:\n\tvar f0 func(uint) uint\n\tvar f1 func(uint) (uint, error)\n\n\tswitch f := fn.(type) {\n\tcase func(uint) uint:\n\t\tf0 = f\n\tcase func(uint) (uint, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Uints()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp uint\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrU(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrU(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrU(f1, at)\n\tdefault:\n\t\tMapU(f0, at)\n\t}\ncase Uint8:\n\tvar f0 func(uint8) uint8\n\tvar f1 func(uint8) (uint8, error)\n\n\tswitch f := fn.(type) {\n\tcase func(uint8) uint8:\n\t\tf0 = f\n\tcase func(uint8) (uint8, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Uint8s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp uint8\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrU8(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrU8(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrU8(f1, at)\n\tdefault:\n\t\tMapU8(f0, at)\n\t}\ncase Uint16:\n\tvar f0 func(uint16) uint16\n\tvar f1 func(uint16) (uint16, error)\n\n\tswitch f := fn.(type) {\n\tcase func(uint16) uint16:\n\t\tf0 = f\n\tcase func(uint16) (uint16, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Uint16s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp uint16\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrU16(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrU16(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrU16(f1, at)\n\tdefault:\n\t\tMapU16(f0, at)\n\t}\ncase Uint32:\n\tvar f0 func(uint32) uint32\n\tvar f1 func(uint32) (uint32, error)\n\n\tswitch f := fn.(type) {\n\tcase func(uint32) uint32:\n\t\tf0 = f\n\tcase func(uint32) (uint32, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Uint32s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp uint32\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrU32(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrU32(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrU32(f1, at)\n\tdefault:\n\t\tMapU32(f0, at)\n\t}\ncase Uint64:\n\tvar f0 func(uint64) uint64\n\tvar f1 func(uint64) (uint64, error)\n\n\tswitch f := fn.(type) {\n\tcase func(uint64) uint64:\n\t\tf0 = f\n\tcase func(uint64) (uint64, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Uint64s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp uint64\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrU64(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrU64(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrU64(f1, at)\n\tdefault:\n\t\tMapU64(f0, at)\n\t}\ncase Uintptr:\n\tvar f0 func(uintptr) uintptr\n\tvar f1 func(uintptr) (uintptr, error)\n\n\tswitch f := fn.(type) {\n\tcase func(uintptr) uintptr:\n\t\tf0 = f\n\tcase func(uintptr) (uintptr, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Uintptrs()\n\tif incr {\n\t\treturn errors.Errorf(\"Cannot perform increment on t of %v\", t)\n\t}\n\tswitch {\n\tcase as && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && f0 == nil:\n\t\terr = MapErrUintptr(f1, at)\n\tdefault:\n\t\tMapUintptr(f0, at)\n\t}\ncase Float32:\n\tvar f0 func(float32) float32\n\tvar f1 func(float32) (float32, error)\n\n\tswitch f := fn.(type) {\n\tcase func(float32) float32:\n\t\tf0 = f\n\tcase func(float32) (float32, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Float32s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp float32\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrF32(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrF32(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrF32(f1, at)\n\tdefault:\n\t\tMapF32(f0, at)\n\t}\ncase Float64:\n\tvar f0 func(float64) float64\n\tvar f1 func(float64) (float64, error)\n\n\tswitch f := fn.(type) {\n\tcase func(float64) float64:\n\t\tf0 = f\n\tcase func(float64) (float64, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Float64s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp float64\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrF64(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrF64(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrF64(f1, at)\n\tdefault:\n\t\tMapF64(f0, at)\n\t}\ncase Complex64:\n\tvar f0 func(complex64) complex64\n\tvar f1 func(complex64) (complex64, error)\n\n\tswitch f := fn.(type) {\n\tcase func(complex64) complex64:\n\t\tf0 = f\n\tcase func(complex64) (complex64, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Complex64s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp complex64\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrC64(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrC64(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrC64(f1, at)\n\tdefault:\n\t\tMapC64(f0, at)\n\t}\ncase Complex128:\n\tvar f0 func(complex128) complex128\n\tvar f1 func(complex128) (complex128, error)\n\n\tswitch f := fn.(type) {\n\tcase func(complex128) complex128:\n\t\tf0 = f\n\tcase func(complex128) (complex128, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Complex128s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp complex128\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrC128(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrC128(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrC128(f1, at)\n\tdefault:\n\t\tMapC128(f0, at)\n\t}\ncase String:\n\tvar f0 func(string) string\n\tvar f1 func(string) (string, error)\n\n\tswitch f := fn.(type) {\n\tcase func(string) string:\n\t\tf0 = f\n\tcase func(string) (string, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Strings()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp string\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrStr(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrStr(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrStr(f1, at)\n\tdefault:\n\t\tMapStr(f0, at)\n\t}\ncase UnsafePointer:\n\tvar f0 func(unsafe.Pointer) unsafe.Pointer\n\tvar f1 func(unsafe.Pointer) (unsafe.Pointer, error)\n\n\tswitch f := fn.(type) {\n\tcase func(unsafe.Pointer) unsafe.Pointer:\n\t\tf0 = f\n\tcase func(unsafe.Pointer) (unsafe.Pointer, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.UnsafePointers()\n\tif incr {\n\t\treturn errors.Errorf(\"Cannot perform increment on t of %v\", t)\n\t}\n\tswitch {\n\tcase as && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && f0 == nil:\n\t\terr = MapErrUnsafePointer(f1, at)\n\tdefault:\n\t\tMapUnsafePointer(f0, at)\n\t}\ndefault:\n\treturn errors.Errorf(\"Cannot map t of %v\", t)\n\n}",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 41, 21, 19, 20, 18, 36 ],
      "exit" : false,
      "out-vars" : [ 20, 18, 41, 21, 19 ],
      "decl-vars" : [ ],
      "line-start" : 16,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Bool",
            "variable" : 36
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 42,
      "code" : "case Bool:\n\tvar f0 func(bool) bool\n\tvar f1 func(bool) (bool, error)\n\n\tswitch f := fn.(type) {\n\tcase func(bool) bool:\n\t\tf0 = f\n\tcase func(bool) (bool, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Bools()\n\tif incr {\n\t\treturn errors.Errorf(\"Cannot perform increment on t of %v\", t)\n\t}\n\tswitch {\n\tcase as && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && f0 == nil:\n\t\terr = MapErrB(f1, at)\n\tdefault:\n\t\tMapB(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 41, 21, 19, 20, 18 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 18, 42 ],
      "decl-vars" : [ 42 ],
      "line-start" : 17,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 86,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 11,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 11,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "bool"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 11,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 11,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "bool"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 17,
      "code" : "var f0 func(bool) bool",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 18, 42, 41, 21, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 20, 18, 42, 44, 41, 21, 19 ],
      "decl-vars" : [ 44 ],
      "line-start" : 18,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 87,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 11,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 11,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "bool"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 11,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 11,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "bool"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 18,
      "code" : "var f1 func(bool) (bool, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 44, 41, 21, 19, 20, 18, 42 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 18, 44, 45, 21, 42, 43, 41 ],
      "decl-vars" : [ 43, 45, 147 ],
      "line-start" : 20,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 27,
      "code" : "switch f := fn.(type) {\ncase func(bool) bool:\n\tf0 = f\ncase func(bool) (bool, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 11, 13 ],
      "in-vars" : [ 41, 21, 19, 44, 20, 18, 42, 45, 43 ],
      "exit" : false,
      "out-vars" : [ 20, 45, 21, 19, 18, 42, 44, 43, 41 ],
      "decl-vars" : [ ],
      "line-start" : 20,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 20,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 41, 21, 20, 18, 44, 43 ],
      "exit" : false,
      "out-vars" : [ 21, 20, 18, 44, 43, 41 ],
      "decl-vars" : [ ],
      "line-start" : 21,
      "ast" : {
        "expressions" : [ {
          "go-type" : 86,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 22,
      "code" : "case func(bool) bool:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 42 ],
      "successors" : [ 15 ],
      "in-vars" : [ 41, 21, 20, 18, 44, 43 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 18, 42, 44 ],
      "decl-vars" : [ ],
      "line-start" : 22,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 86,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 42
          }
        } ],
        "right" : [ {
          "go-type" : 86,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 43
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 42 ],
      "line-end" : 22,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 41, 21, 20, 18, 42, 45 ],
      "exit" : false,
      "out-vars" : [ 21, 20, 18, 42, 45, 41 ],
      "decl-vars" : [ ],
      "line-start" : 23,
      "ast" : {
        "expressions" : [ {
          "go-type" : 87,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 24,
      "code" : "case func(bool) (bool, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 44 ],
      "successors" : [ 15 ],
      "in-vars" : [ 21, 20, 18, 42, 45, 41 ],
      "exit" : false,
      "out-vars" : [ 20, 18, 42, 44, 41, 21 ],
      "decl-vars" : [ ],
      "line-start" : 24,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 87,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 44
          }
        } ],
        "right" : [ {
          "go-type" : 87,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 45
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 44 ],
      "line-end" : 24,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 45 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 25,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 26,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 26,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 26,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 41, 21, 20, 18, 42, 44 ],
      "exit" : false,
      "out-vars" : [ 18, 42, 46, 44, 41, 21 ],
      "decl-vars" : [ 46 ],
      "line-start" : 29,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Bools"
            },
            "go-type" : 94,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 93,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 29,
      "code" : "at := a.Bools()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17, 18 ],
      "in-vars" : [ 41, 21, 18, 42, 46, 44 ],
      "exit" : false,
      "out-vars" : [ 42, 46, 44, 41, 18 ],
      "decl-vars" : [ ],
      "line-start" : 30,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "incr",
            "variable" : 21
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 32,
      "code" : "if incr {\n\treturn errors.Errorf(\"Cannot perform increment on t of %v\", t)\n}",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 18 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 31,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot perform increment on t of %v"
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 18
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 31,
      "code" : "return errors.Errorf(\"Cannot perform increment on t of %v\", t)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19, 21, 23, 25 ],
      "in-vars" : [ 41, 42, 46, 44 ],
      "exit" : false,
      "out-vars" : [ 46, 44, 41, 42 ],
      "decl-vars" : [ ],
      "line-start" : 33,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 42,
      "code" : "switch {\ncase as && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && f0 == nil:\n\terr = MapErrB(f1, at)\ndefault:\n\tMapB(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 42, 46, 41 ],
      "exit" : false,
      "out-vars" : [ 46, 42 ],
      "decl-vars" : [ ],
      "line-start" : 34,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "as",
              "variable" : 41
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 86,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 42
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 35,
      "code" : "case as && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 42 ]
    }, {
      "update-vars" : [ 46 ],
      "successors" : [ 570 ],
      "in-vars" : [ 42, 46 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 35,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 93,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 46
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 93,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 46
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 86,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 42
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 35,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 42, 46 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 41, 42, 46, 44 ],
      "exit" : false,
      "out-vars" : [ 44, 46 ],
      "decl-vars" : [ ],
      "line-start" : 36,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "as",
              "variable" : 41
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 86,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 42
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 37,
      "code" : "case as && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 42, 41 ]
    }, {
      "update-vars" : [ 22, 46 ],
      "successors" : [ 570 ],
      "in-vars" : [ 46, 44 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 37,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 93,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 46
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 93,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 46
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 87,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 44
            }
          },
          "go-type" : 88,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 37,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 44, 46 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 41, 42, 46, 44 ],
      "exit" : false,
      "out-vars" : [ 46, 44 ],
      "decl-vars" : [ ],
      "line-start" : 38,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "type" : "unary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 86,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 42
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 39,
      "code" : "case !as && f0 == nil:\n\terr = MapErrB(f1, at)",
      "entry" : false,
      "use-vars" : [ 41, 42 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 46, 44 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 39,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 87,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 44
            }
          }, {
            "go-type" : 93,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 46
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 97,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrB"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 39,
      "code" : "err = MapErrB(f1, at)",
      "entry" : false,
      "use-vars" : [ 44, 46 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 42, 46 ],
      "exit" : false,
      "out-vars" : [ 42, 46 ],
      "decl-vars" : [ ],
      "line-start" : 40,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 41,
      "code" : "default:\n\tMapB(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 42, 46 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 41,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 86,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 42
            }
          }, {
            "go-type" : 93,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 46
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 99,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapB"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 41,
      "code" : "MapB(f0, at)",
      "entry" : false,
      "use-vars" : [ 46, 42 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 37, 41, 21, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 21, 19, 20, 41 ],
      "decl-vars" : [ ],
      "line-start" : 43,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int",
            "variable" : 37
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 78,
      "code" : "case Int:\n\tvar f0 func(int) int\n\tvar f1 func(int) (int, error)\n\n\tswitch f := fn.(type) {\n\tcase func(int) int:\n\t\tf0 = f\n\tcase func(int) (int, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Ints()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp int\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrI(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrI(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrI(f1, at)\n\tdefault:\n\t\tMapI(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 41, 21, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 47 ],
      "decl-vars" : [ 47 ],
      "line-start" : 44,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 101,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 44,
      "code" : "var f0 func(int) int",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 41, 21, 19, 20, 47 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 47, 49, 41, 21 ],
      "decl-vars" : [ 49 ],
      "line-start" : 45,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 102,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 45,
      "code" : "var f1 func(int) (int, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 19, 20, 47, 49, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 47, 49, 50, 48 ],
      "decl-vars" : [ 48, 50, 148 ],
      "line-start" : 47,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 54,
      "code" : "switch f := fn.(type) {\ncase func(int) int:\n\tf0 = f\ncase func(int) (int, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32, 34, 36 ],
      "in-vars" : [ 47, 49, 50, 48, 41, 21, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 47, 49, 50, 48 ],
      "decl-vars" : [ ],
      "line-start" : 47,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 47,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 48, 41, 21, 20, 49 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 49, 48 ],
      "decl-vars" : [ ],
      "line-start" : 48,
      "ast" : {
        "expressions" : [ {
          "go-type" : 101,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 49,
      "code" : "case func(int) int:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 47 ],
      "successors" : [ 38 ],
      "in-vars" : [ 41, 21, 20, 49, 48 ],
      "exit" : false,
      "out-vars" : [ 49, 41, 21, 20, 47 ],
      "decl-vars" : [ ],
      "line-start" : 49,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 101,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 47
          }
        } ],
        "right" : [ {
          "go-type" : 101,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 48
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 47 ],
      "line-end" : 49,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 48 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 41, 21, 20, 47, 50 ],
      "exit" : false,
      "out-vars" : [ 47, 50, 41, 21, 20 ],
      "decl-vars" : [ ],
      "line-start" : 50,
      "ast" : {
        "expressions" : [ {
          "go-type" : 102,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 51,
      "code" : "case func(int) (int, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 49 ],
      "successors" : [ 38 ],
      "in-vars" : [ 41, 21, 20, 47, 50 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 47, 49 ],
      "decl-vars" : [ ],
      "line-start" : 51,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 102,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 49
          }
        } ],
        "right" : [ {
          "go-type" : 102,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 50
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 49 ],
      "line-end" : 51,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 50 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 52,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 53,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 53,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 53,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 20, 47, 49, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 51, 49, 41, 21, 47 ],
      "decl-vars" : [ 51 ],
      "line-start" : 56,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Ints"
            },
            "go-type" : 104,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 26,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 56,
      "code" : "at := a.Ints()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40, 42, 48, 50, 52, 54, 56, 58 ],
      "in-vars" : [ 51, 49, 41, 21, 47 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 47, 51, 49 ],
      "decl-vars" : [ ],
      "line-start" : 57,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 78,
      "code" : "switch {\ncase as && incr && f0 != nil:\n\tat[0] += f0(at[0])\ncase as && incr && f0 == nil:\n\tvar tmp int\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp\ncase as && !incr && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && incr && f0 != nil:\n\tMapIncrI(f0, at)\ncase !as && incr && f0 == nil:\n\terr = MapIncrErrI(f1, at)\ncase !as && !incr && f0 == nil:\n\terr = MapErrI(f1, at)\ndefault:\n\tMapI(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 41, 21, 47, 51 ],
      "exit" : false,
      "out-vars" : [ 51, 47 ],
      "decl-vars" : [ ],
      "line-start" : 58,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 101,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 47
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 59,
      "code" : "case as && incr && f0 != nil:\n\tat[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 47, 41, 21 ]
    }, {
      "update-vars" : [ 51 ],
      "successors" : [ 570 ],
      "in-vars" : [ 47, 51 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 59,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 51
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 51
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 101,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 47
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 59,
      "code" : "at[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 51, 47 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 21, 47, 51, 49, 41 ],
      "exit" : false,
      "out-vars" : [ 51, 49 ],
      "decl-vars" : [ ],
      "line-start" : 60,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 101,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 47
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 65,
      "code" : "case as && incr && f0 == nil:\n\tvar tmp int\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp",
      "entry" : false,
      "use-vars" : [ 21, 47, 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45 ],
      "in-vars" : [ 51, 49 ],
      "exit" : false,
      "out-vars" : [ 51, 49 ],
      "decl-vars" : [ 52 ],
      "line-start" : 61,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "tmp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 61,
      "code" : "var tmp int",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46, 47 ],
      "in-vars" : [ 22, 51, 52 ],
      "exit" : false,
      "out-vars" : [ 51, 52 ],
      "decl-vars" : [ ],
      "line-start" : 62,
      "ast" : {
        "condition" : {
          "go-type" : 106,
          "kind" : "expression",
          "left" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 22
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 64,
      "code" : "if tmp, err = f1(at[0]); err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ 52, 22 ],
      "successors" : [ 44 ],
      "in-vars" : [ 49, 51 ],
      "exit" : false,
      "out-vars" : [ 22, 51, 52 ],
      "decl-vars" : [ ],
      "line-start" : 62,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 52
          }
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 51
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 102,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 49
            }
          },
          "go-type" : 103,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 52, 22 ],
      "line-end" : 62,
      "code" : "tmp, err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 51, 49 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 63,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 63,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 51 ],
      "successors" : [ 570 ],
      "in-vars" : [ 51, 52 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 65,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 51
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 52
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 65,
      "code" : "at[0] += tmp",
      "entry" : false,
      "use-vars" : [ 52, 51 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 41, 21, 47, 51 ],
      "exit" : false,
      "out-vars" : [ 47, 51 ],
      "decl-vars" : [ ],
      "line-start" : 66,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 101,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 47
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 67,
      "code" : "case as && !incr && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 47 ]
    }, {
      "update-vars" : [ 51 ],
      "successors" : [ 570 ],
      "in-vars" : [ 47, 51 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 67,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 51
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 51
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 101,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 47
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 67,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 51, 47 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51 ],
      "in-vars" : [ 47, 51, 49, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 51, 49 ],
      "decl-vars" : [ ],
      "line-start" : 68,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 101,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 47
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 69,
      "code" : "case as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 47 ]
    }, {
      "update-vars" : [ 22, 51 ],
      "successors" : [ 570 ],
      "in-vars" : [ 51, 49 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 69,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 51
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 51
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 102,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 49
            }
          },
          "go-type" : 103,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 69,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 51, 49 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 41, 21, 47, 51 ],
      "exit" : false,
      "out-vars" : [ 47, 51 ],
      "decl-vars" : [ ],
      "line-start" : 70,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 101,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 47
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 71,
      "code" : "case !as && incr && f0 != nil:\n\tMapIncrI(f0, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 47 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 47, 51 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 71,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 101,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 47
            }
          }, {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 51
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 107,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrI"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 71,
      "code" : "MapIncrI(f0, at)",
      "entry" : false,
      "use-vars" : [ 47, 51 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 41, 21, 47, 51, 49 ],
      "exit" : false,
      "out-vars" : [ 51, 49 ],
      "decl-vars" : [ ],
      "line-start" : 72,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 101,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 47
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 73,
      "code" : "case !as && incr && f0 == nil:\n\terr = MapIncrErrI(f1, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 47 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 51, 49 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 73,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 102,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 49
            }
          }, {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 51
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 109,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrErrI"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 73,
      "code" : "err = MapIncrErrI(f1, at)",
      "entry" : false,
      "use-vars" : [ 51, 49 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57 ],
      "in-vars" : [ 41, 21, 47, 51, 49 ],
      "exit" : false,
      "out-vars" : [ 51, 49 ],
      "decl-vars" : [ ],
      "line-start" : 74,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 101,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 47
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 75,
      "code" : "case !as && !incr && f0 == nil:\n\terr = MapErrI(f1, at)",
      "entry" : false,
      "use-vars" : [ 21, 47, 41 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 51, 49 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 75,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 102,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 49
            }
          }, {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 51
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 109,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrI"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 75,
      "code" : "err = MapErrI(f1, at)",
      "entry" : false,
      "use-vars" : [ 49, 51 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59 ],
      "in-vars" : [ 47, 51 ],
      "exit" : false,
      "out-vars" : [ 47, 51 ],
      "decl-vars" : [ ],
      "line-start" : 76,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 77,
      "code" : "default:\n\tMapI(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 47, 51 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 77,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 101,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 47
            }
          }, {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 51
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 107,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapI"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 77,
      "code" : "MapI(f0, at)",
      "entry" : false,
      "use-vars" : [ 47, 51 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61 ],
      "in-vars" : [ 41, 21, 19, 20, 40 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20 ],
      "decl-vars" : [ ],
      "line-start" : 79,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int8",
            "variable" : 40
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 114,
      "code" : "case Int8:\n\tvar f0 func(int8) int8\n\tvar f1 func(int8) (int8, error)\n\n\tswitch f := fn.(type) {\n\tcase func(int8) int8:\n\t\tf0 = f\n\tcase func(int8) (int8, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Int8s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp int8\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrI8(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrI8(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrI8(f1, at)\n\tdefault:\n\t\tMapI8(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 62 ],
      "in-vars" : [ 41, 21, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 53 ],
      "decl-vars" : [ 53 ],
      "line-start" : 80,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 111,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 113,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 113,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int8"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 113,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 113,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int8"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 80,
      "code" : "var f0 func(int8) int8",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63 ],
      "in-vars" : [ 19, 20, 53, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 53, 55, 41, 21 ],
      "decl-vars" : [ 55 ],
      "line-start" : 81,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 114,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 113,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 113,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int8"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 113,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 113,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int8"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 81,
      "code" : "var f1 func(int8) (int8, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64 ],
      "in-vars" : [ 21, 19, 20, 53, 55, 41 ],
      "exit" : false,
      "out-vars" : [ 20, 53, 55, 56, 54, 41, 21, 19 ],
      "decl-vars" : [ 149, 54, 56 ],
      "line-start" : 83,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 90,
      "code" : "switch f := fn.(type) {\ncase func(int8) int8:\n\tf0 = f\ncase func(int8) (int8, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65, 67, 69 ],
      "in-vars" : [ 21, 19, 20, 53, 55, 56, 54, 41 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 53, 55, 56, 54 ],
      "decl-vars" : [ ],
      "line-start" : 83,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 83,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 66 ],
      "in-vars" : [ 41, 21, 20, 55, 54 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 55, 54 ],
      "decl-vars" : [ ],
      "line-start" : 84,
      "ast" : {
        "expressions" : [ {
          "go-type" : 111,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 113,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 113,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int8"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 113,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 113,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int8"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 85,
      "code" : "case func(int8) int8:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 53 ],
      "successors" : [ 71 ],
      "in-vars" : [ 41, 21, 20, 55, 54 ],
      "exit" : false,
      "out-vars" : [ 53, 55, 41, 21, 20 ],
      "decl-vars" : [ ],
      "line-start" : 85,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 111,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 53
          }
        } ],
        "right" : [ {
          "go-type" : 111,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 54
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 53 ],
      "line-end" : 85,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 54 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 68 ],
      "in-vars" : [ 41, 21, 20, 53, 56 ],
      "exit" : false,
      "out-vars" : [ 56, 41, 21, 20, 53 ],
      "decl-vars" : [ ],
      "line-start" : 86,
      "ast" : {
        "expressions" : [ {
          "go-type" : 114,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 113,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 113,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int8"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 113,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 113,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int8"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 87,
      "code" : "case func(int8) (int8, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 55 ],
      "successors" : [ 71 ],
      "in-vars" : [ 20, 53, 56, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 53, 55, 41, 21, 20 ],
      "decl-vars" : [ ],
      "line-start" : 87,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 114,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 55
          }
        } ],
        "right" : [ {
          "go-type" : 114,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 56
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 55 ],
      "line-end" : 87,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 56 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 70 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 88,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 89,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 89,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 89,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 72 ],
      "in-vars" : [ 41, 21, 20, 53, 55 ],
      "exit" : false,
      "out-vars" : [ 21, 57, 53, 55, 41 ],
      "decl-vars" : [ 57 ],
      "line-start" : 92,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int8s"
            },
            "go-type" : 117,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 116,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 92,
      "code" : "at := a.Int8s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 73, 75, 81, 83, 85, 87, 89, 91 ],
      "in-vars" : [ 57, 53, 55, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 57, 53, 55 ],
      "decl-vars" : [ ],
      "line-start" : 93,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 114,
      "code" : "switch {\ncase as && incr && f0 != nil:\n\tat[0] += f0(at[0])\ncase as && incr && f0 == nil:\n\tvar tmp int8\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp\ncase as && !incr && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && incr && f0 != nil:\n\tMapIncrI8(f0, at)\ncase !as && incr && f0 == nil:\n\terr = MapIncrErrI8(f1, at)\ncase !as && !incr && f0 == nil:\n\terr = MapErrI8(f1, at)\ndefault:\n\tMapI8(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 74 ],
      "in-vars" : [ 53, 41, 21, 57 ],
      "exit" : false,
      "out-vars" : [ 57, 53 ],
      "decl-vars" : [ ],
      "line-start" : 94,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 111,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 53
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 95,
      "code" : "case as && incr && f0 != nil:\n\tat[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 53 ]
    }, {
      "update-vars" : [ 57 ],
      "successors" : [ 570 ],
      "in-vars" : [ 57, 53 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 95,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 113,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 116,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 57
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 113,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 116,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 57
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 111,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 53
            }
          },
          "go-type" : 113,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 95,
      "code" : "at[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 57, 53 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 76 ],
      "in-vars" : [ 41, 21, 57, 53, 55 ],
      "exit" : false,
      "out-vars" : [ 57, 55 ],
      "decl-vars" : [ ],
      "line-start" : 96,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 111,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 53
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 101,
      "code" : "case as && incr && f0 == nil:\n\tvar tmp int8\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp",
      "entry" : false,
      "use-vars" : [ 41, 21, 53 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 78 ],
      "in-vars" : [ 57, 55 ],
      "exit" : false,
      "out-vars" : [ 55, 57 ],
      "decl-vars" : [ 58 ],
      "line-start" : 97,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 113,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 113,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int8"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "tmp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 97,
      "code" : "var tmp int8",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 79, 80 ],
      "in-vars" : [ 58, 22, 57 ],
      "exit" : false,
      "out-vars" : [ 57, 58 ],
      "decl-vars" : [ ],
      "line-start" : 98,
      "ast" : {
        "condition" : {
          "go-type" : 106,
          "kind" : "expression",
          "left" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 22
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 100,
      "code" : "if tmp, err = f1(at[0]); err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ 22, 58 ],
      "successors" : [ 77 ],
      "in-vars" : [ 57, 55 ],
      "exit" : false,
      "out-vars" : [ 22, 57, 58 ],
      "decl-vars" : [ ],
      "line-start" : 98,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 113,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 58
          }
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 113,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 116,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 57
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 114,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 55
            }
          },
          "go-type" : 115,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22, 58 ],
      "line-end" : 98,
      "code" : "tmp, err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 55, 57 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 99,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 99,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 57 ],
      "successors" : [ 570 ],
      "in-vars" : [ 57, 58 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 101,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 113,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 116,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 57
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 113,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 58
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 101,
      "code" : "at[0] += tmp",
      "entry" : false,
      "use-vars" : [ 58, 57 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 82 ],
      "in-vars" : [ 41, 21, 57, 53 ],
      "exit" : false,
      "out-vars" : [ 57, 53 ],
      "decl-vars" : [ ],
      "line-start" : 102,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 111,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 53
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 103,
      "code" : "case as && !incr && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 21, 53, 41 ]
    }, {
      "update-vars" : [ 57 ],
      "successors" : [ 570 ],
      "in-vars" : [ 57, 53 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 103,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 113,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 116,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 57
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 113,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 116,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 57
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 111,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 53
            }
          },
          "go-type" : 113,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 103,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 53, 57 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 84 ],
      "in-vars" : [ 53, 55, 41, 21, 57 ],
      "exit" : false,
      "out-vars" : [ 57, 55 ],
      "decl-vars" : [ ],
      "line-start" : 104,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 111,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 53
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 105,
      "code" : "case as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 53 ]
    }, {
      "update-vars" : [ 22, 57 ],
      "successors" : [ 570 ],
      "in-vars" : [ 57, 55 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 105,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 113,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 116,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 57
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 113,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 116,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 57
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 114,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 55
            }
          },
          "go-type" : 115,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 105,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 55, 57 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 86 ],
      "in-vars" : [ 53, 41, 21, 57 ],
      "exit" : false,
      "out-vars" : [ 57, 53 ],
      "decl-vars" : [ ],
      "line-start" : 106,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 111,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 53
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 107,
      "code" : "case !as && incr && f0 != nil:\n\tMapIncrI8(f0, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 53 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 57, 53 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 107,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 111,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 53
            }
          }, {
            "go-type" : 116,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 57
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 119,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrI8"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 107,
      "code" : "MapIncrI8(f0, at)",
      "entry" : false,
      "use-vars" : [ 53, 57 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 88 ],
      "in-vars" : [ 41, 21, 57, 53, 55 ],
      "exit" : false,
      "out-vars" : [ 57, 55 ],
      "decl-vars" : [ ],
      "line-start" : 108,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 111,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 53
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 109,
      "code" : "case !as && incr && f0 == nil:\n\terr = MapIncrErrI8(f1, at)",
      "entry" : false,
      "use-vars" : [ 21, 53, 41 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 57, 55 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 109,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 114,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 55
            }
          }, {
            "go-type" : 116,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 57
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 121,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrErrI8"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 109,
      "code" : "err = MapIncrErrI8(f1, at)",
      "entry" : false,
      "use-vars" : [ 55, 57 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 90 ],
      "in-vars" : [ 41, 21, 57, 53, 55 ],
      "exit" : false,
      "out-vars" : [ 57, 55 ],
      "decl-vars" : [ ],
      "line-start" : 110,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 111,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 53
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 111,
      "code" : "case !as && !incr && f0 == nil:\n\terr = MapErrI8(f1, at)",
      "entry" : false,
      "use-vars" : [ 21, 53, 41 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 57, 55 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 111,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 114,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 55
            }
          }, {
            "go-type" : 116,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 57
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 121,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrI8"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 111,
      "code" : "err = MapErrI8(f1, at)",
      "entry" : false,
      "use-vars" : [ 55, 57 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 92 ],
      "in-vars" : [ 57, 53 ],
      "exit" : false,
      "out-vars" : [ 57, 53 ],
      "decl-vars" : [ ],
      "line-start" : 112,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 113,
      "code" : "default:\n\tMapI8(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 57, 53 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 113,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 111,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 53
            }
          }, {
            "go-type" : 116,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 57
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 119,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 15,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapI8"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 113,
      "code" : "MapI8(f0, at)",
      "entry" : false,
      "use-vars" : [ 53, 57 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 94 ],
      "in-vars" : [ 24, 41, 21, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20 ],
      "decl-vars" : [ ],
      "line-start" : 115,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int16",
            "variable" : 24
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 150,
      "code" : "case Int16:\n\tvar f0 func(int16) int16\n\tvar f1 func(int16) (int16, error)\n\n\tswitch f := fn.(type) {\n\tcase func(int16) int16:\n\t\tf0 = f\n\tcase func(int16) (int16, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Int16s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp int16\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrI16(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrI16(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrI16(f1, at)\n\tdefault:\n\t\tMapI16(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 95 ],
      "in-vars" : [ 41, 21, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 59 ],
      "decl-vars" : [ 59 ],
      "line-start" : 116,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 123,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 125,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 125,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int16"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 125,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 125,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int16"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 116,
      "code" : "var f0 func(int16) int16",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 96 ],
      "in-vars" : [ 41, 21, 19, 20, 59 ],
      "exit" : false,
      "out-vars" : [ 20, 61, 59, 41, 21, 19 ],
      "decl-vars" : [ 61 ],
      "line-start" : 117,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 126,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 125,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 125,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int16"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 125,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 125,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int16"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 117,
      "code" : "var f1 func(int16) (int16, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 97 ],
      "in-vars" : [ 59, 41, 21, 19, 20, 61 ],
      "exit" : false,
      "out-vars" : [ 21, 19, 20, 61, 59, 62, 60, 41 ],
      "decl-vars" : [ 60, 62, 150 ],
      "line-start" : 119,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 126,
      "code" : "switch f := fn.(type) {\ncase func(int16) int16:\n\tf0 = f\ncase func(int16) (int16, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 98, 100, 102 ],
      "in-vars" : [ 61, 59, 62, 60, 41, 21, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 61, 59, 62, 60, 41, 21, 19, 20 ],
      "decl-vars" : [ ],
      "line-start" : 119,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 119,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 99 ],
      "in-vars" : [ 20, 61, 60, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 61, 60, 41, 21, 20 ],
      "decl-vars" : [ ],
      "line-start" : 120,
      "ast" : {
        "expressions" : [ {
          "go-type" : 123,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 125,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 125,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int16"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 125,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 125,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int16"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 121,
      "code" : "case func(int16) int16:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 59 ],
      "successors" : [ 104 ],
      "in-vars" : [ 41, 21, 20, 61, 60 ],
      "exit" : false,
      "out-vars" : [ 59, 41, 21, 20, 61 ],
      "decl-vars" : [ ],
      "line-start" : 121,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 123,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 59
          }
        } ],
        "right" : [ {
          "go-type" : 123,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 60
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 59 ],
      "line-end" : 121,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 60 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 101 ],
      "in-vars" : [ 41, 21, 20, 59, 62 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 59, 62 ],
      "decl-vars" : [ ],
      "line-start" : 122,
      "ast" : {
        "expressions" : [ {
          "go-type" : 126,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 125,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 125,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int16"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 125,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 125,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int16"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 123,
      "code" : "case func(int16) (int16, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 61 ],
      "successors" : [ 104 ],
      "in-vars" : [ 62, 41, 21, 20, 59 ],
      "exit" : false,
      "out-vars" : [ 59, 41, 21, 20, 61 ],
      "decl-vars" : [ ],
      "line-start" : 123,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 126,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 61
          }
        } ],
        "right" : [ {
          "go-type" : 126,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 62
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 61 ],
      "line-end" : 123,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 62 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 103 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 124,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 125,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 125,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 125,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 105 ],
      "in-vars" : [ 61, 59, 41, 21, 20 ],
      "exit" : false,
      "out-vars" : [ 61, 63, 59, 41, 21 ],
      "decl-vars" : [ 63 ],
      "line-start" : 128,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 16,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int16s"
            },
            "go-type" : 129,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 128,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 128,
      "code" : "at := a.Int16s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 106, 108, 114, 116, 118, 120, 122, 124 ],
      "in-vars" : [ 61, 63, 59, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 61, 63, 59 ],
      "decl-vars" : [ ],
      "line-start" : 129,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 150,
      "code" : "switch {\ncase as && incr && f0 != nil:\n\tat[0] += f0(at[0])\ncase as && incr && f0 == nil:\n\tvar tmp int16\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp\ncase as && !incr && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && incr && f0 != nil:\n\tMapIncrI16(f0, at)\ncase !as && incr && f0 == nil:\n\terr = MapIncrErrI16(f1, at)\ncase !as && !incr && f0 == nil:\n\terr = MapErrI16(f1, at)\ndefault:\n\tMapI16(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 107 ],
      "in-vars" : [ 41, 21, 63, 59 ],
      "exit" : false,
      "out-vars" : [ 63, 59 ],
      "decl-vars" : [ ],
      "line-start" : 130,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 123,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 59
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 131,
      "code" : "case as && incr && f0 != nil:\n\tat[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 21, 59, 41 ]
    }, {
      "update-vars" : [ 63 ],
      "successors" : [ 570 ],
      "in-vars" : [ 63, 59 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 131,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 125,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 128,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 63
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 125,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 128,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 63
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 123,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 59
            }
          },
          "go-type" : 125,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 131,
      "code" : "at[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 59, 63 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 109 ],
      "in-vars" : [ 61, 63, 59, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 61, 63 ],
      "decl-vars" : [ ],
      "line-start" : 132,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 123,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 59
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 137,
      "code" : "case as && incr && f0 == nil:\n\tvar tmp int16\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp",
      "entry" : false,
      "use-vars" : [ 41, 21, 59 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 111 ],
      "in-vars" : [ 61, 63 ],
      "exit" : false,
      "out-vars" : [ 61, 63 ],
      "decl-vars" : [ 64 ],
      "line-start" : 133,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 125,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 125,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int16"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "tmp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 133,
      "code" : "var tmp int16",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 112, 113 ],
      "in-vars" : [ 63, 64, 22 ],
      "exit" : false,
      "out-vars" : [ 63, 64 ],
      "decl-vars" : [ ],
      "line-start" : 134,
      "ast" : {
        "condition" : {
          "go-type" : 106,
          "kind" : "expression",
          "left" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 22
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 136,
      "code" : "if tmp, err = f1(at[0]); err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ 64, 22 ],
      "successors" : [ 110 ],
      "in-vars" : [ 61, 63 ],
      "exit" : false,
      "out-vars" : [ 63, 64, 22 ],
      "decl-vars" : [ ],
      "line-start" : 134,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 125,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 64
          }
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 125,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 128,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 63
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 126,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 61
            }
          },
          "go-type" : 127,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22, 64 ],
      "line-end" : 134,
      "code" : "tmp, err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 61, 63 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 135,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 135,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 63 ],
      "successors" : [ 570 ],
      "in-vars" : [ 63, 64 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 137,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 125,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 128,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 63
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 125,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 64
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 137,
      "code" : "at[0] += tmp",
      "entry" : false,
      "use-vars" : [ 64, 63 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 115 ],
      "in-vars" : [ 41, 21, 63, 59 ],
      "exit" : false,
      "out-vars" : [ 63, 59 ],
      "decl-vars" : [ ],
      "line-start" : 138,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 123,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 59
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 139,
      "code" : "case as && !incr && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 59 ]
    }, {
      "update-vars" : [ 63 ],
      "successors" : [ 570 ],
      "in-vars" : [ 63, 59 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 139,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 125,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 128,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 63
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 125,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 128,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 63
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 123,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 59
            }
          },
          "go-type" : 125,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 139,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 63, 59 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 117 ],
      "in-vars" : [ 61, 63, 59, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 61, 63 ],
      "decl-vars" : [ ],
      "line-start" : 140,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 123,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 59
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 141,
      "code" : "case as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 21, 59, 41 ]
    }, {
      "update-vars" : [ 22, 63 ],
      "successors" : [ 570 ],
      "in-vars" : [ 61, 63 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 141,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 125,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 128,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 63
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 125,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 128,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 63
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 126,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 61
            }
          },
          "go-type" : 127,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 141,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 63, 61 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 119 ],
      "in-vars" : [ 41, 21, 63, 59 ],
      "exit" : false,
      "out-vars" : [ 63, 59 ],
      "decl-vars" : [ ],
      "line-start" : 142,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 123,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 59
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 143,
      "code" : "case !as && incr && f0 != nil:\n\tMapIncrI16(f0, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 59 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 63, 59 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 143,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 123,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 59
            }
          }, {
            "go-type" : 128,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 63
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 131,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 17,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrI16"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 143,
      "code" : "MapIncrI16(f0, at)",
      "entry" : false,
      "use-vars" : [ 59, 63 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 121 ],
      "in-vars" : [ 41, 21, 61, 63, 59 ],
      "exit" : false,
      "out-vars" : [ 61, 63 ],
      "decl-vars" : [ ],
      "line-start" : 144,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 123,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 59
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 145,
      "code" : "case !as && incr && f0 == nil:\n\terr = MapIncrErrI16(f1, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 59 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 61, 63 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 145,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 126,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 61
            }
          }, {
            "go-type" : 128,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 63
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 133,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 18,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrErrI16"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 145,
      "code" : "err = MapIncrErrI16(f1, at)",
      "entry" : false,
      "use-vars" : [ 61, 63 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 123 ],
      "in-vars" : [ 59, 41, 21, 61, 63 ],
      "exit" : false,
      "out-vars" : [ 61, 63 ],
      "decl-vars" : [ ],
      "line-start" : 146,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 123,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 59
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 147,
      "code" : "case !as && !incr && f0 == nil:\n\terr = MapErrI16(f1, at)",
      "entry" : false,
      "use-vars" : [ 21, 59, 41 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 61, 63 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 147,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 126,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 61
            }
          }, {
            "go-type" : 128,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 63
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 133,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrI16"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 147,
      "code" : "err = MapErrI16(f1, at)",
      "entry" : false,
      "use-vars" : [ 61, 63 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 125 ],
      "in-vars" : [ 63, 59 ],
      "exit" : false,
      "out-vars" : [ 59, 63 ],
      "decl-vars" : [ ],
      "line-start" : 148,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 149,
      "code" : "default:\n\tMapI16(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 63, 59 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 149,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 123,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 59
            }
          }, {
            "go-type" : 128,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 63
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 131,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 20,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapI16"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 149,
      "code" : "MapI16(f0, at)",
      "entry" : false,
      "use-vars" : [ 59, 63 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 127 ],
      "in-vars" : [ 19, 20, 31, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20 ],
      "decl-vars" : [ ],
      "line-start" : 151,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int32",
            "variable" : 31
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 186,
      "code" : "case Int32:\n\tvar f0 func(int32) int32\n\tvar f1 func(int32) (int32, error)\n\n\tswitch f := fn.(type) {\n\tcase func(int32) int32:\n\t\tf0 = f\n\tcase func(int32) (int32, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Int32s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp int32\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrI32(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrI32(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrI32(f1, at)\n\tdefault:\n\t\tMapI32(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 128 ],
      "in-vars" : [ 41, 21, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 65, 41, 21, 19, 20 ],
      "decl-vars" : [ 65 ],
      "line-start" : 152,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 135,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 59,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 59,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 59,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 59,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 152,
      "code" : "var f0 func(int32) int32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 129 ],
      "in-vars" : [ 21, 19, 20, 65, 41 ],
      "exit" : false,
      "out-vars" : [ 20, 65, 67, 41, 21, 19 ],
      "decl-vars" : [ 67 ],
      "line-start" : 153,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 137,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 59,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 59,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 59,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 59,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 153,
      "code" : "var f1 func(int32) (int32, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 130 ],
      "in-vars" : [ 41, 21, 19, 20, 65, 67 ],
      "exit" : false,
      "out-vars" : [ 66, 68, 41, 21, 19, 20, 65, 67 ],
      "decl-vars" : [ 66, 68, 151 ],
      "line-start" : 155,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 162,
      "code" : "switch f := fn.(type) {\ncase func(int32) int32:\n\tf0 = f\ncase func(int32) (int32, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 131, 133, 135 ],
      "in-vars" : [ 66, 68, 41, 21, 19, 20, 65, 67 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 65, 67, 66, 68 ],
      "decl-vars" : [ ],
      "line-start" : 155,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 155,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 132 ],
      "in-vars" : [ 20, 67, 66, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 67, 66 ],
      "decl-vars" : [ ],
      "line-start" : 156,
      "ast" : {
        "expressions" : [ {
          "go-type" : 135,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 59,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 59,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 59,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 59,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 157,
      "code" : "case func(int32) int32:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 65 ],
      "successors" : [ 137 ],
      "in-vars" : [ 41, 21, 20, 67, 66 ],
      "exit" : false,
      "out-vars" : [ 20, 65, 67, 41, 21 ],
      "decl-vars" : [ ],
      "line-start" : 157,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 135,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 65
          }
        } ],
        "right" : [ {
          "go-type" : 135,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 66
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 65 ],
      "line-end" : 157,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 66 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 134 ],
      "in-vars" : [ 20, 65, 68, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 65, 68 ],
      "decl-vars" : [ ],
      "line-start" : 158,
      "ast" : {
        "expressions" : [ {
          "go-type" : 137,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 59,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 59,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 59,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 59,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 159,
      "code" : "case func(int32) (int32, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 67 ],
      "successors" : [ 137 ],
      "in-vars" : [ 68, 41, 21, 20, 65 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 65, 67 ],
      "decl-vars" : [ ],
      "line-start" : 159,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 137,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 67
          }
        } ],
        "right" : [ {
          "go-type" : 137,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 68
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 67 ],
      "line-end" : 159,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 68 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 136 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 160,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 161,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 161,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 161,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 138 ],
      "in-vars" : [ 41, 21, 20, 65, 67 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 65, 69, 67 ],
      "decl-vars" : [ 69 ],
      "line-start" : 164,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 21,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int32s"
            },
            "go-type" : 140,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 139,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 164,
      "code" : "at := a.Int32s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 139, 141, 147, 149, 151, 153, 155, 157 ],
      "in-vars" : [ 67, 41, 21, 65, 69 ],
      "exit" : false,
      "out-vars" : [ 65, 69, 67, 41, 21 ],
      "decl-vars" : [ ],
      "line-start" : 165,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 186,
      "code" : "switch {\ncase as && incr && f0 != nil:\n\tat[0] += f0(at[0])\ncase as && incr && f0 == nil:\n\tvar tmp int32\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp\ncase as && !incr && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && incr && f0 != nil:\n\tMapIncrI32(f0, at)\ncase !as && incr && f0 == nil:\n\terr = MapIncrErrI32(f1, at)\ncase !as && !incr && f0 == nil:\n\terr = MapErrI32(f1, at)\ndefault:\n\tMapI32(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 140 ],
      "in-vars" : [ 41, 21, 65, 69 ],
      "exit" : false,
      "out-vars" : [ 65, 69 ],
      "decl-vars" : [ ],
      "line-start" : 166,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 135,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 65
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 167,
      "code" : "case as && incr && f0 != nil:\n\tat[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 65, 41, 21 ]
    }, {
      "update-vars" : [ 69 ],
      "successors" : [ 570 ],
      "in-vars" : [ 69, 65 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 167,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 59,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 139,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 69
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 59,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 139,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 69
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 135,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 65
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 167,
      "code" : "at[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 65, 69 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 142 ],
      "in-vars" : [ 69, 67, 41, 21, 65 ],
      "exit" : false,
      "out-vars" : [ 69, 67 ],
      "decl-vars" : [ ],
      "line-start" : 168,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 135,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 65
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 173,
      "code" : "case as && incr && f0 == nil:\n\tvar tmp int32\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp",
      "entry" : false,
      "use-vars" : [ 65, 41, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 144 ],
      "in-vars" : [ 69, 67 ],
      "exit" : false,
      "out-vars" : [ 69, 67 ],
      "decl-vars" : [ 70 ],
      "line-start" : 169,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 59,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 59,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int32"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "tmp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 169,
      "code" : "var tmp int32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 145, 146 ],
      "in-vars" : [ 22, 69, 70 ],
      "exit" : false,
      "out-vars" : [ 69, 70 ],
      "decl-vars" : [ ],
      "line-start" : 170,
      "ast" : {
        "condition" : {
          "go-type" : 106,
          "kind" : "expression",
          "left" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 22
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 172,
      "code" : "if tmp, err = f1(at[0]); err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ 22, 70 ],
      "successors" : [ 143 ],
      "in-vars" : [ 69, 67 ],
      "exit" : false,
      "out-vars" : [ 69, 70, 22 ],
      "decl-vars" : [ ],
      "line-start" : 170,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 59,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 70
          }
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 59,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 139,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 69
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 137,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 67
            }
          },
          "go-type" : 138,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22, 70 ],
      "line-end" : 170,
      "code" : "tmp, err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 67, 69 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 171,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 171,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 69 ],
      "successors" : [ 570 ],
      "in-vars" : [ 69, 70 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 173,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 59,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 139,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 69
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 59,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 70
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 173,
      "code" : "at[0] += tmp",
      "entry" : false,
      "use-vars" : [ 70, 69 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 148 ],
      "in-vars" : [ 21, 65, 69, 41 ],
      "exit" : false,
      "out-vars" : [ 65, 69 ],
      "decl-vars" : [ ],
      "line-start" : 174,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 135,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 65
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 175,
      "code" : "case as && !incr && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 65 ]
    }, {
      "update-vars" : [ 69 ],
      "successors" : [ 570 ],
      "in-vars" : [ 65, 69 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 175,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 59,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 139,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 69
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 59,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 139,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 69
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 135,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 65
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 175,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 69, 65 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 150 ],
      "in-vars" : [ 41, 21, 65, 69, 67 ],
      "exit" : false,
      "out-vars" : [ 69, 67 ],
      "decl-vars" : [ ],
      "line-start" : 176,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 135,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 65
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 177,
      "code" : "case as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 65, 41, 21 ]
    }, {
      "update-vars" : [ 22, 69 ],
      "successors" : [ 570 ],
      "in-vars" : [ 69, 67 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 177,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 59,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 139,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 69
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 59,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 139,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 69
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 137,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 67
            }
          },
          "go-type" : 138,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 177,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 67, 69 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 152 ],
      "in-vars" : [ 41, 21, 65, 69 ],
      "exit" : false,
      "out-vars" : [ 65, 69 ],
      "decl-vars" : [ ],
      "line-start" : 178,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 135,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 65
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 179,
      "code" : "case !as && incr && f0 != nil:\n\tMapIncrI32(f0, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 65 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 65, 69 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 179,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 135,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 65
            }
          }, {
            "go-type" : 139,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 69
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 142,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 22,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrI32"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 179,
      "code" : "MapIncrI32(f0, at)",
      "entry" : false,
      "use-vars" : [ 65, 69 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 154 ],
      "in-vars" : [ 41, 21, 65, 69, 67 ],
      "exit" : false,
      "out-vars" : [ 69, 67 ],
      "decl-vars" : [ ],
      "line-start" : 180,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 135,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 65
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 181,
      "code" : "case !as && incr && f0 == nil:\n\terr = MapIncrErrI32(f1, at)",
      "entry" : false,
      "use-vars" : [ 21, 65, 41 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 69, 67 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 181,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 137,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 67
            }
          }, {
            "go-type" : 139,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 69
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 144,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 23,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrErrI32"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 181,
      "code" : "err = MapIncrErrI32(f1, at)",
      "entry" : false,
      "use-vars" : [ 67, 69 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 156 ],
      "in-vars" : [ 67, 41, 21, 65, 69 ],
      "exit" : false,
      "out-vars" : [ 69, 67 ],
      "decl-vars" : [ ],
      "line-start" : 182,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 135,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 65
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 183,
      "code" : "case !as && !incr && f0 == nil:\n\terr = MapErrI32(f1, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 65 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 69, 67 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 183,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 137,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 67
            }
          }, {
            "go-type" : 139,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 69
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 144,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 24,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrI32"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 183,
      "code" : "err = MapErrI32(f1, at)",
      "entry" : false,
      "use-vars" : [ 67, 69 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 158 ],
      "in-vars" : [ 65, 69 ],
      "exit" : false,
      "out-vars" : [ 65, 69 ],
      "decl-vars" : [ ],
      "line-start" : 184,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 185,
      "code" : "default:\n\tMapI32(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 69, 65 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 185,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 135,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 65
            }
          }, {
            "go-type" : 139,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 69
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 142,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 25,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapI32"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 185,
      "code" : "MapI32(f0, at)",
      "entry" : false,
      "use-vars" : [ 69, 65 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 160 ],
      "in-vars" : [ 19, 20, 32, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20 ],
      "decl-vars" : [ ],
      "line-start" : 187,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int64",
            "variable" : 32
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 222,
      "code" : "case Int64:\n\tvar f0 func(int64) int64\n\tvar f1 func(int64) (int64, error)\n\n\tswitch f := fn.(type) {\n\tcase func(int64) int64:\n\t\tf0 = f\n\tcase func(int64) (int64, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Int64s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp int64\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrI64(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrI64(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrI64(f1, at)\n\tdefault:\n\t\tMapI64(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 161 ],
      "in-vars" : [ 41, 21, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 71, 41, 21 ],
      "decl-vars" : [ 71 ],
      "line-start" : 188,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 146,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 148,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 148,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 148,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 148,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 188,
      "code" : "var f0 func(int64) int64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 162 ],
      "in-vars" : [ 41, 21, 19, 20, 71 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 73, 71 ],
      "decl-vars" : [ 73 ],
      "line-start" : 189,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 149,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 148,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 148,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 148,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 148,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 189,
      "code" : "var f1 func(int64) (int64, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 163 ],
      "in-vars" : [ 71, 41, 21, 19, 20, 73 ],
      "exit" : false,
      "out-vars" : [ 73, 74, 72, 71, 41, 21, 19, 20 ],
      "decl-vars" : [ 72, 74, 152 ],
      "line-start" : 191,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 198,
      "code" : "switch f := fn.(type) {\ncase func(int64) int64:\n\tf0 = f\ncase func(int64) (int64, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 164, 166, 168 ],
      "in-vars" : [ 21, 19, 20, 73, 74, 72, 71, 41 ],
      "exit" : false,
      "out-vars" : [ 21, 19, 20, 73, 74, 72, 71, 41 ],
      "decl-vars" : [ ],
      "line-start" : 191,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 191,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 165 ],
      "in-vars" : [ 21, 20, 73, 72, 41 ],
      "exit" : false,
      "out-vars" : [ 21, 20, 73, 72, 41 ],
      "decl-vars" : [ ],
      "line-start" : 192,
      "ast" : {
        "expressions" : [ {
          "go-type" : 146,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 148,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 148,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 148,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 148,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 193,
      "code" : "case func(int64) int64:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 71 ],
      "successors" : [ 170 ],
      "in-vars" : [ 21, 20, 73, 72, 41 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 73, 71 ],
      "decl-vars" : [ ],
      "line-start" : 193,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 146,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 71
          }
        } ],
        "right" : [ {
          "go-type" : 146,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 72
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 71 ],
      "line-end" : 193,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 167 ],
      "in-vars" : [ 74, 71, 41, 21, 20 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 74, 71 ],
      "decl-vars" : [ ],
      "line-start" : 194,
      "ast" : {
        "expressions" : [ {
          "go-type" : 149,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 148,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 148,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 148,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 148,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 195,
      "code" : "case func(int64) (int64, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 73 ],
      "successors" : [ 170 ],
      "in-vars" : [ 21, 20, 74, 71, 41 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 73, 71 ],
      "decl-vars" : [ ],
      "line-start" : 195,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 149,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 73
          }
        } ],
        "right" : [ {
          "go-type" : 149,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 74
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 73 ],
      "line-end" : 195,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 74 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 169 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 196,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 197,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 197,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 197,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 171 ],
      "in-vars" : [ 41, 21, 20, 73, 71 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 75, 73, 71 ],
      "decl-vars" : [ 75 ],
      "line-start" : 200,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 26,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int64s"
            },
            "go-type" : 152,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 151,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 200,
      "code" : "at := a.Int64s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 172, 174, 180, 182, 184, 186, 188, 190 ],
      "in-vars" : [ 21, 75, 73, 71, 41 ],
      "exit" : false,
      "out-vars" : [ 71, 41, 21, 75, 73 ],
      "decl-vars" : [ ],
      "line-start" : 201,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 222,
      "code" : "switch {\ncase as && incr && f0 != nil:\n\tat[0] += f0(at[0])\ncase as && incr && f0 == nil:\n\tvar tmp int64\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp\ncase as && !incr && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && incr && f0 != nil:\n\tMapIncrI64(f0, at)\ncase !as && incr && f0 == nil:\n\terr = MapIncrErrI64(f1, at)\ncase !as && !incr && f0 == nil:\n\terr = MapErrI64(f1, at)\ndefault:\n\tMapI64(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 173 ],
      "in-vars" : [ 75, 71, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 75, 71 ],
      "decl-vars" : [ ],
      "line-start" : 202,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 146,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 71
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 203,
      "code" : "case as && incr && f0 != nil:\n\tat[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 71 ]
    }, {
      "update-vars" : [ 75 ],
      "successors" : [ 570 ],
      "in-vars" : [ 75, 71 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 203,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 148,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 151,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 75
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 148,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 151,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 75
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 146,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 71
            }
          },
          "go-type" : 148,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 203,
      "code" : "at[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 71, 75 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 175 ],
      "in-vars" : [ 41, 21, 75, 73, 71 ],
      "exit" : false,
      "out-vars" : [ 75, 73 ],
      "decl-vars" : [ ],
      "line-start" : 204,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 146,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 71
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 209,
      "code" : "case as && incr && f0 == nil:\n\tvar tmp int64\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp",
      "entry" : false,
      "use-vars" : [ 21, 71, 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 75, 73 ],
      "exit" : false,
      "out-vars" : [ 75, 73 ],
      "decl-vars" : [ 76 ],
      "line-start" : 205,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 148,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 148,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "tmp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 205,
      "code" : "var tmp int64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 178, 179 ],
      "in-vars" : [ 22, 75, 76 ],
      "exit" : false,
      "out-vars" : [ 75, 76 ],
      "decl-vars" : [ ],
      "line-start" : 206,
      "ast" : {
        "condition" : {
          "go-type" : 106,
          "kind" : "expression",
          "left" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 22
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 208,
      "code" : "if tmp, err = f1(at[0]); err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ 22, 76 ],
      "successors" : [ 176 ],
      "in-vars" : [ 75, 73 ],
      "exit" : false,
      "out-vars" : [ 22, 75, 76 ],
      "decl-vars" : [ ],
      "line-start" : 206,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 148,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 76
          }
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 148,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 151,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 75
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 149,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 73
            }
          },
          "go-type" : 150,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22, 76 ],
      "line-end" : 206,
      "code" : "tmp, err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 73, 75 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 207,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 207,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 75 ],
      "successors" : [ 570 ],
      "in-vars" : [ 75, 76 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 209,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 148,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 151,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 75
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 148,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 76
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 209,
      "code" : "at[0] += tmp",
      "entry" : false,
      "use-vars" : [ 76, 75 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 181 ],
      "in-vars" : [ 41, 21, 75, 71 ],
      "exit" : false,
      "out-vars" : [ 75, 71 ],
      "decl-vars" : [ ],
      "line-start" : 210,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 146,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 71
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 211,
      "code" : "case as && !incr && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 71, 41, 21 ]
    }, {
      "update-vars" : [ 75 ],
      "successors" : [ 570 ],
      "in-vars" : [ 75, 71 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 211,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 148,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 151,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 75
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 148,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 151,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 75
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 146,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 71
            }
          },
          "go-type" : 148,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 211,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 71, 75 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 183 ],
      "in-vars" : [ 21, 75, 73, 71, 41 ],
      "exit" : false,
      "out-vars" : [ 75, 73 ],
      "decl-vars" : [ ],
      "line-start" : 212,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 146,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 71
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 213,
      "code" : "case as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 71, 41, 21 ]
    }, {
      "update-vars" : [ 22, 75 ],
      "successors" : [ 570 ],
      "in-vars" : [ 75, 73 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 213,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 148,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 151,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 75
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 148,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 151,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 75
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 149,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 73
            }
          },
          "go-type" : 150,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 213,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 73, 75 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 185 ],
      "in-vars" : [ 41, 21, 75, 71 ],
      "exit" : false,
      "out-vars" : [ 75, 71 ],
      "decl-vars" : [ ],
      "line-start" : 214,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 146,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 71
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 215,
      "code" : "case !as && incr && f0 != nil:\n\tMapIncrI64(f0, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 71 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 75, 71 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 215,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 146,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 71
            }
          }, {
            "go-type" : 151,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 75
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 154,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 27,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrI64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 215,
      "code" : "MapIncrI64(f0, at)",
      "entry" : false,
      "use-vars" : [ 71, 75 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 187 ],
      "in-vars" : [ 41, 21, 75, 73, 71 ],
      "exit" : false,
      "out-vars" : [ 75, 73 ],
      "decl-vars" : [ ],
      "line-start" : 216,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 146,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 71
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 217,
      "code" : "case !as && incr && f0 == nil:\n\terr = MapIncrErrI64(f1, at)",
      "entry" : false,
      "use-vars" : [ 71, 41, 21 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 75, 73 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 217,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 149,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 73
            }
          }, {
            "go-type" : 151,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 75
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 156,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 28,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrErrI64"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 217,
      "code" : "err = MapIncrErrI64(f1, at)",
      "entry" : false,
      "use-vars" : [ 73, 75 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 189 ],
      "in-vars" : [ 41, 21, 75, 73, 71 ],
      "exit" : false,
      "out-vars" : [ 75, 73 ],
      "decl-vars" : [ ],
      "line-start" : 218,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 146,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 71
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 219,
      "code" : "case !as && !incr && f0 == nil:\n\terr = MapErrI64(f1, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 71 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 75, 73 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 219,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 149,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 73
            }
          }, {
            "go-type" : 151,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 75
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 156,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 29,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrI64"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 219,
      "code" : "err = MapErrI64(f1, at)",
      "entry" : false,
      "use-vars" : [ 73, 75 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 191 ],
      "in-vars" : [ 71, 75 ],
      "exit" : false,
      "out-vars" : [ 71, 75 ],
      "decl-vars" : [ ],
      "line-start" : 220,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 221,
      "code" : "default:\n\tMapI64(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 71, 75 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 221,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 146,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 71
            }
          }, {
            "go-type" : 151,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 75
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 154,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 30,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapI64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 221,
      "code" : "MapI64(f0, at)",
      "entry" : false,
      "use-vars" : [ 71, 75 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 193 ],
      "in-vars" : [ 41, 21, 19, 20, 34 ],
      "exit" : false,
      "out-vars" : [ 21, 19, 20, 41 ],
      "decl-vars" : [ ],
      "line-start" : 223,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint",
            "variable" : 34
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 258,
      "code" : "case Uint:\n\tvar f0 func(uint) uint\n\tvar f1 func(uint) (uint, error)\n\n\tswitch f := fn.(type) {\n\tcase func(uint) uint:\n\t\tf0 = f\n\tcase func(uint) (uint, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Uints()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp uint\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrU(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrU(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrU(f1, at)\n\tdefault:\n\t\tMapU(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 194 ],
      "in-vars" : [ 21, 19, 20, 41 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 77 ],
      "decl-vars" : [ 77 ],
      "line-start" : 224,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 158,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 40,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 40,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 40,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 40,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 224,
      "code" : "var f0 func(uint) uint",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 195 ],
      "in-vars" : [ 41, 21, 19, 20, 77 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 79, 77 ],
      "decl-vars" : [ 79 ],
      "line-start" : 225,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 160,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 40,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 40,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 40,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 40,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 225,
      "code" : "var f1 func(uint) (uint, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 196 ],
      "in-vars" : [ 41, 21, 19, 20, 79, 77 ],
      "exit" : false,
      "out-vars" : [ 20, 79, 77, 78, 80, 41, 21, 19 ],
      "decl-vars" : [ 78, 80, 153 ],
      "line-start" : 227,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 234,
      "code" : "switch f := fn.(type) {\ncase func(uint) uint:\n\tf0 = f\ncase func(uint) (uint, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 197, 199, 201 ],
      "in-vars" : [ 20, 79, 77, 78, 80, 41, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 79, 77, 78, 80 ],
      "decl-vars" : [ ],
      "line-start" : 227,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 227,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 198 ],
      "in-vars" : [ 79, 78, 41, 21, 20 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 79, 78 ],
      "decl-vars" : [ ],
      "line-start" : 228,
      "ast" : {
        "expressions" : [ {
          "go-type" : 158,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 40,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 40,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 40,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 40,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 229,
      "code" : "case func(uint) uint:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 77 ],
      "successors" : [ 203 ],
      "in-vars" : [ 79, 78, 41, 21, 20 ],
      "exit" : false,
      "out-vars" : [ 77, 41, 21, 20, 79 ],
      "decl-vars" : [ ],
      "line-start" : 229,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 158,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 77
          }
        } ],
        "right" : [ {
          "go-type" : 158,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 78
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 77 ],
      "line-end" : 229,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 78 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 200 ],
      "in-vars" : [ 41, 21, 20, 77, 80 ],
      "exit" : false,
      "out-vars" : [ 21, 20, 77, 80, 41 ],
      "decl-vars" : [ ],
      "line-start" : 230,
      "ast" : {
        "expressions" : [ {
          "go-type" : 160,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 40,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 40,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 40,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 40,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 231,
      "code" : "case func(uint) (uint, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 79 ],
      "successors" : [ 203 ],
      "in-vars" : [ 77, 80, 41, 21, 20 ],
      "exit" : false,
      "out-vars" : [ 21, 20, 79, 77, 41 ],
      "decl-vars" : [ ],
      "line-start" : 231,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 160,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 79
          }
        } ],
        "right" : [ {
          "go-type" : 160,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 80
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 79 ],
      "line-end" : 231,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 80 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 202 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 232,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 233,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 233,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 233,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 204 ],
      "in-vars" : [ 41, 21, 20, 79, 77 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 79, 81, 77 ],
      "decl-vars" : [ 81 ],
      "line-start" : 236,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 31,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uints"
            },
            "go-type" : 163,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 162,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 236,
      "code" : "at := a.Uints()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 205, 207, 213, 215, 217, 219, 221, 223 ],
      "in-vars" : [ 41, 21, 79, 81, 77 ],
      "exit" : false,
      "out-vars" : [ 77, 41, 21, 79, 81 ],
      "decl-vars" : [ ],
      "line-start" : 237,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 258,
      "code" : "switch {\ncase as && incr && f0 != nil:\n\tat[0] += f0(at[0])\ncase as && incr && f0 == nil:\n\tvar tmp uint\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp\ncase as && !incr && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && incr && f0 != nil:\n\tMapIncrU(f0, at)\ncase !as && incr && f0 == nil:\n\terr = MapIncrErrU(f1, at)\ncase !as && !incr && f0 == nil:\n\terr = MapErrU(f1, at)\ndefault:\n\tMapU(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 206 ],
      "in-vars" : [ 41, 21, 81, 77 ],
      "exit" : false,
      "out-vars" : [ 81, 77 ],
      "decl-vars" : [ ],
      "line-start" : 238,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 158,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 77
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 239,
      "code" : "case as && incr && f0 != nil:\n\tat[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 77 ]
    }, {
      "update-vars" : [ 81 ],
      "successors" : [ 570 ],
      "in-vars" : [ 81, 77 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 239,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 40,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 162,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 81
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 40,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 162,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 81
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 158,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 77
            }
          },
          "go-type" : 40,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 239,
      "code" : "at[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 77, 81 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 208 ],
      "in-vars" : [ 77, 41, 21, 79, 81 ],
      "exit" : false,
      "out-vars" : [ 81, 79 ],
      "decl-vars" : [ ],
      "line-start" : 240,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 158,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 77
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 245,
      "code" : "case as && incr && f0 == nil:\n\tvar tmp uint\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp",
      "entry" : false,
      "use-vars" : [ 41, 21, 77 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 210 ],
      "in-vars" : [ 81, 79 ],
      "exit" : false,
      "out-vars" : [ 79, 81 ],
      "decl-vars" : [ 82 ],
      "line-start" : 241,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 40,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 40,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "tmp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 241,
      "code" : "var tmp uint",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211, 212 ],
      "in-vars" : [ 82, 22, 81 ],
      "exit" : false,
      "out-vars" : [ 81, 82 ],
      "decl-vars" : [ ],
      "line-start" : 242,
      "ast" : {
        "condition" : {
          "go-type" : 106,
          "kind" : "expression",
          "left" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 22
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 244,
      "code" : "if tmp, err = f1(at[0]); err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ 22, 82 ],
      "successors" : [ 209 ],
      "in-vars" : [ 79, 81 ],
      "exit" : false,
      "out-vars" : [ 22, 81, 82 ],
      "decl-vars" : [ ],
      "line-start" : 242,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 40,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 82
          }
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 40,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 162,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 81
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 79
            }
          },
          "go-type" : 161,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22, 82 ],
      "line-end" : 242,
      "code" : "tmp, err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 81, 79 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 243,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 243,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 81 ],
      "successors" : [ 570 ],
      "in-vars" : [ 81, 82 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 245,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 40,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 162,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 81
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 40,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 82
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 245,
      "code" : "at[0] += tmp",
      "entry" : false,
      "use-vars" : [ 82, 81 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 214 ],
      "in-vars" : [ 81, 77, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 81, 77 ],
      "decl-vars" : [ ],
      "line-start" : 246,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 158,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 77
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 247,
      "code" : "case as && !incr && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 77, 41, 21 ]
    }, {
      "update-vars" : [ 81 ],
      "successors" : [ 570 ],
      "in-vars" : [ 81, 77 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 247,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 40,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 162,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 81
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 40,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 162,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 81
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 158,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 77
            }
          },
          "go-type" : 40,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 247,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 77, 81 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 216 ],
      "in-vars" : [ 77, 41, 21, 79, 81 ],
      "exit" : false,
      "out-vars" : [ 79, 81 ],
      "decl-vars" : [ ],
      "line-start" : 248,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 158,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 77
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 249,
      "code" : "case as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 77 ]
    }, {
      "update-vars" : [ 22, 81 ],
      "successors" : [ 570 ],
      "in-vars" : [ 79, 81 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 249,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 40,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 162,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 81
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 40,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 162,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 81
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 79
            }
          },
          "go-type" : 161,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 249,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 79, 81 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 218 ],
      "in-vars" : [ 41, 21, 81, 77 ],
      "exit" : false,
      "out-vars" : [ 77, 81 ],
      "decl-vars" : [ ],
      "line-start" : 250,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 158,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 77
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 251,
      "code" : "case !as && incr && f0 != nil:\n\tMapIncrU(f0, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 77 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 81, 77 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 251,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 158,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 77
            }
          }, {
            "go-type" : 162,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 81
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 32,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrU"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 251,
      "code" : "MapIncrU(f0, at)",
      "entry" : false,
      "use-vars" : [ 77, 81 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 220 ],
      "in-vars" : [ 77, 41, 21, 79, 81 ],
      "exit" : false,
      "out-vars" : [ 79, 81 ],
      "decl-vars" : [ ],
      "line-start" : 252,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 158,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 77
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 253,
      "code" : "case !as && incr && f0 == nil:\n\terr = MapIncrErrU(f1, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 77 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 79, 81 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 253,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 79
            }
          }, {
            "go-type" : 162,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 81
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 167,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 33,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrErrU"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 253,
      "code" : "err = MapIncrErrU(f1, at)",
      "entry" : false,
      "use-vars" : [ 79, 81 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 222 ],
      "in-vars" : [ 79, 81, 77, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 79, 81 ],
      "decl-vars" : [ ],
      "line-start" : 254,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 158,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 77
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 255,
      "code" : "case !as && !incr && f0 == nil:\n\terr = MapErrU(f1, at)",
      "entry" : false,
      "use-vars" : [ 77, 41, 21 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 79, 81 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 255,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 79
            }
          }, {
            "go-type" : 162,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 81
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 167,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 34,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrU"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 255,
      "code" : "err = MapErrU(f1, at)",
      "entry" : false,
      "use-vars" : [ 81, 79 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 224 ],
      "in-vars" : [ 81, 77 ],
      "exit" : false,
      "out-vars" : [ 81, 77 ],
      "decl-vars" : [ ],
      "line-start" : 256,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 257,
      "code" : "default:\n\tMapU(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 81, 77 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 257,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 158,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 77
            }
          }, {
            "go-type" : 162,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 81
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 35,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapU"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 257,
      "code" : "MapU(f0, at)",
      "entry" : false,
      "use-vars" : [ 77, 81 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 226 ],
      "in-vars" : [ 26, 41, 21, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20 ],
      "decl-vars" : [ ],
      "line-start" : 259,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint8",
            "variable" : 26
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 294,
      "code" : "case Uint8:\n\tvar f0 func(uint8) uint8\n\tvar f1 func(uint8) (uint8, error)\n\n\tswitch f := fn.(type) {\n\tcase func(uint8) uint8:\n\t\tf0 = f\n\tcase func(uint8) (uint8, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Uint8s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp uint8\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrU8(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrU8(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrU8(f1, at)\n\tdefault:\n\t\tMapU8(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 227 ],
      "in-vars" : [ 41, 21, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 83 ],
      "decl-vars" : [ 83 ],
      "line-start" : 260,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 169,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 52,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 52,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint8"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 52,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 52,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint8"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 260,
      "code" : "var f0 func(uint8) uint8",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 228 ],
      "in-vars" : [ 41, 21, 19, 20, 83 ],
      "exit" : false,
      "out-vars" : [ 20, 83, 85, 41, 21, 19 ],
      "decl-vars" : [ 85 ],
      "line-start" : 261,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 171,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 52,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 52,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint8"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 52,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 52,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint8"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 261,
      "code" : "var f1 func(uint8) (uint8, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 229 ],
      "in-vars" : [ 19, 20, 83, 85, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 86, 41, 21, 19, 20, 83, 85, 84 ],
      "decl-vars" : [ 84, 86, 154 ],
      "line-start" : 263,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 270,
      "code" : "switch f := fn.(type) {\ncase func(uint8) uint8:\n\tf0 = f\ncase func(uint8) (uint8, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 230, 232, 234 ],
      "in-vars" : [ 19, 20, 83, 85, 84, 86, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 84, 86, 41, 21, 19, 20, 83, 85 ],
      "decl-vars" : [ ],
      "line-start" : 263,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 263,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 231 ],
      "in-vars" : [ 41, 21, 20, 85, 84 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 85, 84 ],
      "decl-vars" : [ ],
      "line-start" : 264,
      "ast" : {
        "expressions" : [ {
          "go-type" : 169,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 52,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 52,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint8"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 52,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 52,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint8"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 265,
      "code" : "case func(uint8) uint8:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 83 ],
      "successors" : [ 236 ],
      "in-vars" : [ 41, 21, 20, 85, 84 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 83, 85 ],
      "decl-vars" : [ ],
      "line-start" : 265,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 169,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 83
          }
        } ],
        "right" : [ {
          "go-type" : 169,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 84
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 83 ],
      "line-end" : 265,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 84 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 233 ],
      "in-vars" : [ 41, 21, 20, 83, 86 ],
      "exit" : false,
      "out-vars" : [ 83, 86, 41, 21, 20 ],
      "decl-vars" : [ ],
      "line-start" : 266,
      "ast" : {
        "expressions" : [ {
          "go-type" : 171,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 52,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 52,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint8"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 52,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 52,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint8"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 267,
      "code" : "case func(uint8) (uint8, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 85 ],
      "successors" : [ 236 ],
      "in-vars" : [ 41, 21, 20, 83, 86 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 83, 85 ],
      "decl-vars" : [ ],
      "line-start" : 267,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 171,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 85
          }
        } ],
        "right" : [ {
          "go-type" : 171,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 86
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 85 ],
      "line-end" : 267,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 86 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 235 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 268,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 269,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 269,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 269,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 237 ],
      "in-vars" : [ 41, 21, 20, 83, 85 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 83, 87, 85 ],
      "decl-vars" : [ 87 ],
      "line-start" : 272,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 36,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint8s"
            },
            "go-type" : 174,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 173,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 272,
      "code" : "at := a.Uint8s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 238, 240, 246, 248, 250, 252, 254, 256 ],
      "in-vars" : [ 85, 41, 21, 83, 87 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 83, 87, 85 ],
      "decl-vars" : [ ],
      "line-start" : 273,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 294,
      "code" : "switch {\ncase as && incr && f0 != nil:\n\tat[0] += f0(at[0])\ncase as && incr && f0 == nil:\n\tvar tmp uint8\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp\ncase as && !incr && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && incr && f0 != nil:\n\tMapIncrU8(f0, at)\ncase !as && incr && f0 == nil:\n\terr = MapIncrErrU8(f1, at)\ncase !as && !incr && f0 == nil:\n\terr = MapErrU8(f1, at)\ndefault:\n\tMapU8(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 239 ],
      "in-vars" : [ 41, 21, 83, 87 ],
      "exit" : false,
      "out-vars" : [ 83, 87 ],
      "decl-vars" : [ ],
      "line-start" : 274,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 169,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 83
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 275,
      "code" : "case as && incr && f0 != nil:\n\tat[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 83 ]
    }, {
      "update-vars" : [ 87 ],
      "successors" : [ 570 ],
      "in-vars" : [ 83, 87 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 275,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 52,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 173,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 87
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 52,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 173,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 87
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 169,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 83
            }
          },
          "go-type" : 52,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 275,
      "code" : "at[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 87, 83 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 241 ],
      "in-vars" : [ 41, 21, 83, 87, 85 ],
      "exit" : false,
      "out-vars" : [ 87, 85 ],
      "decl-vars" : [ ],
      "line-start" : 276,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 169,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 83
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 281,
      "code" : "case as && incr && f0 == nil:\n\tvar tmp uint8\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp",
      "entry" : false,
      "use-vars" : [ 41, 21, 83 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 243 ],
      "in-vars" : [ 87, 85 ],
      "exit" : false,
      "out-vars" : [ 87, 85 ],
      "decl-vars" : [ 88 ],
      "line-start" : 277,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 52,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 52,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint8"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "tmp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 277,
      "code" : "var tmp uint8",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 244, 245 ],
      "in-vars" : [ 88, 22, 87 ],
      "exit" : false,
      "out-vars" : [ 87, 88 ],
      "decl-vars" : [ ],
      "line-start" : 278,
      "ast" : {
        "condition" : {
          "go-type" : 106,
          "kind" : "expression",
          "left" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 22
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 280,
      "code" : "if tmp, err = f1(at[0]); err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ 22, 88 ],
      "successors" : [ 242 ],
      "in-vars" : [ 87, 85 ],
      "exit" : false,
      "out-vars" : [ 87, 88, 22 ],
      "decl-vars" : [ ],
      "line-start" : 278,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 52,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 88
          }
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 52,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 173,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 87
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 171,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 85
            }
          },
          "go-type" : 172,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22, 88 ],
      "line-end" : 278,
      "code" : "tmp, err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 85, 87 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 279,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 279,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 87 ],
      "successors" : [ 570 ],
      "in-vars" : [ 87, 88 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 281,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 52,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 173,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 87
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 52,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 88
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 281,
      "code" : "at[0] += tmp",
      "entry" : false,
      "use-vars" : [ 88, 87 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 247 ],
      "in-vars" : [ 83, 87, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 83, 87 ],
      "decl-vars" : [ ],
      "line-start" : 282,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 169,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 83
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 283,
      "code" : "case as && !incr && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 21, 83, 41 ]
    }, {
      "update-vars" : [ 87 ],
      "successors" : [ 570 ],
      "in-vars" : [ 83, 87 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 283,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 52,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 173,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 87
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 52,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 173,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 87
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 169,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 83
            }
          },
          "go-type" : 52,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 283,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 87, 83 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 249 ],
      "in-vars" : [ 41, 21, 83, 87, 85 ],
      "exit" : false,
      "out-vars" : [ 87, 85 ],
      "decl-vars" : [ ],
      "line-start" : 284,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 169,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 83
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 285,
      "code" : "case as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 21, 83, 41 ]
    }, {
      "update-vars" : [ 22, 87 ],
      "successors" : [ 570 ],
      "in-vars" : [ 87, 85 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 285,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 52,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 173,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 87
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 52,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 173,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 87
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 171,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 85
            }
          },
          "go-type" : 172,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 285,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 85, 87 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 251 ],
      "in-vars" : [ 83, 87, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 83, 87 ],
      "decl-vars" : [ ],
      "line-start" : 286,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 169,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 83
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 287,
      "code" : "case !as && incr && f0 != nil:\n\tMapIncrU8(f0, at)",
      "entry" : false,
      "use-vars" : [ 83, 41, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 83, 87 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 287,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 169,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 83
            }
          }, {
            "go-type" : 173,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 87
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 176,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 37,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrU8"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 287,
      "code" : "MapIncrU8(f0, at)",
      "entry" : false,
      "use-vars" : [ 83, 87 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 253 ],
      "in-vars" : [ 87, 85, 41, 21, 83 ],
      "exit" : false,
      "out-vars" : [ 87, 85 ],
      "decl-vars" : [ ],
      "line-start" : 288,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 169,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 83
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 289,
      "code" : "case !as && incr && f0 == nil:\n\terr = MapIncrErrU8(f1, at)",
      "entry" : false,
      "use-vars" : [ 83, 41, 21 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 87, 85 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 289,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 171,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 85
            }
          }, {
            "go-type" : 173,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 87
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 178,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 38,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrErrU8"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 289,
      "code" : "err = MapIncrErrU8(f1, at)",
      "entry" : false,
      "use-vars" : [ 85, 87 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 255 ],
      "in-vars" : [ 41, 21, 83, 87, 85 ],
      "exit" : false,
      "out-vars" : [ 87, 85 ],
      "decl-vars" : [ ],
      "line-start" : 290,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 169,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 83
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 291,
      "code" : "case !as && !incr && f0 == nil:\n\terr = MapErrU8(f1, at)",
      "entry" : false,
      "use-vars" : [ 21, 83, 41 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 87, 85 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 291,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 171,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 85
            }
          }, {
            "go-type" : 173,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 87
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 178,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 39,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrU8"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 291,
      "code" : "err = MapErrU8(f1, at)",
      "entry" : false,
      "use-vars" : [ 85, 87 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 257 ],
      "in-vars" : [ 83, 87 ],
      "exit" : false,
      "out-vars" : [ 83, 87 ],
      "decl-vars" : [ ],
      "line-start" : 292,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 293,
      "code" : "default:\n\tMapU8(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 87, 83 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 293,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 169,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 83
            }
          }, {
            "go-type" : 173,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 87
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 176,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 40,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapU8"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 293,
      "code" : "MapU8(f0, at)",
      "entry" : false,
      "use-vars" : [ 83, 87 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 259 ],
      "in-vars" : [ 41, 21, 19, 20, 38 ],
      "exit" : false,
      "out-vars" : [ 21, 19, 20, 41 ],
      "decl-vars" : [ ],
      "line-start" : 295,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint16",
            "variable" : 38
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 330,
      "code" : "case Uint16:\n\tvar f0 func(uint16) uint16\n\tvar f1 func(uint16) (uint16, error)\n\n\tswitch f := fn.(type) {\n\tcase func(uint16) uint16:\n\t\tf0 = f\n\tcase func(uint16) (uint16, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Uint16s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp uint16\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrU16(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrU16(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrU16(f1, at)\n\tdefault:\n\t\tMapU16(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 260 ],
      "in-vars" : [ 20, 41, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 89, 41, 21 ],
      "decl-vars" : [ 89 ],
      "line-start" : 296,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 180,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 74,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 74,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint16"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 74,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 74,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint16"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 296,
      "code" : "var f0 func(uint16) uint16",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 261 ],
      "in-vars" : [ 19, 20, 89, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 89, 91 ],
      "decl-vars" : [ 91 ],
      "line-start" : 297,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 182,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 74,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 74,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint16"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 74,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 74,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint16"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 297,
      "code" : "var f1 func(uint16) (uint16, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 262 ],
      "in-vars" : [ 21, 19, 20, 89, 91, 41 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 89, 91, 92, 90, 41, 21 ],
      "decl-vars" : [ 90, 92, 155 ],
      "line-start" : 299,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 306,
      "code" : "switch f := fn.(type) {\ncase func(uint16) uint16:\n\tf0 = f\ncase func(uint16) (uint16, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 263, 265, 267 ],
      "in-vars" : [ 89, 91, 92, 90, 41, 21, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 90, 41, 21, 19, 20, 89, 91, 92 ],
      "decl-vars" : [ ],
      "line-start" : 299,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 299,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 264 ],
      "in-vars" : [ 41, 21, 20, 91, 90 ],
      "exit" : false,
      "out-vars" : [ 20, 91, 90, 41, 21 ],
      "decl-vars" : [ ],
      "line-start" : 300,
      "ast" : {
        "expressions" : [ {
          "go-type" : 180,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 74,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 74,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint16"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 74,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 74,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint16"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 301,
      "code" : "case func(uint16) uint16:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 89 ],
      "successors" : [ 269 ],
      "in-vars" : [ 91, 90, 41, 21, 20 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 89, 91 ],
      "decl-vars" : [ ],
      "line-start" : 301,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 180,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 89
          }
        } ],
        "right" : [ {
          "go-type" : 180,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 90
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 89 ],
      "line-end" : 301,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 90 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 266 ],
      "in-vars" : [ 41, 21, 20, 89, 92 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 89, 92 ],
      "decl-vars" : [ ],
      "line-start" : 302,
      "ast" : {
        "expressions" : [ {
          "go-type" : 182,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 74,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 74,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint16"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 74,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 74,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint16"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 303,
      "code" : "case func(uint16) (uint16, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 91 ],
      "successors" : [ 269 ],
      "in-vars" : [ 41, 21, 20, 89, 92 ],
      "exit" : false,
      "out-vars" : [ 20, 89, 91, 41, 21 ],
      "decl-vars" : [ ],
      "line-start" : 303,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 182,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 91
          }
        } ],
        "right" : [ {
          "go-type" : 182,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 92
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 91 ],
      "line-end" : 303,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 92 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 268 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 304,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 305,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 305,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 305,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 270 ],
      "in-vars" : [ 41, 21, 20, 89, 91 ],
      "exit" : false,
      "out-vars" : [ 93, 41, 21, 89, 91 ],
      "decl-vars" : [ 93 ],
      "line-start" : 308,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 41,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint16s"
            },
            "go-type" : 185,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 184,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 308,
      "code" : "at := a.Uint16s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 271, 273, 279, 281, 283, 285, 287, 289 ],
      "in-vars" : [ 41, 21, 89, 91, 93 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 89, 91, 93 ],
      "decl-vars" : [ ],
      "line-start" : 309,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 330,
      "code" : "switch {\ncase as && incr && f0 != nil:\n\tat[0] += f0(at[0])\ncase as && incr && f0 == nil:\n\tvar tmp uint16\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp\ncase as && !incr && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && incr && f0 != nil:\n\tMapIncrU16(f0, at)\ncase !as && incr && f0 == nil:\n\terr = MapIncrErrU16(f1, at)\ncase !as && !incr && f0 == nil:\n\terr = MapErrU16(f1, at)\ndefault:\n\tMapU16(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 272 ],
      "in-vars" : [ 21, 89, 93, 41 ],
      "exit" : false,
      "out-vars" : [ 89, 93 ],
      "decl-vars" : [ ],
      "line-start" : 310,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 180,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 89
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 311,
      "code" : "case as && incr && f0 != nil:\n\tat[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 89 ]
    }, {
      "update-vars" : [ 93 ],
      "successors" : [ 570 ],
      "in-vars" : [ 93, 89 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 311,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 74,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 184,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 93
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 74,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 184,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 93
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 180,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 89
            }
          },
          "go-type" : 74,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 311,
      "code" : "at[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 93, 89 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 274 ],
      "in-vars" : [ 41, 21, 89, 91, 93 ],
      "exit" : false,
      "out-vars" : [ 91, 93 ],
      "decl-vars" : [ ],
      "line-start" : 312,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 180,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 89
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 317,
      "code" : "case as && incr && f0 == nil:\n\tvar tmp uint16\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp",
      "entry" : false,
      "use-vars" : [ 41, 21, 89 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 276 ],
      "in-vars" : [ 91, 93 ],
      "exit" : false,
      "out-vars" : [ 91, 93 ],
      "decl-vars" : [ 94 ],
      "line-start" : 313,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 74,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 74,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint16"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "tmp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 313,
      "code" : "var tmp uint16",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 277, 278 ],
      "in-vars" : [ 93, 94, 22 ],
      "exit" : false,
      "out-vars" : [ 93, 94 ],
      "decl-vars" : [ ],
      "line-start" : 314,
      "ast" : {
        "condition" : {
          "go-type" : 106,
          "kind" : "expression",
          "left" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 22
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 316,
      "code" : "if tmp, err = f1(at[0]); err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ 94, 22 ],
      "successors" : [ 275 ],
      "in-vars" : [ 91, 93 ],
      "exit" : false,
      "out-vars" : [ 22, 93, 94 ],
      "decl-vars" : [ ],
      "line-start" : 314,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 74,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 94
          }
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 74,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 184,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 93
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 182,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 91
            }
          },
          "go-type" : 183,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22, 94 ],
      "line-end" : 314,
      "code" : "tmp, err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 91, 93 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 315,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 315,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 93 ],
      "successors" : [ 570 ],
      "in-vars" : [ 93, 94 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 317,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 74,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 184,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 93
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 74,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 94
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 317,
      "code" : "at[0] += tmp",
      "entry" : false,
      "use-vars" : [ 94, 93 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 280 ],
      "in-vars" : [ 41, 21, 89, 93 ],
      "exit" : false,
      "out-vars" : [ 93, 89 ],
      "decl-vars" : [ ],
      "line-start" : 318,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 180,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 89
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 319,
      "code" : "case as && !incr && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 21, 89, 41 ]
    }, {
      "update-vars" : [ 93 ],
      "successors" : [ 570 ],
      "in-vars" : [ 89, 93 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 319,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 74,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 184,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 93
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 74,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 184,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 93
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 180,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 89
            }
          },
          "go-type" : 74,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 319,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 89, 93 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 282 ],
      "in-vars" : [ 41, 21, 89, 91, 93 ],
      "exit" : false,
      "out-vars" : [ 91, 93 ],
      "decl-vars" : [ ],
      "line-start" : 320,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 180,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 89
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 321,
      "code" : "case as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 89 ]
    }, {
      "update-vars" : [ 22, 93 ],
      "successors" : [ 570 ],
      "in-vars" : [ 91, 93 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 321,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 74,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 184,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 93
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 74,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 184,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 93
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 182,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 91
            }
          },
          "go-type" : 183,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 321,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 93, 91 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 284 ],
      "in-vars" : [ 41, 21, 89, 93 ],
      "exit" : false,
      "out-vars" : [ 89, 93 ],
      "decl-vars" : [ ],
      "line-start" : 322,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 180,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 89
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 323,
      "code" : "case !as && incr && f0 != nil:\n\tMapIncrU16(f0, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 89 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 89, 93 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 323,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 180,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 89
            }
          }, {
            "go-type" : 184,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 93
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 187,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 42,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrU16"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 323,
      "code" : "MapIncrU16(f0, at)",
      "entry" : false,
      "use-vars" : [ 89, 93 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 286 ],
      "in-vars" : [ 89, 91, 93, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 91, 93 ],
      "decl-vars" : [ ],
      "line-start" : 324,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 180,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 89
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 325,
      "code" : "case !as && incr && f0 == nil:\n\terr = MapIncrErrU16(f1, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 89 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 91, 93 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 325,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 182,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 91
            }
          }, {
            "go-type" : 184,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 93
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 189,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 43,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrErrU16"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 325,
      "code" : "err = MapIncrErrU16(f1, at)",
      "entry" : false,
      "use-vars" : [ 91, 93 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 288 ],
      "in-vars" : [ 21, 89, 91, 93, 41 ],
      "exit" : false,
      "out-vars" : [ 91, 93 ],
      "decl-vars" : [ ],
      "line-start" : 326,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 180,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 89
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 327,
      "code" : "case !as && !incr && f0 == nil:\n\terr = MapErrU16(f1, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 89 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 91, 93 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 327,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 182,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 91
            }
          }, {
            "go-type" : 184,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 93
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 189,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 44,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrU16"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 327,
      "code" : "err = MapErrU16(f1, at)",
      "entry" : false,
      "use-vars" : [ 91, 93 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 290 ],
      "in-vars" : [ 93, 89 ],
      "exit" : false,
      "out-vars" : [ 93, 89 ],
      "decl-vars" : [ ],
      "line-start" : 328,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 329,
      "code" : "default:\n\tMapU16(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 89, 93 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 329,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 180,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 89
            }
          }, {
            "go-type" : 184,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 93
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 187,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 45,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapU16"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 329,
      "code" : "MapU16(f0, at)",
      "entry" : false,
      "use-vars" : [ 93, 89 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 292 ],
      "in-vars" : [ 21, 19, 20, 33, 41 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20 ],
      "decl-vars" : [ ],
      "line-start" : 331,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint32",
            "variable" : 33
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 366,
      "code" : "case Uint32:\n\tvar f0 func(uint32) uint32\n\tvar f1 func(uint32) (uint32, error)\n\n\tswitch f := fn.(type) {\n\tcase func(uint32) uint32:\n\t\tf0 = f\n\tcase func(uint32) (uint32, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Uint32s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp uint32\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrU32(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrU32(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrU32(f1, at)\n\tdefault:\n\t\tMapU32(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 293 ],
      "in-vars" : [ 41, 21, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 95 ],
      "decl-vars" : [ 95 ],
      "line-start" : 332,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 191,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 50,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 50,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 50,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 50,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 332,
      "code" : "var f0 func(uint32) uint32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 294 ],
      "in-vars" : [ 41, 21, 19, 20, 95 ],
      "exit" : false,
      "out-vars" : [ 21, 19, 20, 97, 95, 41 ],
      "decl-vars" : [ 97 ],
      "line-start" : 333,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 193,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 50,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 50,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 50,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 50,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 333,
      "code" : "var f1 func(uint32) (uint32, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 295 ],
      "in-vars" : [ 21, 19, 20, 97, 95, 41 ],
      "exit" : false,
      "out-vars" : [ 96, 98, 41, 21, 19, 20, 97, 95 ],
      "decl-vars" : [ 96, 98, 156 ],
      "line-start" : 335,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 342,
      "code" : "switch f := fn.(type) {\ncase func(uint32) uint32:\n\tf0 = f\ncase func(uint32) (uint32, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 296, 298, 300 ],
      "in-vars" : [ 21, 19, 20, 97, 95, 96, 98, 41 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 97, 95, 96, 98, 41, 21 ],
      "decl-vars" : [ ],
      "line-start" : 335,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 335,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 297 ],
      "in-vars" : [ 41, 21, 20, 97, 96 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 97, 96 ],
      "decl-vars" : [ ],
      "line-start" : 336,
      "ast" : {
        "expressions" : [ {
          "go-type" : 191,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 50,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 50,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 50,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 50,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 337,
      "code" : "case func(uint32) uint32:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 95 ],
      "successors" : [ 302 ],
      "in-vars" : [ 41, 21, 20, 97, 96 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 97, 95 ],
      "decl-vars" : [ ],
      "line-start" : 337,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 191,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 95
          }
        } ],
        "right" : [ {
          "go-type" : 191,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 96
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 95 ],
      "line-end" : 337,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 96 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 299 ],
      "in-vars" : [ 20, 95, 98, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 95, 98 ],
      "decl-vars" : [ ],
      "line-start" : 338,
      "ast" : {
        "expressions" : [ {
          "go-type" : 193,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 50,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 50,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 50,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 50,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 339,
      "code" : "case func(uint32) (uint32, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 97 ],
      "successors" : [ 302 ],
      "in-vars" : [ 41, 21, 20, 95, 98 ],
      "exit" : false,
      "out-vars" : [ 95, 41, 21, 20, 97 ],
      "decl-vars" : [ ],
      "line-start" : 339,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 193,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 97
          }
        } ],
        "right" : [ {
          "go-type" : 193,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 98
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 97 ],
      "line-end" : 339,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 98 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 301 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 340,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 341,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 341,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 341,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 303 ],
      "in-vars" : [ 95, 41, 21, 20, 97 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 97, 99, 95 ],
      "decl-vars" : [ 99 ],
      "line-start" : 344,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 46,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint32s"
            },
            "go-type" : 196,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 195,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 344,
      "code" : "at := a.Uint32s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 304, 306, 312, 314, 316, 318, 320, 322 ],
      "in-vars" : [ 41, 21, 97, 99, 95 ],
      "exit" : false,
      "out-vars" : [ 95, 41, 21, 97, 99 ],
      "decl-vars" : [ ],
      "line-start" : 345,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 366,
      "code" : "switch {\ncase as && incr && f0 != nil:\n\tat[0] += f0(at[0])\ncase as && incr && f0 == nil:\n\tvar tmp uint32\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp\ncase as && !incr && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && incr && f0 != nil:\n\tMapIncrU32(f0, at)\ncase !as && incr && f0 == nil:\n\terr = MapIncrErrU32(f1, at)\ncase !as && !incr && f0 == nil:\n\terr = MapErrU32(f1, at)\ndefault:\n\tMapU32(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 305 ],
      "in-vars" : [ 41, 21, 99, 95 ],
      "exit" : false,
      "out-vars" : [ 99, 95 ],
      "decl-vars" : [ ],
      "line-start" : 346,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 191,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 95
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 347,
      "code" : "case as && incr && f0 != nil:\n\tat[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 95 ]
    }, {
      "update-vars" : [ 99 ],
      "successors" : [ 570 ],
      "in-vars" : [ 99, 95 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 347,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 50,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 195,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 99
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 50,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 195,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 99
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 191,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 95
            }
          },
          "go-type" : 50,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 347,
      "code" : "at[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 95, 99 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 307 ],
      "in-vars" : [ 97, 99, 95, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 97, 99 ],
      "decl-vars" : [ ],
      "line-start" : 348,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 191,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 95
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 353,
      "code" : "case as && incr && f0 == nil:\n\tvar tmp uint32\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp",
      "entry" : false,
      "use-vars" : [ 41, 21, 95 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 309 ],
      "in-vars" : [ 97, 99 ],
      "exit" : false,
      "out-vars" : [ 97, 99 ],
      "decl-vars" : [ 100 ],
      "line-start" : 349,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 50,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 50,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "tmp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 349,
      "code" : "var tmp uint32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 310, 311 ],
      "in-vars" : [ 22, 100, 99 ],
      "exit" : false,
      "out-vars" : [ 100, 99 ],
      "decl-vars" : [ ],
      "line-start" : 350,
      "ast" : {
        "condition" : {
          "go-type" : 106,
          "kind" : "expression",
          "left" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 22
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 352,
      "code" : "if tmp, err = f1(at[0]); err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ 100, 22 ],
      "successors" : [ 308 ],
      "in-vars" : [ 97, 99 ],
      "exit" : false,
      "out-vars" : [ 22, 100, 99 ],
      "decl-vars" : [ ],
      "line-start" : 350,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 50,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 100
          }
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 50,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 195,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 99
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 193,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 97
            }
          },
          "go-type" : 194,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22, 100 ],
      "line-end" : 350,
      "code" : "tmp, err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 99, 97 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 351,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 351,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 99 ],
      "successors" : [ 570 ],
      "in-vars" : [ 99, 100 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 353,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 50,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 195,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 99
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 50,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 100
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 353,
      "code" : "at[0] += tmp",
      "entry" : false,
      "use-vars" : [ 100, 99 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 313 ],
      "in-vars" : [ 99, 95, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 99, 95 ],
      "decl-vars" : [ ],
      "line-start" : 354,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 191,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 95
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 355,
      "code" : "case as && !incr && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 95, 41, 21 ]
    }, {
      "update-vars" : [ 99 ],
      "successors" : [ 570 ],
      "in-vars" : [ 95, 99 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 355,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 50,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 195,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 99
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 50,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 195,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 99
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 191,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 95
            }
          },
          "go-type" : 50,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 355,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 99, 95 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 315 ],
      "in-vars" : [ 97, 99, 95, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 97, 99 ],
      "decl-vars" : [ ],
      "line-start" : 356,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 191,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 95
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 357,
      "code" : "case as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 21, 95, 41 ]
    }, {
      "update-vars" : [ 22, 99 ],
      "successors" : [ 570 ],
      "in-vars" : [ 97, 99 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 357,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 50,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 195,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 99
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 50,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 195,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 99
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 193,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 97
            }
          },
          "go-type" : 194,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 357,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 99, 97 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 317 ],
      "in-vars" : [ 95, 41, 21, 99 ],
      "exit" : false,
      "out-vars" : [ 99, 95 ],
      "decl-vars" : [ ],
      "line-start" : 358,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 191,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 95
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 359,
      "code" : "case !as && incr && f0 != nil:\n\tMapIncrU32(f0, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 95 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 99, 95 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 359,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 191,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 95
            }
          }, {
            "go-type" : 195,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 99
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 47,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrU32"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 359,
      "code" : "MapIncrU32(f0, at)",
      "entry" : false,
      "use-vars" : [ 99, 95 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 319 ],
      "in-vars" : [ 41, 21, 97, 99, 95 ],
      "exit" : false,
      "out-vars" : [ 97, 99 ],
      "decl-vars" : [ ],
      "line-start" : 360,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 191,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 95
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 361,
      "code" : "case !as && incr && f0 == nil:\n\terr = MapIncrErrU32(f1, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 95 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 97, 99 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 361,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 193,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 97
            }
          }, {
            "go-type" : 195,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 99
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 200,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 48,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrErrU32"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 361,
      "code" : "err = MapIncrErrU32(f1, at)",
      "entry" : false,
      "use-vars" : [ 97, 99 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 321 ],
      "in-vars" : [ 41, 21, 97, 99, 95 ],
      "exit" : false,
      "out-vars" : [ 97, 99 ],
      "decl-vars" : [ ],
      "line-start" : 362,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 191,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 95
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 363,
      "code" : "case !as && !incr && f0 == nil:\n\terr = MapErrU32(f1, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 95 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 97, 99 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 363,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 193,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 97
            }
          }, {
            "go-type" : 195,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 99
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 200,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 49,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrU32"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 363,
      "code" : "err = MapErrU32(f1, at)",
      "entry" : false,
      "use-vars" : [ 97, 99 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 323 ],
      "in-vars" : [ 99, 95 ],
      "exit" : false,
      "out-vars" : [ 99, 95 ],
      "decl-vars" : [ ],
      "line-start" : 364,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 365,
      "code" : "default:\n\tMapU32(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 95, 99 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 365,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 191,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 95
            }
          }, {
            "go-type" : 195,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 99
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 50,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapU32"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 365,
      "code" : "MapU32(f0, at)",
      "entry" : false,
      "use-vars" : [ 99, 95 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 325 ],
      "in-vars" : [ 19, 20, 41, 21, 25 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20 ],
      "decl-vars" : [ ],
      "line-start" : 367,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint64",
            "variable" : 25
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 402,
      "code" : "case Uint64:\n\tvar f0 func(uint64) uint64\n\tvar f1 func(uint64) (uint64, error)\n\n\tswitch f := fn.(type) {\n\tcase func(uint64) uint64:\n\t\tf0 = f\n\tcase func(uint64) (uint64, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Uint64s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp uint64\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrU64(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrU64(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrU64(f1, at)\n\tdefault:\n\t\tMapU64(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 326 ],
      "in-vars" : [ 20, 41, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 101, 41, 21 ],
      "decl-vars" : [ 101 ],
      "line-start" : 368,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 202,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 204,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 204,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 204,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 204,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 368,
      "code" : "var f0 func(uint64) uint64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 327 ],
      "in-vars" : [ 41, 21, 19, 20, 101 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 101, 103 ],
      "decl-vars" : [ 103 ],
      "line-start" : 369,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 205,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 204,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 204,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 204,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 204,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 369,
      "code" : "var f1 func(uint64) (uint64, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 328 ],
      "in-vars" : [ 103, 41, 21, 19, 20, 101 ],
      "exit" : false,
      "out-vars" : [ 20, 101, 102, 104, 103, 41, 21, 19 ],
      "decl-vars" : [ 102, 104, 157 ],
      "line-start" : 371,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 378,
      "code" : "switch f := fn.(type) {\ncase func(uint64) uint64:\n\tf0 = f\ncase func(uint64) (uint64, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 329, 331, 333 ],
      "in-vars" : [ 19, 20, 101, 102, 104, 103, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 21, 19, 20, 101, 102, 104, 103, 41 ],
      "decl-vars" : [ ],
      "line-start" : 371,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 371,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 330 ],
      "in-vars" : [ 20, 102, 103, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 102, 103 ],
      "decl-vars" : [ ],
      "line-start" : 372,
      "ast" : {
        "expressions" : [ {
          "go-type" : 202,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 204,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 204,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 204,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 204,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 373,
      "code" : "case func(uint64) uint64:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 101 ],
      "successors" : [ 335 ],
      "in-vars" : [ 102, 103, 41, 21, 20 ],
      "exit" : false,
      "out-vars" : [ 101, 103, 41, 21, 20 ],
      "decl-vars" : [ ],
      "line-start" : 373,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 202,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 101
          }
        } ],
        "right" : [ {
          "go-type" : 202,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 102
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 101 ],
      "line-end" : 373,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 102 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 332 ],
      "in-vars" : [ 41, 21, 20, 101, 104 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 101, 104 ],
      "decl-vars" : [ ],
      "line-start" : 374,
      "ast" : {
        "expressions" : [ {
          "go-type" : 205,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 204,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 204,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 204,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 204,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 375,
      "code" : "case func(uint64) (uint64, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 103 ],
      "successors" : [ 335 ],
      "in-vars" : [ 41, 21, 20, 101, 104 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 101, 103 ],
      "decl-vars" : [ ],
      "line-start" : 375,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 205,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 103
          }
        } ],
        "right" : [ {
          "go-type" : 205,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 104
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 103 ],
      "line-end" : 375,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 104 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 334 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 376,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 377,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 377,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 377,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 336 ],
      "in-vars" : [ 41, 21, 20, 101, 103 ],
      "exit" : false,
      "out-vars" : [ 105, 103, 41, 21, 101 ],
      "decl-vars" : [ 105 ],
      "line-start" : 380,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 51,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint64s"
            },
            "go-type" : 208,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 207,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 380,
      "code" : "at := a.Uint64s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 337, 339, 345, 347, 349, 351, 353, 355 ],
      "in-vars" : [ 41, 21, 101, 105, 103 ],
      "exit" : false,
      "out-vars" : [ 105, 103, 41, 21, 101 ],
      "decl-vars" : [ ],
      "line-start" : 381,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 402,
      "code" : "switch {\ncase as && incr && f0 != nil:\n\tat[0] += f0(at[0])\ncase as && incr && f0 == nil:\n\tvar tmp uint64\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp\ncase as && !incr && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && incr && f0 != nil:\n\tMapIncrU64(f0, at)\ncase !as && incr && f0 == nil:\n\terr = MapIncrErrU64(f1, at)\ncase !as && !incr && f0 == nil:\n\terr = MapErrU64(f1, at)\ndefault:\n\tMapU64(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 338 ],
      "in-vars" : [ 41, 21, 101, 105 ],
      "exit" : false,
      "out-vars" : [ 101, 105 ],
      "decl-vars" : [ ],
      "line-start" : 382,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 202,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 101
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 383,
      "code" : "case as && incr && f0 != nil:\n\tat[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 101 ]
    }, {
      "update-vars" : [ 105 ],
      "successors" : [ 570 ],
      "in-vars" : [ 105, 101 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 383,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 204,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 207,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 105
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 204,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 207,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 105
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 202,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 101
            }
          },
          "go-type" : 204,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 383,
      "code" : "at[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 105, 101 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 340 ],
      "in-vars" : [ 103, 41, 21, 101, 105 ],
      "exit" : false,
      "out-vars" : [ 103, 105 ],
      "decl-vars" : [ ],
      "line-start" : 384,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 202,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 101
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 389,
      "code" : "case as && incr && f0 == nil:\n\tvar tmp uint64\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp",
      "entry" : false,
      "use-vars" : [ 21, 101, 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 342 ],
      "in-vars" : [ 105, 103 ],
      "exit" : false,
      "out-vars" : [ 105, 103 ],
      "decl-vars" : [ 106 ],
      "line-start" : 385,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 204,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 204,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint64"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "tmp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 385,
      "code" : "var tmp uint64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 343, 344 ],
      "in-vars" : [ 22, 105, 106 ],
      "exit" : false,
      "out-vars" : [ 105, 106 ],
      "decl-vars" : [ ],
      "line-start" : 386,
      "ast" : {
        "condition" : {
          "go-type" : 106,
          "kind" : "expression",
          "left" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 22
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 388,
      "code" : "if tmp, err = f1(at[0]); err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ 22, 106 ],
      "successors" : [ 341 ],
      "in-vars" : [ 105, 103 ],
      "exit" : false,
      "out-vars" : [ 105, 106, 22 ],
      "decl-vars" : [ ],
      "line-start" : 386,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 204,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 106
          }
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 204,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 207,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 105
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 205,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 103
            }
          },
          "go-type" : 206,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22, 106 ],
      "line-end" : 386,
      "code" : "tmp, err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 103, 105 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 387,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 387,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 105 ],
      "successors" : [ 570 ],
      "in-vars" : [ 105, 106 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 389,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 204,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 207,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 105
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 204,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 106
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 389,
      "code" : "at[0] += tmp",
      "entry" : false,
      "use-vars" : [ 106, 105 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 346 ],
      "in-vars" : [ 41, 21, 101, 105 ],
      "exit" : false,
      "out-vars" : [ 101, 105 ],
      "decl-vars" : [ ],
      "line-start" : 390,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 202,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 101
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 391,
      "code" : "case as && !incr && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 21, 101, 41 ]
    }, {
      "update-vars" : [ 105 ],
      "successors" : [ 570 ],
      "in-vars" : [ 101, 105 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 391,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 204,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 207,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 105
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 204,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 207,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 105
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 202,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 101
            }
          },
          "go-type" : 204,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 391,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 105, 101 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 348 ],
      "in-vars" : [ 105, 103, 41, 21, 101 ],
      "exit" : false,
      "out-vars" : [ 105, 103 ],
      "decl-vars" : [ ],
      "line-start" : 392,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 202,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 101
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 393,
      "code" : "case as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 101 ]
    }, {
      "update-vars" : [ 22, 105 ],
      "successors" : [ 570 ],
      "in-vars" : [ 105, 103 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 393,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 204,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 207,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 105
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 204,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 207,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 105
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 205,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 103
            }
          },
          "go-type" : 206,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 393,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 103, 105 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 350 ],
      "in-vars" : [ 21, 101, 105, 41 ],
      "exit" : false,
      "out-vars" : [ 101, 105 ],
      "decl-vars" : [ ],
      "line-start" : 394,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 202,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 101
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 395,
      "code" : "case !as && incr && f0 != nil:\n\tMapIncrU64(f0, at)",
      "entry" : false,
      "use-vars" : [ 101, 41, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 101, 105 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 395,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 202,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 101
            }
          }, {
            "go-type" : 207,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 105
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 210,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 52,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrU64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 395,
      "code" : "MapIncrU64(f0, at)",
      "entry" : false,
      "use-vars" : [ 101, 105 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 352 ],
      "in-vars" : [ 103, 41, 21, 101, 105 ],
      "exit" : false,
      "out-vars" : [ 105, 103 ],
      "decl-vars" : [ ],
      "line-start" : 396,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 202,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 101
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 397,
      "code" : "case !as && incr && f0 == nil:\n\terr = MapIncrErrU64(f1, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 101 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 105, 103 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 397,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 205,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 103
            }
          }, {
            "go-type" : 207,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 105
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 212,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 53,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrErrU64"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 397,
      "code" : "err = MapIncrErrU64(f1, at)",
      "entry" : false,
      "use-vars" : [ 103, 105 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 354 ],
      "in-vars" : [ 103, 41, 21, 101, 105 ],
      "exit" : false,
      "out-vars" : [ 105, 103 ],
      "decl-vars" : [ ],
      "line-start" : 398,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 202,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 101
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 399,
      "code" : "case !as && !incr && f0 == nil:\n\terr = MapErrU64(f1, at)",
      "entry" : false,
      "use-vars" : [ 101, 41, 21 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 105, 103 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 399,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 205,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 103
            }
          }, {
            "go-type" : 207,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 105
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 212,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 54,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrU64"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 399,
      "code" : "err = MapErrU64(f1, at)",
      "entry" : false,
      "use-vars" : [ 103, 105 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 356 ],
      "in-vars" : [ 101, 105 ],
      "exit" : false,
      "out-vars" : [ 101, 105 ],
      "decl-vars" : [ ],
      "line-start" : 400,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 401,
      "code" : "default:\n\tMapU64(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 101, 105 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 401,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 202,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 101
            }
          }, {
            "go-type" : 207,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 105
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 210,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 55,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapU64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 401,
      "code" : "MapU64(f0, at)",
      "entry" : false,
      "use-vars" : [ 101, 105 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 358 ],
      "in-vars" : [ 41, 21, 19, 20, 18, 39 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 18, 41, 21 ],
      "decl-vars" : [ ],
      "line-start" : 403,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uintptr",
            "variable" : 39
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 429,
      "code" : "case Uintptr:\n\tvar f0 func(uintptr) uintptr\n\tvar f1 func(uintptr) (uintptr, error)\n\n\tswitch f := fn.(type) {\n\tcase func(uintptr) uintptr:\n\t\tf0 = f\n\tcase func(uintptr) (uintptr, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Uintptrs()\n\tif incr {\n\t\treturn errors.Errorf(\"Cannot perform increment on t of %v\", t)\n\t}\n\tswitch {\n\tcase as && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && f0 == nil:\n\t\terr = MapErrUintptr(f1, at)\n\tdefault:\n\t\tMapUintptr(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 359 ],
      "in-vars" : [ 41, 21, 19, 20, 18 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 18, 107 ],
      "decl-vars" : [ 107 ],
      "line-start" : 404,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 214,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 25,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 25,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 25,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 25,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 404,
      "code" : "var f0 func(uintptr) uintptr",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 360 ],
      "in-vars" : [ 41, 21, 19, 20, 18, 107 ],
      "exit" : false,
      "out-vars" : [ 107, 41, 21, 19, 20, 18, 109 ],
      "decl-vars" : [ 109 ],
      "line-start" : 405,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 215,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 25,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 25,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 25,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 25,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 405,
      "code" : "var f1 func(uintptr) (uintptr, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 361 ],
      "in-vars" : [ 19, 20, 18, 109, 107, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 110, 19, 20, 18, 109, 108, 41, 21, 107 ],
      "decl-vars" : [ 158, 108, 110 ],
      "line-start" : 407,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 414,
      "code" : "switch f := fn.(type) {\ncase func(uintptr) uintptr:\n\tf0 = f\ncase func(uintptr) (uintptr, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 362, 364, 366 ],
      "in-vars" : [ 41, 18, 107, 108, 110, 21, 19, 20, 109 ],
      "exit" : false,
      "out-vars" : [ 18, 107, 108, 41, 19, 20, 109, 110, 21 ],
      "decl-vars" : [ ],
      "line-start" : 407,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 407,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 363 ],
      "in-vars" : [ 20, 18, 109, 108, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 18, 109, 108 ],
      "decl-vars" : [ ],
      "line-start" : 408,
      "ast" : {
        "expressions" : [ {
          "go-type" : 214,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 25,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 25,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 409,
      "code" : "case func(uintptr) uintptr:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 107 ],
      "successors" : [ 368 ],
      "in-vars" : [ 109, 108, 41, 21, 20, 18 ],
      "exit" : false,
      "out-vars" : [ 18, 109, 107, 41, 21, 20 ],
      "decl-vars" : [ ],
      "line-start" : 409,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 214,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 107
          }
        } ],
        "right" : [ {
          "go-type" : 214,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 108
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 107 ],
      "line-end" : 409,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 108 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 365 ],
      "in-vars" : [ 18, 107, 110, 41, 21, 20 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 18, 107, 110 ],
      "decl-vars" : [ ],
      "line-start" : 410,
      "ast" : {
        "expressions" : [ {
          "go-type" : 215,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 25,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 25,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 411,
      "code" : "case func(uintptr) (uintptr, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 109 ],
      "successors" : [ 368 ],
      "in-vars" : [ 20, 18, 107, 110, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 18, 109, 107, 41, 21, 20 ],
      "decl-vars" : [ ],
      "line-start" : 411,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 215,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 109
          }
        } ],
        "right" : [ {
          "go-type" : 215,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 110
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 109 ],
      "line-end" : 411,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 110 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 367 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 412,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 413,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 413,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 413,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 369 ],
      "in-vars" : [ 41, 21, 20, 18, 109, 107 ],
      "exit" : false,
      "out-vars" : [ 21, 18, 109, 107, 111, 41 ],
      "decl-vars" : [ 111 ],
      "line-start" : 416,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 56,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uintptrs"
            },
            "go-type" : 218,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 217,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 416,
      "code" : "at := a.Uintptrs()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 370, 371 ],
      "in-vars" : [ 111, 41, 21, 18, 109, 107 ],
      "exit" : false,
      "out-vars" : [ 107, 111, 41, 18, 109 ],
      "decl-vars" : [ ],
      "line-start" : 417,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "incr",
            "variable" : 21
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 419,
      "code" : "if incr {\n\treturn errors.Errorf(\"Cannot perform increment on t of %v\", t)\n}",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 18 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 418,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot perform increment on t of %v"
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 18
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 418,
      "code" : "return errors.Errorf(\"Cannot perform increment on t of %v\", t)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 372, 374, 376, 378 ],
      "in-vars" : [ 41, 109, 107, 111 ],
      "exit" : false,
      "out-vars" : [ 41, 109, 107, 111 ],
      "decl-vars" : [ ],
      "line-start" : 420,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 429,
      "code" : "switch {\ncase as && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && f0 == nil:\n\terr = MapErrUintptr(f1, at)\ndefault:\n\tMapUintptr(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 373 ],
      "in-vars" : [ 41, 107, 111 ],
      "exit" : false,
      "out-vars" : [ 107, 111 ],
      "decl-vars" : [ ],
      "line-start" : 421,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "as",
              "variable" : 41
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 214,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 107
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 422,
      "code" : "case as && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 107, 41 ]
    }, {
      "update-vars" : [ 111 ],
      "successors" : [ 570 ],
      "in-vars" : [ 107, 111 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 422,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 25,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 217,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 111
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 25,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 217,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 111
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 214,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 107
            }
          },
          "go-type" : 25,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 422,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 111, 107 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 375 ],
      "in-vars" : [ 107, 111, 41, 109 ],
      "exit" : false,
      "out-vars" : [ 109, 111 ],
      "decl-vars" : [ ],
      "line-start" : 423,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "as",
              "variable" : 41
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 214,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 107
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 424,
      "code" : "case as && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 107 ]
    }, {
      "update-vars" : [ 22, 111 ],
      "successors" : [ 570 ],
      "in-vars" : [ 111, 109 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 424,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 25,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 217,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 111
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 25,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 217,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 111
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 215,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 109
            }
          },
          "go-type" : 216,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 424,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 109, 111 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 377 ],
      "in-vars" : [ 41, 109, 107, 111 ],
      "exit" : false,
      "out-vars" : [ 109, 111 ],
      "decl-vars" : [ ],
      "line-start" : 425,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "type" : "unary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 214,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 107
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 426,
      "code" : "case !as && f0 == nil:\n\terr = MapErrUintptr(f1, at)",
      "entry" : false,
      "use-vars" : [ 107, 41 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 109, 111 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 426,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 215,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 109
            }
          }, {
            "go-type" : 217,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 111
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 220,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 57,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrUintptr"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 426,
      "code" : "err = MapErrUintptr(f1, at)",
      "entry" : false,
      "use-vars" : [ 111, 109 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 379 ],
      "in-vars" : [ 107, 111 ],
      "exit" : false,
      "out-vars" : [ 111, 107 ],
      "decl-vars" : [ ],
      "line-start" : 427,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 428,
      "code" : "default:\n\tMapUintptr(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 107, 111 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 428,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 214,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 107
            }
          }, {
            "go-type" : 217,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 111
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 222,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 58,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapUintptr"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 428,
      "code" : "MapUintptr(f0, at)",
      "entry" : false,
      "use-vars" : [ 107, 111 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 381 ],
      "in-vars" : [ 20, 27, 41, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20 ],
      "decl-vars" : [ ],
      "line-start" : 430,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Float32",
            "variable" : 27
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 465,
      "code" : "case Float32:\n\tvar f0 func(float32) float32\n\tvar f1 func(float32) (float32, error)\n\n\tswitch f := fn.(type) {\n\tcase func(float32) float32:\n\t\tf0 = f\n\tcase func(float32) (float32, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Float32s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp float32\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrF32(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrF32(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrF32(f1, at)\n\tdefault:\n\t\tMapF32(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 382 ],
      "in-vars" : [ 20, 41, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 112 ],
      "decl-vars" : [ 112 ],
      "line-start" : 431,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 224,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 226,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 226,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "float32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 226,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 226,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "float32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 431,
      "code" : "var f0 func(float32) float32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 383 ],
      "in-vars" : [ 41, 21, 19, 20, 112 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 112, 114, 41, 21 ],
      "decl-vars" : [ 114 ],
      "line-start" : 432,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 227,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 226,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 226,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "float32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 226,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 226,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "float32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 432,
      "code" : "var f1 func(float32) (float32, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 384 ],
      "in-vars" : [ 112, 114, 41, 21, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 21, 19, 20, 112, 114, 113, 115, 41 ],
      "decl-vars" : [ 113, 115, 159 ],
      "line-start" : 434,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 441,
      "code" : "switch f := fn.(type) {\ncase func(float32) float32:\n\tf0 = f\ncase func(float32) (float32, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 385, 387, 389 ],
      "in-vars" : [ 21, 19, 20, 112, 114, 113, 115, 41 ],
      "exit" : false,
      "out-vars" : [ 20, 112, 114, 113, 115, 41, 21, 19 ],
      "decl-vars" : [ ],
      "line-start" : 434,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 434,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 386 ],
      "in-vars" : [ 41, 21, 20, 114, 113 ],
      "exit" : false,
      "out-vars" : [ 113, 41, 21, 20, 114 ],
      "decl-vars" : [ ],
      "line-start" : 435,
      "ast" : {
        "expressions" : [ {
          "go-type" : 224,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 226,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 226,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 226,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 226,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 436,
      "code" : "case func(float32) float32:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 112 ],
      "successors" : [ 391 ],
      "in-vars" : [ 113, 41, 21, 20, 114 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 112, 114 ],
      "decl-vars" : [ ],
      "line-start" : 436,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 224,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 112
          }
        } ],
        "right" : [ {
          "go-type" : 224,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 113
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 112 ],
      "line-end" : 436,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 113 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 388 ],
      "in-vars" : [ 21, 20, 112, 115, 41 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 112, 115 ],
      "decl-vars" : [ ],
      "line-start" : 437,
      "ast" : {
        "expressions" : [ {
          "go-type" : 227,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 226,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 226,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 226,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 226,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 438,
      "code" : "case func(float32) (float32, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 114 ],
      "successors" : [ 391 ],
      "in-vars" : [ 41, 21, 20, 112, 115 ],
      "exit" : false,
      "out-vars" : [ 20, 112, 114, 41, 21 ],
      "decl-vars" : [ ],
      "line-start" : 438,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 227,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 114
          }
        } ],
        "right" : [ {
          "go-type" : 227,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 115
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 114 ],
      "line-end" : 438,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 115 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 390 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 439,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 440,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 440,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 440,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 392 ],
      "in-vars" : [ 41, 21, 20, 112, 114 ],
      "exit" : false,
      "out-vars" : [ 114, 41, 21, 112, 116 ],
      "decl-vars" : [ 116 ],
      "line-start" : 443,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 59,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Float32s"
            },
            "go-type" : 230,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 229,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 443,
      "code" : "at := a.Float32s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 393, 395, 401, 403, 405, 407, 409, 411 ],
      "in-vars" : [ 112, 116, 114, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 21, 112, 116, 114, 41 ],
      "decl-vars" : [ ],
      "line-start" : 444,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 465,
      "code" : "switch {\ncase as && incr && f0 != nil:\n\tat[0] += f0(at[0])\ncase as && incr && f0 == nil:\n\tvar tmp float32\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp\ncase as && !incr && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && incr && f0 != nil:\n\tMapIncrF32(f0, at)\ncase !as && incr && f0 == nil:\n\terr = MapIncrErrF32(f1, at)\ncase !as && !incr && f0 == nil:\n\terr = MapErrF32(f1, at)\ndefault:\n\tMapF32(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 394 ],
      "in-vars" : [ 41, 21, 112, 116 ],
      "exit" : false,
      "out-vars" : [ 112, 116 ],
      "decl-vars" : [ ],
      "line-start" : 445,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 224,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 112
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 446,
      "code" : "case as && incr && f0 != nil:\n\tat[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 112 ]
    }, {
      "update-vars" : [ 116 ],
      "successors" : [ 570 ],
      "in-vars" : [ 112, 116 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 446,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 226,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 229,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 116
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 226,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 229,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 116
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 224,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 112
            }
          },
          "go-type" : 226,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 446,
      "code" : "at[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 116, 112 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 396 ],
      "in-vars" : [ 116, 114, 41, 21, 112 ],
      "exit" : false,
      "out-vars" : [ 114, 116 ],
      "decl-vars" : [ ],
      "line-start" : 447,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 224,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 112
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 452,
      "code" : "case as && incr && f0 == nil:\n\tvar tmp float32\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp",
      "entry" : false,
      "use-vars" : [ 41, 21, 112 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 398 ],
      "in-vars" : [ 116, 114 ],
      "exit" : false,
      "out-vars" : [ 116, 114 ],
      "decl-vars" : [ 117 ],
      "line-start" : 448,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 226,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 226,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float32"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "tmp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 448,
      "code" : "var tmp float32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 399, 400 ],
      "in-vars" : [ 22, 116, 117 ],
      "exit" : false,
      "out-vars" : [ 116, 117 ],
      "decl-vars" : [ ],
      "line-start" : 449,
      "ast" : {
        "condition" : {
          "go-type" : 106,
          "kind" : "expression",
          "left" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 22
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 451,
      "code" : "if tmp, err = f1(at[0]); err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ 22, 117 ],
      "successors" : [ 397 ],
      "in-vars" : [ 116, 114 ],
      "exit" : false,
      "out-vars" : [ 22, 116, 117 ],
      "decl-vars" : [ ],
      "line-start" : 449,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 226,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 117
          }
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 226,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 229,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 116
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 227,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 114
            }
          },
          "go-type" : 228,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22, 117 ],
      "line-end" : 449,
      "code" : "tmp, err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 114, 116 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 450,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 450,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 116 ],
      "successors" : [ 570 ],
      "in-vars" : [ 116, 117 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 452,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 226,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 229,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 116
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 226,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 117
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 452,
      "code" : "at[0] += tmp",
      "entry" : false,
      "use-vars" : [ 117, 116 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 402 ],
      "in-vars" : [ 41, 21, 112, 116 ],
      "exit" : false,
      "out-vars" : [ 112, 116 ],
      "decl-vars" : [ ],
      "line-start" : 453,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 224,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 112
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 454,
      "code" : "case as && !incr && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 112 ]
    }, {
      "update-vars" : [ 116 ],
      "successors" : [ 570 ],
      "in-vars" : [ 112, 116 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 454,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 226,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 229,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 116
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 226,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 229,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 116
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 224,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 112
            }
          },
          "go-type" : 226,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 454,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 112, 116 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 404 ],
      "in-vars" : [ 41, 21, 112, 116, 114 ],
      "exit" : false,
      "out-vars" : [ 116, 114 ],
      "decl-vars" : [ ],
      "line-start" : 455,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 224,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 112
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 456,
      "code" : "case as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 112 ]
    }, {
      "update-vars" : [ 22, 116 ],
      "successors" : [ 570 ],
      "in-vars" : [ 116, 114 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 456,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 226,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 229,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 116
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 226,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 229,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 116
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 227,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 114
            }
          },
          "go-type" : 228,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 456,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 116, 114 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 406 ],
      "in-vars" : [ 41, 21, 112, 116 ],
      "exit" : false,
      "out-vars" : [ 112, 116 ],
      "decl-vars" : [ ],
      "line-start" : 457,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 224,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 112
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 458,
      "code" : "case !as && incr && f0 != nil:\n\tMapIncrF32(f0, at)",
      "entry" : false,
      "use-vars" : [ 21, 112, 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 112, 116 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 458,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 224,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 112
            }
          }, {
            "go-type" : 229,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 116
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 232,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 60,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrF32"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 458,
      "code" : "MapIncrF32(f0, at)",
      "entry" : false,
      "use-vars" : [ 112, 116 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 408 ],
      "in-vars" : [ 41, 21, 112, 116, 114 ],
      "exit" : false,
      "out-vars" : [ 116, 114 ],
      "decl-vars" : [ ],
      "line-start" : 459,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 224,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 112
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 460,
      "code" : "case !as && incr && f0 == nil:\n\terr = MapIncrErrF32(f1, at)",
      "entry" : false,
      "use-vars" : [ 112, 41, 21 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 116, 114 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 460,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 227,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 114
            }
          }, {
            "go-type" : 229,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 116
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 234,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 61,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrErrF32"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 460,
      "code" : "err = MapIncrErrF32(f1, at)",
      "entry" : false,
      "use-vars" : [ 114, 116 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 410 ],
      "in-vars" : [ 41, 21, 112, 116, 114 ],
      "exit" : false,
      "out-vars" : [ 116, 114 ],
      "decl-vars" : [ ],
      "line-start" : 461,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 224,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 112
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 462,
      "code" : "case !as && !incr && f0 == nil:\n\terr = MapErrF32(f1, at)",
      "entry" : false,
      "use-vars" : [ 21, 112, 41 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 116, 114 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 462,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 227,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 114
            }
          }, {
            "go-type" : 229,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 116
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 234,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 62,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrF32"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 462,
      "code" : "err = MapErrF32(f1, at)",
      "entry" : false,
      "use-vars" : [ 114, 116 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 412 ],
      "in-vars" : [ 112, 116 ],
      "exit" : false,
      "out-vars" : [ 112, 116 ],
      "decl-vars" : [ ],
      "line-start" : 463,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 464,
      "code" : "default:\n\tMapF32(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 112, 116 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 464,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 224,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 112
            }
          }, {
            "go-type" : 229,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 116
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 232,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 63,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapF32"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 464,
      "code" : "MapF32(f0, at)",
      "entry" : false,
      "use-vars" : [ 112, 116 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 414 ],
      "in-vars" : [ 41, 21, 19, 20, 30 ],
      "exit" : false,
      "out-vars" : [ 20, 41, 21, 19 ],
      "decl-vars" : [ ],
      "line-start" : 466,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Float64",
            "variable" : 30
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 501,
      "code" : "case Float64:\n\tvar f0 func(float64) float64\n\tvar f1 func(float64) (float64, error)\n\n\tswitch f := fn.(type) {\n\tcase func(float64) float64:\n\t\tf0 = f\n\tcase func(float64) (float64, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Float64s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp float64\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrF64(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrF64(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrF64(f1, at)\n\tdefault:\n\t\tMapF64(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 415 ],
      "in-vars" : [ 20, 41, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 118, 19, 20 ],
      "decl-vars" : [ 118 ],
      "line-start" : 467,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 236,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 238,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 238,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "float64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 238,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 238,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "float64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 467,
      "code" : "var f0 func(float64) float64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 416 ],
      "in-vars" : [ 41, 21, 118, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 120, 41, 21, 118 ],
      "decl-vars" : [ 120 ],
      "line-start" : 468,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 239,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 238,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 238,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "float64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 238,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 238,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "float64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 468,
      "code" : "var f1 func(float64) (float64, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 417 ],
      "in-vars" : [ 20, 120, 41, 21, 118, 19 ],
      "exit" : false,
      "out-vars" : [ 20, 120, 119, 121, 41, 21, 118, 19 ],
      "decl-vars" : [ 121, 160, 119 ],
      "line-start" : 470,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 477,
      "code" : "switch f := fn.(type) {\ncase func(float64) float64:\n\tf0 = f\ncase func(float64) (float64, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 418, 420, 422 ],
      "in-vars" : [ 118, 19, 20, 120, 119, 121, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 118, 19, 20, 120, 119, 121 ],
      "decl-vars" : [ ],
      "line-start" : 470,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 470,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 419 ],
      "in-vars" : [ 41, 21, 20, 120, 119 ],
      "exit" : false,
      "out-vars" : [ 119, 41, 21, 20, 120 ],
      "decl-vars" : [ ],
      "line-start" : 471,
      "ast" : {
        "expressions" : [ {
          "go-type" : 236,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 238,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 238,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 238,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 238,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 472,
      "code" : "case func(float64) float64:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 118 ],
      "successors" : [ 424 ],
      "in-vars" : [ 41, 21, 20, 120, 119 ],
      "exit" : false,
      "out-vars" : [ 118, 20, 120, 41, 21 ],
      "decl-vars" : [ ],
      "line-start" : 472,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 236,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 118
          }
        } ],
        "right" : [ {
          "go-type" : 236,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 119
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 118 ],
      "line-end" : 472,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 119 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 421 ],
      "in-vars" : [ 20, 121, 41, 21, 118 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 118, 20, 121 ],
      "decl-vars" : [ ],
      "line-start" : 473,
      "ast" : {
        "expressions" : [ {
          "go-type" : 239,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 238,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 238,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 238,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 238,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 474,
      "code" : "case func(float64) (float64, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 120 ],
      "successors" : [ 424 ],
      "in-vars" : [ 41, 21, 118, 20, 121 ],
      "exit" : false,
      "out-vars" : [ 21, 118, 20, 120, 41 ],
      "decl-vars" : [ ],
      "line-start" : 474,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 239,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 120
          }
        } ],
        "right" : [ {
          "go-type" : 239,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 121
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 120 ],
      "line-end" : 474,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 121 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 423 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 475,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 476,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 476,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 476,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 425 ],
      "in-vars" : [ 41, 21, 118, 20, 120 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 118, 122, 120 ],
      "decl-vars" : [ 122 ],
      "line-start" : 479,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 64,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Float64s"
            },
            "go-type" : 242,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 241,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 479,
      "code" : "at := a.Float64s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 426, 428, 434, 436, 438, 440, 442, 444 ],
      "in-vars" : [ 118, 122, 120, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 120, 41, 21, 118, 122 ],
      "decl-vars" : [ ],
      "line-start" : 480,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 501,
      "code" : "switch {\ncase as && incr && f0 != nil:\n\tat[0] += f0(at[0])\ncase as && incr && f0 == nil:\n\tvar tmp float64\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp\ncase as && !incr && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && incr && f0 != nil:\n\tMapIncrF64(f0, at)\ncase !as && incr && f0 == nil:\n\terr = MapIncrErrF64(f1, at)\ncase !as && !incr && f0 == nil:\n\terr = MapErrF64(f1, at)\ndefault:\n\tMapF64(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 427 ],
      "in-vars" : [ 41, 21, 118, 122 ],
      "exit" : false,
      "out-vars" : [ 118, 122 ],
      "decl-vars" : [ ],
      "line-start" : 481,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 236,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 118
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 482,
      "code" : "case as && incr && f0 != nil:\n\tat[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 21, 118, 41 ]
    }, {
      "update-vars" : [ 122 ],
      "successors" : [ 570 ],
      "in-vars" : [ 118, 122 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 482,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 238,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 241,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 122
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 238,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 241,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 122
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 236,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 118
            }
          },
          "go-type" : 238,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 482,
      "code" : "at[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 122, 118 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 429 ],
      "in-vars" : [ 41, 21, 118, 122, 120 ],
      "exit" : false,
      "out-vars" : [ 122, 120 ],
      "decl-vars" : [ ],
      "line-start" : 483,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 236,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 118
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 488,
      "code" : "case as && incr && f0 == nil:\n\tvar tmp float64\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp",
      "entry" : false,
      "use-vars" : [ 21, 118, 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 431 ],
      "in-vars" : [ 122, 120 ],
      "exit" : false,
      "out-vars" : [ 122, 120 ],
      "decl-vars" : [ 123 ],
      "line-start" : 484,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 238,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 238,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float64"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "tmp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 484,
      "code" : "var tmp float64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 432, 433 ],
      "in-vars" : [ 122, 22, 123 ],
      "exit" : false,
      "out-vars" : [ 122, 123 ],
      "decl-vars" : [ ],
      "line-start" : 485,
      "ast" : {
        "condition" : {
          "go-type" : 106,
          "kind" : "expression",
          "left" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 22
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 487,
      "code" : "if tmp, err = f1(at[0]); err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ 22, 123 ],
      "successors" : [ 430 ],
      "in-vars" : [ 122, 120 ],
      "exit" : false,
      "out-vars" : [ 122, 22, 123 ],
      "decl-vars" : [ ],
      "line-start" : 485,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 238,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 123
          }
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 238,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 241,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 122
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 239,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 120
            }
          },
          "go-type" : 240,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 123, 22 ],
      "line-end" : 485,
      "code" : "tmp, err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 122, 120 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 486,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 486,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 122 ],
      "successors" : [ 570 ],
      "in-vars" : [ 122, 123 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 488,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 238,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 241,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 122
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 238,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 123
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 488,
      "code" : "at[0] += tmp",
      "entry" : false,
      "use-vars" : [ 123, 122 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 435 ],
      "in-vars" : [ 118, 122, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 118, 122 ],
      "decl-vars" : [ ],
      "line-start" : 489,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 236,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 118
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 490,
      "code" : "case as && !incr && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 21, 118, 41 ]
    }, {
      "update-vars" : [ 122 ],
      "successors" : [ 570 ],
      "in-vars" : [ 122, 118 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 490,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 238,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 241,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 122
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 238,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 241,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 122
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 236,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 118
            }
          },
          "go-type" : 238,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 490,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 122, 118 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 437 ],
      "in-vars" : [ 41, 21, 118, 122, 120 ],
      "exit" : false,
      "out-vars" : [ 120, 122 ],
      "decl-vars" : [ ],
      "line-start" : 491,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 236,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 118
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 492,
      "code" : "case as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 118 ]
    }, {
      "update-vars" : [ 22, 122 ],
      "successors" : [ 570 ],
      "in-vars" : [ 122, 120 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 492,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 238,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 241,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 122
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 238,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 241,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 122
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 239,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 120
            }
          },
          "go-type" : 240,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 492,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 120, 122 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 439 ],
      "in-vars" : [ 41, 21, 118, 122 ],
      "exit" : false,
      "out-vars" : [ 118, 122 ],
      "decl-vars" : [ ],
      "line-start" : 493,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 236,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 118
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 494,
      "code" : "case !as && incr && f0 != nil:\n\tMapIncrF64(f0, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 118 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 118, 122 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 494,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 236,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 118
            }
          }, {
            "go-type" : 241,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 122
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 244,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 65,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrF64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 494,
      "code" : "MapIncrF64(f0, at)",
      "entry" : false,
      "use-vars" : [ 118, 122 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 441 ],
      "in-vars" : [ 41, 21, 118, 122, 120 ],
      "exit" : false,
      "out-vars" : [ 122, 120 ],
      "decl-vars" : [ ],
      "line-start" : 495,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 236,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 118
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 496,
      "code" : "case !as && incr && f0 == nil:\n\terr = MapIncrErrF64(f1, at)",
      "entry" : false,
      "use-vars" : [ 21, 118, 41 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 120, 122 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 496,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 239,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 120
            }
          }, {
            "go-type" : 241,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 122
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 246,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 66,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrErrF64"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 496,
      "code" : "err = MapIncrErrF64(f1, at)",
      "entry" : false,
      "use-vars" : [ 122, 120 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 443 ],
      "in-vars" : [ 41, 21, 118, 122, 120 ],
      "exit" : false,
      "out-vars" : [ 122, 120 ],
      "decl-vars" : [ ],
      "line-start" : 497,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 236,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 118
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 498,
      "code" : "case !as && !incr && f0 == nil:\n\terr = MapErrF64(f1, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 118 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 122, 120 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 498,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 239,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 120
            }
          }, {
            "go-type" : 241,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 122
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 246,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 67,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrF64"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 498,
      "code" : "err = MapErrF64(f1, at)",
      "entry" : false,
      "use-vars" : [ 120, 122 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 445 ],
      "in-vars" : [ 118, 122 ],
      "exit" : false,
      "out-vars" : [ 118, 122 ],
      "decl-vars" : [ ],
      "line-start" : 499,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 500,
      "code" : "default:\n\tMapF64(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 118, 122 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 500,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 236,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 118
            }
          }, {
            "go-type" : 241,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 122
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 244,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 68,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapF64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 500,
      "code" : "MapF64(f0, at)",
      "entry" : false,
      "use-vars" : [ 118, 122 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 447 ],
      "in-vars" : [ 41, 21, 19, 20, 23 ],
      "exit" : false,
      "out-vars" : [ 21, 19, 20, 41 ],
      "decl-vars" : [ ],
      "line-start" : 502,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Complex64",
            "variable" : 23
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 537,
      "code" : "case Complex64:\n\tvar f0 func(complex64) complex64\n\tvar f1 func(complex64) (complex64, error)\n\n\tswitch f := fn.(type) {\n\tcase func(complex64) complex64:\n\t\tf0 = f\n\tcase func(complex64) (complex64, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Complex64s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp complex64\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrC64(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrC64(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrC64(f1, at)\n\tdefault:\n\t\tMapC64(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 448 ],
      "in-vars" : [ 41, 21, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 21, 19, 20, 124, 41 ],
      "decl-vars" : [ 124 ],
      "line-start" : 503,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 248,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 250,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 250,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "complex64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 250,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 250,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "complex64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 503,
      "code" : "var f0 func(complex64) complex64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 449 ],
      "in-vars" : [ 20, 124, 41, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 126, 124 ],
      "decl-vars" : [ 126 ],
      "line-start" : 504,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 251,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 250,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 250,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "complex64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 250,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 250,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "complex64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 504,
      "code" : "var f1 func(complex64) (complex64, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 450 ],
      "in-vars" : [ 126, 124, 41, 21, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 126, 124, 125, 127, 41, 21, 19, 20 ],
      "decl-vars" : [ 125, 127, 161 ],
      "line-start" : 506,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 513,
      "code" : "switch f := fn.(type) {\ncase func(complex64) complex64:\n\tf0 = f\ncase func(complex64) (complex64, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 451, 453, 455 ],
      "in-vars" : [ 20, 126, 124, 125, 127, 41, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 124, 125, 127, 41, 21, 19, 20, 126 ],
      "decl-vars" : [ ],
      "line-start" : 506,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 506,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 452 ],
      "in-vars" : [ 41, 21, 20, 126, 125 ],
      "exit" : false,
      "out-vars" : [ 21, 20, 126, 125, 41 ],
      "decl-vars" : [ ],
      "line-start" : 507,
      "ast" : {
        "expressions" : [ {
          "go-type" : 248,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 250,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 250,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 250,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 250,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 508,
      "code" : "case func(complex64) complex64:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 124 ],
      "successors" : [ 457 ],
      "in-vars" : [ 125, 41, 21, 20, 126 ],
      "exit" : false,
      "out-vars" : [ 21, 20, 126, 124, 41 ],
      "decl-vars" : [ ],
      "line-start" : 508,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 248,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 124
          }
        } ],
        "right" : [ {
          "go-type" : 248,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 125
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 124 ],
      "line-end" : 508,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 125 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 454 ],
      "in-vars" : [ 41, 21, 20, 124, 127 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 124, 127 ],
      "decl-vars" : [ ],
      "line-start" : 509,
      "ast" : {
        "expressions" : [ {
          "go-type" : 251,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 250,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 250,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 250,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 250,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 510,
      "code" : "case func(complex64) (complex64, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 126 ],
      "successors" : [ 457 ],
      "in-vars" : [ 41, 21, 20, 124, 127 ],
      "exit" : false,
      "out-vars" : [ 21, 20, 126, 124, 41 ],
      "decl-vars" : [ ],
      "line-start" : 510,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 251,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 126
          }
        } ],
        "right" : [ {
          "go-type" : 251,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 127
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 126 ],
      "line-end" : 510,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 127 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 456 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 511,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 512,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 512,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 512,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 458 ],
      "in-vars" : [ 41, 21, 20, 126, 124 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 128, 126, 124 ],
      "decl-vars" : [ 128 ],
      "line-start" : 515,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 69,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Complex64s"
            },
            "go-type" : 254,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 253,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 515,
      "code" : "at := a.Complex64s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 459, 461, 467, 469, 471, 473, 475, 477 ],
      "in-vars" : [ 124, 41, 21, 128, 126 ],
      "exit" : false,
      "out-vars" : [ 126, 124, 41, 21, 128 ],
      "decl-vars" : [ ],
      "line-start" : 516,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 537,
      "code" : "switch {\ncase as && incr && f0 != nil:\n\tat[0] += f0(at[0])\ncase as && incr && f0 == nil:\n\tvar tmp complex64\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp\ncase as && !incr && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && incr && f0 != nil:\n\tMapIncrC64(f0, at)\ncase !as && incr && f0 == nil:\n\terr = MapIncrErrC64(f1, at)\ncase !as && !incr && f0 == nil:\n\terr = MapErrC64(f1, at)\ndefault:\n\tMapC64(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 460 ],
      "in-vars" : [ 124, 41, 21, 128 ],
      "exit" : false,
      "out-vars" : [ 128, 124 ],
      "decl-vars" : [ ],
      "line-start" : 517,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 248,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 124
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 518,
      "code" : "case as && incr && f0 != nil:\n\tat[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 124 ]
    }, {
      "update-vars" : [ 128 ],
      "successors" : [ 570 ],
      "in-vars" : [ 124, 128 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 518,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 250,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 253,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 128
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 250,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 253,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 128
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 248,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 124
            }
          },
          "go-type" : 250,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 518,
      "code" : "at[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 128, 124 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 462 ],
      "in-vars" : [ 128, 126, 124, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 128, 126 ],
      "decl-vars" : [ ],
      "line-start" : 519,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 248,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 124
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 524,
      "code" : "case as && incr && f0 == nil:\n\tvar tmp complex64\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp",
      "entry" : false,
      "use-vars" : [ 41, 21, 124 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 464 ],
      "in-vars" : [ 128, 126 ],
      "exit" : false,
      "out-vars" : [ 128, 126 ],
      "decl-vars" : [ 129 ],
      "line-start" : 520,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 250,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 250,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex64"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "tmp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 520,
      "code" : "var tmp complex64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 465, 466 ],
      "in-vars" : [ 22, 128, 129 ],
      "exit" : false,
      "out-vars" : [ 128, 129 ],
      "decl-vars" : [ ],
      "line-start" : 521,
      "ast" : {
        "condition" : {
          "go-type" : 106,
          "kind" : "expression",
          "left" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 22
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 523,
      "code" : "if tmp, err = f1(at[0]); err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ 22, 129 ],
      "successors" : [ 463 ],
      "in-vars" : [ 126, 128 ],
      "exit" : false,
      "out-vars" : [ 22, 128, 129 ],
      "decl-vars" : [ ],
      "line-start" : 521,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 250,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 129
          }
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 250,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 253,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 128
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 251,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 126
            }
          },
          "go-type" : 252,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22, 129 ],
      "line-end" : 521,
      "code" : "tmp, err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 128, 126 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 522,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 522,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 128 ],
      "successors" : [ 570 ],
      "in-vars" : [ 128, 129 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 524,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 250,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 253,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 128
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 250,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 129
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 524,
      "code" : "at[0] += tmp",
      "entry" : false,
      "use-vars" : [ 129, 128 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 468 ],
      "in-vars" : [ 41, 21, 128, 124 ],
      "exit" : false,
      "out-vars" : [ 128, 124 ],
      "decl-vars" : [ ],
      "line-start" : 525,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 248,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 124
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 526,
      "code" : "case as && !incr && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 21, 124, 41 ]
    }, {
      "update-vars" : [ 128 ],
      "successors" : [ 570 ],
      "in-vars" : [ 128, 124 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 526,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 250,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 253,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 128
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 250,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 253,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 128
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 248,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 124
            }
          },
          "go-type" : 250,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 526,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 124, 128 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 470 ],
      "in-vars" : [ 126, 124, 41, 21, 128 ],
      "exit" : false,
      "out-vars" : [ 128, 126 ],
      "decl-vars" : [ ],
      "line-start" : 527,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 248,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 124
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 528,
      "code" : "case as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 124 ]
    }, {
      "update-vars" : [ 22, 128 ],
      "successors" : [ 570 ],
      "in-vars" : [ 128, 126 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 528,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 250,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 253,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 128
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 250,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 253,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 128
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 251,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 126
            }
          },
          "go-type" : 252,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 528,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 126, 128 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 472 ],
      "in-vars" : [ 41, 21, 128, 124 ],
      "exit" : false,
      "out-vars" : [ 128, 124 ],
      "decl-vars" : [ ],
      "line-start" : 529,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 248,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 124
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 530,
      "code" : "case !as && incr && f0 != nil:\n\tMapIncrC64(f0, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 124 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 128, 124 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 530,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 248,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 124
            }
          }, {
            "go-type" : 253,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 128
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 256,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 70,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrC64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 530,
      "code" : "MapIncrC64(f0, at)",
      "entry" : false,
      "use-vars" : [ 124, 128 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 474 ],
      "in-vars" : [ 21, 128, 126, 124, 41 ],
      "exit" : false,
      "out-vars" : [ 128, 126 ],
      "decl-vars" : [ ],
      "line-start" : 531,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 248,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 124
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 532,
      "code" : "case !as && incr && f0 == nil:\n\terr = MapIncrErrC64(f1, at)",
      "entry" : false,
      "use-vars" : [ 124, 41, 21 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 128, 126 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 532,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 251,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 126
            }
          }, {
            "go-type" : 253,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 128
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 258,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 71,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrErrC64"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 532,
      "code" : "err = MapIncrErrC64(f1, at)",
      "entry" : false,
      "use-vars" : [ 126, 128 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 476 ],
      "in-vars" : [ 41, 21, 128, 126, 124 ],
      "exit" : false,
      "out-vars" : [ 128, 126 ],
      "decl-vars" : [ ],
      "line-start" : 533,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 248,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 124
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 534,
      "code" : "case !as && !incr && f0 == nil:\n\terr = MapErrC64(f1, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 124 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 128, 126 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 534,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 251,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 126
            }
          }, {
            "go-type" : 253,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 128
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 258,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 72,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrC64"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 534,
      "code" : "err = MapErrC64(f1, at)",
      "entry" : false,
      "use-vars" : [ 126, 128 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 478 ],
      "in-vars" : [ 128, 124 ],
      "exit" : false,
      "out-vars" : [ 128, 124 ],
      "decl-vars" : [ ],
      "line-start" : 535,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 536,
      "code" : "default:\n\tMapC64(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 128, 124 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 536,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 248,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 124
            }
          }, {
            "go-type" : 253,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 128
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 256,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 73,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapC64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 536,
      "code" : "MapC64(f0, at)",
      "entry" : false,
      "use-vars" : [ 124, 128 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 480 ],
      "in-vars" : [ 41, 21, 19, 20, 35 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 41, 21 ],
      "decl-vars" : [ ],
      "line-start" : 538,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Complex128",
            "variable" : 35
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 573,
      "code" : "case Complex128:\n\tvar f0 func(complex128) complex128\n\tvar f1 func(complex128) (complex128, error)\n\n\tswitch f := fn.(type) {\n\tcase func(complex128) complex128:\n\t\tf0 = f\n\tcase func(complex128) (complex128, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Complex128s()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp complex128\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrC128(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrC128(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrC128(f1, at)\n\tdefault:\n\t\tMapC128(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 481 ],
      "in-vars" : [ 20, 41, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 21, 130, 19, 20, 41 ],
      "decl-vars" : [ 130 ],
      "line-start" : 539,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 260,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 262,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 262,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "complex128"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 262,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 262,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "complex128"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 539,
      "code" : "var f0 func(complex128) complex128",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 482 ],
      "in-vars" : [ 21, 130, 19, 20, 41 ],
      "exit" : false,
      "out-vars" : [ 130, 19, 20, 132, 41, 21 ],
      "decl-vars" : [ 132 ],
      "line-start" : 540,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 263,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 262,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 262,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "complex128"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 262,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 262,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "complex128"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 540,
      "code" : "var f1 func(complex128) (complex128, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 483 ],
      "in-vars" : [ 19, 20, 132, 41, 21, 130 ],
      "exit" : false,
      "out-vars" : [ 133, 41, 21, 130, 19, 20, 132, 131 ],
      "decl-vars" : [ 131, 133, 162 ],
      "line-start" : 542,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 549,
      "code" : "switch f := fn.(type) {\ncase func(complex128) complex128:\n\tf0 = f\ncase func(complex128) (complex128, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 484, 486, 488 ],
      "in-vars" : [ 41, 21, 130, 19, 20, 132, 131, 133 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 132, 131, 133, 41, 21, 130 ],
      "decl-vars" : [ ],
      "line-start" : 542,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 542,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 485 ],
      "in-vars" : [ 41, 21, 20, 132, 131 ],
      "exit" : false,
      "out-vars" : [ 132, 131, 41, 21, 20 ],
      "decl-vars" : [ ],
      "line-start" : 543,
      "ast" : {
        "expressions" : [ {
          "go-type" : 260,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 262,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 262,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex128"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 262,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 262,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex128"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 544,
      "code" : "case func(complex128) complex128:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 130 ],
      "successors" : [ 490 ],
      "in-vars" : [ 41, 21, 20, 132, 131 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 130, 20, 132 ],
      "decl-vars" : [ ],
      "line-start" : 544,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 260,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 130
          }
        } ],
        "right" : [ {
          "go-type" : 260,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 131
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 130 ],
      "line-end" : 544,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 131 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 487 ],
      "in-vars" : [ 41, 21, 130, 20, 133 ],
      "exit" : false,
      "out-vars" : [ 21, 130, 20, 133, 41 ],
      "decl-vars" : [ ],
      "line-start" : 545,
      "ast" : {
        "expressions" : [ {
          "go-type" : 263,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 262,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 262,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex128"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 262,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 262,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex128"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 546,
      "code" : "case func(complex128) (complex128, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 132 ],
      "successors" : [ 490 ],
      "in-vars" : [ 20, 133, 41, 21, 130 ],
      "exit" : false,
      "out-vars" : [ 132, 41, 21, 130, 20 ],
      "decl-vars" : [ ],
      "line-start" : 546,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 263,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 132
          }
        } ],
        "right" : [ {
          "go-type" : 263,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 133
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 132 ],
      "line-end" : 546,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 133 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 489 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 547,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 548,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 548,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 548,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 491 ],
      "in-vars" : [ 41, 21, 130, 20, 132 ],
      "exit" : false,
      "out-vars" : [ 21, 130, 134, 132, 41 ],
      "decl-vars" : [ 134 ],
      "line-start" : 551,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 74,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Complex128s"
            },
            "go-type" : 266,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 265,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 551,
      "code" : "at := a.Complex128s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 492, 494, 500, 502, 504, 506, 508, 510 ],
      "in-vars" : [ 41, 21, 130, 134, 132 ],
      "exit" : false,
      "out-vars" : [ 132, 41, 21, 130, 134 ],
      "decl-vars" : [ ],
      "line-start" : 552,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 573,
      "code" : "switch {\ncase as && incr && f0 != nil:\n\tat[0] += f0(at[0])\ncase as && incr && f0 == nil:\n\tvar tmp complex128\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp\ncase as && !incr && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && incr && f0 != nil:\n\tMapIncrC128(f0, at)\ncase !as && incr && f0 == nil:\n\terr = MapIncrErrC128(f1, at)\ncase !as && !incr && f0 == nil:\n\terr = MapErrC128(f1, at)\ndefault:\n\tMapC128(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 493 ],
      "in-vars" : [ 134, 41, 21, 130 ],
      "exit" : false,
      "out-vars" : [ 130, 134 ],
      "decl-vars" : [ ],
      "line-start" : 553,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 260,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 130
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 554,
      "code" : "case as && incr && f0 != nil:\n\tat[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 130 ]
    }, {
      "update-vars" : [ 134 ],
      "successors" : [ 570 ],
      "in-vars" : [ 130, 134 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 554,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 262,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 265,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 134
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 262,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 265,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 134
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 260,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 130
            }
          },
          "go-type" : 262,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 554,
      "code" : "at[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 130, 134 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 495 ],
      "in-vars" : [ 41, 21, 130, 134, 132 ],
      "exit" : false,
      "out-vars" : [ 132, 134 ],
      "decl-vars" : [ ],
      "line-start" : 555,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 260,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 130
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 560,
      "code" : "case as && incr && f0 == nil:\n\tvar tmp complex128\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp",
      "entry" : false,
      "use-vars" : [ 41, 21, 130 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 497 ],
      "in-vars" : [ 134, 132 ],
      "exit" : false,
      "out-vars" : [ 132, 134 ],
      "decl-vars" : [ 135 ],
      "line-start" : 556,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 262,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 262,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex128"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "tmp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 556,
      "code" : "var tmp complex128",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 498, 499 ],
      "in-vars" : [ 22, 134, 135 ],
      "exit" : false,
      "out-vars" : [ 134, 135 ],
      "decl-vars" : [ ],
      "line-start" : 557,
      "ast" : {
        "condition" : {
          "go-type" : 106,
          "kind" : "expression",
          "left" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 22
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 559,
      "code" : "if tmp, err = f1(at[0]); err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ 135, 22 ],
      "successors" : [ 496 ],
      "in-vars" : [ 134, 132 ],
      "exit" : false,
      "out-vars" : [ 22, 134, 135 ],
      "decl-vars" : [ ],
      "line-start" : 557,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 262,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 135
          }
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 262,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 265,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 134
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 263,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 132
            }
          },
          "go-type" : 264,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22, 135 ],
      "line-end" : 557,
      "code" : "tmp, err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 132, 134 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 558,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 558,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 134 ],
      "successors" : [ 570 ],
      "in-vars" : [ 134, 135 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 560,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 262,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 265,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 134
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 262,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 135
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 560,
      "code" : "at[0] += tmp",
      "entry" : false,
      "use-vars" : [ 135, 134 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 501 ],
      "in-vars" : [ 41, 21, 130, 134 ],
      "exit" : false,
      "out-vars" : [ 130, 134 ],
      "decl-vars" : [ ],
      "line-start" : 561,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 260,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 130
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 562,
      "code" : "case as && !incr && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 21, 130, 41 ]
    }, {
      "update-vars" : [ 134 ],
      "successors" : [ 570 ],
      "in-vars" : [ 130, 134 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 562,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 262,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 265,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 134
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 262,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 265,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 134
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 260,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 130
            }
          },
          "go-type" : 262,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 562,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 130, 134 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 503 ],
      "in-vars" : [ 41, 21, 130, 134, 132 ],
      "exit" : false,
      "out-vars" : [ 134, 132 ],
      "decl-vars" : [ ],
      "line-start" : 563,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 260,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 130
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 564,
      "code" : "case as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 130, 41, 21 ]
    }, {
      "update-vars" : [ 134, 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 134, 132 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 564,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 262,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 265,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 134
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 262,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 265,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 134
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 263,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 132
            }
          },
          "go-type" : 264,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 564,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 134, 132 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 505 ],
      "in-vars" : [ 41, 21, 130, 134 ],
      "exit" : false,
      "out-vars" : [ 130, 134 ],
      "decl-vars" : [ ],
      "line-start" : 565,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 260,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 130
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 566,
      "code" : "case !as && incr && f0 != nil:\n\tMapIncrC128(f0, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 130 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 134, 130 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 566,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 260,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 130
            }
          }, {
            "go-type" : 265,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 134
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 268,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 75,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrC128"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 566,
      "code" : "MapIncrC128(f0, at)",
      "entry" : false,
      "use-vars" : [ 130, 134 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 507 ],
      "in-vars" : [ 134, 132, 41, 21, 130 ],
      "exit" : false,
      "out-vars" : [ 134, 132 ],
      "decl-vars" : [ ],
      "line-start" : 567,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 260,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 130
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 568,
      "code" : "case !as && incr && f0 == nil:\n\terr = MapIncrErrC128(f1, at)",
      "entry" : false,
      "use-vars" : [ 21, 130, 41 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 132, 134 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 568,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 263,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 132
            }
          }, {
            "go-type" : 265,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 134
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 270,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 76,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrErrC128"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 568,
      "code" : "err = MapIncrErrC128(f1, at)",
      "entry" : false,
      "use-vars" : [ 132, 134 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 509 ],
      "in-vars" : [ 134, 132, 41, 21, 130 ],
      "exit" : false,
      "out-vars" : [ 134, 132 ],
      "decl-vars" : [ ],
      "line-start" : 569,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 260,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 130
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 570,
      "code" : "case !as && !incr && f0 == nil:\n\terr = MapErrC128(f1, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 130 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 134, 132 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 570,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 263,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 132
            }
          }, {
            "go-type" : 265,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 134
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 270,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 77,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrC128"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 570,
      "code" : "err = MapErrC128(f1, at)",
      "entry" : false,
      "use-vars" : [ 132, 134 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 511 ],
      "in-vars" : [ 130, 134 ],
      "exit" : false,
      "out-vars" : [ 134, 130 ],
      "decl-vars" : [ ],
      "line-start" : 571,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 572,
      "code" : "default:\n\tMapC128(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 134, 130 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 572,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 260,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 130
            }
          }, {
            "go-type" : 265,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 134
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 268,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 78,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapC128"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 572,
      "code" : "MapC128(f0, at)",
      "entry" : false,
      "use-vars" : [ 130, 134 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 513 ],
      "in-vars" : [ 41, 21, 19, 20, 29 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20 ],
      "decl-vars" : [ ],
      "line-start" : 574,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "String",
            "variable" : 29
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 609,
      "code" : "case String:\n\tvar f0 func(string) string\n\tvar f1 func(string) (string, error)\n\n\tswitch f := fn.(type) {\n\tcase func(string) string:\n\t\tf0 = f\n\tcase func(string) (string, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.Strings()\n\tswitch {\n\tcase as && incr && f0 != nil:\n\t\tat[0] += f0(at[0])\n\tcase as && incr && f0 == nil:\n\t\tvar tmp string\n\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tat[0] += tmp\n\tcase as && !incr && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && !incr && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && incr && f0 != nil:\n\t\tMapIncrStr(f0, at)\n\tcase !as && incr && f0 == nil:\n\t\terr = MapIncrErrStr(f1, at)\n\tcase !as && !incr && f0 == nil:\n\t\terr = MapErrStr(f1, at)\n\tdefault:\n\t\tMapStr(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 514 ],
      "in-vars" : [ 21, 19, 20, 41 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 136, 20 ],
      "decl-vars" : [ 136 ],
      "line-start" : 575,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 272,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 23,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 23,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 23,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 23,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 575,
      "code" : "var f0 func(string) string",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 515 ],
      "in-vars" : [ 41, 21, 19, 136, 20 ],
      "exit" : false,
      "out-vars" : [ 136, 20, 138, 41, 21, 19 ],
      "decl-vars" : [ 138 ],
      "line-start" : 576,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 273,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 23,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 23,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 23,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 23,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 576,
      "code" : "var f1 func(string) (string, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 516 ],
      "in-vars" : [ 138, 41, 21, 19, 136, 20 ],
      "exit" : false,
      "out-vars" : [ 20, 138, 137, 139, 41, 21, 19, 136 ],
      "decl-vars" : [ 137, 139, 163 ],
      "line-start" : 578,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 585,
      "code" : "switch f := fn.(type) {\ncase func(string) string:\n\tf0 = f\ncase func(string) (string, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 517, 519, 521 ],
      "in-vars" : [ 137, 139, 41, 21, 19, 136, 20, 138 ],
      "exit" : false,
      "out-vars" : [ 21, 19, 136, 20, 138, 137, 139, 41 ],
      "decl-vars" : [ ],
      "line-start" : 578,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 578,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 518 ],
      "in-vars" : [ 137, 41, 21, 20, 138 ],
      "exit" : false,
      "out-vars" : [ 138, 137, 41, 21, 20 ],
      "decl-vars" : [ ],
      "line-start" : 579,
      "ast" : {
        "expressions" : [ {
          "go-type" : 272,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 580,
      "code" : "case func(string) string:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 136 ],
      "successors" : [ 523 ],
      "in-vars" : [ 21, 20, 138, 137, 41 ],
      "exit" : false,
      "out-vars" : [ 138, 41, 21, 136, 20 ],
      "decl-vars" : [ ],
      "line-start" : 580,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 272,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 136
          }
        } ],
        "right" : [ {
          "go-type" : 272,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 137
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 136 ],
      "line-end" : 580,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 137 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 520 ],
      "in-vars" : [ 41, 21, 136, 20, 139 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 136, 20, 139 ],
      "decl-vars" : [ ],
      "line-start" : 581,
      "ast" : {
        "expressions" : [ {
          "go-type" : 273,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 582,
      "code" : "case func(string) (string, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 138 ],
      "successors" : [ 523 ],
      "in-vars" : [ 136, 20, 139, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 21, 136, 20, 138, 41 ],
      "decl-vars" : [ ],
      "line-start" : 582,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 273,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 138
          }
        } ],
        "right" : [ {
          "go-type" : 273,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 139
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 138 ],
      "line-end" : 582,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 139 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 522 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 583,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 584,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 584,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 584,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 524 ],
      "in-vars" : [ 41, 21, 136, 20, 138 ],
      "exit" : false,
      "out-vars" : [ 136, 140, 138, 41, 21 ],
      "decl-vars" : [ 140 ],
      "line-start" : 587,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 79,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Strings"
            },
            "go-type" : 276,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 275,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 587,
      "code" : "at := a.Strings()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 525, 527, 533, 535, 537, 539, 541, 543 ],
      "in-vars" : [ 41, 21, 136, 140, 138 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 136, 140, 138 ],
      "decl-vars" : [ ],
      "line-start" : 588,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 609,
      "code" : "switch {\ncase as && incr && f0 != nil:\n\tat[0] += f0(at[0])\ncase as && incr && f0 == nil:\n\tvar tmp string\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp\ncase as && !incr && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && incr && f0 != nil:\n\tMapIncrStr(f0, at)\ncase !as && incr && f0 == nil:\n\terr = MapIncrErrStr(f1, at)\ncase !as && !incr && f0 == nil:\n\terr = MapErrStr(f1, at)\ndefault:\n\tMapStr(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 526 ],
      "in-vars" : [ 21, 136, 140, 41 ],
      "exit" : false,
      "out-vars" : [ 136, 140 ],
      "decl-vars" : [ ],
      "line-start" : 589,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 272,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 136
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 590,
      "code" : "case as && incr && f0 != nil:\n\tat[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 41, 21, 136 ]
    }, {
      "update-vars" : [ 140 ],
      "successors" : [ 570 ],
      "in-vars" : [ 136, 140 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 590,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 23,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 275,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 140
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 275,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 140
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 272,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 136
            }
          },
          "go-type" : 23,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 590,
      "code" : "at[0] += f0(at[0])",
      "entry" : false,
      "use-vars" : [ 140, 136 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 528 ],
      "in-vars" : [ 41, 21, 136, 140, 138 ],
      "exit" : false,
      "out-vars" : [ 140, 138 ],
      "decl-vars" : [ ],
      "line-start" : 591,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 272,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 136
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 596,
      "code" : "case as && incr && f0 == nil:\n\tvar tmp string\n\tif tmp, err = f1(at[0]); err != nil {\n\t\treturn\n\t}\n\tat[0] += tmp",
      "entry" : false,
      "use-vars" : [ 41, 21, 136 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 530 ],
      "in-vars" : [ 140, 138 ],
      "exit" : false,
      "out-vars" : [ 140, 138 ],
      "decl-vars" : [ 141 ],
      "line-start" : 592,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "tmp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 592,
      "code" : "var tmp string",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 531, 532 ],
      "in-vars" : [ 22, 140, 141 ],
      "exit" : false,
      "out-vars" : [ 140, 141 ],
      "decl-vars" : [ ],
      "line-start" : 593,
      "ast" : {
        "condition" : {
          "go-type" : 106,
          "kind" : "expression",
          "left" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 22
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 595,
      "code" : "if tmp, err = f1(at[0]); err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ 22, 141 ],
      "successors" : [ 529 ],
      "in-vars" : [ 140, 138 ],
      "exit" : false,
      "out-vars" : [ 22, 140, 141 ],
      "decl-vars" : [ ],
      "line-start" : 593,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 23,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 141
          }
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 275,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 140
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 273,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 138
            }
          },
          "go-type" : 274,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 141, 22 ],
      "line-end" : 593,
      "code" : "tmp, err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 138, 140 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 594,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 594,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 140 ],
      "successors" : [ 570 ],
      "in-vars" : [ 140, 141 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 596,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 23,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 275,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 140
            }
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 23,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 141
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 596,
      "code" : "at[0] += tmp",
      "entry" : false,
      "use-vars" : [ 140, 141 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 534 ],
      "in-vars" : [ 41, 21, 136, 140 ],
      "exit" : false,
      "out-vars" : [ 136, 140 ],
      "decl-vars" : [ ],
      "line-start" : 597,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 272,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 136
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 598,
      "code" : "case as && !incr && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 21, 136, 41 ]
    }, {
      "update-vars" : [ 140 ],
      "successors" : [ 570 ],
      "in-vars" : [ 136, 140 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 598,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 23,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 275,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 140
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 275,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 140
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 272,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 136
            }
          },
          "go-type" : 23,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 598,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 140, 136 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 536 ],
      "in-vars" : [ 41, 21, 136, 140, 138 ],
      "exit" : false,
      "out-vars" : [ 140, 138 ],
      "decl-vars" : [ ],
      "line-start" : 599,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 272,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 136
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 600,
      "code" : "case as && !incr && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 21, 136, 41 ]
    }, {
      "update-vars" : [ 22, 140 ],
      "successors" : [ 570 ],
      "in-vars" : [ 140, 138 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 600,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 23,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 275,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 140
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 275,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 140
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 273,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 138
            }
          },
          "go-type" : 274,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 600,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 138, 140 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 538 ],
      "in-vars" : [ 41, 21, 136, 140 ],
      "exit" : false,
      "out-vars" : [ 136, 140 ],
      "decl-vars" : [ ],
      "line-start" : 601,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 272,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 136
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 602,
      "code" : "case !as && incr && f0 != nil:\n\tMapIncrStr(f0, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 136 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 136, 140 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 602,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 272,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 136
            }
          }, {
            "go-type" : 275,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 140
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 278,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 80,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrStr"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 602,
      "code" : "MapIncrStr(f0, at)",
      "entry" : false,
      "use-vars" : [ 136, 140 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 540 ],
      "in-vars" : [ 21, 136, 140, 138, 41 ],
      "exit" : false,
      "out-vars" : [ 140, 138 ],
      "decl-vars" : [ ],
      "line-start" : 603,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incr",
                "variable" : 21
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 272,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 136
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 604,
      "code" : "case !as && incr && f0 == nil:\n\terr = MapIncrErrStr(f1, at)",
      "entry" : false,
      "use-vars" : [ 136, 41, 21 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 140, 138 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 604,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 273,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 138
            }
          }, {
            "go-type" : 275,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 140
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 280,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 81,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapIncrErrStr"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 604,
      "code" : "err = MapIncrErrStr(f1, at)",
      "entry" : false,
      "use-vars" : [ 138, 140 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 542 ],
      "in-vars" : [ 136, 140, 138, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 140, 138 ],
      "decl-vars" : [ ],
      "line-start" : 605,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "as",
                  "variable" : 41
                }
              },
              "type" : "unary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incr",
                  "variable" : 21
                }
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 272,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 136
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 606,
      "code" : "case !as && !incr && f0 == nil:\n\terr = MapErrStr(f1, at)",
      "entry" : false,
      "use-vars" : [ 41, 21, 136 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 140, 138 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 606,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 273,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 138
            }
          }, {
            "go-type" : 275,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 140
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 280,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 82,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrStr"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 606,
      "code" : "err = MapErrStr(f1, at)",
      "entry" : false,
      "use-vars" : [ 138, 140 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 544 ],
      "in-vars" : [ 136, 140 ],
      "exit" : false,
      "out-vars" : [ 136, 140 ],
      "decl-vars" : [ ],
      "line-start" : 607,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 608,
      "code" : "default:\n\tMapStr(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 136, 140 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 608,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 272,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 136
            }
          }, {
            "go-type" : 275,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 140
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 278,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 83,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapStr"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 608,
      "code" : "MapStr(f0, at)",
      "entry" : false,
      "use-vars" : [ 140, 136 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 546 ],
      "in-vars" : [ 21, 19, 20, 18, 28, 41 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 19, 20, 18 ],
      "decl-vars" : [ ],
      "line-start" : 610,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "UnsafePointer",
            "variable" : 28
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 636,
      "code" : "case UnsafePointer:\n\tvar f0 func(unsafe.Pointer) unsafe.Pointer\n\tvar f1 func(unsafe.Pointer) (unsafe.Pointer, error)\n\n\tswitch f := fn.(type) {\n\tcase func(unsafe.Pointer) unsafe.Pointer:\n\t\tf0 = f\n\tcase func(unsafe.Pointer) (unsafe.Pointer, error):\n\t\tf1 = f\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t}\n\n\tat := a.UnsafePointers()\n\tif incr {\n\t\treturn errors.Errorf(\"Cannot perform increment on t of %v\", t)\n\t}\n\tswitch {\n\tcase as && f0 != nil:\n\t\tat[0] = f0(at[0])\n\tcase as && f0 == nil:\n\t\tat[0], err = f1(at[0])\n\tcase !as && f0 == nil:\n\t\terr = MapErrUnsafePointer(f1, at)\n\tdefault:\n\t\tMapUnsafePointer(f0, at)\n\t}",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 547 ],
      "in-vars" : [ 41, 21, 19, 20, 18 ],
      "exit" : false,
      "out-vars" : [ 20, 142, 18, 41, 21, 19 ],
      "decl-vars" : [ 142 ],
      "line-start" : 611,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 282,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 55,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 2,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 55,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 55,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 2,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 55,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 611,
      "code" : "var f0 func(unsafe.Pointer) unsafe.Pointer",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 548 ],
      "in-vars" : [ 20, 142, 18, 41, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 142, 18, 144, 41, 21 ],
      "decl-vars" : [ 144 ],
      "line-start" : 612,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 284,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 55,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 2,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 55,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 55,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 2,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 55,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 80,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 80,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "error"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 612,
      "code" : "var f1 func(unsafe.Pointer) (unsafe.Pointer, error)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 549 ],
      "in-vars" : [ 20, 142, 18, 144, 41, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 20, 18, 143, 19, 142, 145, 144 ],
      "decl-vars" : [ 143, 145, 164 ],
      "line-start" : 614,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 621,
      "code" : "switch f := fn.(type) {\ncase func(unsafe.Pointer) unsafe.Pointer:\n\tf0 = f\ncase func(unsafe.Pointer) (unsafe.Pointer, error):\n\tf1 = f\ndefault:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 550, 552, 554 ],
      "in-vars" : [ 18, 144, 21, 19, 20, 142, 41, 143, 145 ],
      "exit" : false,
      "out-vars" : [ 143, 145, 142, 18, 19, 20, 144, 41, 21 ],
      "decl-vars" : [ ],
      "line-start" : 614,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 614,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 551 ],
      "in-vars" : [ 41, 21, 20, 18, 143, 144 ],
      "exit" : false,
      "out-vars" : [ 18, 143, 144, 41, 21, 20 ],
      "decl-vars" : [ ],
      "line-start" : 615,
      "ast" : {
        "expressions" : [ {
          "go-type" : 282,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 55,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 55,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 55,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 55,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 616,
      "code" : "case func(unsafe.Pointer) unsafe.Pointer:\n\tf0 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 142 ],
      "successors" : [ 556 ],
      "in-vars" : [ 41, 21, 20, 18, 143, 144 ],
      "exit" : false,
      "out-vars" : [ 21, 20, 142, 18, 144, 41 ],
      "decl-vars" : [ ],
      "line-start" : 616,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 282,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f0",
            "variable" : 142
          }
        } ],
        "right" : [ {
          "go-type" : 282,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 143
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 142 ],
      "line-end" : 616,
      "code" : "f0 = f",
      "entry" : false,
      "use-vars" : [ 143 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 553 ],
      "in-vars" : [ 20, 142, 18, 145, 41, 21 ],
      "exit" : false,
      "out-vars" : [ 18, 145, 41, 21, 20, 142 ],
      "decl-vars" : [ ],
      "line-start" : 617,
      "ast" : {
        "expressions" : [ {
          "go-type" : 284,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 55,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 55,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 55,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 55,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 80,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 80,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 618,
      "code" : "case func(unsafe.Pointer) (unsafe.Pointer, error):\n\tf1 = f",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 144 ],
      "successors" : [ 556 ],
      "in-vars" : [ 41, 21, 20, 142, 18, 145 ],
      "exit" : false,
      "out-vars" : [ 21, 20, 142, 18, 144, 41 ],
      "decl-vars" : [ ],
      "line-start" : 618,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 284,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f1",
            "variable" : 144
          }
        } ],
        "right" : [ {
          "go-type" : 284,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 145
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 144 ],
      "line-end" : 618,
      "code" : "f1 = f",
      "entry" : false,
      "use-vars" : [ 145 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 555 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 619,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 620,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 620,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map fn of %T to array"
            }
          }, {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 620,
      "code" : "return errors.Errorf(\"Cannot map fn of %T to array\", fn)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 557 ],
      "in-vars" : [ 144, 41, 21, 20, 142, 18 ],
      "exit" : false,
      "out-vars" : [ 41, 21, 146, 142, 18, 144 ],
      "decl-vars" : [ 146 ],
      "line-start" : 623,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 84,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "UnsafePointers"
            },
            "go-type" : 287,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 286,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 623,
      "code" : "at := a.UnsafePointers()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 558, 559 ],
      "in-vars" : [ 41, 21, 146, 142, 18, 144 ],
      "exit" : false,
      "out-vars" : [ 144, 41, 146, 142, 18 ],
      "decl-vars" : [ ],
      "line-start" : 624,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "incr",
            "variable" : 21
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 626,
      "code" : "if incr {\n\treturn errors.Errorf(\"Cannot perform increment on t of %v\", t)\n}",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 18 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 625,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot perform increment on t of %v"
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 18
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 625,
      "code" : "return errors.Errorf(\"Cannot perform increment on t of %v\", t)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 560, 562, 564, 566 ],
      "in-vars" : [ 146, 142, 144, 41 ],
      "exit" : false,
      "out-vars" : [ 146, 142, 144, 41 ],
      "decl-vars" : [ ],
      "line-start" : 627,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 636,
      "code" : "switch {\ncase as && f0 != nil:\n\tat[0] = f0(at[0])\ncase as && f0 == nil:\n\tat[0], err = f1(at[0])\ncase !as && f0 == nil:\n\terr = MapErrUnsafePointer(f1, at)\ndefault:\n\tMapUnsafePointer(f0, at)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 561 ],
      "in-vars" : [ 41, 146, 142 ],
      "exit" : false,
      "out-vars" : [ 146, 142 ],
      "decl-vars" : [ ],
      "line-start" : 628,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "as",
              "variable" : 41
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 282,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 142
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 629,
      "code" : "case as && f0 != nil:\n\tat[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 142, 41 ]
    }, {
      "update-vars" : [ 146 ],
      "successors" : [ 570 ],
      "in-vars" : [ 142, 146 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 629,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 55,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 286,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 146
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 55,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 286,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 146
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 282,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 142
            }
          },
          "go-type" : 55,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 629,
      "code" : "at[0] = f0(at[0])",
      "entry" : false,
      "use-vars" : [ 142, 146 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 563 ],
      "in-vars" : [ 146, 142, 144, 41 ],
      "exit" : false,
      "out-vars" : [ 146, 144 ],
      "decl-vars" : [ ],
      "line-start" : 630,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "as",
              "variable" : 41
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 282,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 142
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 631,
      "code" : "case as && f0 == nil:\n\tat[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 142, 41 ]
    }, {
      "update-vars" : [ 22, 146 ],
      "successors" : [ 570 ],
      "in-vars" : [ 146, 144 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 631,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 55,
          "index" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 286,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 146
            }
          },
          "type" : "index"
        }, {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 55,
            "index" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 286,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 146
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 284,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 144
            }
          },
          "go-type" : 285,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 631,
      "code" : "at[0], err = f1(at[0])",
      "entry" : false,
      "use-vars" : [ 146, 144 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 565 ],
      "in-vars" : [ 41, 146, 142, 144 ],
      "exit" : false,
      "out-vars" : [ 146, 144 ],
      "decl-vars" : [ ],
      "line-start" : 632,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "as",
                "variable" : 41
              }
            },
            "type" : "unary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 282,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f0",
                "variable" : 142
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 633,
      "code" : "case !as && f0 == nil:\n\terr = MapErrUnsafePointer(f1, at)",
      "entry" : false,
      "use-vars" : [ 41, 142 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 570 ],
      "in-vars" : [ 146, 144 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 633,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 284,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f1",
              "variable" : 144
            }
          }, {
            "go-type" : 286,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 146
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 289,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 85,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapErrUnsafePointer"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 633,
      "code" : "err = MapErrUnsafePointer(f1, at)",
      "entry" : false,
      "use-vars" : [ 144, 146 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 567 ],
      "in-vars" : [ 142, 146 ],
      "exit" : false,
      "out-vars" : [ 146, 142 ],
      "decl-vars" : [ ],
      "line-start" : 634,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 635,
      "code" : "default:\n\tMapUnsafePointer(f0, at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 570 ],
      "in-vars" : [ 146, 142 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 635,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 282,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f0",
              "variable" : 142
            }
          }, {
            "go-type" : 286,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 146
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 291,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 86,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MapUnsafePointer"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 635,
      "code" : "MapUnsafePointer(f0, at)",
      "entry" : false,
      "use-vars" : [ 146, 142 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 569 ],
      "in-vars" : [ 18 ],
      "exit" : false,
      "out-vars" : [ 18 ],
      "decl-vars" : [ ],
      "line-start" : 637,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 638,
      "code" : "default:\n\treturn errors.Errorf(\"Cannot map t of %v\", t)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 18 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 638,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot map t of %v"
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 18
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 638,
      "code" : "return errors.Errorf(\"Cannot map t of %v\", t)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 642,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 642,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func (e E) Map(t reflect.Type, fn interface{}, a *storage.Header, incr bool) (err error) {\n\tas := isScalar(a)\n\tswitch t {\n\tcase Bool:\n\t\tvar f0 func(bool) bool\n\t\tvar f1 func(bool) (bool, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(bool) bool:\n\t\t\tf0 = f\n\t\tcase func(bool) (bool, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.Bools()\n\t\tif incr {\n\t\t\treturn errors.Errorf(\"Cannot perform increment on t of %v\", t)\n\t\t}\n\t\tswitch {\n\t\tcase as && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && f0 == nil:\n\t\t\terr = MapErrB(f1, at)\n\t\tdefault:\n\t\t\tMapB(f0, at)\n\t\t}\n\tcase Int:\n\t\tvar f0 func(int) int\n\t\tvar f1 func(int) (int, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(int) int:\n\t\t\tf0 = f\n\t\tcase func(int) (int, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.Ints()\n\t\tswitch {\n\t\tcase as && incr && f0 != nil:\n\t\t\tat[0] += f0(at[0])\n\t\tcase as && incr && f0 == nil:\n\t\t\tvar tmp int\n\t\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tat[0] += tmp\n\t\tcase as && !incr && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && !incr && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && incr && f0 != nil:\n\t\t\tMapIncrI(f0, at)\n\t\tcase !as && incr && f0 == nil:\n\t\t\terr = MapIncrErrI(f1, at)\n\t\tcase !as && !incr && f0 == nil:\n\t\t\terr = MapErrI(f1, at)\n\t\tdefault:\n\t\t\tMapI(f0, at)\n\t\t}\n\tcase Int8:\n\t\tvar f0 func(int8) int8\n\t\tvar f1 func(int8) (int8, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(int8) int8:\n\t\t\tf0 = f\n\t\tcase func(int8) (int8, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.Int8s()\n\t\tswitch {\n\t\tcase as && incr && f0 != nil:\n\t\t\tat[0] += f0(at[0])\n\t\tcase as && incr && f0 == nil:\n\t\t\tvar tmp int8\n\t\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tat[0] += tmp\n\t\tcase as && !incr && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && !incr && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && incr && f0 != nil:\n\t\t\tMapIncrI8(f0, at)\n\t\tcase !as && incr && f0 == nil:\n\t\t\terr = MapIncrErrI8(f1, at)\n\t\tcase !as && !incr && f0 == nil:\n\t\t\terr = MapErrI8(f1, at)\n\t\tdefault:\n\t\t\tMapI8(f0, at)\n\t\t}\n\tcase Int16:\n\t\tvar f0 func(int16) int16\n\t\tvar f1 func(int16) (int16, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(int16) int16:\n\t\t\tf0 = f\n\t\tcase func(int16) (int16, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.Int16s()\n\t\tswitch {\n\t\tcase as && incr && f0 != nil:\n\t\t\tat[0] += f0(at[0])\n\t\tcase as && incr && f0 == nil:\n\t\t\tvar tmp int16\n\t\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tat[0] += tmp\n\t\tcase as && !incr && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && !incr && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && incr && f0 != nil:\n\t\t\tMapIncrI16(f0, at)\n\t\tcase !as && incr && f0 == nil:\n\t\t\terr = MapIncrErrI16(f1, at)\n\t\tcase !as && !incr && f0 == nil:\n\t\t\terr = MapErrI16(f1, at)\n\t\tdefault:\n\t\t\tMapI16(f0, at)\n\t\t}\n\tcase Int32:\n\t\tvar f0 func(int32) int32\n\t\tvar f1 func(int32) (int32, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(int32) int32:\n\t\t\tf0 = f\n\t\tcase func(int32) (int32, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.Int32s()\n\t\tswitch {\n\t\tcase as && incr && f0 != nil:\n\t\t\tat[0] += f0(at[0])\n\t\tcase as && incr && f0 == nil:\n\t\t\tvar tmp int32\n\t\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tat[0] += tmp\n\t\tcase as && !incr && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && !incr && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && incr && f0 != nil:\n\t\t\tMapIncrI32(f0, at)\n\t\tcase !as && incr && f0 == nil:\n\t\t\terr = MapIncrErrI32(f1, at)\n\t\tcase !as && !incr && f0 == nil:\n\t\t\terr = MapErrI32(f1, at)\n\t\tdefault:\n\t\t\tMapI32(f0, at)\n\t\t}\n\tcase Int64:\n\t\tvar f0 func(int64) int64\n\t\tvar f1 func(int64) (int64, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(int64) int64:\n\t\t\tf0 = f\n\t\tcase func(int64) (int64, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.Int64s()\n\t\tswitch {\n\t\tcase as && incr && f0 != nil:\n\t\t\tat[0] += f0(at[0])\n\t\tcase as && incr && f0 == nil:\n\t\t\tvar tmp int64\n\t\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tat[0] += tmp\n\t\tcase as && !incr && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && !incr && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && incr && f0 != nil:\n\t\t\tMapIncrI64(f0, at)\n\t\tcase !as && incr && f0 == nil:\n\t\t\terr = MapIncrErrI64(f1, at)\n\t\tcase !as && !incr && f0 == nil:\n\t\t\terr = MapErrI64(f1, at)\n\t\tdefault:\n\t\t\tMapI64(f0, at)\n\t\t}\n\tcase Uint:\n\t\tvar f0 func(uint) uint\n\t\tvar f1 func(uint) (uint, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(uint) uint:\n\t\t\tf0 = f\n\t\tcase func(uint) (uint, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.Uints()\n\t\tswitch {\n\t\tcase as && incr && f0 != nil:\n\t\t\tat[0] += f0(at[0])\n\t\tcase as && incr && f0 == nil:\n\t\t\tvar tmp uint\n\t\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tat[0] += tmp\n\t\tcase as && !incr && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && !incr && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && incr && f0 != nil:\n\t\t\tMapIncrU(f0, at)\n\t\tcase !as && incr && f0 == nil:\n\t\t\terr = MapIncrErrU(f1, at)\n\t\tcase !as && !incr && f0 == nil:\n\t\t\terr = MapErrU(f1, at)\n\t\tdefault:\n\t\t\tMapU(f0, at)\n\t\t}\n\tcase Uint8:\n\t\tvar f0 func(uint8) uint8\n\t\tvar f1 func(uint8) (uint8, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(uint8) uint8:\n\t\t\tf0 = f\n\t\tcase func(uint8) (uint8, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.Uint8s()\n\t\tswitch {\n\t\tcase as && incr && f0 != nil:\n\t\t\tat[0] += f0(at[0])\n\t\tcase as && incr && f0 == nil:\n\t\t\tvar tmp uint8\n\t\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tat[0] += tmp\n\t\tcase as && !incr && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && !incr && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && incr && f0 != nil:\n\t\t\tMapIncrU8(f0, at)\n\t\tcase !as && incr && f0 == nil:\n\t\t\terr = MapIncrErrU8(f1, at)\n\t\tcase !as && !incr && f0 == nil:\n\t\t\terr = MapErrU8(f1, at)\n\t\tdefault:\n\t\t\tMapU8(f0, at)\n\t\t}\n\tcase Uint16:\n\t\tvar f0 func(uint16) uint16\n\t\tvar f1 func(uint16) (uint16, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(uint16) uint16:\n\t\t\tf0 = f\n\t\tcase func(uint16) (uint16, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.Uint16s()\n\t\tswitch {\n\t\tcase as && incr && f0 != nil:\n\t\t\tat[0] += f0(at[0])\n\t\tcase as && incr && f0 == nil:\n\t\t\tvar tmp uint16\n\t\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tat[0] += tmp\n\t\tcase as && !incr && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && !incr && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && incr && f0 != nil:\n\t\t\tMapIncrU16(f0, at)\n\t\tcase !as && incr && f0 == nil:\n\t\t\terr = MapIncrErrU16(f1, at)\n\t\tcase !as && !incr && f0 == nil:\n\t\t\terr = MapErrU16(f1, at)\n\t\tdefault:\n\t\t\tMapU16(f0, at)\n\t\t}\n\tcase Uint32:\n\t\tvar f0 func(uint32) uint32\n\t\tvar f1 func(uint32) (uint32, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(uint32) uint32:\n\t\t\tf0 = f\n\t\tcase func(uint32) (uint32, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.Uint32s()\n\t\tswitch {\n\t\tcase as && incr && f0 != nil:\n\t\t\tat[0] += f0(at[0])\n\t\tcase as && incr && f0 == nil:\n\t\t\tvar tmp uint32\n\t\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tat[0] += tmp\n\t\tcase as && !incr && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && !incr && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && incr && f0 != nil:\n\t\t\tMapIncrU32(f0, at)\n\t\tcase !as && incr && f0 == nil:\n\t\t\terr = MapIncrErrU32(f1, at)\n\t\tcase !as && !incr && f0 == nil:\n\t\t\terr = MapErrU32(f1, at)\n\t\tdefault:\n\t\t\tMapU32(f0, at)\n\t\t}\n\tcase Uint64:\n\t\tvar f0 func(uint64) uint64\n\t\tvar f1 func(uint64) (uint64, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(uint64) uint64:\n\t\t\tf0 = f\n\t\tcase func(uint64) (uint64, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.Uint64s()\n\t\tswitch {\n\t\tcase as && incr && f0 != nil:\n\t\t\tat[0] += f0(at[0])\n\t\tcase as && incr && f0 == nil:\n\t\t\tvar tmp uint64\n\t\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tat[0] += tmp\n\t\tcase as && !incr && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && !incr && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && incr && f0 != nil:\n\t\t\tMapIncrU64(f0, at)\n\t\tcase !as && incr && f0 == nil:\n\t\t\terr = MapIncrErrU64(f1, at)\n\t\tcase !as && !incr && f0 == nil:\n\t\t\terr = MapErrU64(f1, at)\n\t\tdefault:\n\t\t\tMapU64(f0, at)\n\t\t}\n\tcase Uintptr:\n\t\tvar f0 func(uintptr) uintptr\n\t\tvar f1 func(uintptr) (uintptr, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(uintptr) uintptr:\n\t\t\tf0 = f\n\t\tcase func(uintptr) (uintptr, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.Uintptrs()\n\t\tif incr {\n\t\t\treturn errors.Errorf(\"Cannot perform increment on t of %v\", t)\n\t\t}\n\t\tswitch {\n\t\tcase as && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && f0 == nil:\n\t\t\terr = MapErrUintptr(f1, at)\n\t\tdefault:\n\t\t\tMapUintptr(f0, at)\n\t\t}\n\tcase Float32:\n\t\tvar f0 func(float32) float32\n\t\tvar f1 func(float32) (float32, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(float32) float32:\n\t\t\tf0 = f\n\t\tcase func(float32) (float32, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.Float32s()\n\t\tswitch {\n\t\tcase as && incr && f0 != nil:\n\t\t\tat[0] += f0(at[0])\n\t\tcase as && incr && f0 == nil:\n\t\t\tvar tmp float32\n\t\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tat[0] += tmp\n\t\tcase as && !incr && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && !incr && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && incr && f0 != nil:\n\t\t\tMapIncrF32(f0, at)\n\t\tcase !as && incr && f0 == nil:\n\t\t\terr = MapIncrErrF32(f1, at)\n\t\tcase !as && !incr && f0 == nil:\n\t\t\terr = MapErrF32(f1, at)\n\t\tdefault:\n\t\t\tMapF32(f0, at)\n\t\t}\n\tcase Float64:\n\t\tvar f0 func(float64) float64\n\t\tvar f1 func(float64) (float64, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(float64) float64:\n\t\t\tf0 = f\n\t\tcase func(float64) (float64, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.Float64s()\n\t\tswitch {\n\t\tcase as && incr && f0 != nil:\n\t\t\tat[0] += f0(at[0])\n\t\tcase as && incr && f0 == nil:\n\t\t\tvar tmp float64\n\t\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tat[0] += tmp\n\t\tcase as && !incr && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && !incr && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && incr && f0 != nil:\n\t\t\tMapIncrF64(f0, at)\n\t\tcase !as && incr && f0 == nil:\n\t\t\terr = MapIncrErrF64(f1, at)\n\t\tcase !as && !incr && f0 == nil:\n\t\t\terr = MapErrF64(f1, at)\n\t\tdefault:\n\t\t\tMapF64(f0, at)\n\t\t}\n\tcase Complex64:\n\t\tvar f0 func(complex64) complex64\n\t\tvar f1 func(complex64) (complex64, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(complex64) complex64:\n\t\t\tf0 = f\n\t\tcase func(complex64) (complex64, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.Complex64s()\n\t\tswitch {\n\t\tcase as && incr && f0 != nil:\n\t\t\tat[0] += f0(at[0])\n\t\tcase as && incr && f0 == nil:\n\t\t\tvar tmp complex64\n\t\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tat[0] += tmp\n\t\tcase as && !incr && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && !incr && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && incr && f0 != nil:\n\t\t\tMapIncrC64(f0, at)\n\t\tcase !as && incr && f0 == nil:\n\t\t\terr = MapIncrErrC64(f1, at)\n\t\tcase !as && !incr && f0 == nil:\n\t\t\terr = MapErrC64(f1, at)\n\t\tdefault:\n\t\t\tMapC64(f0, at)\n\t\t}\n\tcase Complex128:\n\t\tvar f0 func(complex128) complex128\n\t\tvar f1 func(complex128) (complex128, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(complex128) complex128:\n\t\t\tf0 = f\n\t\tcase func(complex128) (complex128, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.Complex128s()\n\t\tswitch {\n\t\tcase as && incr && f0 != nil:\n\t\t\tat[0] += f0(at[0])\n\t\tcase as && incr && f0 == nil:\n\t\t\tvar tmp complex128\n\t\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tat[0] += tmp\n\t\tcase as && !incr && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && !incr && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && incr && f0 != nil:\n\t\t\tMapIncrC128(f0, at)\n\t\tcase !as && incr && f0 == nil:\n\t\t\terr = MapIncrErrC128(f1, at)\n\t\tcase !as && !incr && f0 == nil:\n\t\t\terr = MapErrC128(f1, at)\n\t\tdefault:\n\t\t\tMapC128(f0, at)\n\t\t}\n\tcase String:\n\t\tvar f0 func(string) string\n\t\tvar f1 func(string) (string, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(string) string:\n\t\t\tf0 = f\n\t\tcase func(string) (string, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.Strings()\n\t\tswitch {\n\t\tcase as && incr && f0 != nil:\n\t\t\tat[0] += f0(at[0])\n\t\tcase as && incr && f0 == nil:\n\t\t\tvar tmp string\n\t\t\tif tmp, err = f1(at[0]); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tat[0] += tmp\n\t\tcase as && !incr && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && !incr && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && incr && f0 != nil:\n\t\t\tMapIncrStr(f0, at)\n\t\tcase !as && incr && f0 == nil:\n\t\t\terr = MapIncrErrStr(f1, at)\n\t\tcase !as && !incr && f0 == nil:\n\t\t\terr = MapErrStr(f1, at)\n\t\tdefault:\n\t\t\tMapStr(f0, at)\n\t\t}\n\tcase UnsafePointer:\n\t\tvar f0 func(unsafe.Pointer) unsafe.Pointer\n\t\tvar f1 func(unsafe.Pointer) (unsafe.Pointer, error)\n\n\t\tswitch f := fn.(type) {\n\t\tcase func(unsafe.Pointer) unsafe.Pointer:\n\t\t\tf0 = f\n\t\tcase func(unsafe.Pointer) (unsafe.Pointer, error):\n\t\t\tf1 = f\n\t\tdefault:\n\t\t\treturn errors.Errorf(\"Cannot map fn of %T to array\", fn)\n\t\t}\n\n\t\tat := a.UnsafePointers()\n\t\tif incr {\n\t\t\treturn errors.Errorf(\"Cannot perform increment on t of %v\", t)\n\t\t}\n\t\tswitch {\n\t\tcase as && f0 != nil:\n\t\t\tat[0] = f0(at[0])\n\t\tcase as && f0 == nil:\n\t\t\tat[0], err = f1(at[0])\n\t\tcase !as && f0 == nil:\n\t\t\terr = MapErrUnsafePointer(f1, at)\n\t\tdefault:\n\t\t\tMapUnsafePointer(f0, at)\n\t\t}\n\tdefault:\n\t\treturn errors.Errorf(\"Cannot map t of %v\", t)\n\n\t}\n\n\treturn\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Map",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "isScalar",
      "package" : 0,
      "type" : 84,
      "exported" : false
    }, {
      "name" : "Errorf",
      "package" : 4,
      "type" : 89,
      "exported" : true
    }, {
      "name" : "Bools",
      "package" : 3,
      "type" : 94,
      "exported" : true
    }, {
      "name" : "MapErrB",
      "package" : 0,
      "type" : 97,
      "exported" : true
    }, {
      "name" : "MapB",
      "package" : 0,
      "type" : 99,
      "exported" : true
    }, {
      "name" : "Ints",
      "package" : 3,
      "type" : 104,
      "exported" : true
    }, {
      "name" : "MapIncrI",
      "package" : 0,
      "type" : 107,
      "exported" : true
    }, {
      "name" : "MapIncrErrI",
      "package" : 0,
      "type" : 109,
      "exported" : true
    }, {
      "name" : "MapErrI",
      "package" : 0,
      "type" : 109,
      "exported" : true
    }, {
      "name" : "MapI",
      "package" : 0,
      "type" : 107,
      "exported" : true
    }, {
      "name" : "Int8s",
      "package" : 3,
      "type" : 117,
      "exported" : true
    }, {
      "name" : "MapIncrI8",
      "package" : 0,
      "type" : 119,
      "exported" : true
    }, {
      "name" : "MapIncrErrI8",
      "package" : 0,
      "type" : 121,
      "exported" : true
    }, {
      "name" : "MapErrI8",
      "package" : 0,
      "type" : 121,
      "exported" : true
    }, {
      "name" : "MapI8",
      "package" : 0,
      "type" : 119,
      "exported" : true
    }, {
      "name" : "Int16s",
      "package" : 3,
      "type" : 129,
      "exported" : true
    }, {
      "name" : "MapIncrI16",
      "package" : 0,
      "type" : 131,
      "exported" : true
    }, {
      "name" : "MapIncrErrI16",
      "package" : 0,
      "type" : 133,
      "exported" : true
    }, {
      "name" : "MapErrI16",
      "package" : 0,
      "type" : 133,
      "exported" : true
    }, {
      "name" : "MapI16",
      "package" : 0,
      "type" : 131,
      "exported" : true
    }, {
      "name" : "Int32s",
      "package" : 3,
      "type" : 140,
      "exported" : true
    }, {
      "name" : "MapIncrI32",
      "package" : 0,
      "type" : 142,
      "exported" : true
    }, {
      "name" : "MapIncrErrI32",
      "package" : 0,
      "type" : 144,
      "exported" : true
    }, {
      "name" : "MapErrI32",
      "package" : 0,
      "type" : 144,
      "exported" : true
    }, {
      "name" : "MapI32",
      "package" : 0,
      "type" : 142,
      "exported" : true
    }, {
      "name" : "Int64s",
      "package" : 3,
      "type" : 152,
      "exported" : true
    }, {
      "name" : "MapIncrI64",
      "package" : 0,
      "type" : 154,
      "exported" : true
    }, {
      "name" : "MapIncrErrI64",
      "package" : 0,
      "type" : 156,
      "exported" : true
    }, {
      "name" : "MapErrI64",
      "package" : 0,
      "type" : 156,
      "exported" : true
    }, {
      "name" : "MapI64",
      "package" : 0,
      "type" : 154,
      "exported" : true
    }, {
      "name" : "Uints",
      "package" : 3,
      "type" : 163,
      "exported" : true
    }, {
      "name" : "MapIncrU",
      "package" : 0,
      "type" : 165,
      "exported" : true
    }, {
      "name" : "MapIncrErrU",
      "package" : 0,
      "type" : 167,
      "exported" : true
    }, {
      "name" : "MapErrU",
      "package" : 0,
      "type" : 167,
      "exported" : true
    }, {
      "name" : "MapU",
      "package" : 0,
      "type" : 165,
      "exported" : true
    }, {
      "name" : "Uint8s",
      "package" : 3,
      "type" : 174,
      "exported" : true
    }, {
      "name" : "MapIncrU8",
      "package" : 0,
      "type" : 176,
      "exported" : true
    }, {
      "name" : "MapIncrErrU8",
      "package" : 0,
      "type" : 178,
      "exported" : true
    }, {
      "name" : "MapErrU8",
      "package" : 0,
      "type" : 178,
      "exported" : true
    }, {
      "name" : "MapU8",
      "package" : 0,
      "type" : 176,
      "exported" : true
    }, {
      "name" : "Uint16s",
      "package" : 3,
      "type" : 185,
      "exported" : true
    }, {
      "name" : "MapIncrU16",
      "package" : 0,
      "type" : 187,
      "exported" : true
    }, {
      "name" : "MapIncrErrU16",
      "package" : 0,
      "type" : 189,
      "exported" : true
    }, {
      "name" : "MapErrU16",
      "package" : 0,
      "type" : 189,
      "exported" : true
    }, {
      "name" : "MapU16",
      "package" : 0,
      "type" : 187,
      "exported" : true
    }, {
      "name" : "Uint32s",
      "package" : 3,
      "type" : 196,
      "exported" : true
    }, {
      "name" : "MapIncrU32",
      "package" : 0,
      "type" : 198,
      "exported" : true
    }, {
      "name" : "MapIncrErrU32",
      "package" : 0,
      "type" : 200,
      "exported" : true
    }, {
      "name" : "MapErrU32",
      "package" : 0,
      "type" : 200,
      "exported" : true
    }, {
      "name" : "MapU32",
      "package" : 0,
      "type" : 198,
      "exported" : true
    }, {
      "name" : "Uint64s",
      "package" : 3,
      "type" : 208,
      "exported" : true
    }, {
      "name" : "MapIncrU64",
      "package" : 0,
      "type" : 210,
      "exported" : true
    }, {
      "name" : "MapIncrErrU64",
      "package" : 0,
      "type" : 212,
      "exported" : true
    }, {
      "name" : "MapErrU64",
      "package" : 0,
      "type" : 212,
      "exported" : true
    }, {
      "name" : "MapU64",
      "package" : 0,
      "type" : 210,
      "exported" : true
    }, {
      "name" : "Uintptrs",
      "package" : 3,
      "type" : 218,
      "exported" : true
    }, {
      "name" : "MapErrUintptr",
      "package" : 0,
      "type" : 220,
      "exported" : true
    }, {
      "name" : "MapUintptr",
      "package" : 0,
      "type" : 222,
      "exported" : true
    }, {
      "name" : "Float32s",
      "package" : 3,
      "type" : 230,
      "exported" : true
    }, {
      "name" : "MapIncrF32",
      "package" : 0,
      "type" : 232,
      "exported" : true
    }, {
      "name" : "MapIncrErrF32",
      "package" : 0,
      "type" : 234,
      "exported" : true
    }, {
      "name" : "MapErrF32",
      "package" : 0,
      "type" : 234,
      "exported" : true
    }, {
      "name" : "MapF32",
      "package" : 0,
      "type" : 232,
      "exported" : true
    }, {
      "name" : "Float64s",
      "package" : 3,
      "type" : 242,
      "exported" : true
    }, {
      "name" : "MapIncrF64",
      "package" : 0,
      "type" : 244,
      "exported" : true
    }, {
      "name" : "MapIncrErrF64",
      "package" : 0,
      "type" : 246,
      "exported" : true
    }, {
      "name" : "MapErrF64",
      "package" : 0,
      "type" : 246,
      "exported" : true
    }, {
      "name" : "MapF64",
      "package" : 0,
      "type" : 244,
      "exported" : true
    }, {
      "name" : "Complex64s",
      "package" : 3,
      "type" : 254,
      "exported" : true
    }, {
      "name" : "MapIncrC64",
      "package" : 0,
      "type" : 256,
      "exported" : true
    }, {
      "name" : "MapIncrErrC64",
      "package" : 0,
      "type" : 258,
      "exported" : true
    }, {
      "name" : "MapErrC64",
      "package" : 0,
      "type" : 258,
      "exported" : true
    }, {
      "name" : "MapC64",
      "package" : 0,
      "type" : 256,
      "exported" : true
    }, {
      "name" : "Complex128s",
      "package" : 3,
      "type" : 266,
      "exported" : true
    }, {
      "name" : "MapIncrC128",
      "package" : 0,
      "type" : 268,
      "exported" : true
    }, {
      "name" : "MapIncrErrC128",
      "package" : 0,
      "type" : 270,
      "exported" : true
    }, {
      "name" : "MapErrC128",
      "package" : 0,
      "type" : 270,
      "exported" : true
    }, {
      "name" : "MapC128",
      "package" : 0,
      "type" : 268,
      "exported" : true
    }, {
      "name" : "Strings",
      "package" : 3,
      "type" : 276,
      "exported" : true
    }, {
      "name" : "MapIncrStr",
      "package" : 0,
      "type" : 278,
      "exported" : true
    }, {
      "name" : "MapIncrErrStr",
      "package" : 0,
      "type" : 280,
      "exported" : true
    }, {
      "name" : "MapErrStr",
      "package" : 0,
      "type" : 280,
      "exported" : true
    }, {
      "name" : "MapStr",
      "package" : 0,
      "type" : 278,
      "exported" : true
    }, {
      "name" : "UnsafePointers",
      "package" : 3,
      "type" : 287,
      "exported" : true
    }, {
      "name" : "MapErrUnsafePointer",
      "package" : 0,
      "type" : 289,
      "exported" : true
    }, {
      "name" : "MapUnsafePointer",
      "package" : 0,
      "type" : 291,
      "exported" : true
    } ],
    "line-end" : 643,
    "line-start" : 13,
    "names" : [ "Map" ],
    "package" : 0,
    "packages" : [ {
      "name" : "execution",
      "path" : "gorgonia.org/tensor/internal/execution"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "storage",
      "path" : "gorgonia.org/tensor/internal/storage"
    }, {
      "name" : "errors",
      "path" : "github.com/pkg/errors"
    } ],
    "params" : [ 18, 19, 20, 21 ],
    "receivers" : [ 17 ],
    "results" : [ 22 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(t reflect.Type, fn interface{}, a *gorgonia.org/tensor/internal/storage.Header, incr bool) (err error)",
      "params" : 1,
      "recv" : 17,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "fn",
        "type" : 75
      }, {
        "name" : "a",
        "type" : 76
      }, {
        "name" : "incr",
        "type" : 11
      } ],
      "name" : "(t reflect.Type, fn interface{}, a *gorgonia.org/tensor/internal/storage.Header, incr bool)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 1,
      "type" : "Named",
      "underlying" : 3
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 4
      }, {
        "name" : "AssignableTo",
        "type" : 8
      }, {
        "name" : "Bits",
        "type" : 4
      }, {
        "name" : "ChanDir",
        "type" : 12
      }, {
        "name" : "Comparable",
        "type" : 15
      }, {
        "name" : "ConvertibleTo",
        "type" : 8
      }, {
        "name" : "Elem",
        "type" : 16
      }, {
        "name" : "Field",
        "type" : 18
      }, {
        "name" : "FieldAlign",
        "type" : 4
      }, {
        "name" : "FieldByIndex",
        "type" : 27
      }, {
        "name" : "FieldByName",
        "type" : 29
      }, {
        "name" : "FieldByNameFunc",
        "type" : 32
      }, {
        "name" : "Implements",
        "type" : 8
      }, {
        "name" : "In",
        "type" : 36
      }, {
        "name" : "IsVariadic",
        "type" : 15
      }, {
        "name" : "Key",
        "type" : 16
      }, {
        "name" : "Kind",
        "type" : 37
      }, {
        "name" : "Len",
        "type" : 4
      }, {
        "name" : "Method",
        "type" : 41
      }, {
        "name" : "MethodByName",
        "type" : 62
      }, {
        "name" : "Name",
        "type" : 64
      }, {
        "name" : "NumField",
        "type" : 4
      }, {
        "name" : "NumIn",
        "type" : 4
      }, {
        "name" : "NumMethod",
        "type" : 4
      }, {
        "name" : "NumOut",
        "type" : 4
      }, {
        "name" : "Out",
        "type" : 36
      }, {
        "name" : "PkgPath",
        "type" : 64
      }, {
        "name" : "Size",
        "type" : 65
      }, {
        "name" : "String",
        "type" : 64
      }, {
        "name" : "common",
        "type" : 67
      }, {
        "name" : "uncommon",
        "type" : 69
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 3
    }, {
      "name" : "func() int",
      "params" : 5,
      "recv" : 0,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 4,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "func(u reflect.Type) bool",
      "params" : 9,
      "recv" : 1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 2
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "func() reflect.ChanDir",
      "params" : 5,
      "recv" : 2,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "name" : "func() bool",
      "params" : 5,
      "recv" : 3,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 15,
      "variadic" : false
    }, {
      "name" : "func() reflect.Type",
      "params" : 5,
      "recv" : 4,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 16,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "name" : "func(i int) reflect.StructField",
      "params" : 19,
      "recv" : 5,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 7
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 1,
      "type" : "Named",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 23
      }, {
        "name" : "PkgPath",
        "type" : 23
      }, {
        "name" : "Type",
        "type" : 2
      }, {
        "name" : "Tag",
        "type" : 24
      }, {
        "name" : "Offset",
        "type" : 25
      }, {
        "name" : "Index",
        "type" : 26
      }, {
        "name" : "Anonymous",
        "type" : 11
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 22
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 23
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "elem" : 7,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 26
    }, {
      "name" : "func(index []int) reflect.StructField",
      "params" : 28,
      "recv" : 6,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 26
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "name" : "func(name string) (reflect.StructField, bool)",
      "params" : 30,
      "recv" : 7,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 23
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "name" : "func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 33,
      "recv" : 8,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 34
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "name" : "func(string) bool",
      "params" : 35,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 34,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "name" : "func(i int) reflect.Type",
      "params" : 19,
      "recv" : 9,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 36,
      "variadic" : false
    }, {
      "name" : "func() reflect.Kind",
      "params" : 5,
      "recv" : 10,
      "results" : 38,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 1,
      "type" : "Named",
      "underlying" : 40
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "name" : "func(int) reflect.Method",
      "params" : 6,
      "recv" : 11,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 41,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 43
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 1,
      "type" : "Named",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 23
      }, {
        "name" : "PkgPath",
        "type" : 23
      }, {
        "name" : "Type",
        "type" : 2
      }, {
        "name" : "Func",
        "type" : 45
      }, {
        "name" : "Index",
        "type" : 7
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 44
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 1,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 47
      }, {
        "name" : "ptr",
        "type" : 55
      }, {
        "name" : "flag",
        "type" : 61
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 46
    }, {
      "elem" : 48,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 47
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 1,
      "type" : "Named",
      "underlying" : 49
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 25
      }, {
        "name" : "ptrdata",
        "type" : 25
      }, {
        "name" : "hash",
        "type" : 50
      }, {
        "name" : "tflag",
        "type" : 51
      }, {
        "name" : "align",
        "type" : 52
      }, {
        "name" : "fieldAlign",
        "type" : 52
      }, {
        "name" : "kind",
        "type" : 52
      }, {
        "name" : "equal",
        "type" : 53
      }, {
        "name" : "gcdata",
        "type" : 56
      }, {
        "name" : "str",
        "type" : 58
      }, {
        "name" : "ptrToThis",
        "type" : 60
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 49
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 50
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 52
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 52
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 54,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 53,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 55
      }, {
        "name" : "",
        "type" : 55
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 54
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 55
    }, {
      "elem" : 57,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 56
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 57
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 59
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 59
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 59
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 25
    }, {
      "name" : "func(string) (reflect.Method, bool)",
      "params" : 35,
      "recv" : 12,
      "results" : 63,
      "type" : "Signature",
      "underlying" : 62,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 43
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 63
    }, {
      "name" : "func() string",
      "params" : 5,
      "recv" : 13,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 64,
      "variadic" : false
    }, {
      "name" : "func() uintptr",
      "params" : 5,
      "recv" : 14,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 65,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 66
    }, {
      "name" : "func() *reflect.rtype",
      "params" : 5,
      "recv" : 15,
      "results" : 68,
      "type" : "Signature",
      "underlying" : 67,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 47
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 68
    }, {
      "name" : "func() *reflect.uncommonType",
      "params" : 5,
      "recv" : 16,
      "results" : 70,
      "type" : "Signature",
      "underlying" : 69,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 71
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 70
    }, {
      "elem" : 72,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 71
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 1,
      "type" : "Named",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 58
      }, {
        "name" : "mcount",
        "type" : 74
      }, {
        "name" : "xcount",
        "type" : 74
      }, {
        "name" : "moff",
        "type" : 50
      }, {
        "name" : "_",
        "type" : 50
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 73
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 74
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 75
    }, {
      "elem" : 77,
      "name" : "*gorgonia.org/tensor/internal/storage.Header",
      "type" : "Pointer",
      "underlying" : 76
    }, {
      "local-name" : "Header",
      "name" : "gorgonia.org/tensor/internal/storage.Header",
      "package" : 3,
      "type" : "Named",
      "underlying" : 78
    }, {
      "fields" : [ {
        "name" : "Ptr",
        "type" : 55
      }, {
        "name" : "L",
        "type" : 7
      }, {
        "name" : "C",
        "type" : 7
      } ],
      "name" : "struct{Ptr unsafe.Pointer; L int; C int}",
      "type" : "Struct",
      "underlying" : 78
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 80
      } ],
      "name" : "(err error)",
      "type" : "Tuple",
      "underlying" : 79
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 81
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 64
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 81
    }, {
      "local-name" : "E",
      "name" : "gorgonia.org/tensor/internal/execution.E",
      "package" : 0,
      "type" : "Named",
      "underlying" : 83
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 83
    }, {
      "name" : "func(a *gorgonia.org/tensor/internal/storage.Header) bool",
      "params" : 85,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 84,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 76
      } ],
      "name" : "(a *gorgonia.org/tensor/internal/storage.Header)",
      "type" : "Tuple",
      "underlying" : 85
    }, {
      "name" : "func(bool) bool",
      "params" : 10,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 86,
      "variadic" : false
    }, {
      "name" : "func(bool) (bool, error)",
      "params" : 10,
      "recv" : -1,
      "results" : 88,
      "type" : "Signature",
      "underlying" : 87,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(bool, error)",
      "type" : "Tuple",
      "underlying" : 88
    }, {
      "name" : "func(format string, args ...interface{}) error",
      "params" : 90,
      "recv" : -1,
      "results" : 92,
      "type" : "Signature",
      "underlying" : 89,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "format",
        "type" : 23
      }, {
        "name" : "args",
        "type" : 91
      } ],
      "name" : "(format string, args []interface{})",
      "type" : "Tuple",
      "underlying" : 90
    }, {
      "elem" : 75,
      "name" : "[]interface{}",
      "type" : "Slice",
      "underlying" : 91
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 92
    }, {
      "elem" : 11,
      "name" : "[]bool",
      "type" : "Slice",
      "underlying" : 93
    }, {
      "name" : "func() []bool",
      "params" : 5,
      "recv" : -1,
      "results" : 95,
      "type" : "Signature",
      "underlying" : 94,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 93
      } ],
      "name" : "([]bool)",
      "type" : "Tuple",
      "underlying" : 95
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 96
    }, {
      "name" : "func(fn func(bool) (bool, error), a []bool) (err error)",
      "params" : 98,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 97,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 87
      }, {
        "name" : "a",
        "type" : 93
      } ],
      "name" : "(fn func(bool) (bool, error), a []bool)",
      "type" : "Tuple",
      "underlying" : 98
    }, {
      "name" : "func(fn func(bool) bool, a []bool)",
      "params" : 100,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 99,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 86
      }, {
        "name" : "a",
        "type" : 93
      } ],
      "name" : "(fn func(bool) bool, a []bool)",
      "type" : "Tuple",
      "underlying" : 100
    }, {
      "name" : "func(int) int",
      "params" : 6,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 101,
      "variadic" : false
    }, {
      "name" : "func(int) (int, error)",
      "params" : 6,
      "recv" : -1,
      "results" : 103,
      "type" : "Signature",
      "underlying" : 102,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(int, error)",
      "type" : "Tuple",
      "underlying" : 103
    }, {
      "name" : "func() []int",
      "params" : 5,
      "recv" : -1,
      "results" : 105,
      "type" : "Signature",
      "underlying" : 104,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 26
      } ],
      "name" : "([]int)",
      "type" : "Tuple",
      "underlying" : 105
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 106
    }, {
      "name" : "func(fn func(int) int, a []int)",
      "params" : 108,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 107,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 101
      }, {
        "name" : "a",
        "type" : 26
      } ],
      "name" : "(fn func(int) int, a []int)",
      "type" : "Tuple",
      "underlying" : 108
    }, {
      "name" : "func(fn func(int) (int, error), a []int) (err error)",
      "params" : 110,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 109,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 102
      }, {
        "name" : "a",
        "type" : 26
      } ],
      "name" : "(fn func(int) (int, error), a []int)",
      "type" : "Tuple",
      "underlying" : 110
    }, {
      "name" : "func(int8) int8",
      "params" : 112,
      "recv" : -1,
      "results" : 112,
      "type" : "Signature",
      "underlying" : 111,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 113
      } ],
      "name" : "(int8)",
      "type" : "Tuple",
      "underlying" : 112
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 113
    }, {
      "name" : "func(int8) (int8, error)",
      "params" : 112,
      "recv" : -1,
      "results" : 115,
      "type" : "Signature",
      "underlying" : 114,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 113
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(int8, error)",
      "type" : "Tuple",
      "underlying" : 115
    }, {
      "elem" : 113,
      "name" : "[]int8",
      "type" : "Slice",
      "underlying" : 116
    }, {
      "name" : "func() []int8",
      "params" : 5,
      "recv" : -1,
      "results" : 118,
      "type" : "Signature",
      "underlying" : 117,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 116
      } ],
      "name" : "([]int8)",
      "type" : "Tuple",
      "underlying" : 118
    }, {
      "name" : "func(fn func(int8) int8, a []int8)",
      "params" : 120,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 119,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 111
      }, {
        "name" : "a",
        "type" : 116
      } ],
      "name" : "(fn func(int8) int8, a []int8)",
      "type" : "Tuple",
      "underlying" : 120
    }, {
      "name" : "func(fn func(int8) (int8, error), a []int8) (err error)",
      "params" : 122,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 121,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 114
      }, {
        "name" : "a",
        "type" : 116
      } ],
      "name" : "(fn func(int8) (int8, error), a []int8)",
      "type" : "Tuple",
      "underlying" : 122
    }, {
      "name" : "func(int16) int16",
      "params" : 124,
      "recv" : -1,
      "results" : 124,
      "type" : "Signature",
      "underlying" : 123,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 125
      } ],
      "name" : "(int16)",
      "type" : "Tuple",
      "underlying" : 124
    }, {
      "name" : "int16",
      "type" : "Basic",
      "underlying" : 125
    }, {
      "name" : "func(int16) (int16, error)",
      "params" : 124,
      "recv" : -1,
      "results" : 127,
      "type" : "Signature",
      "underlying" : 126,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 125
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(int16, error)",
      "type" : "Tuple",
      "underlying" : 127
    }, {
      "elem" : 125,
      "name" : "[]int16",
      "type" : "Slice",
      "underlying" : 128
    }, {
      "name" : "func() []int16",
      "params" : 5,
      "recv" : -1,
      "results" : 130,
      "type" : "Signature",
      "underlying" : 129,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 128
      } ],
      "name" : "([]int16)",
      "type" : "Tuple",
      "underlying" : 130
    }, {
      "name" : "func(fn func(int16) int16, a []int16)",
      "params" : 132,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 131,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 123
      }, {
        "name" : "a",
        "type" : 128
      } ],
      "name" : "(fn func(int16) int16, a []int16)",
      "type" : "Tuple",
      "underlying" : 132
    }, {
      "name" : "func(fn func(int16) (int16, error), a []int16) (err error)",
      "params" : 134,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 133,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 126
      }, {
        "name" : "a",
        "type" : 128
      } ],
      "name" : "(fn func(int16) (int16, error), a []int16)",
      "type" : "Tuple",
      "underlying" : 134
    }, {
      "name" : "func(int32) int32",
      "params" : 136,
      "recv" : -1,
      "results" : 136,
      "type" : "Signature",
      "underlying" : 135,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 59
      } ],
      "name" : "(int32)",
      "type" : "Tuple",
      "underlying" : 136
    }, {
      "name" : "func(int32) (int32, error)",
      "params" : 136,
      "recv" : -1,
      "results" : 138,
      "type" : "Signature",
      "underlying" : 137,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 59
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(int32, error)",
      "type" : "Tuple",
      "underlying" : 138
    }, {
      "elem" : 59,
      "name" : "[]int32",
      "type" : "Slice",
      "underlying" : 139
    }, {
      "name" : "func() []int32",
      "params" : 5,
      "recv" : -1,
      "results" : 141,
      "type" : "Signature",
      "underlying" : 140,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 139
      } ],
      "name" : "([]int32)",
      "type" : "Tuple",
      "underlying" : 141
    }, {
      "name" : "func(fn func(int32) int32, a []int32)",
      "params" : 143,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 142,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 135
      }, {
        "name" : "a",
        "type" : 139
      } ],
      "name" : "(fn func(int32) int32, a []int32)",
      "type" : "Tuple",
      "underlying" : 143
    }, {
      "name" : "func(fn func(int32) (int32, error), a []int32) (err error)",
      "params" : 145,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 144,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 137
      }, {
        "name" : "a",
        "type" : 139
      } ],
      "name" : "(fn func(int32) (int32, error), a []int32)",
      "type" : "Tuple",
      "underlying" : 145
    }, {
      "name" : "func(int64) int64",
      "params" : 147,
      "recv" : -1,
      "results" : 147,
      "type" : "Signature",
      "underlying" : 146,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 148
      } ],
      "name" : "(int64)",
      "type" : "Tuple",
      "underlying" : 147
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 148
    }, {
      "name" : "func(int64) (int64, error)",
      "params" : 147,
      "recv" : -1,
      "results" : 150,
      "type" : "Signature",
      "underlying" : 149,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 148
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(int64, error)",
      "type" : "Tuple",
      "underlying" : 150
    }, {
      "elem" : 148,
      "name" : "[]int64",
      "type" : "Slice",
      "underlying" : 151
    }, {
      "name" : "func() []int64",
      "params" : 5,
      "recv" : -1,
      "results" : 153,
      "type" : "Signature",
      "underlying" : 152,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 151
      } ],
      "name" : "([]int64)",
      "type" : "Tuple",
      "underlying" : 153
    }, {
      "name" : "func(fn func(int64) int64, a []int64)",
      "params" : 155,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 154,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 146
      }, {
        "name" : "a",
        "type" : 151
      } ],
      "name" : "(fn func(int64) int64, a []int64)",
      "type" : "Tuple",
      "underlying" : 155
    }, {
      "name" : "func(fn func(int64) (int64, error), a []int64) (err error)",
      "params" : 157,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 156,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 149
      }, {
        "name" : "a",
        "type" : 151
      } ],
      "name" : "(fn func(int64) (int64, error), a []int64)",
      "type" : "Tuple",
      "underlying" : 157
    }, {
      "name" : "func(uint) uint",
      "params" : 159,
      "recv" : -1,
      "results" : 159,
      "type" : "Signature",
      "underlying" : 158,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      } ],
      "name" : "(uint)",
      "type" : "Tuple",
      "underlying" : 159
    }, {
      "name" : "func(uint) (uint, error)",
      "params" : 159,
      "recv" : -1,
      "results" : 161,
      "type" : "Signature",
      "underlying" : 160,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(uint, error)",
      "type" : "Tuple",
      "underlying" : 161
    }, {
      "elem" : 40,
      "name" : "[]uint",
      "type" : "Slice",
      "underlying" : 162
    }, {
      "name" : "func() []uint",
      "params" : 5,
      "recv" : -1,
      "results" : 164,
      "type" : "Signature",
      "underlying" : 163,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 162
      } ],
      "name" : "([]uint)",
      "type" : "Tuple",
      "underlying" : 164
    }, {
      "name" : "func(fn func(uint) uint, a []uint)",
      "params" : 166,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 165,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 158
      }, {
        "name" : "a",
        "type" : 162
      } ],
      "name" : "(fn func(uint) uint, a []uint)",
      "type" : "Tuple",
      "underlying" : 166
    }, {
      "name" : "func(fn func(uint) (uint, error), a []uint) (err error)",
      "params" : 168,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 167,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 160
      }, {
        "name" : "a",
        "type" : 162
      } ],
      "name" : "(fn func(uint) (uint, error), a []uint)",
      "type" : "Tuple",
      "underlying" : 168
    }, {
      "name" : "func(uint8) uint8",
      "params" : 170,
      "recv" : -1,
      "results" : 170,
      "type" : "Signature",
      "underlying" : 169,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 52
      } ],
      "name" : "(uint8)",
      "type" : "Tuple",
      "underlying" : 170
    }, {
      "name" : "func(uint8) (uint8, error)",
      "params" : 170,
      "recv" : -1,
      "results" : 172,
      "type" : "Signature",
      "underlying" : 171,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 52
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(uint8, error)",
      "type" : "Tuple",
      "underlying" : 172
    }, {
      "elem" : 52,
      "name" : "[]uint8",
      "type" : "Slice",
      "underlying" : 173
    }, {
      "name" : "func() []uint8",
      "params" : 5,
      "recv" : -1,
      "results" : 175,
      "type" : "Signature",
      "underlying" : 174,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 173
      } ],
      "name" : "([]uint8)",
      "type" : "Tuple",
      "underlying" : 175
    }, {
      "name" : "func(fn func(uint8) uint8, a []uint8)",
      "params" : 177,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 176,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 169
      }, {
        "name" : "a",
        "type" : 173
      } ],
      "name" : "(fn func(uint8) uint8, a []uint8)",
      "type" : "Tuple",
      "underlying" : 177
    }, {
      "name" : "func(fn func(uint8) (uint8, error), a []uint8) (err error)",
      "params" : 179,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 178,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 171
      }, {
        "name" : "a",
        "type" : 173
      } ],
      "name" : "(fn func(uint8) (uint8, error), a []uint8)",
      "type" : "Tuple",
      "underlying" : 179
    }, {
      "name" : "func(uint16) uint16",
      "params" : 181,
      "recv" : -1,
      "results" : 181,
      "type" : "Signature",
      "underlying" : 180,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 74
      } ],
      "name" : "(uint16)",
      "type" : "Tuple",
      "underlying" : 181
    }, {
      "name" : "func(uint16) (uint16, error)",
      "params" : 181,
      "recv" : -1,
      "results" : 183,
      "type" : "Signature",
      "underlying" : 182,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 74
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(uint16, error)",
      "type" : "Tuple",
      "underlying" : 183
    }, {
      "elem" : 74,
      "name" : "[]uint16",
      "type" : "Slice",
      "underlying" : 184
    }, {
      "name" : "func() []uint16",
      "params" : 5,
      "recv" : -1,
      "results" : 186,
      "type" : "Signature",
      "underlying" : 185,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 184
      } ],
      "name" : "([]uint16)",
      "type" : "Tuple",
      "underlying" : 186
    }, {
      "name" : "func(fn func(uint16) uint16, a []uint16)",
      "params" : 188,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 187,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 180
      }, {
        "name" : "a",
        "type" : 184
      } ],
      "name" : "(fn func(uint16) uint16, a []uint16)",
      "type" : "Tuple",
      "underlying" : 188
    }, {
      "name" : "func(fn func(uint16) (uint16, error), a []uint16) (err error)",
      "params" : 190,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 189,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 182
      }, {
        "name" : "a",
        "type" : 184
      } ],
      "name" : "(fn func(uint16) (uint16, error), a []uint16)",
      "type" : "Tuple",
      "underlying" : 190
    }, {
      "name" : "func(uint32) uint32",
      "params" : 192,
      "recv" : -1,
      "results" : 192,
      "type" : "Signature",
      "underlying" : 191,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 50
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 192
    }, {
      "name" : "func(uint32) (uint32, error)",
      "params" : 192,
      "recv" : -1,
      "results" : 194,
      "type" : "Signature",
      "underlying" : 193,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 50
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(uint32, error)",
      "type" : "Tuple",
      "underlying" : 194
    }, {
      "elem" : 50,
      "name" : "[]uint32",
      "type" : "Slice",
      "underlying" : 195
    }, {
      "name" : "func() []uint32",
      "params" : 5,
      "recv" : -1,
      "results" : 197,
      "type" : "Signature",
      "underlying" : 196,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 195
      } ],
      "name" : "([]uint32)",
      "type" : "Tuple",
      "underlying" : 197
    }, {
      "name" : "func(fn func(uint32) uint32, a []uint32)",
      "params" : 199,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 198,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 191
      }, {
        "name" : "a",
        "type" : 195
      } ],
      "name" : "(fn func(uint32) uint32, a []uint32)",
      "type" : "Tuple",
      "underlying" : 199
    }, {
      "name" : "func(fn func(uint32) (uint32, error), a []uint32) (err error)",
      "params" : 201,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 200,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 193
      }, {
        "name" : "a",
        "type" : 195
      } ],
      "name" : "(fn func(uint32) (uint32, error), a []uint32)",
      "type" : "Tuple",
      "underlying" : 201
    }, {
      "name" : "func(uint64) uint64",
      "params" : 203,
      "recv" : -1,
      "results" : 203,
      "type" : "Signature",
      "underlying" : 202,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 204
      } ],
      "name" : "(uint64)",
      "type" : "Tuple",
      "underlying" : 203
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 204
    }, {
      "name" : "func(uint64) (uint64, error)",
      "params" : 203,
      "recv" : -1,
      "results" : 206,
      "type" : "Signature",
      "underlying" : 205,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 204
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(uint64, error)",
      "type" : "Tuple",
      "underlying" : 206
    }, {
      "elem" : 204,
      "name" : "[]uint64",
      "type" : "Slice",
      "underlying" : 207
    }, {
      "name" : "func() []uint64",
      "params" : 5,
      "recv" : -1,
      "results" : 209,
      "type" : "Signature",
      "underlying" : 208,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 207
      } ],
      "name" : "([]uint64)",
      "type" : "Tuple",
      "underlying" : 209
    }, {
      "name" : "func(fn func(uint64) uint64, a []uint64)",
      "params" : 211,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 210,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 202
      }, {
        "name" : "a",
        "type" : 207
      } ],
      "name" : "(fn func(uint64) uint64, a []uint64)",
      "type" : "Tuple",
      "underlying" : 211
    }, {
      "name" : "func(fn func(uint64) (uint64, error), a []uint64) (err error)",
      "params" : 213,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 212,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 205
      }, {
        "name" : "a",
        "type" : 207
      } ],
      "name" : "(fn func(uint64) (uint64, error), a []uint64)",
      "type" : "Tuple",
      "underlying" : 213
    }, {
      "name" : "func(uintptr) uintptr",
      "params" : 66,
      "recv" : -1,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 214,
      "variadic" : false
    }, {
      "name" : "func(uintptr) (uintptr, error)",
      "params" : 66,
      "recv" : -1,
      "results" : 216,
      "type" : "Signature",
      "underlying" : 215,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(uintptr, error)",
      "type" : "Tuple",
      "underlying" : 216
    }, {
      "elem" : 25,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 217
    }, {
      "name" : "func() []uintptr",
      "params" : 5,
      "recv" : -1,
      "results" : 219,
      "type" : "Signature",
      "underlying" : 218,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 217
      } ],
      "name" : "([]uintptr)",
      "type" : "Tuple",
      "underlying" : 219
    }, {
      "name" : "func(fn func(uintptr) (uintptr, error), a []uintptr) (err error)",
      "params" : 221,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 220,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 215
      }, {
        "name" : "a",
        "type" : 217
      } ],
      "name" : "(fn func(uintptr) (uintptr, error), a []uintptr)",
      "type" : "Tuple",
      "underlying" : 221
    }, {
      "name" : "func(fn func(uintptr) uintptr, a []uintptr)",
      "params" : 223,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 222,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 214
      }, {
        "name" : "a",
        "type" : 217
      } ],
      "name" : "(fn func(uintptr) uintptr, a []uintptr)",
      "type" : "Tuple",
      "underlying" : 223
    }, {
      "name" : "func(float32) float32",
      "params" : 225,
      "recv" : -1,
      "results" : 225,
      "type" : "Signature",
      "underlying" : 224,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 226
      } ],
      "name" : "(float32)",
      "type" : "Tuple",
      "underlying" : 225
    }, {
      "name" : "float32",
      "type" : "Basic",
      "underlying" : 226
    }, {
      "name" : "func(float32) (float32, error)",
      "params" : 225,
      "recv" : -1,
      "results" : 228,
      "type" : "Signature",
      "underlying" : 227,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 226
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(float32, error)",
      "type" : "Tuple",
      "underlying" : 228
    }, {
      "elem" : 226,
      "name" : "[]float32",
      "type" : "Slice",
      "underlying" : 229
    }, {
      "name" : "func() []float32",
      "params" : 5,
      "recv" : -1,
      "results" : 231,
      "type" : "Signature",
      "underlying" : 230,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 229
      } ],
      "name" : "([]float32)",
      "type" : "Tuple",
      "underlying" : 231
    }, {
      "name" : "func(fn func(float32) float32, a []float32)",
      "params" : 233,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 232,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 224
      }, {
        "name" : "a",
        "type" : 229
      } ],
      "name" : "(fn func(float32) float32, a []float32)",
      "type" : "Tuple",
      "underlying" : 233
    }, {
      "name" : "func(fn func(float32) (float32, error), a []float32) (err error)",
      "params" : 235,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 234,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 227
      }, {
        "name" : "a",
        "type" : 229
      } ],
      "name" : "(fn func(float32) (float32, error), a []float32)",
      "type" : "Tuple",
      "underlying" : 235
    }, {
      "name" : "func(float64) float64",
      "params" : 237,
      "recv" : -1,
      "results" : 237,
      "type" : "Signature",
      "underlying" : 236,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 238
      } ],
      "name" : "(float64)",
      "type" : "Tuple",
      "underlying" : 237
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 238
    }, {
      "name" : "func(float64) (float64, error)",
      "params" : 237,
      "recv" : -1,
      "results" : 240,
      "type" : "Signature",
      "underlying" : 239,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 238
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(float64, error)",
      "type" : "Tuple",
      "underlying" : 240
    }, {
      "elem" : 238,
      "name" : "[]float64",
      "type" : "Slice",
      "underlying" : 241
    }, {
      "name" : "func() []float64",
      "params" : 5,
      "recv" : -1,
      "results" : 243,
      "type" : "Signature",
      "underlying" : 242,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 241
      } ],
      "name" : "([]float64)",
      "type" : "Tuple",
      "underlying" : 243
    }, {
      "name" : "func(fn func(float64) float64, a []float64)",
      "params" : 245,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 244,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 236
      }, {
        "name" : "a",
        "type" : 241
      } ],
      "name" : "(fn func(float64) float64, a []float64)",
      "type" : "Tuple",
      "underlying" : 245
    }, {
      "name" : "func(fn func(float64) (float64, error), a []float64) (err error)",
      "params" : 247,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 246,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 239
      }, {
        "name" : "a",
        "type" : 241
      } ],
      "name" : "(fn func(float64) (float64, error), a []float64)",
      "type" : "Tuple",
      "underlying" : 247
    }, {
      "name" : "func(complex64) complex64",
      "params" : 249,
      "recv" : -1,
      "results" : 249,
      "type" : "Signature",
      "underlying" : 248,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 250
      } ],
      "name" : "(complex64)",
      "type" : "Tuple",
      "underlying" : 249
    }, {
      "name" : "complex64",
      "type" : "Basic",
      "underlying" : 250
    }, {
      "name" : "func(complex64) (complex64, error)",
      "params" : 249,
      "recv" : -1,
      "results" : 252,
      "type" : "Signature",
      "underlying" : 251,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 250
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(complex64, error)",
      "type" : "Tuple",
      "underlying" : 252
    }, {
      "elem" : 250,
      "name" : "[]complex64",
      "type" : "Slice",
      "underlying" : 253
    }, {
      "name" : "func() []complex64",
      "params" : 5,
      "recv" : -1,
      "results" : 255,
      "type" : "Signature",
      "underlying" : 254,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 253
      } ],
      "name" : "([]complex64)",
      "type" : "Tuple",
      "underlying" : 255
    }, {
      "name" : "func(fn func(complex64) complex64, a []complex64)",
      "params" : 257,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 256,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 248
      }, {
        "name" : "a",
        "type" : 253
      } ],
      "name" : "(fn func(complex64) complex64, a []complex64)",
      "type" : "Tuple",
      "underlying" : 257
    }, {
      "name" : "func(fn func(complex64) (complex64, error), a []complex64) (err error)",
      "params" : 259,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 258,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 251
      }, {
        "name" : "a",
        "type" : 253
      } ],
      "name" : "(fn func(complex64) (complex64, error), a []complex64)",
      "type" : "Tuple",
      "underlying" : 259
    }, {
      "name" : "func(complex128) complex128",
      "params" : 261,
      "recv" : -1,
      "results" : 261,
      "type" : "Signature",
      "underlying" : 260,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 262
      } ],
      "name" : "(complex128)",
      "type" : "Tuple",
      "underlying" : 261
    }, {
      "name" : "complex128",
      "type" : "Basic",
      "underlying" : 262
    }, {
      "name" : "func(complex128) (complex128, error)",
      "params" : 261,
      "recv" : -1,
      "results" : 264,
      "type" : "Signature",
      "underlying" : 263,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 262
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(complex128, error)",
      "type" : "Tuple",
      "underlying" : 264
    }, {
      "elem" : 262,
      "name" : "[]complex128",
      "type" : "Slice",
      "underlying" : 265
    }, {
      "name" : "func() []complex128",
      "params" : 5,
      "recv" : -1,
      "results" : 267,
      "type" : "Signature",
      "underlying" : 266,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 265
      } ],
      "name" : "([]complex128)",
      "type" : "Tuple",
      "underlying" : 267
    }, {
      "name" : "func(fn func(complex128) complex128, a []complex128)",
      "params" : 269,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 268,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 260
      }, {
        "name" : "a",
        "type" : 265
      } ],
      "name" : "(fn func(complex128) complex128, a []complex128)",
      "type" : "Tuple",
      "underlying" : 269
    }, {
      "name" : "func(fn func(complex128) (complex128, error), a []complex128) (err error)",
      "params" : 271,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 270,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 263
      }, {
        "name" : "a",
        "type" : 265
      } ],
      "name" : "(fn func(complex128) (complex128, error), a []complex128)",
      "type" : "Tuple",
      "underlying" : 271
    }, {
      "name" : "func(string) string",
      "params" : 35,
      "recv" : -1,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 272,
      "variadic" : false
    }, {
      "name" : "func(string) (string, error)",
      "params" : 35,
      "recv" : -1,
      "results" : 274,
      "type" : "Signature",
      "underlying" : 273,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(string, error)",
      "type" : "Tuple",
      "underlying" : 274
    }, {
      "elem" : 23,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 275
    }, {
      "name" : "func() []string",
      "params" : 5,
      "recv" : -1,
      "results" : 277,
      "type" : "Signature",
      "underlying" : 276,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 275
      } ],
      "name" : "([]string)",
      "type" : "Tuple",
      "underlying" : 277
    }, {
      "name" : "func(fn func(string) string, a []string)",
      "params" : 279,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 278,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 272
      }, {
        "name" : "a",
        "type" : 275
      } ],
      "name" : "(fn func(string) string, a []string)",
      "type" : "Tuple",
      "underlying" : 279
    }, {
      "name" : "func(fn func(string) (string, error), a []string) (err error)",
      "params" : 281,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 280,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 273
      }, {
        "name" : "a",
        "type" : 275
      } ],
      "name" : "(fn func(string) (string, error), a []string)",
      "type" : "Tuple",
      "underlying" : 281
    }, {
      "name" : "func(unsafe.Pointer) unsafe.Pointer",
      "params" : 283,
      "recv" : -1,
      "results" : 283,
      "type" : "Signature",
      "underlying" : 282,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 55
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 283
    }, {
      "name" : "func(unsafe.Pointer) (unsafe.Pointer, error)",
      "params" : 283,
      "recv" : -1,
      "results" : 285,
      "type" : "Signature",
      "underlying" : 284,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 55
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(unsafe.Pointer, error)",
      "type" : "Tuple",
      "underlying" : 285
    }, {
      "elem" : 55,
      "name" : "[]unsafe.Pointer",
      "type" : "Slice",
      "underlying" : 286
    }, {
      "name" : "func() []unsafe.Pointer",
      "params" : 5,
      "recv" : -1,
      "results" : 288,
      "type" : "Signature",
      "underlying" : 287,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 286
      } ],
      "name" : "([]unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 288
    }, {
      "name" : "func(fn func(unsafe.Pointer) (unsafe.Pointer, error), a []unsafe.Pointer) (err error)",
      "params" : 290,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 289,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 284
      }, {
        "name" : "a",
        "type" : 286
      } ],
      "name" : "(fn func(unsafe.Pointer) (unsafe.Pointer, error), a []unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 290
    }, {
      "name" : "func(fn func(unsafe.Pointer) unsafe.Pointer, a []unsafe.Pointer)",
      "params" : 292,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 291,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 282
      }, {
        "name" : "a",
        "type" : 286
      } ],
      "name" : "(fn func(unsafe.Pointer) unsafe.Pointer, a []unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 292
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "e",
      "package" : 0,
      "type" : 82,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "a",
      "package" : 0,
      "type" : 76,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "incr",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 80,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Complex64",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Int16",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uint64",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uint8",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Float32",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "UnsafePointer",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "String",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Float64",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Int32",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Int64",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uint32",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uint",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Complex128",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Bool",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Int",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uint16",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uintptr",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Int8",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "as",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 86,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 86,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 93,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 101,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 101,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 102,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 102,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tmp",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 111,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 111,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 114,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 114,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 116,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tmp",
      "package" : 0,
      "type" : 113,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 123,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 123,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 126,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 126,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 128,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tmp",
      "package" : 0,
      "type" : 125,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 135,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 135,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 137,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 137,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 139,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tmp",
      "package" : 0,
      "type" : 59,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 146,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 146,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 149,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 149,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 151,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tmp",
      "package" : 0,
      "type" : 148,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 158,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 158,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 162,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tmp",
      "package" : 0,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 169,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 169,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 171,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 171,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 173,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tmp",
      "package" : 0,
      "type" : 52,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 180,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 180,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 182,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 182,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 184,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tmp",
      "package" : 0,
      "type" : 74,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 191,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 191,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 193,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 193,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 195,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tmp",
      "package" : 0,
      "type" : 50,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 202,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 202,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 205,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 205,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 207,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tmp",
      "package" : 0,
      "type" : 204,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 214,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 214,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 215,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 215,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 217,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 224,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 224,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 227,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 227,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 229,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tmp",
      "package" : 0,
      "type" : 226,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 236,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 236,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 239,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 239,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 241,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tmp",
      "package" : 0,
      "type" : 238,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 248,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 248,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 251,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 251,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 253,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tmp",
      "package" : 0,
      "type" : 250,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 260,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 260,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 263,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 263,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 265,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tmp",
      "package" : 0,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 272,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 272,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 273,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 273,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 275,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tmp",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f0",
      "package" : 0,
      "type" : 282,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 282,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f1",
      "package" : 0,
      "type" : 284,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 284,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 286,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}