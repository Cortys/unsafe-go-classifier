{
  "usage" : {
    "file" : "eng_reduce.go",
    "label1" : "definition",
    "label2" : "generics",
    "line" : "707",
    "module" : "gorgonia.org/tensor",
    "pkg" : "gorgonia.org/tensor/internal/execution",
    "project" : "gorgonia/gorgonia",
    "snippet" : "var f func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer",
    "version" : "v0.9.6"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 28, 29, 18, 30, 31, 32, 33, 22, 34, 35, 36, 37, 38, 39, 26, 25, 40, 23, 24, 41, 20, 42, 43, 19, 21, 44, 45 ],
      "exit" : false,
      "out-vars" : [ 21, 18, 25, 37, 34, 29, 33, 20, 28, 31, 32, 44, 41, 39, 36, 43, 38, 30, 19, 26, 22, 23, 35, 40, 42, 45, 24 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 18, 30, 33, 43, 26, 19, 40, 42, 22, 44, 39, 20, 41, 45, 32, 35, 24, 29, 23, 25, 36, 21, 28, 38, 34, 31, 37 ],
      "exit" : false,
      "out-vars" : [ 19, 26, 21, 23, 39, 18, 20, 22, 34, 31, 24, 42, 37, 45, 44, 40, 41, 43, 28, 29, 35, 25, 38, 33, 30, 36, 32 ],
      "decl-vars" : [ 46 ],
      "line-start" : 551,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "ok"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 551,
      "code" : "var ok bool",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 13, 22, 31, 40, 49, 58, 67, 76, 85, 94, 103, 112, 121, 130, 139, 148, 157, 166 ],
      "in-vars" : [ 20, 21, 39, 45, 32, 43, 19, 41, 35, 26, 28, 18, 30, 36, 33, 37, 44, 42, 22, 31, 23, 25, 40, 29, 38, 34, 24 ],
      "exit" : false,
      "out-vars" : [ 38, 42, 37, 20, 25, 29, 32, 22, 35, 41, 39, 34, 40, 45, 33, 26, 23, 28, 18, 36, 43, 24, 30, 31, 19, 21, 44 ],
      "decl-vars" : [ ],
      "line-start" : 552,
      "ast" : {
        "condition" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "t",
            "variable" : 18
          }
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 717,
      "code" : "switch t {\ncase Bool:\n\tvar f func(bool, bool) bool\n\tif f, ok = fn.(func(bool, bool) bool); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Bools()\n\trt := retVal.Bools()\n\treduceDefaultB(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ncase Int:\n\tvar f func(int, int) int\n\tif f, ok = fn.(func(int, int) int); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Ints()\n\trt := retVal.Ints()\n\treduceDefaultI(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ncase Int8:\n\tvar f func(int8, int8) int8\n\tif f, ok = fn.(func(int8, int8) int8); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Int8s()\n\trt := retVal.Int8s()\n\treduceDefaultI8(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ncase Int16:\n\tvar f func(int16, int16) int16\n\tif f, ok = fn.(func(int16, int16) int16); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Int16s()\n\trt := retVal.Int16s()\n\treduceDefaultI16(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ncase Int32:\n\tvar f func(int32, int32) int32\n\tif f, ok = fn.(func(int32, int32) int32); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Int32s()\n\trt := retVal.Int32s()\n\treduceDefaultI32(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ncase Int64:\n\tvar f func(int64, int64) int64\n\tif f, ok = fn.(func(int64, int64) int64); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Int64s()\n\trt := retVal.Int64s()\n\treduceDefaultI64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ncase Uint:\n\tvar f func(uint, uint) uint\n\tif f, ok = fn.(func(uint, uint) uint); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Uints()\n\trt := retVal.Uints()\n\treduceDefaultU(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ncase Uint8:\n\tvar f func(uint8, uint8) uint8\n\tif f, ok = fn.(func(uint8, uint8) uint8); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Uint8s()\n\trt := retVal.Uint8s()\n\treduceDefaultU8(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ncase Uint16:\n\tvar f func(uint16, uint16) uint16\n\tif f, ok = fn.(func(uint16, uint16) uint16); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Uint16s()\n\trt := retVal.Uint16s()\n\treduceDefaultU16(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ncase Uint32:\n\tvar f func(uint32, uint32) uint32\n\tif f, ok = fn.(func(uint32, uint32) uint32); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Uint32s()\n\trt := retVal.Uint32s()\n\treduceDefaultU32(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ncase Uint64:\n\tvar f func(uint64, uint64) uint64\n\tif f, ok = fn.(func(uint64, uint64) uint64); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Uint64s()\n\trt := retVal.Uint64s()\n\treduceDefaultU64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ncase Uintptr:\n\tvar f func(uintptr, uintptr) uintptr\n\tif f, ok = fn.(func(uintptr, uintptr) uintptr); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Uintptrs()\n\trt := retVal.Uintptrs()\n\treduceDefaultUintptr(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ncase Float32:\n\tvar f func(float32, float32) float32\n\tif f, ok = fn.(func(float32, float32) float32); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Float32s()\n\trt := retVal.Float32s()\n\treduceDefaultF32(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ncase Float64:\n\tvar f func(float64, float64) float64\n\tif f, ok = fn.(func(float64, float64) float64); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Float64s()\n\trt := retVal.Float64s()\n\treduceDefaultF64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ncase Complex64:\n\tvar f func(complex64, complex64) complex64\n\tif f, ok = fn.(func(complex64, complex64) complex64); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Complex64s()\n\trt := retVal.Complex64s()\n\treduceDefaultC64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ncase Complex128:\n\tvar f func(complex128, complex128) complex128\n\tif f, ok = fn.(func(complex128, complex128) complex128); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Complex128s()\n\trt := retVal.Complex128s()\n\treduceDefaultC128(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ncase String:\n\tvar f func(string, string) string\n\tif f, ok = fn.(func(string, string) string); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Strings()\n\trt := retVal.Strings()\n\treduceDefaultStr(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ncase UnsafePointer:\n\tvar f func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer\n\tif f, ok = fn.(func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.UnsafePointers()\n\trt := retVal.UnsafePointers()\n\treduceDefaultUnsafePointer(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil\ndefault:\n\treturn errors.Errorf(\"Unsupported type %v for ReduceDefault\", t)\n}",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 20, 21, 22, 23, 24, 19, 26, 25, 30 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 23, 24, 25, 19, 20, 26 ],
      "decl-vars" : [ ],
      "line-start" : 553,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Bool",
            "variable" : 30
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 561,
      "code" : "case Bool:\n\tvar f func(bool, bool) bool\n\tif f, ok = fn.(func(bool, bool) bool); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Bools()\n\trt := retVal.Bools()\n\treduceDefaultB(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 20, 26, 21, 22, 23, 24, 25, 19 ],
      "exit" : false,
      "out-vars" : [ 22, 23, 24, 25, 19, 20, 26, 21 ],
      "decl-vars" : [ 47 ],
      "line-start" : 554,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 82,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 11,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 11,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "bool"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 11,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 11,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "bool"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 11,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 11,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "bool"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 554,
      "code" : "var f func(bool, bool) bool",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 20, 21, 25, 19, 46, 26, 47, 22, 23, 24 ],
      "exit" : false,
      "out-vars" : [ 26, 21, 23, 24, 25, 19, 20, 47, 22 ],
      "decl-vars" : [ ],
      "line-start" : 555,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 557,
      "code" : "if f, ok = fn.(func(bool, bool) bool); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 47, 46 ],
      "successors" : [ 6 ],
      "in-vars" : [ 26, 21, 22, 23, 24, 25, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 25, 46, 26, 23, 24, 22, 19, 20, 47, 21 ],
      "decl-vars" : [ ],
      "line-start" : 555,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 82,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 47
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 82,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 11,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "bool"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 11,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "bool"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 11,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "bool"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 84,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 46, 47 ],
      "line-end" : 555,
      "code" : "f, ok = fn.(func(bool, bool) bool)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 556,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 556,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 22, 23, 24, 25, 19, 20, 47, 21 ],
      "exit" : false,
      "out-vars" : [ 22, 23, 24, 25, 20, 47, 48, 21 ],
      "decl-vars" : [ 48 ],
      "line-start" : 558,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Bools"
            },
            "go-type" : 90,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 89,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 558,
      "code" : "dt := data.Bools()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 47, 48, 21, 22, 23, 24, 25, 20 ],
      "exit" : false,
      "out-vars" : [ 47, 48, 49, 21, 22, 23, 24, 25 ],
      "decl-vars" : [ 49 ],
      "line-start" : 559,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Bools"
            },
            "go-type" : 90,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 89,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 559,
      "code" : "rt := retVal.Bools()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 23, 24, 25, 47, 48, 49, 21, 22 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 560,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 48
            }
          }, {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 49
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 82,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 47
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 92,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultB"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 560,
      "code" : "reduceDefaultB(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 21, 25, 49, 22, 23, 24, 47, 48 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 561,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 561,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 20, 26, 23, 24, 19, 22, 25, 32, 21 ],
      "exit" : false,
      "out-vars" : [ 20, 26, 21, 22, 23, 24, 25, 19 ],
      "decl-vars" : [ ],
      "line-start" : 562,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int",
            "variable" : 32
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 570,
      "code" : "case Int:\n\tvar f func(int, int) int\n\tif f, ok = fn.(func(int, int) int); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Ints()\n\trt := retVal.Ints()\n\treduceDefaultI(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 19, 20, 26, 21, 22, 23, 24, 25 ],
      "exit" : false,
      "out-vars" : [ 24, 25, 19, 20, 26, 21, 22, 23 ],
      "decl-vars" : [ 50 ],
      "line-start" : 563,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 97,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 563,
      "code" : "var f func(int, int) int",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17, 18 ],
      "in-vars" : [ 25, 20, 46, 23, 22, 24, 50, 19, 26, 21 ],
      "exit" : false,
      "out-vars" : [ 22, 24, 25, 50, 20, 26, 21, 23, 19 ],
      "decl-vars" : [ ],
      "line-start" : 564,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 566,
      "code" : "if f, ok = fn.(func(int, int) int); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 50, 46 ],
      "successors" : [ 15 ],
      "in-vars" : [ 19, 20, 26, 21, 22, 23, 24, 25 ],
      "exit" : false,
      "out-vars" : [ 19, 22, 23, 24, 50, 20, 46, 26, 21, 25 ],
      "decl-vars" : [ ],
      "line-start" : 564,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 97,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 50
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 97,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 99,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 50, 46 ],
      "line-end" : 564,
      "code" : "f, ok = fn.(func(int, int) int)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 565,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 565,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 20, 21, 22, 23, 24, 25, 50, 19 ],
      "exit" : false,
      "out-vars" : [ 24, 25, 51, 50, 20, 21, 22, 23 ],
      "decl-vars" : [ 51 ],
      "line-start" : 567,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Ints"
            },
            "go-type" : 100,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 26,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 567,
      "code" : "dt := data.Ints()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 21, 22, 23, 24, 25, 51, 50, 20 ],
      "exit" : false,
      "out-vars" : [ 23, 24, 25, 51, 50, 52, 21, 22 ],
      "decl-vars" : [ 52 ],
      "line-start" : 568,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Ints"
            },
            "go-type" : 100,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 26,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 568,
      "code" : "rt := retVal.Ints()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 52, 21, 22, 23, 24, 25, 51, 50 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 569,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 51
            }
          }, {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 52
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 97,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 50
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 102,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultI"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 569,
      "code" : "reduceDefaultI(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 21, 22, 24, 50, 51, 52, 23, 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 570,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 570,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 19, 22, 23, 20, 26, 21, 24, 25, 45 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 26, 21, 22, 23, 24, 25 ],
      "decl-vars" : [ ],
      "line-start" : 571,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int8",
            "variable" : 45
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 579,
      "code" : "case Int8:\n\tvar f func(int8, int8) int8\n\tif f, ok = fn.(func(int8, int8) int8); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Int8s()\n\trt := retVal.Int8s()\n\treduceDefaultI8(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 45 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 26, 21, 22, 23, 24, 25, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 20, 26, 21, 22, 23, 24, 25, 19 ],
      "decl-vars" : [ 53 ],
      "line-start" : 572,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 106,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 108,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 108,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int8"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 108,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 108,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int8"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 108,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 108,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int8"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 572,
      "code" : "var f func(int8, int8) int8",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26, 27 ],
      "in-vars" : [ 19, 46, 53, 24, 20, 26, 21, 22, 23, 25 ],
      "exit" : false,
      "out-vars" : [ 20, 26, 21, 24, 25, 19, 22, 23, 53 ],
      "decl-vars" : [ ],
      "line-start" : 573,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 575,
      "code" : "if f, ok = fn.(func(int8, int8) int8); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 53, 46 ],
      "successors" : [ 24 ],
      "in-vars" : [ 22, 23, 24, 25, 19, 20, 26, 21 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 53, 24, 25, 19, 46, 26 ],
      "decl-vars" : [ ],
      "line-start" : 573,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 106,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 53
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 106,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 108,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 108,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int8"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 108,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 108,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int8"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 108,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 108,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int8"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 110,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 46, 53 ],
      "line-end" : 573,
      "code" : "f, ok = fn.(func(int8, int8) int8)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 574,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 574,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 22, 23, 24, 25, 19, 20, 53, 21 ],
      "exit" : false,
      "out-vars" : [ 23, 24, 25, 54, 20, 53, 21, 22 ],
      "decl-vars" : [ 54 ],
      "line-start" : 576,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int8s"
            },
            "go-type" : 112,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 111,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 576,
      "code" : "dt := data.Int8s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 20, 53, 21, 22, 23, 24, 25, 54 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 23, 24, 25, 55, 54, 53 ],
      "decl-vars" : [ 55 ],
      "line-start" : 577,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int8s"
            },
            "go-type" : 112,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 111,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 577,
      "code" : "rt := retVal.Int8s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 21, 22, 23, 24, 25, 55, 54, 53 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 578,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 111,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 54
            }
          }, {
            "go-type" : 111,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 55
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 106,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 53
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 114,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultI8"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 578,
      "code" : "reduceDefaultI8(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 22, 23, 24, 25, 53, 54, 55, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 579,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 579,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 26, 21, 22, 23, 24, 20, 25, 33, 19 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 23, 24, 25, 19, 20, 26 ],
      "decl-vars" : [ ],
      "line-start" : 580,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int16",
            "variable" : 33
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 588,
      "code" : "case Int16:\n\tvar f func(int16, int16) int16\n\tif f, ok = fn.(func(int16, int16) int16); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Int16s()\n\trt := retVal.Int16s()\n\treduceDefaultI16(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 26, 21, 22, 23, 24, 25, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 24, 25, 19, 20, 26, 21, 22, 23 ],
      "decl-vars" : [ 56 ],
      "line-start" : 581,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 118,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 120,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 120,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int16"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 120,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 120,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int16"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 120,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 120,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int16"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 581,
      "code" : "var f func(int16, int16) int16",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35, 36 ],
      "in-vars" : [ 26, 22, 23, 56, 24, 25, 19, 20, 46, 21 ],
      "exit" : false,
      "out-vars" : [ 24, 25, 20, 21, 22, 23, 19, 26, 56 ],
      "decl-vars" : [ ],
      "line-start" : 582,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 584,
      "code" : "if f, ok = fn.(func(int16, int16) int16); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 56, 46 ],
      "successors" : [ 33 ],
      "in-vars" : [ 23, 24, 25, 19, 20, 26, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 46, 26, 21, 22, 23, 24, 25, 56 ],
      "decl-vars" : [ ],
      "line-start" : 582,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 118,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 56
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 118,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 120,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 120,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int16"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 120,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 120,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int16"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 120,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 120,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int16"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 122,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 56, 46 ],
      "line-end" : 582,
      "code" : "f, ok = fn.(func(int16, int16) int16)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 583,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 583,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 56, 19, 20, 21, 22, 23, 24, 25 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 22, 23, 24, 25, 57, 56 ],
      "decl-vars" : [ 57 ],
      "line-start" : 585,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int16s"
            },
            "go-type" : 124,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 123,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 585,
      "code" : "dt := data.Int16s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 56, 20, 21, 22, 23, 24, 25, 57 ],
      "exit" : false,
      "out-vars" : [ 22, 23, 24, 25, 58, 57, 56, 21 ],
      "decl-vars" : [ 58 ],
      "line-start" : 586,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int16s"
            },
            "go-type" : 124,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 123,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 586,
      "code" : "rt := retVal.Int16s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 21, 22, 23, 24, 25, 58, 57, 56 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 587,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 123,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 57
            }
          }, {
            "go-type" : 123,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 58
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 56
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 126,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultI16"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 587,
      "code" : "reduceDefaultI16(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 25, 57, 23, 24, 56, 58, 21, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 588,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 588,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 19, 26, 21, 23, 20, 22, 24, 25, 39 ],
      "exit" : false,
      "out-vars" : [ 25, 19, 20, 26, 21, 22, 23, 24 ],
      "decl-vars" : [ ],
      "line-start" : 589,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int32",
            "variable" : 39
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 597,
      "code" : "case Int32:\n\tvar f func(int32, int32) int32\n\tif f, ok = fn.(func(int32, int32) int32); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Int32s()\n\trt := retVal.Int32s()\n\treduceDefaultI32(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 24, 25, 19, 20, 26, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 23, 24, 25, 19, 20, 26 ],
      "decl-vars" : [ 59 ],
      "line-start" : 590,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 130,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 59,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 59,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 59,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 59,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 59,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 59,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 590,
      "code" : "var f func(int32, int32) int32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44, 45 ],
      "in-vars" : [ 22, 59, 19, 26, 21, 23, 24, 25, 20, 46 ],
      "exit" : false,
      "out-vars" : [ 21, 24, 59, 19, 26, 23, 25, 20, 22 ],
      "decl-vars" : [ ],
      "line-start" : 591,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 593,
      "code" : "if f, ok = fn.(func(int32, int32) int32); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 46, 59 ],
      "successors" : [ 42 ],
      "in-vars" : [ 24, 25, 19, 20, 26, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 46, 26, 21, 23, 25, 19, 22, 24, 59, 20 ],
      "decl-vars" : [ ],
      "line-start" : 591,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 130,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 59
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 130,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 59,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 59,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int32"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 59,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 59,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int32"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 59,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 59,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int32"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 133,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 59, 46 ],
      "line-end" : 591,
      "code" : "f, ok = fn.(func(int32, int32) int32)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 592,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 592,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46 ],
      "in-vars" : [ 20, 21, 22, 23, 24, 25, 59, 19 ],
      "exit" : false,
      "out-vars" : [ 23, 24, 25, 59, 60, 20, 21, 22 ],
      "decl-vars" : [ 60 ],
      "line-start" : 594,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int32s"
            },
            "go-type" : 135,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 134,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 594,
      "code" : "dt := data.Int32s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 59, 60, 20, 21, 22, 23, 24, 25 ],
      "exit" : false,
      "out-vars" : [ 24, 25, 59, 60, 61, 21, 22, 23 ],
      "decl-vars" : [ 61 ],
      "line-start" : 595,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int32s"
            },
            "go-type" : 135,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 134,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 595,
      "code" : "rt := retVal.Int32s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 21, 22, 23, 24, 25, 59, 60, 61 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 596,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 134,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 60
            }
          }, {
            "go-type" : 134,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 61
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 130,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 59
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 137,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultI32"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 596,
      "code" : "reduceDefaultI32(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 59, 22, 24, 25, 60, 61, 21, 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 597,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 597,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50 ],
      "in-vars" : [ 23, 25, 26, 21, 22, 24, 28, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 23, 24, 25, 19, 20, 26, 21, 22 ],
      "decl-vars" : [ ],
      "line-start" : 598,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int64",
            "variable" : 28
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 606,
      "code" : "case Int64:\n\tvar f func(int64, int64) int64\n\tif f, ok = fn.(func(int64, int64) int64); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Int64s()\n\trt := retVal.Int64s()\n\treduceDefaultI64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52 ],
      "in-vars" : [ 22, 23, 24, 25, 19, 20, 26, 21 ],
      "exit" : false,
      "out-vars" : [ 24, 25, 19, 20, 26, 21, 22, 23 ],
      "decl-vars" : [ 62 ],
      "line-start" : 599,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 141,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 143,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 143,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 143,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 143,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 143,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 143,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 599,
      "code" : "var f func(int64, int64) int64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53, 54 ],
      "in-vars" : [ 46, 21, 22, 25, 19, 20, 26, 23, 24, 62 ],
      "exit" : false,
      "out-vars" : [ 22, 24, 62, 19, 26, 21, 23, 25, 20 ],
      "decl-vars" : [ ],
      "line-start" : 600,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 602,
      "code" : "if f, ok = fn.(func(int64, int64) int64); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 46, 62 ],
      "successors" : [ 51 ],
      "in-vars" : [ 26, 21, 22, 23, 24, 25, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 46, 26, 21, 22, 24, 62, 20, 23, 25, 19 ],
      "decl-vars" : [ ],
      "line-start" : 600,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 141,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 62
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 141,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 143,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 143,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int64"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 143,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 143,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int64"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 143,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 143,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int64"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 145,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 46, 62 ],
      "line-end" : 600,
      "code" : "f, ok = fn.(func(int64, int64) int64)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 601,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 601,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 19, 20, 21, 22, 23, 24, 25, 62 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 22, 23, 24, 25, 62, 63 ],
      "decl-vars" : [ 63 ],
      "line-start" : 603,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int64s"
            },
            "go-type" : 147,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 146,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 603,
      "code" : "dt := data.Int64s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56 ],
      "in-vars" : [ 24, 25, 62, 63, 20, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 62, 63, 21, 22, 23, 24, 25, 64 ],
      "decl-vars" : [ 64 ],
      "line-start" : 604,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int64s"
            },
            "go-type" : 147,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 146,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 604,
      "code" : "rt := retVal.Int64s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57 ],
      "in-vars" : [ 62, 63, 21, 22, 23, 24, 25, 64 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 605,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 146,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 63
            }
          }, {
            "go-type" : 146,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 64
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 141,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 62
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 149,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultI64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 605,
      "code" : "reduceDefaultI64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 64, 21, 22, 62, 23, 24, 25, 63 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 606,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 606,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59 ],
      "in-vars" : [ 21, 22, 24, 41, 19, 26, 23, 25, 20 ],
      "exit" : false,
      "out-vars" : [ 25, 19, 20, 26, 21, 22, 23, 24 ],
      "decl-vars" : [ ],
      "line-start" : 607,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint",
            "variable" : 41
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 615,
      "code" : "case Uint:\n\tvar f func(uint, uint) uint\n\tif f, ok = fn.(func(uint, uint) uint); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Uints()\n\trt := retVal.Uints()\n\treduceDefaultU(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61 ],
      "in-vars" : [ 23, 24, 25, 19, 20, 26, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 23, 24, 25, 19, 20, 26 ],
      "decl-vars" : [ 65 ],
      "line-start" : 608,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 153,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 40,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 40,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 40,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 40,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 40,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 40,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 608,
      "code" : "var f func(uint, uint) uint",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 62, 63 ],
      "in-vars" : [ 46, 26, 22, 23, 65, 19, 20, 25, 21, 24 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 26, 23, 21, 22, 24, 25, 65 ],
      "decl-vars" : [ ],
      "line-start" : 609,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 611,
      "code" : "if f, ok = fn.(func(uint, uint) uint); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 46, 65 ],
      "successors" : [ 60 ],
      "in-vars" : [ 24, 25, 19, 20, 26, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 20, 23, 25, 65, 19, 26, 21, 22, 24, 46 ],
      "decl-vars" : [ ],
      "line-start" : 609,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 153,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 65
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 153,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 40,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 40,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 40,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 40,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 40,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 40,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 156,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 46, 65 ],
      "line-end" : 609,
      "code" : "f, ok = fn.(func(uint, uint) uint)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 610,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 610,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64 ],
      "in-vars" : [ 25, 65, 19, 20, 21, 22, 23, 24 ],
      "exit" : false,
      "out-vars" : [ 25, 65, 66, 20, 21, 22, 23, 24 ],
      "decl-vars" : [ 66 ],
      "line-start" : 612,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uints"
            },
            "go-type" : 158,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 157,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 612,
      "code" : "dt := data.Uints()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65 ],
      "in-vars" : [ 20, 21, 22, 23, 24, 25, 65, 66 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 23, 24, 25, 67, 65, 66 ],
      "decl-vars" : [ 67 ],
      "line-start" : 613,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uints"
            },
            "go-type" : 158,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 157,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 613,
      "code" : "rt := retVal.Uints()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 66 ],
      "in-vars" : [ 65, 66, 21, 22, 23, 24, 25, 67 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 614,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 157,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 66
            }
          }, {
            "go-type" : 157,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 67
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 153,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 65
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultU"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 614,
      "code" : "reduceDefaultU(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 24, 25, 67, 65, 66, 21, 22, 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 615,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 615,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 68 ],
      "in-vars" : [ 22, 23, 20, 21, 24, 25, 38, 19, 26 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 26, 21, 22, 23, 24, 25 ],
      "decl-vars" : [ ],
      "line-start" : 616,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint8",
            "variable" : 38
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 624,
      "code" : "case Uint8:\n\tvar f func(uint8, uint8) uint8\n\tif f, ok = fn.(func(uint8, uint8) uint8); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Uint8s()\n\trt := retVal.Uint8s()\n\treduceDefaultU8(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 70 ],
      "in-vars" : [ 22, 23, 24, 25, 19, 20, 26, 21 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 26, 21, 22, 23, 24, 25 ],
      "decl-vars" : [ 68 ],
      "line-start" : 617,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 164,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 52,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 52,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint8"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 52,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 52,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint8"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 52,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 52,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint8"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 617,
      "code" : "var f func(uint8, uint8) uint8",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 71, 72 ],
      "in-vars" : [ 24, 25, 19, 46, 26, 21, 22, 20, 23, 68 ],
      "exit" : false,
      "out-vars" : [ 19, 26, 22, 24, 20, 21, 23, 25, 68 ],
      "decl-vars" : [ ],
      "line-start" : 618,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 620,
      "code" : "if f, ok = fn.(func(uint8, uint8) uint8); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 68, 46 ],
      "successors" : [ 69 ],
      "in-vars" : [ 20, 26, 21, 22, 23, 24, 25, 19 ],
      "exit" : false,
      "out-vars" : [ 25, 68, 20, 46, 26, 21, 22, 19, 23, 24 ],
      "decl-vars" : [ ],
      "line-start" : 618,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 164,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 68
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 164,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 52,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 52,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint8"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 52,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 52,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint8"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 52,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 52,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint8"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 167,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 46, 68 ],
      "line-end" : 618,
      "code" : "f, ok = fn.(func(uint8, uint8) uint8)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 619,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 619,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 73 ],
      "in-vars" : [ 20, 21, 22, 23, 24, 25, 68, 19 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 23, 24, 25, 68, 69, 20 ],
      "decl-vars" : [ 69 ],
      "line-start" : 621,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint8s"
            },
            "go-type" : 169,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 168,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 621,
      "code" : "dt := data.Uint8s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 74 ],
      "in-vars" : [ 21, 22, 23, 24, 25, 68, 69, 20 ],
      "exit" : false,
      "out-vars" : [ 68, 69, 70, 21, 22, 23, 24, 25 ],
      "decl-vars" : [ 70 ],
      "line-start" : 622,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint8s"
            },
            "go-type" : 169,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 168,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 622,
      "code" : "rt := retVal.Uint8s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 75 ],
      "in-vars" : [ 68, 69, 70, 21, 22, 23, 24, 25 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 623,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 168,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 69
            }
          }, {
            "go-type" : 168,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 70
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 164,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 68
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 171,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultU8"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 623,
      "code" : "reduceDefaultU8(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 25, 68, 69, 22, 23, 24, 70, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 624,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 624,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 77 ],
      "in-vars" : [ 22, 23, 25, 42, 19, 26, 21, 20, 24 ],
      "exit" : false,
      "out-vars" : [ 20, 26, 21, 22, 23, 24, 25, 19 ],
      "decl-vars" : [ ],
      "line-start" : 625,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint16",
            "variable" : 42
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 633,
      "code" : "case Uint16:\n\tvar f func(uint16, uint16) uint16\n\tif f, ok = fn.(func(uint16, uint16) uint16); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Uint16s()\n\trt := retVal.Uint16s()\n\treduceDefaultU16(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 42 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 79 ],
      "in-vars" : [ 24, 25, 19, 20, 26, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 23, 24, 25, 19, 20, 26 ],
      "decl-vars" : [ 71 ],
      "line-start" : 626,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 175,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 74,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 74,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint16"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 74,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 74,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint16"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 74,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 74,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint16"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 626,
      "code" : "var f func(uint16, uint16) uint16",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 80, 81 ],
      "in-vars" : [ 20, 22, 24, 25, 71, 19, 46, 26, 21, 23 ],
      "exit" : false,
      "out-vars" : [ 23, 71, 19, 20, 21, 25, 26, 22, 24 ],
      "decl-vars" : [ ],
      "line-start" : 627,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 629,
      "code" : "if f, ok = fn.(func(uint16, uint16) uint16); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 46, 71 ],
      "successors" : [ 78 ],
      "in-vars" : [ 24, 25, 19, 20, 26, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 22, 19, 20, 46, 26, 21, 23, 24, 25, 71 ],
      "decl-vars" : [ ],
      "line-start" : 627,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 175,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 71
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 175,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 74,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 74,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint16"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 74,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 74,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint16"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 74,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 74,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint16"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 178,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 71, 46 ],
      "line-end" : 627,
      "code" : "f, ok = fn.(func(uint16, uint16) uint16)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 628,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 628,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 82 ],
      "in-vars" : [ 20, 21, 22, 23, 24, 25, 71, 19 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 22, 23, 24, 25, 71, 72 ],
      "decl-vars" : [ 72 ],
      "line-start" : 630,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint16s"
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 179,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 630,
      "code" : "dt := data.Uint16s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 83 ],
      "in-vars" : [ 24, 25, 71, 72, 20, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 71, 72, 73, 21, 22, 23, 24, 25 ],
      "decl-vars" : [ 73 ],
      "line-start" : 631,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint16s"
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 179,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 631,
      "code" : "rt := retVal.Uint16s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 84 ],
      "in-vars" : [ 25, 71, 72, 73, 21, 22, 23, 24 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 632,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 179,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 72
            }
          }, {
            "go-type" : 179,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 73
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 175,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 71
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 182,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultU16"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 632,
      "code" : "reduceDefaultU16(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 22, 25, 72, 24, 71, 21, 23, 73 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 633,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 633,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 86 ],
      "in-vars" : [ 24, 31, 22, 20, 26, 21, 23, 25, 19 ],
      "exit" : false,
      "out-vars" : [ 22, 23, 24, 25, 19, 20, 26, 21 ],
      "decl-vars" : [ ],
      "line-start" : 634,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint32",
            "variable" : 31
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 642,
      "code" : "case Uint32:\n\tvar f func(uint32, uint32) uint32\n\tif f, ok = fn.(func(uint32, uint32) uint32); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Uint32s()\n\trt := retVal.Uint32s()\n\treduceDefaultU32(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 88 ],
      "in-vars" : [ 23, 24, 25, 19, 20, 26, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 20, 26, 21, 22, 23, 24, 25, 19 ],
      "decl-vars" : [ 74 ],
      "line-start" : 635,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 186,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 50,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 50,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 50,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 50,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 50,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 50,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 635,
      "code" : "var f func(uint32, uint32) uint32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 89, 90 ],
      "in-vars" : [ 21, 25, 74, 19, 46, 26, 22, 23, 24, 20 ],
      "exit" : false,
      "out-vars" : [ 23, 19, 26, 21, 25, 74, 20, 22, 24 ],
      "decl-vars" : [ ],
      "line-start" : 636,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 638,
      "code" : "if f, ok = fn.(func(uint32, uint32) uint32); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 46, 74 ],
      "successors" : [ 87 ],
      "in-vars" : [ 25, 19, 20, 26, 21, 22, 23, 24 ],
      "exit" : false,
      "out-vars" : [ 26, 25, 74, 19, 46, 22, 23, 24, 20, 21 ],
      "decl-vars" : [ ],
      "line-start" : 636,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 186,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 74
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 186,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 50,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 50,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 50,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 50,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 50,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 50,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 189,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 46, 74 ],
      "line-end" : 636,
      "code" : "f, ok = fn.(func(uint32, uint32) uint32)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 637,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 637,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 91 ],
      "in-vars" : [ 22, 23, 24, 25, 74, 19, 20, 21 ],
      "exit" : false,
      "out-vars" : [ 25, 74, 75, 20, 21, 22, 23, 24 ],
      "decl-vars" : [ 75 ],
      "line-start" : 639,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint32s"
            },
            "go-type" : 191,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 190,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 639,
      "code" : "dt := data.Uint32s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 92 ],
      "in-vars" : [ 25, 74, 75, 20, 21, 22, 23, 24 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 23, 24, 25, 74, 75, 76 ],
      "decl-vars" : [ 76 ],
      "line-start" : 640,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint32s"
            },
            "go-type" : 191,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 190,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 640,
      "code" : "rt := retVal.Uint32s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 93 ],
      "in-vars" : [ 24, 25, 74, 75, 76, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 641,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 190,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 75
            }
          }, {
            "go-type" : 190,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 76
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 186,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 74
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 193,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultU32"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 641,
      "code" : "reduceDefaultU32(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 25, 74, 75, 21, 22, 24, 76, 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 642,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 642,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 95 ],
      "in-vars" : [ 19, 20, 21, 22, 25, 26, 23, 24, 43 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 26, 21, 22, 23, 24, 25 ],
      "decl-vars" : [ ],
      "line-start" : 643,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint64",
            "variable" : 43
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 651,
      "code" : "case Uint64:\n\tvar f func(uint64, uint64) uint64\n\tif f, ok = fn.(func(uint64, uint64) uint64); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Uint64s()\n\trt := retVal.Uint64s()\n\treduceDefaultU64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 97 ],
      "in-vars" : [ 20, 26, 21, 22, 23, 24, 25, 19 ],
      "exit" : false,
      "out-vars" : [ 26, 21, 22, 23, 24, 25, 19, 20 ],
      "decl-vars" : [ 77 ],
      "line-start" : 644,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 197,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 199,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 199,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 199,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 199,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 199,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 199,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 644,
      "code" : "var f func(uint64, uint64) uint64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 98, 99 ],
      "in-vars" : [ 21, 23, 77, 19, 46, 26, 22, 24, 25, 20 ],
      "exit" : false,
      "out-vars" : [ 22, 24, 25, 19, 26, 21, 23, 77, 20 ],
      "decl-vars" : [ ],
      "line-start" : 645,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 647,
      "code" : "if f, ok = fn.(func(uint64, uint64) uint64); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 46, 77 ],
      "successors" : [ 96 ],
      "in-vars" : [ 24, 25, 19, 20, 26, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 25, 19, 20, 46, 26, 21, 22, 23, 24, 77 ],
      "decl-vars" : [ ],
      "line-start" : 645,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 197,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 77
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 197,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 199,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 199,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint64"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 199,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 199,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint64"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 199,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 199,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint64"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 201,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 46, 77 ],
      "line-end" : 645,
      "code" : "f, ok = fn.(func(uint64, uint64) uint64)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 646,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 646,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 100 ],
      "in-vars" : [ 23, 24, 25, 77, 19, 20, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 23, 24, 25, 78, 77, 20 ],
      "decl-vars" : [ 78 ],
      "line-start" : 648,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint64s"
            },
            "go-type" : 203,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 202,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 648,
      "code" : "dt := data.Uint64s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 101 ],
      "in-vars" : [ 20, 21, 22, 23, 24, 25, 78, 77 ],
      "exit" : false,
      "out-vars" : [ 24, 25, 78, 77, 79, 21, 22, 23 ],
      "decl-vars" : [ 79 ],
      "line-start" : 649,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint64s"
            },
            "go-type" : 203,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 202,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 649,
      "code" : "rt := retVal.Uint64s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 102 ],
      "in-vars" : [ 79, 21, 22, 23, 24, 25, 78, 77 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 650,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 202,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 78
            }
          }, {
            "go-type" : 202,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 79
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 197,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 77
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 205,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultU64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 650,
      "code" : "reduceDefaultU64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 25, 77, 79, 21, 22, 23, 24, 78 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 651,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 651,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 104 ],
      "in-vars" : [ 21, 23, 24, 20, 26, 22, 25, 44, 19 ],
      "exit" : false,
      "out-vars" : [ 22, 23, 24, 25, 19, 20, 26, 21 ],
      "decl-vars" : [ ],
      "line-start" : 652,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uintptr",
            "variable" : 44
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 660,
      "code" : "case Uintptr:\n\tvar f func(uintptr, uintptr) uintptr\n\tif f, ok = fn.(func(uintptr, uintptr) uintptr); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Uintptrs()\n\trt := retVal.Uintptrs()\n\treduceDefaultUintptr(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 44 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 106 ],
      "in-vars" : [ 25, 19, 20, 26, 21, 22, 23, 24 ],
      "exit" : false,
      "out-vars" : [ 20, 26, 21, 22, 23, 24, 25, 19 ],
      "decl-vars" : [ 80 ],
      "line-start" : 653,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 209,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 25,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 25,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 25,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 25,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 25,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 25,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 653,
      "code" : "var f func(uintptr, uintptr) uintptr",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 107, 108 ],
      "in-vars" : [ 19, 26, 23, 24, 25, 20, 46, 21, 22, 80 ],
      "exit" : false,
      "out-vars" : [ 24, 80, 19, 21, 22, 23, 20, 26, 25 ],
      "decl-vars" : [ ],
      "line-start" : 654,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 656,
      "code" : "if f, ok = fn.(func(uintptr, uintptr) uintptr); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 46, 80 ],
      "successors" : [ 105 ],
      "in-vars" : [ 19, 20, 26, 21, 22, 23, 24, 25 ],
      "exit" : false,
      "out-vars" : [ 23, 24, 25, 80, 19, 20, 46, 26, 21, 22 ],
      "decl-vars" : [ ],
      "line-start" : 654,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 209,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 80
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 209,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 25,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 25,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 25,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 25,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 25,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 25,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 211,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 46, 80 ],
      "line-end" : 654,
      "code" : "f, ok = fn.(func(uintptr, uintptr) uintptr)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 655,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 655,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 109 ],
      "in-vars" : [ 22, 23, 24, 25, 80, 19, 20, 21 ],
      "exit" : false,
      "out-vars" : [ 80, 81, 20, 21, 22, 23, 24, 25 ],
      "decl-vars" : [ 81 ],
      "line-start" : 657,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uintptrs"
            },
            "go-type" : 213,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 212,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 657,
      "code" : "dt := data.Uintptrs()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 110 ],
      "in-vars" : [ 21, 22, 23, 24, 25, 80, 81, 20 ],
      "exit" : false,
      "out-vars" : [ 23, 24, 25, 80, 81, 82, 21, 22 ],
      "decl-vars" : [ 82 ],
      "line-start" : 658,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uintptrs"
            },
            "go-type" : 213,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 212,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 658,
      "code" : "rt := retVal.Uintptrs()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 111 ],
      "in-vars" : [ 23, 24, 25, 80, 81, 82, 21, 22 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 659,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 212,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 81
            }
          }, {
            "go-type" : 212,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 82
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 209,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 80
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 215,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultUintptr"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 659,
      "code" : "reduceDefaultUintptr(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 21, 25, 81, 22, 23, 24, 80, 82 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 660,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 660,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 113 ],
      "in-vars" : [ 21, 23, 24, 22, 25, 34, 19, 20, 26 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 23, 24, 25, 19, 20, 26 ],
      "decl-vars" : [ ],
      "line-start" : 661,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Float32",
            "variable" : 34
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 669,
      "code" : "case Float32:\n\tvar f func(float32, float32) float32\n\tif f, ok = fn.(func(float32, float32) float32); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Float32s()\n\trt := retVal.Float32s()\n\treduceDefaultF32(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 115 ],
      "in-vars" : [ 24, 25, 19, 20, 26, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 26, 21, 22, 23, 24, 25, 19, 20 ],
      "decl-vars" : [ 83 ],
      "line-start" : 662,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 219,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 221,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 221,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "float32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 221,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 221,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "float32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 221,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 221,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "float32"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 662,
      "code" : "var f func(float32, float32) float32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 116, 117 ],
      "in-vars" : [ 19, 20, 46, 26, 21, 24, 22, 23, 25, 83 ],
      "exit" : false,
      "out-vars" : [ 26, 21, 22, 20, 23, 24, 25, 83, 19 ],
      "decl-vars" : [ ],
      "line-start" : 663,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 665,
      "code" : "if f, ok = fn.(func(float32, float32) float32); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 46, 83 ],
      "successors" : [ 114 ],
      "in-vars" : [ 22, 23, 24, 25, 19, 20, 26, 21 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 26, 24, 25, 83, 46, 21, 22, 23 ],
      "decl-vars" : [ ],
      "line-start" : 663,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 219,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 83
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 219,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 221,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 221,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "float32"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 221,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 221,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "float32"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 221,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 221,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "float32"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 223,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 46, 83 ],
      "line-end" : 663,
      "code" : "f, ok = fn.(func(float32, float32) float32)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 664,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 664,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 118 ],
      "in-vars" : [ 23, 24, 25, 83, 19, 20, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 84, 20, 21, 22, 23, 24, 25, 83 ],
      "decl-vars" : [ 84 ],
      "line-start" : 666,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Float32s"
            },
            "go-type" : 225,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 224,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 666,
      "code" : "dt := data.Float32s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 119 ],
      "in-vars" : [ 21, 22, 23, 24, 25, 83, 84, 20 ],
      "exit" : false,
      "out-vars" : [ 85, 21, 22, 23, 24, 25, 83, 84 ],
      "decl-vars" : [ 85 ],
      "line-start" : 667,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Float32s"
            },
            "go-type" : 225,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 224,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 667,
      "code" : "rt := retVal.Float32s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 120 ],
      "in-vars" : [ 84, 85, 21, 22, 23, 24, 25, 83 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 668,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 224,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 84
            }
          }, {
            "go-type" : 224,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 85
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 219,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 83
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 227,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultF32"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 668,
      "code" : "reduceDefaultF32(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 85, 21, 24, 25, 84, 83, 22, 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 669,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 669,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 122 ],
      "in-vars" : [ 26, 24, 29, 19, 21, 22, 23, 25, 20 ],
      "exit" : false,
      "out-vars" : [ 20, 26, 21, 22, 23, 24, 25, 19 ],
      "decl-vars" : [ ],
      "line-start" : 670,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Float64",
            "variable" : 29
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 678,
      "code" : "case Float64:\n\tvar f func(float64, float64) float64\n\tif f, ok = fn.(func(float64, float64) float64); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Float64s()\n\trt := retVal.Float64s()\n\treduceDefaultF64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 124 ],
      "in-vars" : [ 26, 21, 22, 23, 24, 25, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 22, 23, 24, 25, 19, 20, 26, 21 ],
      "decl-vars" : [ 86 ],
      "line-start" : 671,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 231,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 233,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 233,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "float64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 233,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 233,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "float64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 233,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 233,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "float64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 671,
      "code" : "var f func(float64, float64) float64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 125, 126 ],
      "in-vars" : [ 20, 26, 21, 22, 23, 24, 25, 19, 46, 86 ],
      "exit" : false,
      "out-vars" : [ 22, 24, 20, 86, 26, 21, 19, 23, 25 ],
      "decl-vars" : [ ],
      "line-start" : 672,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 674,
      "code" : "if f, ok = fn.(func(float64, float64) float64); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 46, 86 ],
      "successors" : [ 123 ],
      "in-vars" : [ 24, 25, 19, 20, 26, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 46, 86, 23, 19, 20, 26, 21, 22, 24, 25 ],
      "decl-vars" : [ ],
      "line-start" : 672,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 231,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 86
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 231,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 233,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 233,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "float64"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 233,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 233,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "float64"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 233,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 233,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "float64"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 235,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 86, 46 ],
      "line-end" : 672,
      "code" : "f, ok = fn.(func(float64, float64) float64)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 673,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 673,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 127 ],
      "in-vars" : [ 86, 21, 22, 23, 24, 25, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 23, 24, 25, 20, 86, 87, 21, 22 ],
      "decl-vars" : [ 87 ],
      "line-start" : 675,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Float64s"
            },
            "go-type" : 237,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 236,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 675,
      "code" : "dt := data.Float64s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 128 ],
      "in-vars" : [ 21, 22, 23, 24, 25, 20, 86, 87 ],
      "exit" : false,
      "out-vars" : [ 25, 88, 86, 87, 21, 22, 23, 24 ],
      "decl-vars" : [ 88 ],
      "line-start" : 676,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Float64s"
            },
            "go-type" : 237,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 236,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 676,
      "code" : "rt := retVal.Float64s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 129 ],
      "in-vars" : [ 88, 86, 87, 21, 22, 23, 24, 25 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 677,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 236,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 87
            }
          }, {
            "go-type" : 236,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 88
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 231,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 86
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 239,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultF64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 677,
      "code" : "reduceDefaultF64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 88, 24, 21, 22, 23, 86, 25, 87 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 678,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 678,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 131 ],
      "in-vars" : [ 20, 21, 22, 23, 25, 36, 19, 26, 24 ],
      "exit" : false,
      "out-vars" : [ 22, 23, 24, 25, 19, 20, 26, 21 ],
      "decl-vars" : [ ],
      "line-start" : 679,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Complex64",
            "variable" : 36
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 687,
      "code" : "case Complex64:\n\tvar f func(complex64, complex64) complex64\n\tif f, ok = fn.(func(complex64, complex64) complex64); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Complex64s()\n\trt := retVal.Complex64s()\n\treduceDefaultC64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 133 ],
      "in-vars" : [ 25, 19, 20, 26, 21, 22, 23, 24 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 23, 24, 25, 19, 20, 26 ],
      "decl-vars" : [ 89 ],
      "line-start" : 680,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 243,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 245,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 245,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "complex64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 245,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 245,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "complex64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 245,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 245,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "complex64"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 680,
      "code" : "var f func(complex64, complex64) complex64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 134, 135 ],
      "in-vars" : [ 23, 24, 25, 19, 20, 46, 89, 26, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 26, 21, 22, 19, 23, 24, 25, 89, 20 ],
      "decl-vars" : [ ],
      "line-start" : 681,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 683,
      "code" : "if f, ok = fn.(func(complex64, complex64) complex64); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 89, 46 ],
      "successors" : [ 132 ],
      "in-vars" : [ 22, 23, 24, 25, 19, 20, 26, 21 ],
      "exit" : false,
      "out-vars" : [ 26, 22, 23, 25, 89, 19, 20, 46, 21, 24 ],
      "decl-vars" : [ ],
      "line-start" : 681,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 243,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 89
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 243,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 245,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 245,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "complex64"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 245,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 245,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "complex64"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 245,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 245,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "complex64"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 247,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 89, 46 ],
      "line-end" : 681,
      "code" : "f, ok = fn.(func(complex64, complex64) complex64)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 682,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 682,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 136 ],
      "in-vars" : [ 23, 24, 25, 89, 19, 20, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 22, 23, 24, 25, 89, 90 ],
      "decl-vars" : [ 90 ],
      "line-start" : 684,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Complex64s"
            },
            "go-type" : 249,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 248,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 684,
      "code" : "dt := data.Complex64s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 137 ],
      "in-vars" : [ 25, 89, 90, 20, 21, 22, 23, 24 ],
      "exit" : false,
      "out-vars" : [ 23, 24, 25, 89, 90, 91, 21, 22 ],
      "decl-vars" : [ 91 ],
      "line-start" : 685,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Complex64s"
            },
            "go-type" : 249,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 248,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 685,
      "code" : "rt := retVal.Complex64s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 138 ],
      "in-vars" : [ 24, 25, 89, 90, 91, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 686,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 248,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 90
            }
          }, {
            "go-type" : 248,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 91
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 243,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 89
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 251,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultC64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 686,
      "code" : "reduceDefaultC64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 22, 23, 21, 25, 89, 24, 90, 91 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 687,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 687,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 140 ],
      "in-vars" : [ 20, 22, 23, 24, 25, 35, 19, 26, 21 ],
      "exit" : false,
      "out-vars" : [ 24, 25, 19, 20, 26, 21, 22, 23 ],
      "decl-vars" : [ ],
      "line-start" : 688,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Complex128",
            "variable" : 35
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 696,
      "code" : "case Complex128:\n\tvar f func(complex128, complex128) complex128\n\tif f, ok = fn.(func(complex128, complex128) complex128); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Complex128s()\n\trt := retVal.Complex128s()\n\treduceDefaultC128(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 142 ],
      "in-vars" : [ 21, 22, 23, 24, 25, 19, 20, 26 ],
      "exit" : false,
      "out-vars" : [ 26, 21, 22, 23, 24, 25, 19, 20 ],
      "decl-vars" : [ 92 ],
      "line-start" : 689,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 255,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 257,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 257,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "complex128"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 257,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 257,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "complex128"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 257,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 257,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "complex128"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 689,
      "code" : "var f func(complex128, complex128) complex128",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 143, 144 ],
      "in-vars" : [ 21, 22, 92, 20, 46, 23, 24, 25, 19, 26 ],
      "exit" : false,
      "out-vars" : [ 19, 21, 20, 26, 22, 23, 24, 25, 92 ],
      "decl-vars" : [ ],
      "line-start" : 690,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 692,
      "code" : "if f, ok = fn.(func(complex128, complex128) complex128); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 46, 92 ],
      "successors" : [ 141 ],
      "in-vars" : [ 22, 23, 24, 25, 19, 20, 26, 21 ],
      "exit" : false,
      "out-vars" : [ 26, 22, 23, 24, 25, 19, 46, 21, 92, 20 ],
      "decl-vars" : [ ],
      "line-start" : 690,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 255,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 92
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 255,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 257,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 257,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "complex128"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 257,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 257,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "complex128"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 257,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 257,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "complex128"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 259,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 46, 92 ],
      "line-end" : 690,
      "code" : "f, ok = fn.(func(complex128, complex128) complex128)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 691,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 691,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 145 ],
      "in-vars" : [ 24, 25, 92, 19, 20, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 92, 93, 20, 21, 22, 23, 24, 25 ],
      "decl-vars" : [ 93 ],
      "line-start" : 693,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Complex128s"
            },
            "go-type" : 261,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 260,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 693,
      "code" : "dt := data.Complex128s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 146 ],
      "in-vars" : [ 24, 25, 92, 93, 20, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 94, 92, 93, 21, 22, 23, 24, 25 ],
      "decl-vars" : [ 94 ],
      "line-start" : 694,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Complex128s"
            },
            "go-type" : 261,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 260,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 694,
      "code" : "rt := retVal.Complex128s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 147 ],
      "in-vars" : [ 94, 92, 93, 21, 22, 23, 24, 25 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 695,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 260,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 93
            }
          }, {
            "go-type" : 260,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 94
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 255,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 92
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 263,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultC128"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 695,
      "code" : "reduceDefaultC128(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 25, 94, 21, 23, 24, 93, 92, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 696,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 696,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 149 ],
      "in-vars" : [ 20, 26, 23, 25, 40, 19, 21, 22, 24 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 23, 24, 25, 19, 20, 26 ],
      "decl-vars" : [ ],
      "line-start" : 697,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "String",
            "variable" : 40
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 705,
      "code" : "case String:\n\tvar f func(string, string) string\n\tif f, ok = fn.(func(string, string) string); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.Strings()\n\trt := retVal.Strings()\n\treduceDefaultStr(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 151 ],
      "in-vars" : [ 19, 20, 26, 21, 22, 23, 24, 25 ],
      "exit" : false,
      "out-vars" : [ 25, 19, 20, 26, 21, 22, 23, 24 ],
      "decl-vars" : [ 95 ],
      "line-start" : 698,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 267,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 23,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 23,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 23,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 23,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 23,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 23,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 698,
      "code" : "var f func(string, string) string",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 152, 153 ],
      "in-vars" : [ 22, 23, 24, 25, 19, 20, 46, 26, 95, 21 ],
      "exit" : false,
      "out-vars" : [ 95, 19, 26, 21, 22, 25, 20, 23, 24 ],
      "decl-vars" : [ ],
      "line-start" : 699,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 701,
      "code" : "if f, ok = fn.(func(string, string) string); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 46, 95 ],
      "successors" : [ 150 ],
      "in-vars" : [ 23, 24, 25, 19, 20, 26, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 19, 46, 26, 22, 23, 20, 21, 24, 25, 95 ],
      "decl-vars" : [ ],
      "line-start" : 699,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 267,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 95
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 267,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 23,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 23,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 23,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 23,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 23,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 23,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 269,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 95, 46 ],
      "line-end" : 699,
      "code" : "f, ok = fn.(func(string, string) string)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 700,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 700,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 154 ],
      "in-vars" : [ 21, 22, 23, 24, 25, 95, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 22, 23, 24, 25, 96, 95 ],
      "decl-vars" : [ 96 ],
      "line-start" : 702,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Strings"
            },
            "go-type" : 271,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 270,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 702,
      "code" : "dt := data.Strings()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 155 ],
      "in-vars" : [ 23, 24, 25, 96, 95, 20, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 23, 24, 25, 96, 95, 97 ],
      "decl-vars" : [ 97 ],
      "line-start" : 703,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Strings"
            },
            "go-type" : 271,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 270,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 703,
      "code" : "rt := retVal.Strings()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 156 ],
      "in-vars" : [ 24, 25, 96, 95, 97, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 704,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 270,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 96
            }
          }, {
            "go-type" : 270,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 97
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 267,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 95
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 273,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultStr"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 704,
      "code" : "reduceDefaultStr(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 23, 97, 25, 95, 24, 96, 21, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 705,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 705,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 158 ],
      "in-vars" : [ 23, 24, 25, 22, 20, 26, 21, 37, 19 ],
      "exit" : false,
      "out-vars" : [ 25, 19, 20, 26, 21, 22, 23, 24 ],
      "decl-vars" : [ ],
      "line-start" : 706,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "UnsafePointer",
            "variable" : 37
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 714,
      "code" : "case UnsafePointer:\n\tvar f func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer\n\tif f, ok = fn.(func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer); !ok {\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\tdt := data.UnsafePointers()\n\trt := retVal.UnsafePointers()\n\treduceDefaultUnsafePointer(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 160 ],
      "in-vars" : [ 19, 20, 26, 21, 22, 23, 24, 25 ],
      "exit" : false,
      "out-vars" : [ 23, 24, 25, 19, 20, 26, 21, 22 ],
      "decl-vars" : [ 98 ],
      "line-start" : 707,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 277,
              "kind" : "type",
              "params" : [ {
                "declared-type" : {
                  "go-type" : 55,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 2,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 55,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 55,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 2,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 55,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "results" : [ {
                "declared-type" : {
                  "go-type" : 55,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 2,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 55,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "function",
              "variadic" : null
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "f"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 707,
      "code" : "var f func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 161, 162 ],
      "in-vars" : [ 21, 25, 26, 20, 46, 22, 23, 24, 98, 19 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 98, 19, 20, 26, 23, 24, 25 ],
      "decl-vars" : [ ],
      "line-start" : 708,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 46
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 710,
      "code" : "if f, ok = fn.(func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer); !ok {\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 46, 98 ],
      "successors" : [ 159 ],
      "in-vars" : [ 22, 23, 24, 25, 19, 20, 26, 21 ],
      "exit" : false,
      "out-vars" : [ 19, 22, 23, 25, 98, 20, 46, 26, 21, 24 ],
      "decl-vars" : [ ],
      "line-start" : 708,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 277,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 98
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 277,
            "kind" : "type",
            "params" : [ {
              "declared-type" : {
                "go-type" : 55,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 55,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            }, {
              "declared-type" : {
                "go-type" : 55,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 55,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "results" : [ {
              "declared-type" : {
                "go-type" : 55,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 55,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "kind" : "field",
              "names" : [ ],
              "tag" : null
            } ],
            "type" : "function",
            "variadic" : null
          },
          "go-type" : 279,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 46, 98 ],
      "line-end" : 708,
      "code" : "f, ok = fn.(func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 709,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 709,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 163 ],
      "in-vars" : [ 20, 21, 22, 23, 24, 25, 98, 19 ],
      "exit" : false,
      "out-vars" : [ 23, 24, 25, 99, 98, 20, 21, 22 ],
      "decl-vars" : [ 99 ],
      "line-start" : 711,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "UnsafePointers"
            },
            "go-type" : 281,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 280,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 711,
      "code" : "dt := data.UnsafePointers()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 164 ],
      "in-vars" : [ 21, 22, 23, 24, 25, 99, 98, 20 ],
      "exit" : false,
      "out-vars" : [ 22, 23, 24, 25, 99, 100, 98, 21 ],
      "decl-vars" : [ 100 ],
      "line-start" : 712,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "UnsafePointers"
            },
            "go-type" : 281,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 280,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 712,
      "code" : "rt := retVal.UnsafePointers()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 165 ],
      "in-vars" : [ 21, 22, 23, 24, 25, 99, 100, 98 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 713,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 280,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 99
            }
          }, {
            "go-type" : 280,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 100
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 22
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 23
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 24
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 25
            }
          }, {
            "go-type" : 277,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 98
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 283,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceDefaultUnsafePointer"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 713,
      "code" : "reduceDefaultUnsafePointer(dt, rt, dim0, dimSize, outerStride, stride, expected, f)",
      "entry" : false,
      "use-vars" : [ 25, 99, 23, 24, 98, 100, 21, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 714,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 714,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 167 ],
      "in-vars" : [ 18 ],
      "exit" : false,
      "out-vars" : [ 18 ],
      "decl-vars" : [ ],
      "line-start" : 715,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 716,
      "code" : "default:\n\treturn errors.Errorf(\"Unsupported type %v for ReduceDefault\", t)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 18 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 716,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Unsupported type %v for ReduceDefault"
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 18
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 716,
      "code" : "return errors.Errorf(\"Unsupported type %v for ReduceDefault\", t)",
      "entry" : false,
      "use-vars" : [ 18 ]
    } ],
    "code" : "func (e E) ReduceDefault(t reflect.Type, data *storage.Header, retVal *storage.Header, dim0 int, dimSize int, outerStride int, stride int, expected int, fn interface{}) (err error) {\n\tvar ok bool\n\tswitch t {\n\tcase Bool:\n\t\tvar f func(bool, bool) bool\n\t\tif f, ok = fn.(func(bool, bool) bool); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.Bools()\n\t\trt := retVal.Bools()\n\t\treduceDefaultB(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tcase Int:\n\t\tvar f func(int, int) int\n\t\tif f, ok = fn.(func(int, int) int); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.Ints()\n\t\trt := retVal.Ints()\n\t\treduceDefaultI(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tcase Int8:\n\t\tvar f func(int8, int8) int8\n\t\tif f, ok = fn.(func(int8, int8) int8); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.Int8s()\n\t\trt := retVal.Int8s()\n\t\treduceDefaultI8(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tcase Int16:\n\t\tvar f func(int16, int16) int16\n\t\tif f, ok = fn.(func(int16, int16) int16); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.Int16s()\n\t\trt := retVal.Int16s()\n\t\treduceDefaultI16(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tcase Int32:\n\t\tvar f func(int32, int32) int32\n\t\tif f, ok = fn.(func(int32, int32) int32); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.Int32s()\n\t\trt := retVal.Int32s()\n\t\treduceDefaultI32(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tcase Int64:\n\t\tvar f func(int64, int64) int64\n\t\tif f, ok = fn.(func(int64, int64) int64); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.Int64s()\n\t\trt := retVal.Int64s()\n\t\treduceDefaultI64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tcase Uint:\n\t\tvar f func(uint, uint) uint\n\t\tif f, ok = fn.(func(uint, uint) uint); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.Uints()\n\t\trt := retVal.Uints()\n\t\treduceDefaultU(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tcase Uint8:\n\t\tvar f func(uint8, uint8) uint8\n\t\tif f, ok = fn.(func(uint8, uint8) uint8); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.Uint8s()\n\t\trt := retVal.Uint8s()\n\t\treduceDefaultU8(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tcase Uint16:\n\t\tvar f func(uint16, uint16) uint16\n\t\tif f, ok = fn.(func(uint16, uint16) uint16); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.Uint16s()\n\t\trt := retVal.Uint16s()\n\t\treduceDefaultU16(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tcase Uint32:\n\t\tvar f func(uint32, uint32) uint32\n\t\tif f, ok = fn.(func(uint32, uint32) uint32); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.Uint32s()\n\t\trt := retVal.Uint32s()\n\t\treduceDefaultU32(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tcase Uint64:\n\t\tvar f func(uint64, uint64) uint64\n\t\tif f, ok = fn.(func(uint64, uint64) uint64); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.Uint64s()\n\t\trt := retVal.Uint64s()\n\t\treduceDefaultU64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tcase Uintptr:\n\t\tvar f func(uintptr, uintptr) uintptr\n\t\tif f, ok = fn.(func(uintptr, uintptr) uintptr); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.Uintptrs()\n\t\trt := retVal.Uintptrs()\n\t\treduceDefaultUintptr(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tcase Float32:\n\t\tvar f func(float32, float32) float32\n\t\tif f, ok = fn.(func(float32, float32) float32); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.Float32s()\n\t\trt := retVal.Float32s()\n\t\treduceDefaultF32(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tcase Float64:\n\t\tvar f func(float64, float64) float64\n\t\tif f, ok = fn.(func(float64, float64) float64); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.Float64s()\n\t\trt := retVal.Float64s()\n\t\treduceDefaultF64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tcase Complex64:\n\t\tvar f func(complex64, complex64) complex64\n\t\tif f, ok = fn.(func(complex64, complex64) complex64); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.Complex64s()\n\t\trt := retVal.Complex64s()\n\t\treduceDefaultC64(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tcase Complex128:\n\t\tvar f func(complex128, complex128) complex128\n\t\tif f, ok = fn.(func(complex128, complex128) complex128); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.Complex128s()\n\t\trt := retVal.Complex128s()\n\t\treduceDefaultC128(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tcase String:\n\t\tvar f func(string, string) string\n\t\tif f, ok = fn.(func(string, string) string); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.Strings()\n\t\trt := retVal.Strings()\n\t\treduceDefaultStr(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tcase UnsafePointer:\n\t\tvar f func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer\n\t\tif f, ok = fn.(func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer); !ok {\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\tdt := data.UnsafePointers()\n\t\trt := retVal.UnsafePointers()\n\t\treduceDefaultUnsafePointer(dt, rt, dim0, dimSize, outerStride, stride, expected, f)\n\t\treturn nil\n\tdefault:\n\t\treturn errors.Errorf(\"Unsupported type %v for ReduceDefault\", t)\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "ReduceDefault",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "Errorf",
      "package" : 4,
      "type" : 85,
      "exported" : true
    }, {
      "name" : "Bools",
      "package" : 3,
      "type" : 90,
      "exported" : true
    }, {
      "name" : "reduceDefaultB",
      "package" : 0,
      "type" : 92,
      "exported" : false
    }, {
      "name" : "Ints",
      "package" : 3,
      "type" : 100,
      "exported" : true
    }, {
      "name" : "reduceDefaultI",
      "package" : 0,
      "type" : 102,
      "exported" : false
    }, {
      "name" : "Int8s",
      "package" : 3,
      "type" : 112,
      "exported" : true
    }, {
      "name" : "reduceDefaultI8",
      "package" : 0,
      "type" : 114,
      "exported" : false
    }, {
      "name" : "Int16s",
      "package" : 3,
      "type" : 124,
      "exported" : true
    }, {
      "name" : "reduceDefaultI16",
      "package" : 0,
      "type" : 126,
      "exported" : false
    }, {
      "name" : "Int32s",
      "package" : 3,
      "type" : 135,
      "exported" : true
    }, {
      "name" : "reduceDefaultI32",
      "package" : 0,
      "type" : 137,
      "exported" : false
    }, {
      "name" : "Int64s",
      "package" : 3,
      "type" : 147,
      "exported" : true
    }, {
      "name" : "reduceDefaultI64",
      "package" : 0,
      "type" : 149,
      "exported" : false
    }, {
      "name" : "Uints",
      "package" : 3,
      "type" : 158,
      "exported" : true
    }, {
      "name" : "reduceDefaultU",
      "package" : 0,
      "type" : 160,
      "exported" : false
    }, {
      "name" : "Uint8s",
      "package" : 3,
      "type" : 169,
      "exported" : true
    }, {
      "name" : "reduceDefaultU8",
      "package" : 0,
      "type" : 171,
      "exported" : false
    }, {
      "name" : "Uint16s",
      "package" : 3,
      "type" : 180,
      "exported" : true
    }, {
      "name" : "reduceDefaultU16",
      "package" : 0,
      "type" : 182,
      "exported" : false
    }, {
      "name" : "Uint32s",
      "package" : 3,
      "type" : 191,
      "exported" : true
    }, {
      "name" : "reduceDefaultU32",
      "package" : 0,
      "type" : 193,
      "exported" : false
    }, {
      "name" : "Uint64s",
      "package" : 3,
      "type" : 203,
      "exported" : true
    }, {
      "name" : "reduceDefaultU64",
      "package" : 0,
      "type" : 205,
      "exported" : false
    }, {
      "name" : "Uintptrs",
      "package" : 3,
      "type" : 213,
      "exported" : true
    }, {
      "name" : "reduceDefaultUintptr",
      "package" : 0,
      "type" : 215,
      "exported" : false
    }, {
      "name" : "Float32s",
      "package" : 3,
      "type" : 225,
      "exported" : true
    }, {
      "name" : "reduceDefaultF32",
      "package" : 0,
      "type" : 227,
      "exported" : false
    }, {
      "name" : "Float64s",
      "package" : 3,
      "type" : 237,
      "exported" : true
    }, {
      "name" : "reduceDefaultF64",
      "package" : 0,
      "type" : 239,
      "exported" : false
    }, {
      "name" : "Complex64s",
      "package" : 3,
      "type" : 249,
      "exported" : true
    }, {
      "name" : "reduceDefaultC64",
      "package" : 0,
      "type" : 251,
      "exported" : false
    }, {
      "name" : "Complex128s",
      "package" : 3,
      "type" : 261,
      "exported" : true
    }, {
      "name" : "reduceDefaultC128",
      "package" : 0,
      "type" : 263,
      "exported" : false
    }, {
      "name" : "Strings",
      "package" : 3,
      "type" : 271,
      "exported" : true
    }, {
      "name" : "reduceDefaultStr",
      "package" : 0,
      "type" : 273,
      "exported" : false
    }, {
      "name" : "UnsafePointers",
      "package" : 3,
      "type" : 281,
      "exported" : true
    }, {
      "name" : "reduceDefaultUnsafePointer",
      "package" : 0,
      "type" : 283,
      "exported" : false
    } ],
    "line-end" : 718,
    "line-start" : 550,
    "names" : [ "ReduceDefault" ],
    "package" : 0,
    "packages" : [ {
      "name" : "execution",
      "path" : "gorgonia.org/tensor/internal/execution"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "storage",
      "path" : "gorgonia.org/tensor/internal/storage"
    }, {
      "name" : "errors",
      "path" : "github.com/pkg/errors"
    } ],
    "params" : [ 18, 19, 20, 21, 22, 23, 24, 25, 26 ],
    "receivers" : [ 17 ],
    "results" : [ 27 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(t reflect.Type, data *gorgonia.org/tensor/internal/storage.Header, retVal *gorgonia.org/tensor/internal/storage.Header, dim0 int, dimSize int, outerStride int, stride int, expected int, fn interface{}) (err error)",
      "params" : 1,
      "recv" : 17,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "data",
        "type" : 75
      }, {
        "name" : "retVal",
        "type" : 75
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 78
      } ],
      "name" : "(t reflect.Type, data *gorgonia.org/tensor/internal/storage.Header, retVal *gorgonia.org/tensor/internal/storage.Header, dim0 int, dimSize int, outerStride int, stride int, expected int, fn interface{})",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 1,
      "type" : "Named",
      "underlying" : 3
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 4
      }, {
        "name" : "AssignableTo",
        "type" : 8
      }, {
        "name" : "Bits",
        "type" : 4
      }, {
        "name" : "ChanDir",
        "type" : 12
      }, {
        "name" : "Comparable",
        "type" : 15
      }, {
        "name" : "ConvertibleTo",
        "type" : 8
      }, {
        "name" : "Elem",
        "type" : 16
      }, {
        "name" : "Field",
        "type" : 18
      }, {
        "name" : "FieldAlign",
        "type" : 4
      }, {
        "name" : "FieldByIndex",
        "type" : 27
      }, {
        "name" : "FieldByName",
        "type" : 29
      }, {
        "name" : "FieldByNameFunc",
        "type" : 32
      }, {
        "name" : "Implements",
        "type" : 8
      }, {
        "name" : "In",
        "type" : 36
      }, {
        "name" : "IsVariadic",
        "type" : 15
      }, {
        "name" : "Key",
        "type" : 16
      }, {
        "name" : "Kind",
        "type" : 37
      }, {
        "name" : "Len",
        "type" : 4
      }, {
        "name" : "Method",
        "type" : 41
      }, {
        "name" : "MethodByName",
        "type" : 62
      }, {
        "name" : "Name",
        "type" : 64
      }, {
        "name" : "NumField",
        "type" : 4
      }, {
        "name" : "NumIn",
        "type" : 4
      }, {
        "name" : "NumMethod",
        "type" : 4
      }, {
        "name" : "NumOut",
        "type" : 4
      }, {
        "name" : "Out",
        "type" : 36
      }, {
        "name" : "PkgPath",
        "type" : 64
      }, {
        "name" : "Size",
        "type" : 65
      }, {
        "name" : "String",
        "type" : 64
      }, {
        "name" : "common",
        "type" : 67
      }, {
        "name" : "uncommon",
        "type" : 69
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 3
    }, {
      "name" : "func() int",
      "params" : 5,
      "recv" : 0,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 4,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "func(u reflect.Type) bool",
      "params" : 9,
      "recv" : 1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 2
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "func() reflect.ChanDir",
      "params" : 5,
      "recv" : 2,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "name" : "func() bool",
      "params" : 5,
      "recv" : 3,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 15,
      "variadic" : false
    }, {
      "name" : "func() reflect.Type",
      "params" : 5,
      "recv" : 4,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 16,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "name" : "func(i int) reflect.StructField",
      "params" : 19,
      "recv" : 5,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 7
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 1,
      "type" : "Named",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 23
      }, {
        "name" : "PkgPath",
        "type" : 23
      }, {
        "name" : "Type",
        "type" : 2
      }, {
        "name" : "Tag",
        "type" : 24
      }, {
        "name" : "Offset",
        "type" : 25
      }, {
        "name" : "Index",
        "type" : 26
      }, {
        "name" : "Anonymous",
        "type" : 11
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 22
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 23
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "elem" : 7,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 26
    }, {
      "name" : "func(index []int) reflect.StructField",
      "params" : 28,
      "recv" : 6,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 26
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "name" : "func(name string) (reflect.StructField, bool)",
      "params" : 30,
      "recv" : 7,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 23
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "name" : "func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 33,
      "recv" : 8,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 34
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "name" : "func(string) bool",
      "params" : 35,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 34,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "name" : "func(i int) reflect.Type",
      "params" : 19,
      "recv" : 9,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 36,
      "variadic" : false
    }, {
      "name" : "func() reflect.Kind",
      "params" : 5,
      "recv" : 10,
      "results" : 38,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 1,
      "type" : "Named",
      "underlying" : 40
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "name" : "func(int) reflect.Method",
      "params" : 6,
      "recv" : 11,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 41,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 43
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 1,
      "type" : "Named",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 23
      }, {
        "name" : "PkgPath",
        "type" : 23
      }, {
        "name" : "Type",
        "type" : 2
      }, {
        "name" : "Func",
        "type" : 45
      }, {
        "name" : "Index",
        "type" : 7
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 44
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 1,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 47
      }, {
        "name" : "ptr",
        "type" : 55
      }, {
        "name" : "flag",
        "type" : 61
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 46
    }, {
      "elem" : 48,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 47
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 1,
      "type" : "Named",
      "underlying" : 49
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 25
      }, {
        "name" : "ptrdata",
        "type" : 25
      }, {
        "name" : "hash",
        "type" : 50
      }, {
        "name" : "tflag",
        "type" : 51
      }, {
        "name" : "align",
        "type" : 52
      }, {
        "name" : "fieldAlign",
        "type" : 52
      }, {
        "name" : "kind",
        "type" : 52
      }, {
        "name" : "equal",
        "type" : 53
      }, {
        "name" : "gcdata",
        "type" : 56
      }, {
        "name" : "str",
        "type" : 58
      }, {
        "name" : "ptrToThis",
        "type" : 60
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 49
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 50
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 52
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 52
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 54,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 53,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 55
      }, {
        "name" : "",
        "type" : 55
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 54
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 55
    }, {
      "elem" : 57,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 56
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 57
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 59
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 59
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 59
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 25
    }, {
      "name" : "func(string) (reflect.Method, bool)",
      "params" : 35,
      "recv" : 12,
      "results" : 63,
      "type" : "Signature",
      "underlying" : 62,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 43
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 63
    }, {
      "name" : "func() string",
      "params" : 5,
      "recv" : 13,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 64,
      "variadic" : false
    }, {
      "name" : "func() uintptr",
      "params" : 5,
      "recv" : 14,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 65,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 66
    }, {
      "name" : "func() *reflect.rtype",
      "params" : 5,
      "recv" : 15,
      "results" : 68,
      "type" : "Signature",
      "underlying" : 67,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 47
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 68
    }, {
      "name" : "func() *reflect.uncommonType",
      "params" : 5,
      "recv" : 16,
      "results" : 70,
      "type" : "Signature",
      "underlying" : 69,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 71
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 70
    }, {
      "elem" : 72,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 71
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 1,
      "type" : "Named",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 58
      }, {
        "name" : "mcount",
        "type" : 74
      }, {
        "name" : "xcount",
        "type" : 74
      }, {
        "name" : "moff",
        "type" : 50
      }, {
        "name" : "_",
        "type" : 50
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 73
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 74
    }, {
      "elem" : 76,
      "name" : "*gorgonia.org/tensor/internal/storage.Header",
      "type" : "Pointer",
      "underlying" : 75
    }, {
      "local-name" : "Header",
      "name" : "gorgonia.org/tensor/internal/storage.Header",
      "package" : 3,
      "type" : "Named",
      "underlying" : 77
    }, {
      "fields" : [ {
        "name" : "Ptr",
        "type" : 55
      }, {
        "name" : "L",
        "type" : 7
      }, {
        "name" : "C",
        "type" : 7
      } ],
      "name" : "struct{Ptr unsafe.Pointer; L int; C int}",
      "type" : "Struct",
      "underlying" : 77
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 78
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 80
      } ],
      "name" : "(err error)",
      "type" : "Tuple",
      "underlying" : 79
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 81
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 64
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 81
    }, {
      "name" : "func(bool, bool) bool",
      "params" : 83,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 82,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(bool, bool)",
      "type" : "Tuple",
      "underlying" : 83
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 82
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(bool, bool) bool, bool)",
      "type" : "Tuple",
      "underlying" : 84
    }, {
      "name" : "func(format string, args ...interface{}) error",
      "params" : 86,
      "recv" : -1,
      "results" : 88,
      "type" : "Signature",
      "underlying" : 85,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "format",
        "type" : 23
      }, {
        "name" : "args",
        "type" : 87
      } ],
      "name" : "(format string, args []interface{})",
      "type" : "Tuple",
      "underlying" : 86
    }, {
      "elem" : 78,
      "name" : "[]interface{}",
      "type" : "Slice",
      "underlying" : 87
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 88
    }, {
      "elem" : 11,
      "name" : "[]bool",
      "type" : "Slice",
      "underlying" : 89
    }, {
      "name" : "func() []bool",
      "params" : 5,
      "recv" : -1,
      "results" : 91,
      "type" : "Signature",
      "underlying" : 90,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 89
      } ],
      "name" : "([]bool)",
      "type" : "Tuple",
      "underlying" : 91
    }, {
      "name" : "func(data []bool, retVal []bool, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a bool, b bool) bool)",
      "params" : 93,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 92,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 89
      }, {
        "name" : "retVal",
        "type" : 89
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 94
      } ],
      "name" : "(data []bool, retVal []bool, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a bool, b bool) bool)",
      "type" : "Tuple",
      "underlying" : 93
    }, {
      "name" : "func(a bool, b bool) bool",
      "params" : 95,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 94,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 11
      }, {
        "name" : "b",
        "type" : 11
      } ],
      "name" : "(a bool, b bool)",
      "type" : "Tuple",
      "underlying" : 95
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 96
    }, {
      "name" : "func(int, int) int",
      "params" : 98,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 97,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      }, {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(int, int)",
      "type" : "Tuple",
      "underlying" : 98
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 97
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(int, int) int, bool)",
      "type" : "Tuple",
      "underlying" : 99
    }, {
      "name" : "func() []int",
      "params" : 5,
      "recv" : -1,
      "results" : 101,
      "type" : "Signature",
      "underlying" : 100,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 26
      } ],
      "name" : "([]int)",
      "type" : "Tuple",
      "underlying" : 101
    }, {
      "name" : "func(data []int, retVal []int, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a int, b int) int)",
      "params" : 103,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 102,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 26
      }, {
        "name" : "retVal",
        "type" : 26
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 104
      } ],
      "name" : "(data []int, retVal []int, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a int, b int) int)",
      "type" : "Tuple",
      "underlying" : 103
    }, {
      "name" : "func(a int, b int) int",
      "params" : 105,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 104,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 7
      }, {
        "name" : "b",
        "type" : 7
      } ],
      "name" : "(a int, b int)",
      "type" : "Tuple",
      "underlying" : 105
    }, {
      "name" : "func(int8, int8) int8",
      "params" : 107,
      "recv" : -1,
      "results" : 109,
      "type" : "Signature",
      "underlying" : 106,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 108
      }, {
        "name" : "",
        "type" : 108
      } ],
      "name" : "(int8, int8)",
      "type" : "Tuple",
      "underlying" : 107
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 108
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 108
      } ],
      "name" : "(int8)",
      "type" : "Tuple",
      "underlying" : 109
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 106
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(int8, int8) int8, bool)",
      "type" : "Tuple",
      "underlying" : 110
    }, {
      "elem" : 108,
      "name" : "[]int8",
      "type" : "Slice",
      "underlying" : 111
    }, {
      "name" : "func() []int8",
      "params" : 5,
      "recv" : -1,
      "results" : 113,
      "type" : "Signature",
      "underlying" : 112,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 111
      } ],
      "name" : "([]int8)",
      "type" : "Tuple",
      "underlying" : 113
    }, {
      "name" : "func(data []int8, retVal []int8, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a int8, b int8) int8)",
      "params" : 115,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 114,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 111
      }, {
        "name" : "retVal",
        "type" : 111
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 116
      } ],
      "name" : "(data []int8, retVal []int8, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a int8, b int8) int8)",
      "type" : "Tuple",
      "underlying" : 115
    }, {
      "name" : "func(a int8, b int8) int8",
      "params" : 117,
      "recv" : -1,
      "results" : 109,
      "type" : "Signature",
      "underlying" : 116,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 108
      }, {
        "name" : "b",
        "type" : 108
      } ],
      "name" : "(a int8, b int8)",
      "type" : "Tuple",
      "underlying" : 117
    }, {
      "name" : "func(int16, int16) int16",
      "params" : 119,
      "recv" : -1,
      "results" : 121,
      "type" : "Signature",
      "underlying" : 118,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 120
      }, {
        "name" : "",
        "type" : 120
      } ],
      "name" : "(int16, int16)",
      "type" : "Tuple",
      "underlying" : 119
    }, {
      "name" : "int16",
      "type" : "Basic",
      "underlying" : 120
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 120
      } ],
      "name" : "(int16)",
      "type" : "Tuple",
      "underlying" : 121
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 118
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(int16, int16) int16, bool)",
      "type" : "Tuple",
      "underlying" : 122
    }, {
      "elem" : 120,
      "name" : "[]int16",
      "type" : "Slice",
      "underlying" : 123
    }, {
      "name" : "func() []int16",
      "params" : 5,
      "recv" : -1,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 124,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 123
      } ],
      "name" : "([]int16)",
      "type" : "Tuple",
      "underlying" : 125
    }, {
      "name" : "func(data []int16, retVal []int16, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a int16, b int16) int16)",
      "params" : 127,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 126,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 123
      }, {
        "name" : "retVal",
        "type" : 123
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 128
      } ],
      "name" : "(data []int16, retVal []int16, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a int16, b int16) int16)",
      "type" : "Tuple",
      "underlying" : 127
    }, {
      "name" : "func(a int16, b int16) int16",
      "params" : 129,
      "recv" : -1,
      "results" : 121,
      "type" : "Signature",
      "underlying" : 128,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 120
      }, {
        "name" : "b",
        "type" : 120
      } ],
      "name" : "(a int16, b int16)",
      "type" : "Tuple",
      "underlying" : 129
    }, {
      "name" : "func(int32, int32) int32",
      "params" : 131,
      "recv" : -1,
      "results" : 132,
      "type" : "Signature",
      "underlying" : 130,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 59
      }, {
        "name" : "",
        "type" : 59
      } ],
      "name" : "(int32, int32)",
      "type" : "Tuple",
      "underlying" : 131
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 59
      } ],
      "name" : "(int32)",
      "type" : "Tuple",
      "underlying" : 132
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 130
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(int32, int32) int32, bool)",
      "type" : "Tuple",
      "underlying" : 133
    }, {
      "elem" : 59,
      "name" : "[]int32",
      "type" : "Slice",
      "underlying" : 134
    }, {
      "name" : "func() []int32",
      "params" : 5,
      "recv" : -1,
      "results" : 136,
      "type" : "Signature",
      "underlying" : 135,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 134
      } ],
      "name" : "([]int32)",
      "type" : "Tuple",
      "underlying" : 136
    }, {
      "name" : "func(data []int32, retVal []int32, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a int32, b int32) int32)",
      "params" : 138,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 137,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 134
      }, {
        "name" : "retVal",
        "type" : 134
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 139
      } ],
      "name" : "(data []int32, retVal []int32, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a int32, b int32) int32)",
      "type" : "Tuple",
      "underlying" : 138
    }, {
      "name" : "func(a int32, b int32) int32",
      "params" : 140,
      "recv" : -1,
      "results" : 132,
      "type" : "Signature",
      "underlying" : 139,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 59
      }, {
        "name" : "b",
        "type" : 59
      } ],
      "name" : "(a int32, b int32)",
      "type" : "Tuple",
      "underlying" : 140
    }, {
      "name" : "func(int64, int64) int64",
      "params" : 142,
      "recv" : -1,
      "results" : 144,
      "type" : "Signature",
      "underlying" : 141,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 143
      }, {
        "name" : "",
        "type" : 143
      } ],
      "name" : "(int64, int64)",
      "type" : "Tuple",
      "underlying" : 142
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 143
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 143
      } ],
      "name" : "(int64)",
      "type" : "Tuple",
      "underlying" : 144
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 141
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(int64, int64) int64, bool)",
      "type" : "Tuple",
      "underlying" : 145
    }, {
      "elem" : 143,
      "name" : "[]int64",
      "type" : "Slice",
      "underlying" : 146
    }, {
      "name" : "func() []int64",
      "params" : 5,
      "recv" : -1,
      "results" : 148,
      "type" : "Signature",
      "underlying" : 147,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 146
      } ],
      "name" : "([]int64)",
      "type" : "Tuple",
      "underlying" : 148
    }, {
      "name" : "func(data []int64, retVal []int64, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a int64, b int64) int64)",
      "params" : 150,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 149,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 146
      }, {
        "name" : "retVal",
        "type" : 146
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 151
      } ],
      "name" : "(data []int64, retVal []int64, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a int64, b int64) int64)",
      "type" : "Tuple",
      "underlying" : 150
    }, {
      "name" : "func(a int64, b int64) int64",
      "params" : 152,
      "recv" : -1,
      "results" : 144,
      "type" : "Signature",
      "underlying" : 151,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 143
      }, {
        "name" : "b",
        "type" : 143
      } ],
      "name" : "(a int64, b int64)",
      "type" : "Tuple",
      "underlying" : 152
    }, {
      "name" : "func(uint, uint) uint",
      "params" : 154,
      "recv" : -1,
      "results" : 155,
      "type" : "Signature",
      "underlying" : 153,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      }, {
        "name" : "",
        "type" : 40
      } ],
      "name" : "(uint, uint)",
      "type" : "Tuple",
      "underlying" : 154
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      } ],
      "name" : "(uint)",
      "type" : "Tuple",
      "underlying" : 155
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 153
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(uint, uint) uint, bool)",
      "type" : "Tuple",
      "underlying" : 156
    }, {
      "elem" : 40,
      "name" : "[]uint",
      "type" : "Slice",
      "underlying" : 157
    }, {
      "name" : "func() []uint",
      "params" : 5,
      "recv" : -1,
      "results" : 159,
      "type" : "Signature",
      "underlying" : 158,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 157
      } ],
      "name" : "([]uint)",
      "type" : "Tuple",
      "underlying" : 159
    }, {
      "name" : "func(data []uint, retVal []uint, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a uint, b uint) uint)",
      "params" : 161,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 160,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 157
      }, {
        "name" : "retVal",
        "type" : 157
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 162
      } ],
      "name" : "(data []uint, retVal []uint, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a uint, b uint) uint)",
      "type" : "Tuple",
      "underlying" : 161
    }, {
      "name" : "func(a uint, b uint) uint",
      "params" : 163,
      "recv" : -1,
      "results" : 155,
      "type" : "Signature",
      "underlying" : 162,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 40
      }, {
        "name" : "b",
        "type" : 40
      } ],
      "name" : "(a uint, b uint)",
      "type" : "Tuple",
      "underlying" : 163
    }, {
      "name" : "func(uint8, uint8) uint8",
      "params" : 165,
      "recv" : -1,
      "results" : 166,
      "type" : "Signature",
      "underlying" : 164,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 52
      }, {
        "name" : "",
        "type" : 52
      } ],
      "name" : "(uint8, uint8)",
      "type" : "Tuple",
      "underlying" : 165
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 52
      } ],
      "name" : "(uint8)",
      "type" : "Tuple",
      "underlying" : 166
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 164
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(uint8, uint8) uint8, bool)",
      "type" : "Tuple",
      "underlying" : 167
    }, {
      "elem" : 52,
      "name" : "[]uint8",
      "type" : "Slice",
      "underlying" : 168
    }, {
      "name" : "func() []uint8",
      "params" : 5,
      "recv" : -1,
      "results" : 170,
      "type" : "Signature",
      "underlying" : 169,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 168
      } ],
      "name" : "([]uint8)",
      "type" : "Tuple",
      "underlying" : 170
    }, {
      "name" : "func(data []uint8, retVal []uint8, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a uint8, b uint8) uint8)",
      "params" : 172,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 171,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 168
      }, {
        "name" : "retVal",
        "type" : 168
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 173
      } ],
      "name" : "(data []uint8, retVal []uint8, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a uint8, b uint8) uint8)",
      "type" : "Tuple",
      "underlying" : 172
    }, {
      "name" : "func(a uint8, b uint8) uint8",
      "params" : 174,
      "recv" : -1,
      "results" : 166,
      "type" : "Signature",
      "underlying" : 173,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 52
      }, {
        "name" : "b",
        "type" : 52
      } ],
      "name" : "(a uint8, b uint8)",
      "type" : "Tuple",
      "underlying" : 174
    }, {
      "name" : "func(uint16, uint16) uint16",
      "params" : 176,
      "recv" : -1,
      "results" : 177,
      "type" : "Signature",
      "underlying" : 175,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 74
      }, {
        "name" : "",
        "type" : 74
      } ],
      "name" : "(uint16, uint16)",
      "type" : "Tuple",
      "underlying" : 176
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 74
      } ],
      "name" : "(uint16)",
      "type" : "Tuple",
      "underlying" : 177
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 175
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(uint16, uint16) uint16, bool)",
      "type" : "Tuple",
      "underlying" : 178
    }, {
      "elem" : 74,
      "name" : "[]uint16",
      "type" : "Slice",
      "underlying" : 179
    }, {
      "name" : "func() []uint16",
      "params" : 5,
      "recv" : -1,
      "results" : 181,
      "type" : "Signature",
      "underlying" : 180,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 179
      } ],
      "name" : "([]uint16)",
      "type" : "Tuple",
      "underlying" : 181
    }, {
      "name" : "func(data []uint16, retVal []uint16, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a uint16, b uint16) uint16)",
      "params" : 183,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 182,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 179
      }, {
        "name" : "retVal",
        "type" : 179
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 184
      } ],
      "name" : "(data []uint16, retVal []uint16, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a uint16, b uint16) uint16)",
      "type" : "Tuple",
      "underlying" : 183
    }, {
      "name" : "func(a uint16, b uint16) uint16",
      "params" : 185,
      "recv" : -1,
      "results" : 177,
      "type" : "Signature",
      "underlying" : 184,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 74
      }, {
        "name" : "b",
        "type" : 74
      } ],
      "name" : "(a uint16, b uint16)",
      "type" : "Tuple",
      "underlying" : 185
    }, {
      "name" : "func(uint32, uint32) uint32",
      "params" : 187,
      "recv" : -1,
      "results" : 188,
      "type" : "Signature",
      "underlying" : 186,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 50
      }, {
        "name" : "",
        "type" : 50
      } ],
      "name" : "(uint32, uint32)",
      "type" : "Tuple",
      "underlying" : 187
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 50
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 188
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 186
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(uint32, uint32) uint32, bool)",
      "type" : "Tuple",
      "underlying" : 189
    }, {
      "elem" : 50,
      "name" : "[]uint32",
      "type" : "Slice",
      "underlying" : 190
    }, {
      "name" : "func() []uint32",
      "params" : 5,
      "recv" : -1,
      "results" : 192,
      "type" : "Signature",
      "underlying" : 191,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 190
      } ],
      "name" : "([]uint32)",
      "type" : "Tuple",
      "underlying" : 192
    }, {
      "name" : "func(data []uint32, retVal []uint32, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a uint32, b uint32) uint32)",
      "params" : 194,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 193,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 190
      }, {
        "name" : "retVal",
        "type" : 190
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 195
      } ],
      "name" : "(data []uint32, retVal []uint32, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a uint32, b uint32) uint32)",
      "type" : "Tuple",
      "underlying" : 194
    }, {
      "name" : "func(a uint32, b uint32) uint32",
      "params" : 196,
      "recv" : -1,
      "results" : 188,
      "type" : "Signature",
      "underlying" : 195,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 50
      }, {
        "name" : "b",
        "type" : 50
      } ],
      "name" : "(a uint32, b uint32)",
      "type" : "Tuple",
      "underlying" : 196
    }, {
      "name" : "func(uint64, uint64) uint64",
      "params" : 198,
      "recv" : -1,
      "results" : 200,
      "type" : "Signature",
      "underlying" : 197,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 199
      }, {
        "name" : "",
        "type" : 199
      } ],
      "name" : "(uint64, uint64)",
      "type" : "Tuple",
      "underlying" : 198
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 199
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 199
      } ],
      "name" : "(uint64)",
      "type" : "Tuple",
      "underlying" : 200
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 197
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(uint64, uint64) uint64, bool)",
      "type" : "Tuple",
      "underlying" : 201
    }, {
      "elem" : 199,
      "name" : "[]uint64",
      "type" : "Slice",
      "underlying" : 202
    }, {
      "name" : "func() []uint64",
      "params" : 5,
      "recv" : -1,
      "results" : 204,
      "type" : "Signature",
      "underlying" : 203,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 202
      } ],
      "name" : "([]uint64)",
      "type" : "Tuple",
      "underlying" : 204
    }, {
      "name" : "func(data []uint64, retVal []uint64, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a uint64, b uint64) uint64)",
      "params" : 206,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 205,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 202
      }, {
        "name" : "retVal",
        "type" : 202
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 207
      } ],
      "name" : "(data []uint64, retVal []uint64, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a uint64, b uint64) uint64)",
      "type" : "Tuple",
      "underlying" : 206
    }, {
      "name" : "func(a uint64, b uint64) uint64",
      "params" : 208,
      "recv" : -1,
      "results" : 200,
      "type" : "Signature",
      "underlying" : 207,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 199
      }, {
        "name" : "b",
        "type" : 199
      } ],
      "name" : "(a uint64, b uint64)",
      "type" : "Tuple",
      "underlying" : 208
    }, {
      "name" : "func(uintptr, uintptr) uintptr",
      "params" : 210,
      "recv" : -1,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 209,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      }, {
        "name" : "",
        "type" : 25
      } ],
      "name" : "(uintptr, uintptr)",
      "type" : "Tuple",
      "underlying" : 210
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 209
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(uintptr, uintptr) uintptr, bool)",
      "type" : "Tuple",
      "underlying" : 211
    }, {
      "elem" : 25,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 212
    }, {
      "name" : "func() []uintptr",
      "params" : 5,
      "recv" : -1,
      "results" : 214,
      "type" : "Signature",
      "underlying" : 213,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 212
      } ],
      "name" : "([]uintptr)",
      "type" : "Tuple",
      "underlying" : 214
    }, {
      "name" : "func(data []uintptr, retVal []uintptr, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a uintptr, b uintptr) uintptr)",
      "params" : 216,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 215,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 212
      }, {
        "name" : "retVal",
        "type" : 212
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 217
      } ],
      "name" : "(data []uintptr, retVal []uintptr, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a uintptr, b uintptr) uintptr)",
      "type" : "Tuple",
      "underlying" : 216
    }, {
      "name" : "func(a uintptr, b uintptr) uintptr",
      "params" : 218,
      "recv" : -1,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 217,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 25
      }, {
        "name" : "b",
        "type" : 25
      } ],
      "name" : "(a uintptr, b uintptr)",
      "type" : "Tuple",
      "underlying" : 218
    }, {
      "name" : "func(float32, float32) float32",
      "params" : 220,
      "recv" : -1,
      "results" : 222,
      "type" : "Signature",
      "underlying" : 219,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 221
      }, {
        "name" : "",
        "type" : 221
      } ],
      "name" : "(float32, float32)",
      "type" : "Tuple",
      "underlying" : 220
    }, {
      "name" : "float32",
      "type" : "Basic",
      "underlying" : 221
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 221
      } ],
      "name" : "(float32)",
      "type" : "Tuple",
      "underlying" : 222
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 219
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(float32, float32) float32, bool)",
      "type" : "Tuple",
      "underlying" : 223
    }, {
      "elem" : 221,
      "name" : "[]float32",
      "type" : "Slice",
      "underlying" : 224
    }, {
      "name" : "func() []float32",
      "params" : 5,
      "recv" : -1,
      "results" : 226,
      "type" : "Signature",
      "underlying" : 225,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 224
      } ],
      "name" : "([]float32)",
      "type" : "Tuple",
      "underlying" : 226
    }, {
      "name" : "func(data []float32, retVal []float32, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a float32, b float32) float32)",
      "params" : 228,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 227,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 224
      }, {
        "name" : "retVal",
        "type" : 224
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 229
      } ],
      "name" : "(data []float32, retVal []float32, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a float32, b float32) float32)",
      "type" : "Tuple",
      "underlying" : 228
    }, {
      "name" : "func(a float32, b float32) float32",
      "params" : 230,
      "recv" : -1,
      "results" : 222,
      "type" : "Signature",
      "underlying" : 229,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 221
      }, {
        "name" : "b",
        "type" : 221
      } ],
      "name" : "(a float32, b float32)",
      "type" : "Tuple",
      "underlying" : 230
    }, {
      "name" : "func(float64, float64) float64",
      "params" : 232,
      "recv" : -1,
      "results" : 234,
      "type" : "Signature",
      "underlying" : 231,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 233
      }, {
        "name" : "",
        "type" : 233
      } ],
      "name" : "(float64, float64)",
      "type" : "Tuple",
      "underlying" : 232
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 233
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 233
      } ],
      "name" : "(float64)",
      "type" : "Tuple",
      "underlying" : 234
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 231
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(float64, float64) float64, bool)",
      "type" : "Tuple",
      "underlying" : 235
    }, {
      "elem" : 233,
      "name" : "[]float64",
      "type" : "Slice",
      "underlying" : 236
    }, {
      "name" : "func() []float64",
      "params" : 5,
      "recv" : -1,
      "results" : 238,
      "type" : "Signature",
      "underlying" : 237,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 236
      } ],
      "name" : "([]float64)",
      "type" : "Tuple",
      "underlying" : 238
    }, {
      "name" : "func(data []float64, retVal []float64, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a float64, b float64) float64)",
      "params" : 240,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 239,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 236
      }, {
        "name" : "retVal",
        "type" : 236
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 241
      } ],
      "name" : "(data []float64, retVal []float64, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a float64, b float64) float64)",
      "type" : "Tuple",
      "underlying" : 240
    }, {
      "name" : "func(a float64, b float64) float64",
      "params" : 242,
      "recv" : -1,
      "results" : 234,
      "type" : "Signature",
      "underlying" : 241,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 233
      }, {
        "name" : "b",
        "type" : 233
      } ],
      "name" : "(a float64, b float64)",
      "type" : "Tuple",
      "underlying" : 242
    }, {
      "name" : "func(complex64, complex64) complex64",
      "params" : 244,
      "recv" : -1,
      "results" : 246,
      "type" : "Signature",
      "underlying" : 243,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 245
      }, {
        "name" : "",
        "type" : 245
      } ],
      "name" : "(complex64, complex64)",
      "type" : "Tuple",
      "underlying" : 244
    }, {
      "name" : "complex64",
      "type" : "Basic",
      "underlying" : 245
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 245
      } ],
      "name" : "(complex64)",
      "type" : "Tuple",
      "underlying" : 246
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 243
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(complex64, complex64) complex64, bool)",
      "type" : "Tuple",
      "underlying" : 247
    }, {
      "elem" : 245,
      "name" : "[]complex64",
      "type" : "Slice",
      "underlying" : 248
    }, {
      "name" : "func() []complex64",
      "params" : 5,
      "recv" : -1,
      "results" : 250,
      "type" : "Signature",
      "underlying" : 249,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 248
      } ],
      "name" : "([]complex64)",
      "type" : "Tuple",
      "underlying" : 250
    }, {
      "name" : "func(data []complex64, retVal []complex64, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a complex64, b complex64) complex64)",
      "params" : 252,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 251,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 248
      }, {
        "name" : "retVal",
        "type" : 248
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 253
      } ],
      "name" : "(data []complex64, retVal []complex64, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a complex64, b complex64) complex64)",
      "type" : "Tuple",
      "underlying" : 252
    }, {
      "name" : "func(a complex64, b complex64) complex64",
      "params" : 254,
      "recv" : -1,
      "results" : 246,
      "type" : "Signature",
      "underlying" : 253,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 245
      }, {
        "name" : "b",
        "type" : 245
      } ],
      "name" : "(a complex64, b complex64)",
      "type" : "Tuple",
      "underlying" : 254
    }, {
      "name" : "func(complex128, complex128) complex128",
      "params" : 256,
      "recv" : -1,
      "results" : 258,
      "type" : "Signature",
      "underlying" : 255,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 257
      }, {
        "name" : "",
        "type" : 257
      } ],
      "name" : "(complex128, complex128)",
      "type" : "Tuple",
      "underlying" : 256
    }, {
      "name" : "complex128",
      "type" : "Basic",
      "underlying" : 257
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 257
      } ],
      "name" : "(complex128)",
      "type" : "Tuple",
      "underlying" : 258
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 255
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(complex128, complex128) complex128, bool)",
      "type" : "Tuple",
      "underlying" : 259
    }, {
      "elem" : 257,
      "name" : "[]complex128",
      "type" : "Slice",
      "underlying" : 260
    }, {
      "name" : "func() []complex128",
      "params" : 5,
      "recv" : -1,
      "results" : 262,
      "type" : "Signature",
      "underlying" : 261,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 260
      } ],
      "name" : "([]complex128)",
      "type" : "Tuple",
      "underlying" : 262
    }, {
      "name" : "func(data []complex128, retVal []complex128, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a complex128, b complex128) complex128)",
      "params" : 264,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 263,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 260
      }, {
        "name" : "retVal",
        "type" : 260
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 265
      } ],
      "name" : "(data []complex128, retVal []complex128, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a complex128, b complex128) complex128)",
      "type" : "Tuple",
      "underlying" : 264
    }, {
      "name" : "func(a complex128, b complex128) complex128",
      "params" : 266,
      "recv" : -1,
      "results" : 258,
      "type" : "Signature",
      "underlying" : 265,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 257
      }, {
        "name" : "b",
        "type" : 257
      } ],
      "name" : "(a complex128, b complex128)",
      "type" : "Tuple",
      "underlying" : 266
    }, {
      "name" : "func(string, string) string",
      "params" : 268,
      "recv" : -1,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 267,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      }, {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(string, string)",
      "type" : "Tuple",
      "underlying" : 268
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 267
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(string, string) string, bool)",
      "type" : "Tuple",
      "underlying" : 269
    }, {
      "elem" : 23,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 270
    }, {
      "name" : "func() []string",
      "params" : 5,
      "recv" : -1,
      "results" : 272,
      "type" : "Signature",
      "underlying" : 271,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 270
      } ],
      "name" : "([]string)",
      "type" : "Tuple",
      "underlying" : 272
    }, {
      "name" : "func(data []string, retVal []string, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a string, b string) string)",
      "params" : 274,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 273,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 270
      }, {
        "name" : "retVal",
        "type" : 270
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 275
      } ],
      "name" : "(data []string, retVal []string, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a string, b string) string)",
      "type" : "Tuple",
      "underlying" : 274
    }, {
      "name" : "func(a string, b string) string",
      "params" : 276,
      "recv" : -1,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 275,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 23
      }, {
        "name" : "b",
        "type" : 23
      } ],
      "name" : "(a string, b string)",
      "type" : "Tuple",
      "underlying" : 276
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer",
      "params" : 54,
      "recv" : -1,
      "results" : 278,
      "type" : "Signature",
      "underlying" : 277,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 55
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 278
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 277
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer, bool)",
      "type" : "Tuple",
      "underlying" : 279
    }, {
      "elem" : 55,
      "name" : "[]unsafe.Pointer",
      "type" : "Slice",
      "underlying" : 280
    }, {
      "name" : "func() []unsafe.Pointer",
      "params" : 5,
      "recv" : -1,
      "results" : 282,
      "type" : "Signature",
      "underlying" : 281,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 280
      } ],
      "name" : "([]unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 282
    }, {
      "name" : "func(data []unsafe.Pointer, retVal []unsafe.Pointer, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a unsafe.Pointer, b unsafe.Pointer) unsafe.Pointer)",
      "params" : 284,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 283,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 280
      }, {
        "name" : "retVal",
        "type" : 280
      }, {
        "name" : "dim0",
        "type" : 7
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "outerStride",
        "type" : 7
      }, {
        "name" : "stride",
        "type" : 7
      }, {
        "name" : "expected",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 285
      } ],
      "name" : "(data []unsafe.Pointer, retVal []unsafe.Pointer, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a unsafe.Pointer, b unsafe.Pointer) unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 284
    }, {
      "name" : "func(a unsafe.Pointer, b unsafe.Pointer) unsafe.Pointer",
      "params" : 286,
      "recv" : -1,
      "results" : 278,
      "type" : "Signature",
      "underlying" : 285,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 55
      }, {
        "name" : "b",
        "type" : 55
      } ],
      "name" : "(a unsafe.Pointer, b unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 286
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "e",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 75,
      "exported" : false
    }, {
      "name" : "retVal",
      "package" : 0,
      "type" : 75,
      "exported" : false
    }, {
      "name" : "dim0",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "dimSize",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "outerStride",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "stride",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "expected",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 78,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 80,
      "exported" : false
    }, {
      "name" : "Int64",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "Float64",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "Bool",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "Uint32",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "Int",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "Int16",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "Float32",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "Complex128",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "Complex64",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "UnsafePointer",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "Uint8",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "Int32",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "String",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "Uint",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "Uint16",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "Uint64",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "Uintptr",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "Int8",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 82,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 89,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 89,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 97,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 26,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 26,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 106,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 111,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 111,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 118,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 123,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 123,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 130,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 134,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 134,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 141,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 146,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 146,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 153,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 157,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 157,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 164,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 168,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 168,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 175,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 179,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 179,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 186,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 190,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 190,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 197,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 202,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 202,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 209,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 212,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 212,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 219,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 224,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 224,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 231,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 236,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 236,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 243,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 248,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 248,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 255,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 260,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 260,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 267,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 270,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 270,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 277,
      "exported" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 280,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 280,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}