{
  "usage" : {
    "file" : "link_linux.go",
    "label1" : "syscall",
    "label2" : "no-gc",
    "line" : "1066",
    "module" : "github.com/vishvananda/netlink",
    "pkg" : "github.com/vishvananda/netlink",
    "project" : "weaveworks/scope",
    "snippet" : "_, _, errno := unix.Syscall(unix.SYS_IOCTL, file.Fd(), uintptr(unix.TUNSETIFF), uintptr(unsafe.Pointer(&localReq)))",
    "version" : "v1.0.1-0.20190913165827-36d367fd76f9"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 3, 12, 13, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 13, 4, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 13, 4, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 4, 2, 3, 12, 14, 13 ],
      "decl-vars" : [ 14 ],
      "line-start" : 1017,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "base"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Attrs"
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "link",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1017,
      "code" : "base := link.Attrs()",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 14, 13, 4, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 3, 12, 15, 16, 14, 13, 4, 2 ],
      "decl-vars" : [ 16, 15 ],
      "line-start" : 1020,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tuntap"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isTuntap"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "contained" : {
              "go-type" : 76,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 76,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Tuntap"
              }
            },
            "go-type" : 75,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 74,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "link",
              "variable" : 3
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1020,
      "code" : "tuntap, isTuntap := link.(*Tuntap)",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 6 ],
      "in-vars" : [ 14, 13, 4, 2, 3, 12, 15, 16 ],
      "exit" : false,
      "out-vars" : [ 3, 12, 15, 16, 14, 13, 4, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1022,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "left" : {
            "go-type" : 26,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Name",
                "variable" : 17
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "base",
                  "variable" : 14
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "STRING",
                "value" : ""
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 26,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "isTuntap",
                "variable" : 16
              }
            },
            "type" : "unary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1024,
      "code" : "if base.Name == \"\" && !isTuntap {\n\treturn fmt.Errorf(\"LinkAttrs.Name cannot be empty\")\n}",
      "entry" : false,
      "use-vars" : [ 16, 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1023,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "LinkAttrs.Name cannot be empty"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 102,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "fmt"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1023,
      "code" : "return fmt.Errorf(\"LinkAttrs.Name cannot be empty\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 53 ],
      "in-vars" : [ 16, 14, 13, 4, 2, 3, 12, 15 ],
      "exit" : false,
      "out-vars" : [ 3, 12, 15, 14, 13, 4, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1026,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isTuntap",
            "variable" : 16
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1116,
      "code" : "if isTuntap {\n\n\tif tuntap.Mode < unix.IFF_TUN || tuntap.Mode > unix.IFF_TAP {\n\t\treturn fmt.Errorf(\"Tuntap.Mode %v unknown\", tuntap.Mode)\n\t}\n\n\tqueues := tuntap.Queues\n\n\tvar fds []*os.File\n\tvar req ifReq\n\tcopy(req.Name[:15], base.Name)\n\n\treq.Flags = uint16(tuntap.Flags)\n\n\tif queues == 0 {\n\t\tqueues = 1\n\t\tif tuntap.Flags == 0 {\n\t\t\treq.Flags = uint16(TUNTAP_DEFAULTS)\n\t\t}\n\t} else {\n\n\t\tif tuntap.Flags == 0 {\n\t\t\treq.Flags = uint16(TUNTAP_MULTI_QUEUE_DEFAULTS)\n\t\t}\n\t}\n\n\treq.Flags |= uint16(tuntap.Mode)\n\n\tfor i := 0; i < queues; i++ {\n\t\tlocalReq := req\n\t\tfile, err := os.OpenFile(\"/dev/net/tun\", os.O_RDWR, 0)\n\t\tif err != nil {\n\t\t\tcleanupFds(fds)\n\t\t\treturn err\n\t\t}\n\n\t\tfds = append(fds, file)\n\t\t_, _, errno := unix.Syscall(unix.SYS_IOCTL, file.Fd(), uintptr(unix.TUNSETIFF), uintptr(unsafe.Pointer(&localReq)))\n\t\tif errno != 0 {\n\t\t\tcleanupFds(fds)\n\t\t\treturn fmt.Errorf(\"Tuntap IOCTL TUNSETIFF failed [%d], errno %v\", i, errno)\n\t\t}\n\n\t\tif i == 0 {\n\t\t\tlink.Attrs().Name = strings.Trim(string(localReq.Name[:]), \"\\x00\")\n\t\t}\n\t}\n\n\tif !tuntap.NonPersist {\n\t\t_, _, errno := unix.Syscall(unix.SYS_IOCTL, fds[0].Fd(), uintptr(unix.TUNSETPERSIST), 1)\n\t\tif errno != 0 {\n\t\t\tcleanupFds(fds)\n\t\t\treturn fmt.Errorf(\"Tuntap IOCTL TUNSETPERSIST failed, errno %v\", errno)\n\t\t}\n\t}\n\n\th.ensureIndex(base)\n\n\tif base.MasterIndex != 0 {\n\n\t\terr := h.LinkSetMasterByIndex(link, base.MasterIndex)\n\t\tif err != nil {\n\n\t\t\tif !tuntap.NonPersist {\n\t\t\t\t_, _, _ = unix.Syscall(unix.SYS_IOCTL, fds[0].Fd(), uintptr(unix.TUNSETPERSIST), 0)\n\t\t\t}\n\t\t\tcleanupFds(fds)\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif tuntap.Queues == 0 {\n\t\tcleanupFds(fds)\n\t} else {\n\t\ttuntap.Fds = fds\n\t}\n\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 15, 14, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 14, 2, 3, 15 ],
      "decl-vars" : [ ],
      "line-start" : 1029,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "go-type" : 105,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Mode",
                "variable" : 18
              },
              "go-type" : 78,
              "kind" : "expression",
              "target" : {
                "go-type" : 75,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "tuntap",
                  "variable" : 15
                }
              },
              "type" : "selector"
            },
            "operator" : "<",
            "right" : {
              "go-type" : 78,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 105,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Mode",
                "variable" : 18
              },
              "go-type" : 78,
              "kind" : "expression",
              "target" : {
                "go-type" : 75,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "tuntap",
                  "variable" : 15
                }
              },
              "type" : "selector"
            },
            "operator" : ">",
            "right" : {
              "go-type" : 78,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "2"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1031,
      "code" : "if tuntap.Mode < unix.IFF_TUN || tuntap.Mode > unix.IFF_TAP {\n\treturn fmt.Errorf(\"Tuntap.Mode %v unknown\", tuntap.Mode)\n}",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 15 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1030,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Tuntap.Mode %v unknown"
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Mode",
              "variable" : 18
            },
            "go-type" : 78,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tuntap",
                "variable" : 15
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 102,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "fmt"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1030,
      "code" : "return fmt.Errorf(\"Tuntap.Mode %v unknown\", tuntap.Mode)",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 14, 2, 3, 15 ],
      "exit" : false,
      "out-vars" : [ 14, 24, 2, 3, 15 ],
      "decl-vars" : [ 24 ],
      "line-start" : 1033,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "queues"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Queues",
            "variable" : 19
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tuntap",
              "variable" : 15
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1033,
      "code" : "queues := tuntap.Queues",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 15, 14, 24, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 24, 2, 3, 15, 14, 27 ],
      "decl-vars" : [ 27 ],
      "line-start" : 1035,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "contained" : {
                  "go-type" : 82,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 6,
                    "value" : "os"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 82,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "File"
                  }
                },
                "go-type" : 81,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 80,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "fds"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1035,
      "code" : "var fds []*os.File",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 24, 2, 3, 15, 14, 27 ],
      "exit" : false,
      "out-vars" : [ 3, 20, 15, 14, 27, 24, 2 ],
      "decl-vars" : [ 20 ],
      "line-start" : 1036,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 106,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 106,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "ifReq"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "req"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1036,
      "code" : "var req ifReq",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 3, 20, 15, 14, 27, 24, 2 ],
      "exit" : false,
      "out-vars" : [ 20, 15, 14, 27, 24, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1037,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 13,
            "type" : "slice",
            "three" : false,
            "high" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "15"
              }
            },
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Name",
                "variable" : 21
              },
              "go-type" : 108,
              "kind" : "expression",
              "target" : {
                "go-type" : 106,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "req",
                  "variable" : 20
                }
              },
              "type" : "selector"
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Name",
              "variable" : 17
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 110,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1037,
      "code" : "copy(req.Name[:15], base.Name)",
      "entry" : false,
      "use-vars" : [ 14, 20 ]
    }, {
      "update-vars" : [ 20 ],
      "successors" : [ 14 ],
      "in-vars" : [ 2, 3, 20, 15, 14, 27, 24 ],
      "exit" : false,
      "out-vars" : [ 15, 14, 27, 24, 2, 3, 20 ],
      "decl-vars" : [ ],
      "line-start" : 1039,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Flags",
            "variable" : 22
          },
          "go-type" : 53,
          "kind" : "expression",
          "target" : {
            "go-type" : 106,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "req",
              "variable" : 20
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 53,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 53,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint16"
            }
          },
          "go-type" : 53,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Flags",
              "variable" : 23
            },
            "go-type" : 79,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tuntap",
                "variable" : 15
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1039,
      "code" : "req.Flags = uint16(tuntap.Flags)",
      "entry" : false,
      "use-vars" : [ 20, 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 18 ],
      "in-vars" : [ 20, 15, 14, 27, 24, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 20, 15, 14, 27, 24, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1041,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "queues",
              "variable" : 24
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1053,
      "code" : "if queues == 0 {\n\tqueues = 1\n\tif tuntap.Flags == 0 {\n\t\treq.Flags = uint16(TUNTAP_DEFAULTS)\n\t}\n} else {\n\n\tif tuntap.Flags == 0 {\n\t\treq.Flags = uint16(TUNTAP_MULTI_QUEUE_DEFAULTS)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 16 ],
      "in-vars" : [ 14, 27, 2, 3, 20, 15 ],
      "exit" : false,
      "out-vars" : [ 24, 2, 3, 20, 15, 14, 27 ],
      "decl-vars" : [ ],
      "line-start" : 1042,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "queues",
            "variable" : 24
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 24 ],
      "line-end" : 1042,
      "code" : "queues = 1",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17, 20 ],
      "in-vars" : [ 14, 27, 24, 2, 3, 20, 15 ],
      "exit" : false,
      "out-vars" : [ 20, 15, 14, 27, 24, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1043,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Flags",
              "variable" : 23
            },
            "go-type" : 79,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tuntap",
                "variable" : 15
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 79,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1045,
      "code" : "if tuntap.Flags == 0 {\n\treq.Flags = uint16(TUNTAP_DEFAULTS)\n}",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ 20 ],
      "successors" : [ 20 ],
      "in-vars" : [ 2, 3, 20, 15, 14, 27, 24 ],
      "exit" : false,
      "out-vars" : [ 3, 20, 15, 14, 27, 24, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1044,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Flags",
            "variable" : 22
          },
          "go-type" : 53,
          "kind" : "expression",
          "target" : {
            "go-type" : 106,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "req",
              "variable" : 20
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 53,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "40960"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1044,
      "code" : "req.Flags = uint16(TUNTAP_DEFAULTS)",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19, 20 ],
      "in-vars" : [ 27, 24, 2, 3, 20, 15, 14 ],
      "exit" : false,
      "out-vars" : [ 20, 15, 14, 27, 24, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1050,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Flags",
              "variable" : 23
            },
            "go-type" : 79,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tuntap",
                "variable" : 15
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 79,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1052,
      "code" : "if tuntap.Flags == 0 {\n\treq.Flags = uint16(TUNTAP_MULTI_QUEUE_DEFAULTS)\n}",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ 20 ],
      "successors" : [ 20 ],
      "in-vars" : [ 14, 27, 24, 2, 3, 20, 15 ],
      "exit" : false,
      "out-vars" : [ 27, 24, 2, 3, 20, 15, 14 ],
      "decl-vars" : [ ],
      "line-start" : 1051,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Flags",
            "variable" : 22
          },
          "go-type" : 53,
          "kind" : "expression",
          "target" : {
            "go-type" : 106,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "req",
              "variable" : 20
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 53,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "4352"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1051,
      "code" : "req.Flags = uint16(TUNTAP_MULTI_QUEUE_DEFAULTS)",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ 20 ],
      "successors" : [ 22 ],
      "in-vars" : [ 27, 24, 2, 3, 20, 15, 14 ],
      "exit" : false,
      "out-vars" : [ 27, 24, 2, 3, 20, 15, 14 ],
      "decl-vars" : [ ],
      "line-start" : 1055,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Flags",
            "variable" : 22
          },
          "go-type" : 53,
          "kind" : "expression",
          "target" : {
            "go-type" : 106,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "req",
              "variable" : 20
            }
          },
          "type" : "selector"
        } ],
        "operator" : "|",
        "right" : [ {
          "coerced-to" : {
            "go-type" : 53,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 53,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint16"
            }
          },
          "go-type" : 53,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Mode",
              "variable" : 18
            },
            "go-type" : 78,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tuntap",
                "variable" : 15
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 1055,
      "code" : "req.Flags |= uint16(tuntap.Mode)",
      "entry" : false,
      "use-vars" : [ 15, 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24, 36 ],
      "in-vars" : [ 25, 14, 27, 24, 2, 3, 20, 15 ],
      "exit" : false,
      "out-vars" : [ 25, 14, 27, 24, 2, 3, 20, 15 ],
      "decl-vars" : [ ],
      "line-start" : 1057,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 25
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "queues",
              "variable" : 24
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 1081,
      "code" : "for i := 0; i < queues; i++ {\n\tlocalReq := req\n\tfile, err := os.OpenFile(\"/dev/net/tun\", os.O_RDWR, 0)\n\tif err != nil {\n\t\tcleanupFds(fds)\n\t\treturn err\n\t}\n\n\tfds = append(fds, file)\n\t_, _, errno := unix.Syscall(unix.SYS_IOCTL, file.Fd(), uintptr(unix.TUNSETIFF), uintptr(unsafe.Pointer(&localReq)))\n\tif errno != 0 {\n\t\tcleanupFds(fds)\n\t\treturn fmt.Errorf(\"Tuntap IOCTL TUNSETIFF failed [%d], errno %v\", i, errno)\n\t}\n\n\tif i == 0 {\n\t\tlink.Attrs().Name = strings.Trim(string(localReq.Name[:]), \"\\x00\")\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 24, 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 14, 27, 24, 2, 3, 20, 15 ],
      "exit" : false,
      "out-vars" : [ 15, 25, 14, 27, 24, 2, 3, 20 ],
      "decl-vars" : [ 25 ],
      "line-start" : 1057,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1057,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 25 ],
      "successors" : [ 21 ],
      "in-vars" : [ 14, 27, 24, 2, 3, 20, 15, 25 ],
      "exit" : false,
      "out-vars" : [ 25, 14, 27, 24, 2, 3, 20, 15 ],
      "decl-vars" : [ ],
      "line-start" : 1057,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 25
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 25 ],
      "line-end" : 1057,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 27, 24, 2, 3, 20, 15, 25, 14 ],
      "exit" : false,
      "out-vars" : [ 14, 27, 29, 2, 3, 20, 24, 15, 25 ],
      "decl-vars" : [ 29 ],
      "line-start" : 1058,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "localReq"
          }
        } ],
        "right" : [ {
          "go-type" : 106,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "req",
            "variable" : 20
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1058,
      "code" : "localReq := req",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 15, 25, 14, 27, 3, 20, 29, 24, 2 ],
      "exit" : false,
      "out-vars" : [ 14, 28, 2, 20, 15, 27, 29, 24, 3, 26, 25 ],
      "decl-vars" : [ 26, 28 ],
      "line-start" : 1059,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "file"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "/dev/net/tun"
            }
          }, {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          }, {
            "go-type" : 116,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 114,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 6,
              "value" : "os"
            },
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "OpenFile"
            }
          },
          "go-type" : 113,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1059,
      "code" : "file, err := os.OpenFile(\"/dev/net/tun\", os.O_RDWR, 0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27, 29 ],
      "in-vars" : [ 28, 2, 20, 26, 25, 14, 27, 29, 24, 3, 15 ],
      "exit" : false,
      "out-vars" : [ 14, 27, 26, 20, 15, 25, 28, 29, 24, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1060,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 26
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1063,
      "code" : "if err != nil {\n\tcleanupFds(fds)\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 27, 26 ],
      "exit" : false,
      "out-vars" : [ 26 ],
      "decl-vars" : [ ],
      "line-start" : 1061,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fds",
              "variable" : 27
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "cleanupFds"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1061,
      "code" : "cleanupFds(fds)",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1062,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 38,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 26
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1062,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 30 ],
      "in-vars" : [ 14, 29, 20, 15, 25, 27, 28, 24, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 28, 24, 3, 20, 25, 14, 27, 29, 2, 15 ],
      "decl-vars" : [ ],
      "line-start" : 1065,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fds",
            "variable" : 27
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fds",
              "variable" : 27
            }
          }, {
            "go-type" : 81,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "file",
              "variable" : 28
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 120,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 27 ],
      "line-end" : 1065,
      "code" : "fds = append(fds, file)",
      "entry" : false,
      "use-vars" : [ 27, 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 15, 25, 14, 27, 28, 3, 20, 29, 24, 2 ],
      "exit" : false,
      "out-vars" : [ 30, 24, 20, 15, 14, 27, 29, 2, 3, 25 ],
      "decl-vars" : [ 36, 30, 37 ],
      "line-start" : 1066,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "errno"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 93,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 6,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Fd"
              },
              "go-type" : 127,
              "kind" : "expression",
              "target" : {
                "go-type" : 81,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "file",
                  "variable" : 28
                }
              },
              "type" : "selector"
            },
            "go-type" : 93,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 93,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1074025674"
            }
          }, {
            "coerced-to" : {
              "go-type" : 93,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 93,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 93,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 129,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 10,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 129,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 129,
              "kind" : "expression",
              "target" : {
                "go-type" : 130,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 106,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "localReq",
                    "variable" : 29
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 125,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "unix"
            },
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Syscall"
            }
          },
          "go-type" : 123,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1066,
      "code" : "_, _, errno := unix.Syscall(unix.SYS_IOCTL, file.Fd(), uintptr(unix.TUNSETIFF), uintptr(unsafe.Pointer(&localReq)))",
      "entry" : false,
      "use-vars" : [ 28, 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32, 34 ],
      "in-vars" : [ 29, 2, 3, 20, 15, 14, 30, 24, 25, 27 ],
      "exit" : false,
      "out-vars" : [ 14, 30, 24, 2, 15, 25, 27, 29, 3, 20 ],
      "decl-vars" : [ ],
      "line-start" : 1067,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "go-type" : 124,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "errno",
              "variable" : 30
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 124,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1070,
      "code" : "if errno != 0 {\n\tcleanupFds(fds)\n\treturn fmt.Errorf(\"Tuntap IOCTL TUNSETIFF failed [%d], errno %v\", i, errno)\n}",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 27, 30, 25 ],
      "exit" : false,
      "out-vars" : [ 30, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1068,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fds",
              "variable" : 27
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "cleanupFds"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1068,
      "code" : "cleanupFds(fds)",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 30, 25 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1069,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Tuntap IOCTL TUNSETIFF failed [%d], errno %v"
            }
          }, {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 25
            }
          }, {
            "go-type" : 124,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "errno",
              "variable" : 30
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 102,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "fmt"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1069,
      "code" : "return fmt.Errorf(\"Tuntap IOCTL TUNSETIFF failed [%d], errno %v\", i, errno)",
      "entry" : false,
      "use-vars" : [ 25, 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23, 35 ],
      "in-vars" : [ 14, 29, 24, 2, 20, 25, 27, 3, 15 ],
      "exit" : false,
      "out-vars" : [ 24, 2, 3, 15, 25, 14, 29, 20, 27 ],
      "decl-vars" : [ ],
      "line-start" : 1078,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 25
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1080,
      "code" : "if i == 0 {\n\tlink.Attrs().Name = strings.Trim(string(localReq.Name[:]), \"\\x00\")\n}",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 23 ],
      "in-vars" : [ 3, 25, 14, 29, 24, 2, 27, 20, 15 ],
      "exit" : false,
      "out-vars" : [ 3, 20, 15, 25, 14, 27, 24, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1079,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Name",
            "variable" : 17
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Attrs"
              },
              "go-type" : 4,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "link",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "go-type" : 7,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 13,
              "type" : "slice",
              "three" : false,
              "high" : null,
              "max" : null,
              "kind" : "expression",
              "low" : null,
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Name",
                  "variable" : 21
                },
                "go-type" : 108,
                "kind" : "expression",
                "target" : {
                  "go-type" : 106,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "localReq",
                    "variable" : 29
                  }
                },
                "type" : "selector"
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\u0000"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 131,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 11,
              "value" : "strings"
            },
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Trim"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1079,
      "code" : "link.Attrs().Name = strings.Trim(string(localReq.Name[:]), \"\\x00\")",
      "entry" : false,
      "use-vars" : [ 29, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37, 41 ],
      "in-vars" : [ 27, 2, 3, 15, 14 ],
      "exit" : false,
      "out-vars" : [ 14, 27, 2, 3, 15 ],
      "decl-vars" : [ ],
      "line-start" : 1084,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "NonPersist",
              "variable" : 31
            },
            "go-type" : 26,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tuntap",
                "variable" : 15
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1090,
      "code" : "if !tuntap.NonPersist {\n\t_, _, errno := unix.Syscall(unix.SYS_IOCTL, fds[0].Fd(), uintptr(unix.TUNSETPERSIST), 1)\n\tif errno != 0 {\n\t\tcleanupFds(fds)\n\t\treturn fmt.Errorf(\"Tuntap IOCTL TUNSETPERSIST failed, errno %v\", errno)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 14, 27, 2, 3, 15 ],
      "exit" : false,
      "out-vars" : [ 14, 27, 2, 3, 32, 15 ],
      "decl-vars" : [ 38, 39, 32 ],
      "line-start" : 1085,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "errno"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 93,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 6,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Fd"
              },
              "go-type" : 127,
              "kind" : "expression",
              "target" : {
                "go-type" : 81,
                "index" : {
                  "go-type" : 10,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 80,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "fds",
                    "variable" : 27
                  }
                },
                "type" : "index"
              },
              "type" : "selector"
            },
            "go-type" : 93,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 93,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1074025675"
            }
          }, {
            "go-type" : 93,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 125,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "unix"
            },
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Syscall"
            }
          },
          "go-type" : 123,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1085,
      "code" : "_, _, errno := unix.Syscall(unix.SYS_IOCTL, fds[0].Fd(), uintptr(unix.TUNSETPERSIST), 1)",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39, 41 ],
      "in-vars" : [ 15, 14, 27, 2, 3, 32 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 32, 15, 14, 27 ],
      "decl-vars" : [ ],
      "line-start" : 1086,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "go-type" : 124,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "errno",
              "variable" : 32
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 124,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1089,
      "code" : "if errno != 0 {\n\tcleanupFds(fds)\n\treturn fmt.Errorf(\"Tuntap IOCTL TUNSETPERSIST failed, errno %v\", errno)\n}",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 27, 32 ],
      "exit" : false,
      "out-vars" : [ 32 ],
      "decl-vars" : [ ],
      "line-start" : 1087,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fds",
              "variable" : 27
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "cleanupFds"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1087,
      "code" : "cleanupFds(fds)",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 32 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1088,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Tuntap IOCTL TUNSETPERSIST failed, errno %v"
            }
          }, {
            "go-type" : 124,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "errno",
              "variable" : 32
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 102,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "fmt"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1088,
      "code" : "return fmt.Errorf(\"Tuntap IOCTL TUNSETPERSIST failed, errno %v\", errno)",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42 ],
      "in-vars" : [ 15, 14, 27, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 15, 14, 27, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1092,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "base",
              "variable" : 14
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ensureIndex"
            },
            "go-type" : 133,
            "kind" : "expression",
            "target" : {
              "go-type" : 40,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 2
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1092,
      "code" : "h.ensureIndex(base)",
      "entry" : false,
      "use-vars" : [ 14, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43, 49 ],
      "in-vars" : [ 14, 27, 2, 3, 15 ],
      "exit" : false,
      "out-vars" : [ 14, 27, 2, 3, 15 ],
      "decl-vars" : [ ],
      "line-start" : 1095,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "MasterIndex",
              "variable" : 33
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1107,
      "code" : "if base.MasterIndex != 0 {\n\n\terr := h.LinkSetMasterByIndex(link, base.MasterIndex)\n\tif err != nil {\n\n\t\tif !tuntap.NonPersist {\n\t\t\t_, _, _ = unix.Syscall(unix.SYS_IOCTL, fds[0].Fd(), uintptr(unix.TUNSETPERSIST), 0)\n\t\t}\n\t\tcleanupFds(fds)\n\t\treturn err\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44 ],
      "in-vars" : [ 3, 15, 14, 27, 2 ],
      "exit" : false,
      "out-vars" : [ 27, 34, 15 ],
      "decl-vars" : [ 34 ],
      "line-start" : 1097,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "link",
              "variable" : 3
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "MasterIndex",
              "variable" : 33
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "LinkSetMasterByIndex"
            },
            "go-type" : 135,
            "kind" : "expression",
            "target" : {
              "go-type" : 40,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 2
              }
            },
            "type" : "selector"
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1097,
      "code" : "err := h.LinkSetMasterByIndex(link, base.MasterIndex)",
      "entry" : false,
      "use-vars" : [ 2, 3, 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45, 49 ],
      "in-vars" : [ 27, 34, 15 ],
      "exit" : false,
      "out-vars" : [ 27, 34, 15 ],
      "decl-vars" : [ ],
      "line-start" : 1098,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 34
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1106,
      "code" : "if err != nil {\n\n\tif !tuntap.NonPersist {\n\t\t_, _, _ = unix.Syscall(unix.SYS_IOCTL, fds[0].Fd(), uintptr(unix.TUNSETPERSIST), 0)\n\t}\n\tcleanupFds(fds)\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46, 47 ],
      "in-vars" : [ 27, 34, 15 ],
      "exit" : false,
      "out-vars" : [ 34, 27 ],
      "decl-vars" : [ ],
      "line-start" : 1101,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "NonPersist",
              "variable" : 31
            },
            "go-type" : 26,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tuntap",
                "variable" : 15
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1103,
      "code" : "if !tuntap.NonPersist {\n\t_, _, _ = unix.Syscall(unix.SYS_IOCTL, fds[0].Fd(), uintptr(unix.TUNSETPERSIST), 0)\n}",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 27, 34 ],
      "exit" : false,
      "out-vars" : [ 27, 34 ],
      "decl-vars" : [ ],
      "line-start" : 1102,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 93,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 6,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Fd"
              },
              "go-type" : 127,
              "kind" : "expression",
              "target" : {
                "go-type" : 81,
                "index" : {
                  "go-type" : 10,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 80,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "fds",
                    "variable" : 27
                  }
                },
                "type" : "index"
              },
              "type" : "selector"
            },
            "go-type" : 93,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 93,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1074025675"
            }
          }, {
            "go-type" : 93,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 125,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "unix"
            },
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Syscall"
            }
          },
          "go-type" : 123,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1102,
      "code" : "_, _, _ = unix.Syscall(unix.SYS_IOCTL, fds[0].Fd(), uintptr(unix.TUNSETPERSIST), 0)",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 27, 34 ],
      "exit" : false,
      "out-vars" : [ 34 ],
      "decl-vars" : [ ],
      "line-start" : 1104,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fds",
              "variable" : 27
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "cleanupFds"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1104,
      "code" : "cleanupFds(fds)",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 34 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1105,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 38,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 34
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1105,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50, 51 ],
      "in-vars" : [ 27, 15 ],
      "exit" : false,
      "out-vars" : [ 27, 15 ],
      "decl-vars" : [ ],
      "line-start" : 1109,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Queues",
              "variable" : 19
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tuntap",
                "variable" : 15
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1113,
      "code" : "if tuntap.Queues == 0 {\n\tcleanupFds(fds)\n} else {\n\ttuntap.Fds = fds\n}",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52 ],
      "in-vars" : [ 27 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1110,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fds",
              "variable" : 27
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "cleanupFds"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1110,
      "code" : "cleanupFds(fds)",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 15 ],
      "successors" : [ 52 ],
      "in-vars" : [ 27, 15 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1112,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Fds",
            "variable" : 35
          },
          "go-type" : 80,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tuntap",
              "variable" : 15
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fds",
            "variable" : 27
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1112,
      "code" : "tuntap.Fds = fds",
      "entry" : false,
      "use-vars" : [ 27, 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1115,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 117,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1115,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54 ],
      "in-vars" : [ 13, 4, 2, 3, 12, 14 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ 42 ],
      "line-start" : 1118,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "req"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          }, {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "flags",
              "variable" : 4
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newNetlinkRequest"
            },
            "go-type" : 147,
            "kind" : "expression",
            "target" : {
              "go-type" : 40,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 2
              }
            },
            "type" : "selector"
          },
          "go-type" : 137,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1118,
      "code" : "req := h.newNetlinkRequest(unix.RTM_NEWLINK, flags)",
      "entry" : false,
      "use-vars" : [ 4, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 12, 43, 14, 42, 13, 2, 3 ],
      "decl-vars" : [ 43 ],
      "line-start" : 1120,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "msg"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 155,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "nl"
            },
            "type" : "identifier",
            "value" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewIfInfomsg"
            }
          },
          "go-type" : 150,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1120,
      "code" : "msg := nl.NewIfInfomsg(unix.AF_UNSPEC)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56, 58 ],
      "in-vars" : [ 14, 42, 13, 2, 3, 12, 43 ],
      "exit" : false,
      "out-vars" : [ 43, 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1122,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Flags",
                "variable" : 44
              },
              "go-type" : 15,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "base",
                  "variable" : 14
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 15,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 15,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1125,
      "code" : "if base.Flags&net.FlagUp != 0 {\n\tmsg.Change = unix.IFF_UP\n\tmsg.Flags = unix.IFF_UP\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ 43 ],
      "successors" : [ 57 ],
      "in-vars" : [ 43, 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 3, 12, 43, 14, 42, 13, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1123,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Change",
            "variable" : 45
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 150,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 43
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1123,
      "code" : "msg.Change = unix.IFF_UP",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43 ],
      "successors" : [ 58 ],
      "in-vars" : [ 42, 13, 2, 3, 12, 43, 14 ],
      "exit" : false,
      "out-vars" : [ 12, 43, 14, 42, 13, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1124,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Flags",
            "variable" : 46
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 150,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 43
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1124,
      "code" : "msg.Flags = unix.IFF_UP",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59, 61 ],
      "in-vars" : [ 43, 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 43, 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1126,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Flags",
                "variable" : 44
              },
              "go-type" : 15,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "base",
                  "variable" : 14
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 15,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "2"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 15,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1129,
      "code" : "if base.Flags&net.FlagBroadcast != 0 {\n\tmsg.Change |= unix.IFF_BROADCAST\n\tmsg.Flags |= unix.IFF_BROADCAST\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ 43 ],
      "successors" : [ 60 ],
      "in-vars" : [ 13, 2, 3, 12, 43, 14, 42 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 12, 43, 14, 42, 13 ],
      "decl-vars" : [ ],
      "line-start" : 1127,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Change",
            "variable" : 45
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 150,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 43
            }
          },
          "type" : "selector"
        } ],
        "operator" : "|",
        "right" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "2"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 1127,
      "code" : "msg.Change |= unix.IFF_BROADCAST",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43 ],
      "successors" : [ 61 ],
      "in-vars" : [ 42, 13, 2, 3, 12, 43, 14 ],
      "exit" : false,
      "out-vars" : [ 42, 13, 2, 3, 12, 43, 14 ],
      "decl-vars" : [ ],
      "line-start" : 1128,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Flags",
            "variable" : 46
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 150,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 43
            }
          },
          "type" : "selector"
        } ],
        "operator" : "|",
        "right" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "2"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 1128,
      "code" : "msg.Flags |= unix.IFF_BROADCAST",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 62, 64 ],
      "in-vars" : [ 3, 12, 43, 14, 42, 13, 2 ],
      "exit" : false,
      "out-vars" : [ 42, 13, 2, 3, 12, 43, 14 ],
      "decl-vars" : [ ],
      "line-start" : 1130,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Flags",
                "variable" : 44
              },
              "go-type" : 15,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "base",
                  "variable" : 14
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 15,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "4"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 15,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1133,
      "code" : "if base.Flags&net.FlagLoopback != 0 {\n\tmsg.Change |= unix.IFF_LOOPBACK\n\tmsg.Flags |= unix.IFF_LOOPBACK\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ 43 ],
      "successors" : [ 63 ],
      "in-vars" : [ 43, 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 12, 43, 14, 42, 13 ],
      "decl-vars" : [ ],
      "line-start" : 1131,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Change",
            "variable" : 45
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 150,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 43
            }
          },
          "type" : "selector"
        } ],
        "operator" : "|",
        "right" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 1131,
      "code" : "msg.Change |= unix.IFF_LOOPBACK",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43 ],
      "successors" : [ 64 ],
      "in-vars" : [ 2, 3, 12, 43, 14, 42, 13 ],
      "exit" : false,
      "out-vars" : [ 43, 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1132,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Flags",
            "variable" : 46
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 150,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 43
            }
          },
          "type" : "selector"
        } ],
        "operator" : "|",
        "right" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 1132,
      "code" : "msg.Flags |= unix.IFF_LOOPBACK",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65, 67 ],
      "in-vars" : [ 3, 12, 43, 14, 42, 13, 2 ],
      "exit" : false,
      "out-vars" : [ 43, 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1134,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Flags",
                "variable" : 44
              },
              "go-type" : 15,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "base",
                  "variable" : 14
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 15,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 15,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1137,
      "code" : "if base.Flags&net.FlagPointToPoint != 0 {\n\tmsg.Change |= unix.IFF_POINTOPOINT\n\tmsg.Flags |= unix.IFF_POINTOPOINT\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ 43 ],
      "successors" : [ 66 ],
      "in-vars" : [ 42, 13, 2, 3, 12, 43, 14 ],
      "exit" : false,
      "out-vars" : [ 13, 2, 3, 12, 43, 14, 42 ],
      "decl-vars" : [ ],
      "line-start" : 1135,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Change",
            "variable" : 45
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 150,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 43
            }
          },
          "type" : "selector"
        } ],
        "operator" : "|",
        "right" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "16"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 1135,
      "code" : "msg.Change |= unix.IFF_POINTOPOINT",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43 ],
      "successors" : [ 67 ],
      "in-vars" : [ 14, 42, 13, 2, 3, 12, 43 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 13, 2, 3, 12, 43 ],
      "decl-vars" : [ ],
      "line-start" : 1136,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Flags",
            "variable" : 46
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 150,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 43
            }
          },
          "type" : "selector"
        } ],
        "operator" : "|",
        "right" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "16"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 1136,
      "code" : "msg.Flags |= unix.IFF_POINTOPOINT",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 68, 70 ],
      "in-vars" : [ 2, 3, 12, 43, 14, 42, 13 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 13, 2, 3, 12, 43 ],
      "decl-vars" : [ ],
      "line-start" : 1138,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Flags",
                "variable" : 44
              },
              "go-type" : 15,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "base",
                  "variable" : 14
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 15,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "16"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 15,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1141,
      "code" : "if base.Flags&net.FlagMulticast != 0 {\n\tmsg.Change |= unix.IFF_MULTICAST\n\tmsg.Flags |= unix.IFF_MULTICAST\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ 43 ],
      "successors" : [ 69 ],
      "in-vars" : [ 42, 13, 2, 3, 12, 43, 14 ],
      "exit" : false,
      "out-vars" : [ 12, 43, 14, 42, 13, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1139,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Change",
            "variable" : 45
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 150,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 43
            }
          },
          "type" : "selector"
        } ],
        "operator" : "|",
        "right" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "4096"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 1139,
      "code" : "msg.Change |= unix.IFF_MULTICAST",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43 ],
      "successors" : [ 70 ],
      "in-vars" : [ 43, 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 12, 43, 14, 42, 13, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1140,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Flags",
            "variable" : 46
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 150,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 43
            }
          },
          "type" : "selector"
        } ],
        "operator" : "|",
        "right" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "4096"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 1140,
      "code" : "msg.Flags |= unix.IFF_MULTICAST",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 71, 72 ],
      "in-vars" : [ 43, 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 43, 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1142,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Index",
              "variable" : 47
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1144,
      "code" : "if base.Index != 0 {\n\tmsg.Index = int32(base.Index)\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ 43 ],
      "successors" : [ 72 ],
      "in-vars" : [ 43, 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 43, 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1143,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Index",
            "variable" : 48
          },
          "go-type" : 50,
          "kind" : "expression",
          "target" : {
            "go-type" : 150,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 43
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 50,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 50,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int32"
            }
          },
          "go-type" : 50,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Index",
              "variable" : 47
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1143,
      "code" : "msg.Index = int32(base.Index)",
      "entry" : false,
      "use-vars" : [ 43, 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 73 ],
      "in-vars" : [ 42, 13, 2, 3, 12, 43, 14 ],
      "exit" : false,
      "out-vars" : [ 13, 2, 3, 12, 14, 42 ],
      "decl-vars" : [ ],
      "line-start" : 1146,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 150,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 43
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddData"
            },
            "go-type" : 158,
            "kind" : "expression",
            "target" : {
              "go-type" : 137,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "req",
                "variable" : 42
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1146,
      "code" : "req.AddData(msg)",
      "entry" : false,
      "use-vars" : [ 42, 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 74, 78 ],
      "in-vars" : [ 42, 13, 2, 3, 12, 14 ],
      "exit" : false,
      "out-vars" : [ 42, 13, 2, 3, 12, 14 ],
      "decl-vars" : [ ],
      "line-start" : 1148,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ParentIndex",
              "variable" : 49
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1155,
      "code" : "if base.ParentIndex != 0 {\n\tb := make([]byte, 4)\n\tnative.PutUint32(b, uint32(base.ParentIndex))\n\tdata := nl.NewRtAttr(unix.IFLA_LINK, b)\n\treq.AddData(data)\n} else if link.Type() == \"ipvlan\" || link.Type() == \"ipoib\" {\n\treturn fmt.Errorf(\"Can't create %s link without ParentIndex\", link.Type())\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 75 ],
      "in-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 3, 12, 14, 42, 50, 13, 2 ],
      "decl-vars" : [ 50 ],
      "line-start" : 1149,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "b"
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 13,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 13,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4"
            }
          } ],
          "type" : "make"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1149,
      "code" : "b := make([]byte, 4)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 76 ],
      "in-vars" : [ 2, 3, 12, 14, 42, 50, 13 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 12, 14, 42, 50, 13 ],
      "decl-vars" : [ ],
      "line-start" : 1150,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 50
            }
          }, {
            "coerced-to" : {
              "go-type" : 17,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ParentIndex",
                "variable" : 49
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "base",
                  "variable" : 14
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "PutUint32"
            },
            "go-type" : 62,
            "kind" : "expression",
            "target" : {
              "go-type" : 58,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "native",
                "variable" : 12
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1150,
      "code" : "native.PutUint32(b, uint32(base.ParentIndex))",
      "entry" : false,
      "use-vars" : [ 12, 50, 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 77 ],
      "in-vars" : [ 13, 2, 3, 12, 14, 42, 50 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 51, 13, 2, 3, 12 ],
      "decl-vars" : [ 51 ],
      "line-start" : 1151,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "5"
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 50
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "nl"
            },
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewRtAttr"
            }
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1151,
      "code" : "data := nl.NewRtAttr(unix.IFLA_LINK, b)",
      "entry" : false,
      "use-vars" : [ 50 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 80 ],
      "in-vars" : [ 14, 42, 51, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1152,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 51
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddData"
            },
            "go-type" : 158,
            "kind" : "expression",
            "target" : {
              "go-type" : 137,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "req",
                "variable" : 42
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1152,
      "code" : "req.AddData(data)",
      "entry" : false,
      "use-vars" : [ 42, 51 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 79, 80 ],
      "in-vars" : [ 13, 2, 3, 12, 14, 42 ],
      "exit" : false,
      "out-vars" : [ 3, 12, 14, 42, 13, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1153,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "go-type" : 105,
            "kind" : "expression",
            "left" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 15,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Type"
                },
                "go-type" : 35,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "link",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "go-type" : 11,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "STRING",
                "value" : "ipvlan"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 105,
            "kind" : "expression",
            "left" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 15,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Type"
                },
                "go-type" : 35,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "link",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "go-type" : 11,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "STRING",
                "value" : "ipoib"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1155,
      "code" : "if link.Type() == \"ipvlan\" || link.Type() == \"ipoib\" {\n\treturn fmt.Errorf(\"Can't create %s link without ParentIndex\", link.Type())\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1154,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Can't create %s link without ParentIndex"
            }
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 15,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Type"
              },
              "go-type" : 35,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "link",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "go-type" : 11,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 102,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "fmt"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1154,
      "code" : "return fmt.Errorf(\"Can't create %s link without ParentIndex\", link.Type())",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 81 ],
      "in-vars" : [ 12, 14, 42, 13, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 42, 52, 13, 2, 3, 12, 14 ],
      "decl-vars" : [ 52 ],
      "line-start" : 1157,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "nameData"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3"
            }
          }, {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Name",
                "variable" : 17
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "base",
                  "variable" : 14
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 168,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "nl"
              },
              "type" : "identifier",
              "value" : {
                "function" : 16,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "ZeroTerminated"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "nl"
            },
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewRtAttr"
            }
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1157,
      "code" : "nameData := nl.NewRtAttr(unix.IFLA_IFNAME, nl.ZeroTerminated(base.Name))",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 82 ],
      "in-vars" : [ 2, 3, 12, 14, 42, 52, 13 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1158,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nameData",
              "variable" : 52
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddData"
            },
            "go-type" : 158,
            "kind" : "expression",
            "target" : {
              "go-type" : 137,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "req",
                "variable" : 42
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1158,
      "code" : "req.AddData(nameData)",
      "entry" : false,
      "use-vars" : [ 42, 52 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 83, 85 ],
      "in-vars" : [ 3, 12, 14, 42, 13, 2 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1160,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "MTU",
              "variable" : 53
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1163,
      "code" : "if base.MTU > 0 {\n\tmtu := nl.NewRtAttr(unix.IFLA_MTU, nl.Uint32Attr(uint32(base.MTU)))\n\treq.AddData(mtu)\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 84 ],
      "in-vars" : [ 12, 14, 42, 13, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 12, 54, 14, 42, 13, 2, 3 ],
      "decl-vars" : [ 54 ],
      "line-start" : 1161,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mtu"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4"
            }
          }, {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 17,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 17,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "MTU",
                  "variable" : 53
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "base",
                    "variable" : 14
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 170,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "nl"
              },
              "type" : "identifier",
              "value" : {
                "function" : 17,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uint32Attr"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "nl"
            },
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewRtAttr"
            }
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1161,
      "code" : "mtu := nl.NewRtAttr(unix.IFLA_MTU, nl.Uint32Attr(uint32(base.MTU)))",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 85 ],
      "in-vars" : [ 3, 12, 54, 14, 42, 13, 2 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1162,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mtu",
              "variable" : 54
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddData"
            },
            "go-type" : 158,
            "kind" : "expression",
            "target" : {
              "go-type" : 137,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "req",
                "variable" : 42
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1162,
      "code" : "req.AddData(mtu)",
      "entry" : false,
      "use-vars" : [ 54, 42 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 86, 88 ],
      "in-vars" : [ 12, 14, 42, 13, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 42, 13, 2, 3, 12, 14 ],
      "decl-vars" : [ ],
      "line-start" : 1165,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "TxQLen",
              "variable" : 55
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "operator" : ">=",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1168,
      "code" : "if base.TxQLen >= 0 {\n\tqlen := nl.NewRtAttr(unix.IFLA_TXQLEN, nl.Uint32Attr(uint32(base.TxQLen)))\n\treq.AddData(qlen)\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 87 ],
      "in-vars" : [ 2, 3, 12, 14, 42, 13 ],
      "exit" : false,
      "out-vars" : [ 12, 56, 14, 42, 13, 2, 3 ],
      "decl-vars" : [ 56 ],
      "line-start" : 1166,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "qlen"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "13"
            }
          }, {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 17,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 17,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "TxQLen",
                  "variable" : 55
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "base",
                    "variable" : 14
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 170,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "nl"
              },
              "type" : "identifier",
              "value" : {
                "function" : 17,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uint32Attr"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "nl"
            },
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewRtAttr"
            }
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1166,
      "code" : "qlen := nl.NewRtAttr(unix.IFLA_TXQLEN, nl.Uint32Attr(uint32(base.TxQLen)))",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 88 ],
      "in-vars" : [ 2, 3, 12, 56, 14, 42, 13 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1167,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "qlen",
              "variable" : 56
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddData"
            },
            "go-type" : 158,
            "kind" : "expression",
            "target" : {
              "go-type" : 137,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "req",
                "variable" : 42
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1167,
      "code" : "req.AddData(qlen)",
      "entry" : false,
      "use-vars" : [ 42, 56 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 89, 91 ],
      "in-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 13, 2, 3, 12, 14, 42 ],
      "decl-vars" : [ ],
      "line-start" : 1170,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "HardwareAddr",
              "variable" : 57
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1173,
      "code" : "if base.HardwareAddr != nil {\n\thwaddr := nl.NewRtAttr(unix.IFLA_ADDRESS, []byte(base.HardwareAddr))\n\treq.AddData(hwaddr)\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 90 ],
      "in-vars" : [ 2, 3, 12, 14, 42, 13 ],
      "exit" : false,
      "out-vars" : [ 13, 2, 3, 12, 58, 14, 42 ],
      "decl-vars" : [ 58 ],
      "line-start" : 1171,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "hwaddr"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "coerced-to" : {
              "element" : {
                "go-type" : 14,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 14,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 13,
              "kind" : "type",
              "type" : "slice"
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "HardwareAddr",
                "variable" : 57
              },
              "go-type" : 12,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "base",
                  "variable" : 14
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "nl"
            },
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewRtAttr"
            }
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1171,
      "code" : "hwaddr := nl.NewRtAttr(unix.IFLA_ADDRESS, []byte(base.HardwareAddr))",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 91 ],
      "in-vars" : [ 42, 13, 2, 3, 12, 58, 14 ],
      "exit" : false,
      "out-vars" : [ 12, 14, 42, 13, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1172,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hwaddr",
              "variable" : 58
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddData"
            },
            "go-type" : 158,
            "kind" : "expression",
            "target" : {
              "go-type" : 137,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "req",
                "variable" : 42
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1172,
      "code" : "req.AddData(hwaddr)",
      "entry" : false,
      "use-vars" : [ 42, 58 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 92, 94 ],
      "in-vars" : [ 12, 14, 42, 13, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 12, 14, 42, 13, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1175,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "NumTxQueues",
              "variable" : 59
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1178,
      "code" : "if base.NumTxQueues > 0 {\n\ttxqueues := nl.NewRtAttr(unix.IFLA_NUM_TX_QUEUES, nl.Uint32Attr(uint32(base.NumTxQueues)))\n\treq.AddData(txqueues)\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 93 ],
      "in-vars" : [ 13, 2, 3, 12, 14, 42 ],
      "exit" : false,
      "out-vars" : [ 13, 2, 3, 60, 12, 14, 42 ],
      "decl-vars" : [ 60 ],
      "line-start" : 1176,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "txqueues"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "31"
            }
          }, {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 17,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 17,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "NumTxQueues",
                  "variable" : 59
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "base",
                    "variable" : 14
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 170,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "nl"
              },
              "type" : "identifier",
              "value" : {
                "function" : 17,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uint32Attr"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "nl"
            },
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewRtAttr"
            }
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1176,
      "code" : "txqueues := nl.NewRtAttr(unix.IFLA_NUM_TX_QUEUES, nl.Uint32Attr(uint32(base.NumTxQueues)))",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 94 ],
      "in-vars" : [ 42, 13, 2, 3, 60, 12, 14 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1177,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "txqueues",
              "variable" : 60
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddData"
            },
            "go-type" : 158,
            "kind" : "expression",
            "target" : {
              "go-type" : 137,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "req",
                "variable" : 42
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1177,
      "code" : "req.AddData(txqueues)",
      "entry" : false,
      "use-vars" : [ 42, 60 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 95, 97 ],
      "in-vars" : [ 2, 3, 12, 14, 42, 13 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 12, 14, 42, 13 ],
      "decl-vars" : [ ],
      "line-start" : 1180,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "NumRxQueues",
              "variable" : 61
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1183,
      "code" : "if base.NumRxQueues > 0 {\n\trxqueues := nl.NewRtAttr(unix.IFLA_NUM_RX_QUEUES, nl.Uint32Attr(uint32(base.NumRxQueues)))\n\treq.AddData(rxqueues)\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 96 ],
      "in-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 13, 2, 3, 12, 62 ],
      "decl-vars" : [ 62 ],
      "line-start" : 1181,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rxqueues"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "32"
            }
          }, {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 17,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 17,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "NumRxQueues",
                  "variable" : 61
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "base",
                    "variable" : 14
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 170,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "nl"
              },
              "type" : "identifier",
              "value" : {
                "function" : 17,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uint32Attr"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "nl"
            },
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewRtAttr"
            }
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1181,
      "code" : "rxqueues := nl.NewRtAttr(unix.IFLA_NUM_RX_QUEUES, nl.Uint32Attr(uint32(base.NumRxQueues)))",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 97 ],
      "in-vars" : [ 3, 12, 62, 14, 42, 13, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 12, 14, 42, 13, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1182,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rxqueues",
              "variable" : 62
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddData"
            },
            "go-type" : 158,
            "kind" : "expression",
            "target" : {
              "go-type" : 137,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "req",
                "variable" : 42
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1182,
      "code" : "req.AddData(rxqueues)",
      "entry" : false,
      "use-vars" : [ 42, 62 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 98, 100 ],
      "in-vars" : [ 2, 3, 12, 14, 42, 13 ],
      "exit" : false,
      "out-vars" : [ 42, 13, 2, 3, 12, 14 ],
      "decl-vars" : [ ],
      "line-start" : 1185,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "GSOMaxSegs",
              "variable" : 63
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1188,
      "code" : "if base.GSOMaxSegs > 0 {\n\tgsoAttr := nl.NewRtAttr(unix.IFLA_GSO_MAX_SEGS, nl.Uint32Attr(base.GSOMaxSegs))\n\treq.AddData(gsoAttr)\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 99 ],
      "in-vars" : [ 3, 12, 14, 42, 13, 2 ],
      "exit" : false,
      "out-vars" : [ 64, 3, 12, 14, 42, 13, 2 ],
      "decl-vars" : [ 64 ],
      "line-start" : 1186,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "gsoAttr"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "40"
            }
          }, {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "GSOMaxSegs",
                "variable" : 63
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "base",
                  "variable" : 14
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 170,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "nl"
              },
              "type" : "identifier",
              "value" : {
                "function" : 17,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uint32Attr"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "nl"
            },
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewRtAttr"
            }
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1186,
      "code" : "gsoAttr := nl.NewRtAttr(unix.IFLA_GSO_MAX_SEGS, nl.Uint32Attr(base.GSOMaxSegs))",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 100 ],
      "in-vars" : [ 12, 14, 42, 13, 2, 64, 3 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1187,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gsoAttr",
              "variable" : 64
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddData"
            },
            "go-type" : 158,
            "kind" : "expression",
            "target" : {
              "go-type" : 137,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "req",
                "variable" : 42
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1187,
      "code" : "req.AddData(gsoAttr)",
      "entry" : false,
      "use-vars" : [ 64, 42 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 101, 103 ],
      "in-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1190,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "GSOMaxSize",
              "variable" : 65
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1193,
      "code" : "if base.GSOMaxSize > 0 {\n\tgsoAttr := nl.NewRtAttr(unix.IFLA_GSO_MAX_SIZE, nl.Uint32Attr(base.GSOMaxSize))\n\treq.AddData(gsoAttr)\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 102 ],
      "in-vars" : [ 13, 2, 3, 12, 14, 42 ],
      "exit" : false,
      "out-vars" : [ 12, 66, 14, 42, 13, 2, 3 ],
      "decl-vars" : [ 66 ],
      "line-start" : 1191,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "gsoAttr"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "41"
            }
          }, {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "GSOMaxSize",
                "variable" : 65
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "base",
                  "variable" : 14
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 170,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "nl"
              },
              "type" : "identifier",
              "value" : {
                "function" : 17,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uint32Attr"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "nl"
            },
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewRtAttr"
            }
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1191,
      "code" : "gsoAttr := nl.NewRtAttr(unix.IFLA_GSO_MAX_SIZE, nl.Uint32Attr(base.GSOMaxSize))",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 103 ],
      "in-vars" : [ 66, 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 3, 12, 14, 42, 13, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1192,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gsoAttr",
              "variable" : 66
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddData"
            },
            "go-type" : 158,
            "kind" : "expression",
            "target" : {
              "go-type" : 137,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "req",
                "variable" : 42
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1192,
      "code" : "req.AddData(gsoAttr)",
      "entry" : false,
      "use-vars" : [ 66, 42 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 104, 106 ],
      "in-vars" : [ 13, 2, 3, 12, 14, 42 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1195,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Group",
              "variable" : 67
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1198,
      "code" : "if base.Group > 0 {\n\tgroupAttr := nl.NewRtAttr(unix.IFLA_GROUP, nl.Uint32Attr(base.Group))\n\treq.AddData(groupAttr)\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 105 ],
      "in-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 42, 13, 2, 3, 12, 68, 14 ],
      "decl-vars" : [ 68 ],
      "line-start" : 1196,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "groupAttr"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "27"
            }
          }, {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Group",
                "variable" : 67
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "base",
                  "variable" : 14
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 170,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "nl"
              },
              "type" : "identifier",
              "value" : {
                "function" : 17,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uint32Attr"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "nl"
            },
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewRtAttr"
            }
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1196,
      "code" : "groupAttr := nl.NewRtAttr(unix.IFLA_GROUP, nl.Uint32Attr(base.Group))",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 106 ],
      "in-vars" : [ 3, 12, 68, 14, 42, 13, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 12, 14, 42, 13 ],
      "decl-vars" : [ ],
      "line-start" : 1197,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "groupAttr",
              "variable" : 68
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddData"
            },
            "go-type" : 158,
            "kind" : "expression",
            "target" : {
              "go-type" : 137,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "req",
                "variable" : 42
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1197,
      "code" : "req.AddData(groupAttr)",
      "entry" : false,
      "use-vars" : [ 68, 42 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 107, 117 ],
      "in-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 42, 13, 2, 3, 12, 14 ],
      "decl-vars" : [ ],
      "line-start" : 1200,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Namespace",
              "variable" : 69
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1212,
      "code" : "if base.Namespace != nil {\n\tvar attr *nl.RtAttr\n\tswitch ns := base.Namespace.(type) {\n\tcase NsPid:\n\t\tval := nl.Uint32Attr(uint32(ns))\n\t\tattr = nl.NewRtAttr(unix.IFLA_NET_NS_PID, val)\n\tcase NsFd:\n\t\tval := nl.Uint32Attr(uint32(ns))\n\t\tattr = nl.NewRtAttr(unix.IFLA_NET_NS_FD, val)\n\t}\n\n\treq.AddData(attr)\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 108 ],
      "in-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 13, 2, 3, 12, 71 ],
      "decl-vars" : [ 71 ],
      "line-start" : 1201,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "contained" : {
                "go-type" : 161,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "nl"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 161,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "RtAttr"
                }
              },
              "go-type" : 160,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "attr"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1201,
      "code" : "var attr *nl.RtAttr",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 109 ],
      "in-vars" : [ 12, 71, 14, 42, 13, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 14, 42, 12, 71, 70, 73, 13, 2 ],
      "decl-vars" : [ 70, 73 ],
      "line-start" : 1202,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 1209,
      "code" : "switch ns := base.Namespace.(type) {\ncase NsPid:\n\tval := nl.Uint32Attr(uint32(ns))\n\tattr = nl.NewRtAttr(unix.IFLA_NET_NS_PID, val)\ncase NsFd:\n\tval := nl.Uint32Attr(uint32(ns))\n\tattr = nl.NewRtAttr(unix.IFLA_NET_NS_FD, val)\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 110, 113, 116 ],
      "in-vars" : [ 3, 70, 73, 14, 42, 13, 2, 12, 71 ],
      "exit" : false,
      "out-vars" : [ 42, 3, 12, 70, 14, 13, 2, 71, 73 ],
      "decl-vars" : [ ],
      "line-start" : 1202,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ns"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Namespace",
              "variable" : 69
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1202,
      "code" : "ns := base.Namespace.(type)",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 111 ],
      "in-vars" : [ 70, 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 3, 12, 70, 14, 42, 13, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1203,
      "ast" : {
        "expressions" : [ {
          "go-type" : 172,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 172,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "NsPid"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1205,
      "code" : "case NsPid:\n\tval := nl.Uint32Attr(uint32(ns))\n\tattr = nl.NewRtAttr(unix.IFLA_NET_NS_PID, val)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 112 ],
      "in-vars" : [ 14, 42, 13, 2, 3, 12, 70 ],
      "exit" : false,
      "out-vars" : [ 72, 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ 72 ],
      "line-start" : 1204,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "val"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 17,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 172,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ns",
                "variable" : 70
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 170,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "nl"
            },
            "type" : "identifier",
            "value" : {
              "function" : 17,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint32Attr"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1204,
      "code" : "val := nl.Uint32Attr(uint32(ns))",
      "entry" : false,
      "use-vars" : [ 70 ]
    }, {
      "update-vars" : [ 71 ],
      "successors" : [ 116 ],
      "in-vars" : [ 12, 72, 14, 42, 13, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 71, 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1205,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 160,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "attr",
            "variable" : 71
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "19"
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "val",
              "variable" : 72
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "nl"
            },
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewRtAttr"
            }
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 71 ],
      "line-end" : 1205,
      "code" : "attr = nl.NewRtAttr(unix.IFLA_NET_NS_PID, val)",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 114 ],
      "in-vars" : [ 42, 13, 2, 3, 12, 73, 14 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 13, 2, 3, 12, 73 ],
      "decl-vars" : [ ],
      "line-start" : 1206,
      "ast" : {
        "expressions" : [ {
          "go-type" : 173,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 173,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "NsFd"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1208,
      "code" : "case NsFd:\n\tval := nl.Uint32Attr(uint32(ns))\n\tattr = nl.NewRtAttr(unix.IFLA_NET_NS_FD, val)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 115 ],
      "in-vars" : [ 42, 13, 2, 3, 12, 73, 14 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 13, 2, 3, 12, 74 ],
      "decl-vars" : [ 74 ],
      "line-start" : 1207,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "val"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 17,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 173,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ns",
                "variable" : 73
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 170,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "nl"
            },
            "type" : "identifier",
            "value" : {
              "function" : 17,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint32Attr"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1207,
      "code" : "val := nl.Uint32Attr(uint32(ns))",
      "entry" : false,
      "use-vars" : [ 73 ]
    }, {
      "update-vars" : [ 71 ],
      "successors" : [ 116 ],
      "in-vars" : [ 14, 42, 13, 2, 3, 12, 74 ],
      "exit" : false,
      "out-vars" : [ 13, 2, 3, 12, 71, 14, 42 ],
      "decl-vars" : [ ],
      "line-start" : 1208,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 160,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "attr",
            "variable" : 71
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "28"
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "val",
              "variable" : 74
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "nl"
            },
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewRtAttr"
            }
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 71 ],
      "line-end" : 1208,
      "code" : "attr = nl.NewRtAttr(unix.IFLA_NET_NS_FD, val)",
      "entry" : false,
      "use-vars" : [ 74 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 117 ],
      "in-vars" : [ 42, 13, 2, 3, 12, 71, 14 ],
      "exit" : false,
      "out-vars" : [ 3, 12, 14, 42, 13, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1211,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "attr",
              "variable" : 71
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddData"
            },
            "go-type" : 158,
            "kind" : "expression",
            "target" : {
              "go-type" : 137,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "req",
                "variable" : 42
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1211,
      "code" : "req.AddData(attr)",
      "entry" : false,
      "use-vars" : [ 42, 71 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 118, 119 ],
      "in-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 12, 14, 42, 13, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1214,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Xdp",
              "variable" : 75
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1216,
      "code" : "if base.Xdp != nil {\n\taddXdpAttrs(base.Xdp, req)\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 119 ],
      "in-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1215,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Xdp",
              "variable" : 75
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 137,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "req",
              "variable" : 42
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 174,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 18,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "addXdpAttrs"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1215,
      "code" : "addXdpAttrs(base.Xdp, req)",
      "entry" : false,
      "use-vars" : [ 14, 42 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 120 ],
      "in-vars" : [ 2, 3, 12, 14, 42, 13 ],
      "exit" : false,
      "out-vars" : [ 42, 76, 13, 2, 3, 12, 14 ],
      "decl-vars" : [ 76 ],
      "line-start" : 1218,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "linkInfo"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "18"
            }
          }, {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "nl"
            },
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewRtAttr"
            }
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1218,
      "code" : "linkInfo := nl.NewRtAttr(unix.IFLA_LINKINFO, nil)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 121 ],
      "in-vars" : [ 42, 76, 13, 2, 3, 12, 14 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 13, 2, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1219,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "arguments" : [ {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 15,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Type"
                },
                "go-type" : 35,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "link",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "go-type" : 11,
              "kind" : "expression",
              "type" : "call"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 168,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "nl"
              },
              "type" : "identifier",
              "value" : {
                "function" : 20,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "NonZeroTerminated"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddRtAttr"
            },
            "go-type" : 165,
            "kind" : "expression",
            "target" : {
              "go-type" : 160,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "linkInfo",
                "variable" : 76
              }
            },
            "type" : "selector"
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1219,
      "code" : "linkInfo.AddRtAttr(nl.IFLA_INFO_KIND, nl.NonZeroTerminated(link.Type()))",
      "entry" : false,
      "use-vars" : [ 3, 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 122 ],
      "in-vars" : [ 14, 42, 76, 13, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 14, 99, 90, 102, 93, 2, 12, 78, 88, 13, 84, 106, 98, 107, 100, 104, 103, 42, 76, 96, 3, 87, 101, 105 ],
      "decl-vars" : [ 84, 96, 100, 104, 107, 78, 88, 98, 99, 103, 105, 106, 87, 90, 93, 101, 102 ],
      "line-start" : 1221,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 1283,
      "code" : "switch link := link.(type) {\ncase *Vlan:\n\tb := make([]byte, 2)\n\tnative.PutUint16(b, uint16(link.VlanId))\n\tdata := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)\n\tdata.AddRtAttr(nl.IFLA_VLAN_ID, b)\n\n\tif link.VlanProtocol != VLAN_PROTOCOL_UNKNOWN {\n\t\tdata.AddRtAttr(nl.IFLA_VLAN_PROTOCOL, htons(uint16(link.VlanProtocol)))\n\t}\ncase *Veth:\n\tdata := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)\n\tpeer := data.AddRtAttr(nl.VETH_INFO_PEER, nil)\n\tnl.NewIfInfomsgChild(peer, unix.AF_UNSPEC)\n\tpeer.AddRtAttr(unix.IFLA_IFNAME, nl.ZeroTerminated(link.PeerName))\n\tif base.TxQLen >= 0 {\n\t\tpeer.AddRtAttr(unix.IFLA_TXQLEN, nl.Uint32Attr(uint32(base.TxQLen)))\n\t}\n\tif base.MTU > 0 {\n\t\tpeer.AddRtAttr(unix.IFLA_MTU, nl.Uint32Attr(uint32(base.MTU)))\n\t}\n\tif link.PeerHardwareAddr != nil {\n\t\tpeer.AddRtAttr(unix.IFLA_ADDRESS, []byte(link.PeerHardwareAddr))\n\t}\ncase *Vxlan:\n\taddVxlanAttrs(link, linkInfo)\ncase *Bond:\n\taddBondAttrs(link, linkInfo)\ncase *IPVlan:\n\tdata := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)\n\tdata.AddRtAttr(nl.IFLA_IPVLAN_MODE, nl.Uint16Attr(uint16(link.Mode)))\n\tdata.AddRtAttr(nl.IFLA_IPVLAN_FLAG, nl.Uint16Attr(uint16(link.Flag)))\ncase *Macvlan:\n\tif link.Mode != MACVLAN_MODE_DEFAULT {\n\t\tdata := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)\n\t\tdata.AddRtAttr(nl.IFLA_MACVLAN_MODE, nl.Uint32Attr(macvlanModes[link.Mode]))\n\t}\ncase *Macvtap:\n\tif link.Mode != MACVLAN_MODE_DEFAULT {\n\t\tdata := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)\n\t\tdata.AddRtAttr(nl.IFLA_MACVLAN_MODE, nl.Uint32Attr(macvlanModes[link.Mode]))\n\t}\ncase *Gretap:\n\taddGretapAttrs(link, linkInfo)\ncase *Iptun:\n\taddIptunAttrs(link, linkInfo)\ncase *Sittun:\n\taddSittunAttrs(link, linkInfo)\ncase *Gretun:\n\taddGretunAttrs(link, linkInfo)\ncase *Vti:\n\taddVtiAttrs(link, linkInfo)\ncase *Vrf:\n\taddVrfAttrs(link, linkInfo)\ncase *Bridge:\n\taddBridgeAttrs(link, linkInfo)\ncase *GTP:\n\taddGTPAttrs(link, linkInfo)\ncase *Xfrmi:\n\taddXfrmiAttrs(link, linkInfo)\ncase *IPoIB:\n\taddIPoIBAttrs(link, linkInfo)\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 123, 130, 141, 143, 145, 149, 153, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177 ],
      "in-vars" : [ 88, 106, 104, 103, 93, 13, 2, 78, 98, 107, 105, 3, 12, 84, 87, 99, 76, 96, 90, 100, 102, 101, 14, 42 ],
      "exit" : false,
      "out-vars" : [ 103, 101, 96, 99, 12, 100, 87, 88, 104, 93, 14, 42, 76, 2, 105, 3, 78, 90, 106, 107, 13, 84, 98, 102 ],
      "decl-vars" : [ ],
      "line-start" : 1221,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "link"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "link",
              "variable" : 3
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1221,
      "code" : "link := link.(type)",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 124 ],
      "in-vars" : [ 12, 78, 14, 42, 76, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 12, 78, 14, 42, 76, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1222,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 177,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 177,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Vlan"
            }
          },
          "go-type" : 176,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1230,
      "code" : "case *Vlan:\n\tb := make([]byte, 2)\n\tnative.PutUint16(b, uint16(link.VlanId))\n\tdata := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)\n\tdata.AddRtAttr(nl.IFLA_VLAN_ID, b)\n\n\tif link.VlanProtocol != VLAN_PROTOCOL_UNKNOWN {\n\t\tdata.AddRtAttr(nl.IFLA_VLAN_PROTOCOL, htons(uint16(link.VlanProtocol)))\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 125 ],
      "in-vars" : [ 2, 3, 12, 78, 14, 42, 76 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 12, 77, 78, 14, 42, 76 ],
      "decl-vars" : [ 77 ],
      "line-start" : 1223,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "b"
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 13,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 13,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          } ],
          "type" : "make"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1223,
      "code" : "b := make([]byte, 2)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 126 ],
      "in-vars" : [ 3, 12, 77, 78, 14, 42, 76, 2 ],
      "exit" : false,
      "out-vars" : [ 77, 78, 14, 42, 76, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1224,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 77
            }
          }, {
            "coerced-to" : {
              "go-type" : 53,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 53,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint16"
              }
            },
            "go-type" : 53,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "VlanId",
                "variable" : 79
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 176,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "link",
                  "variable" : 78
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 21,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "PutUint16"
            },
            "go-type" : 60,
            "kind" : "expression",
            "target" : {
              "go-type" : 58,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "native",
                "variable" : 12
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1224,
      "code" : "native.PutUint16(b, uint16(link.VlanId))",
      "entry" : false,
      "use-vars" : [ 78, 12, 77 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 127 ],
      "in-vars" : [ 14, 42, 76, 2, 3, 77, 78 ],
      "exit" : false,
      "out-vars" : [ 76, 2, 3, 77, 78, 80, 14, 42 ],
      "decl-vars" : [ 80 ],
      "line-start" : 1225,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          }, {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddRtAttr"
            },
            "go-type" : 165,
            "kind" : "expression",
            "target" : {
              "go-type" : 160,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "linkInfo",
                "variable" : 76
              }
            },
            "type" : "selector"
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1225,
      "code" : "data := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)",
      "entry" : false,
      "use-vars" : [ 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 128 ],
      "in-vars" : [ 77, 78, 80, 14, 42, 76, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 80, 14, 42, 76, 2, 3, 78 ],
      "decl-vars" : [ ],
      "line-start" : 1226,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 77
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddRtAttr"
            },
            "go-type" : 165,
            "kind" : "expression",
            "target" : {
              "go-type" : 160,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 80
              }
            },
            "type" : "selector"
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1226,
      "code" : "data.AddRtAttr(nl.IFLA_VLAN_ID, b)",
      "entry" : false,
      "use-vars" : [ 77, 80 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 129, 177 ],
      "in-vars" : [ 76, 2, 3, 78, 80, 14, 42 ],
      "exit" : false,
      "out-vars" : [ 3, 78, 80, 14, 42, 76, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1228,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "VlanProtocol",
              "variable" : 81
            },
            "go-type" : 179,
            "kind" : "expression",
            "target" : {
              "go-type" : 176,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "link",
                "variable" : 78
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 179,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1230,
      "code" : "if link.VlanProtocol != VLAN_PROTOCOL_UNKNOWN {\n\tdata.AddRtAttr(nl.IFLA_VLAN_PROTOCOL, htons(uint16(link.VlanProtocol)))\n}",
      "entry" : false,
      "use-vars" : [ 78 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 3, 78, 80, 14, 42, 76, 2 ],
      "exit" : false,
      "out-vars" : [ 76, 2, 3, 14, 42 ],
      "decl-vars" : [ ],
      "line-start" : 1229,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "5"
            }
          }, {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 53,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 53,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint16"
                }
              },
              "go-type" : 53,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "VlanProtocol",
                  "variable" : 81
                },
                "go-type" : 179,
                "kind" : "expression",
                "target" : {
                  "go-type" : 176,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "link",
                    "variable" : 78
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 180,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 22,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "htons"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddRtAttr"
            },
            "go-type" : 165,
            "kind" : "expression",
            "target" : {
              "go-type" : 160,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 80
              }
            },
            "type" : "selector"
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1229,
      "code" : "data.AddRtAttr(nl.IFLA_VLAN_PROTOCOL, htons(uint16(link.VlanProtocol)))",
      "entry" : false,
      "use-vars" : [ 78, 80 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 131 ],
      "in-vars" : [ 14, 42, 76, 2, 3, 84 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 2, 3, 84 ],
      "decl-vars" : [ ],
      "line-start" : 1231,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 185,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 185,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Veth"
            }
          },
          "go-type" : 184,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1244,
      "code" : "case *Veth:\n\tdata := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)\n\tpeer := data.AddRtAttr(nl.VETH_INFO_PEER, nil)\n\tnl.NewIfInfomsgChild(peer, unix.AF_UNSPEC)\n\tpeer.AddRtAttr(unix.IFLA_IFNAME, nl.ZeroTerminated(link.PeerName))\n\tif base.TxQLen >= 0 {\n\t\tpeer.AddRtAttr(unix.IFLA_TXQLEN, nl.Uint32Attr(uint32(base.TxQLen)))\n\t}\n\tif base.MTU > 0 {\n\t\tpeer.AddRtAttr(unix.IFLA_MTU, nl.Uint32Attr(uint32(base.MTU)))\n\t}\n\tif link.PeerHardwareAddr != nil {\n\t\tpeer.AddRtAttr(unix.IFLA_ADDRESS, []byte(link.PeerHardwareAddr))\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 132 ],
      "in-vars" : [ 14, 42, 76, 2, 3, 84 ],
      "exit" : false,
      "out-vars" : [ 3, 84, 14, 42, 76, 82, 2 ],
      "decl-vars" : [ 82 ],
      "line-start" : 1232,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          }, {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddRtAttr"
            },
            "go-type" : 165,
            "kind" : "expression",
            "target" : {
              "go-type" : 160,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "linkInfo",
                "variable" : 76
              }
            },
            "type" : "selector"
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1232,
      "code" : "data := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)",
      "entry" : false,
      "use-vars" : [ 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 133 ],
      "in-vars" : [ 84, 14, 42, 76, 82, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 76, 83, 2, 3, 84, 14, 42 ],
      "decl-vars" : [ 83 ],
      "line-start" : 1233,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "peer"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddRtAttr"
            },
            "go-type" : 165,
            "kind" : "expression",
            "target" : {
              "go-type" : 160,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 82
              }
            },
            "type" : "selector"
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1233,
      "code" : "peer := data.AddRtAttr(nl.VETH_INFO_PEER, nil)",
      "entry" : false,
      "use-vars" : [ 82 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 134 ],
      "in-vars" : [ 42, 76, 83, 2, 3, 84, 14 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 84, 14, 42, 76, 83 ],
      "decl-vars" : [ ],
      "line-start" : 1234,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "peer",
              "variable" : 83
            }
          }, {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 182,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "nl"
            },
            "type" : "identifier",
            "value" : {
              "function" : 23,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewIfInfomsgChild"
            }
          },
          "go-type" : 150,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1234,
      "code" : "nl.NewIfInfomsgChild(peer, unix.AF_UNSPEC)",
      "entry" : false,
      "use-vars" : [ 83 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 135 ],
      "in-vars" : [ 76, 83, 2, 3, 84, 14, 42 ],
      "exit" : false,
      "out-vars" : [ 83, 2, 3, 84, 14, 42, 76 ],
      "decl-vars" : [ ],
      "line-start" : 1235,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3"
            }
          }, {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "PeerName",
                "variable" : 85
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 184,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "link",
                  "variable" : 84
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 168,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "nl"
              },
              "type" : "identifier",
              "value" : {
                "function" : 16,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "ZeroTerminated"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddRtAttr"
            },
            "go-type" : 165,
            "kind" : "expression",
            "target" : {
              "go-type" : 160,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "peer",
                "variable" : 83
              }
            },
            "type" : "selector"
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1235,
      "code" : "peer.AddRtAttr(unix.IFLA_IFNAME, nl.ZeroTerminated(link.PeerName))",
      "entry" : false,
      "use-vars" : [ 83, 84 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 136, 137 ],
      "in-vars" : [ 83, 2, 3, 84, 14, 42, 76 ],
      "exit" : false,
      "out-vars" : [ 3, 84, 14, 42, 76, 83, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1236,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "TxQLen",
              "variable" : 55
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "operator" : ">=",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1238,
      "code" : "if base.TxQLen >= 0 {\n\tpeer.AddRtAttr(unix.IFLA_TXQLEN, nl.Uint32Attr(uint32(base.TxQLen)))\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 137 ],
      "in-vars" : [ 14, 42, 76, 83, 2, 3, 84 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 84, 14, 42, 76, 83 ],
      "decl-vars" : [ ],
      "line-start" : 1237,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "13"
            }
          }, {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 17,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 17,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "TxQLen",
                  "variable" : 55
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "base",
                    "variable" : 14
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 170,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "nl"
              },
              "type" : "identifier",
              "value" : {
                "function" : 17,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uint32Attr"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddRtAttr"
            },
            "go-type" : 165,
            "kind" : "expression",
            "target" : {
              "go-type" : 160,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "peer",
                "variable" : 83
              }
            },
            "type" : "selector"
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1237,
      "code" : "peer.AddRtAttr(unix.IFLA_TXQLEN, nl.Uint32Attr(uint32(base.TxQLen)))",
      "entry" : false,
      "use-vars" : [ 14, 83 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 138, 139 ],
      "in-vars" : [ 84, 14, 42, 76, 83, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 83, 2, 3, 84, 14, 42, 76 ],
      "decl-vars" : [ ],
      "line-start" : 1239,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "MTU",
              "variable" : 53
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1241,
      "code" : "if base.MTU > 0 {\n\tpeer.AddRtAttr(unix.IFLA_MTU, nl.Uint32Attr(uint32(base.MTU)))\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 139 ],
      "in-vars" : [ 84, 14, 42, 76, 83, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 84, 14, 42, 76, 83, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1240,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4"
            }
          }, {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 17,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 17,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "MTU",
                  "variable" : 53
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "base",
                    "variable" : 14
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 170,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "nl"
              },
              "type" : "identifier",
              "value" : {
                "function" : 17,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uint32Attr"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddRtAttr"
            },
            "go-type" : 165,
            "kind" : "expression",
            "target" : {
              "go-type" : 160,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "peer",
                "variable" : 83
              }
            },
            "type" : "selector"
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1240,
      "code" : "peer.AddRtAttr(unix.IFLA_MTU, nl.Uint32Attr(uint32(base.MTU)))",
      "entry" : false,
      "use-vars" : [ 14, 83 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 140, 177 ],
      "in-vars" : [ 84, 14, 42, 76, 83, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 83, 2, 3, 84 ],
      "decl-vars" : [ ],
      "line-start" : 1242,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "PeerHardwareAddr",
              "variable" : 86
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "go-type" : 184,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "link",
                "variable" : 84
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1244,
      "code" : "if link.PeerHardwareAddr != nil {\n\tpeer.AddRtAttr(unix.IFLA_ADDRESS, []byte(link.PeerHardwareAddr))\n}",
      "entry" : false,
      "use-vars" : [ 84 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 42, 76, 83, 2, 3, 84, 14 ],
      "exit" : false,
      "out-vars" : [ 42, 76, 2, 3, 14 ],
      "decl-vars" : [ ],
      "line-start" : 1243,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "coerced-to" : {
              "element" : {
                "go-type" : 14,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 14,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 13,
              "kind" : "type",
              "type" : "slice"
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "PeerHardwareAddr",
                "variable" : 86
              },
              "go-type" : 12,
              "kind" : "expression",
              "target" : {
                "go-type" : 184,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "link",
                  "variable" : 84
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddRtAttr"
            },
            "go-type" : 165,
            "kind" : "expression",
            "target" : {
              "go-type" : 160,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "peer",
                "variable" : 83
              }
            },
            "type" : "selector"
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1243,
      "code" : "peer.AddRtAttr(unix.IFLA_ADDRESS, []byte(link.PeerHardwareAddr))",
      "entry" : false,
      "use-vars" : [ 84, 83 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 142 ],
      "in-vars" : [ 14, 42, 76, 2, 3, 87 ],
      "exit" : false,
      "out-vars" : [ 3, 87, 14, 42, 76, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1245,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 190,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 190,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Vxlan"
            }
          },
          "go-type" : 189,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1246,
      "code" : "case *Vxlan:\n\taddVxlanAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 14, 42, 76, 2, 3, 87 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1246,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 189,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "link",
              "variable" : 87
            }
          }, {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "linkInfo",
              "variable" : 76
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 187,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 24,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "addVxlanAttrs"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1246,
      "code" : "addVxlanAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ 76, 87 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 144 ],
      "in-vars" : [ 14, 42, 76, 2, 3, 88 ],
      "exit" : false,
      "out-vars" : [ 76, 2, 3, 88, 14, 42 ],
      "decl-vars" : [ ],
      "line-start" : 1247,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 196,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 196,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Bond"
            }
          },
          "go-type" : 195,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1248,
      "code" : "case *Bond:\n\taddBondAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 3, 88, 14, 42, 76, 2 ],
      "exit" : false,
      "out-vars" : [ 76, 2, 3, 14, 42 ],
      "decl-vars" : [ ],
      "line-start" : 1248,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 195,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "link",
              "variable" : 88
            }
          }, {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "linkInfo",
              "variable" : 76
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 193,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 25,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "addBondAttrs"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1248,
      "code" : "addBondAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ 88, 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 146 ],
      "in-vars" : [ 90, 14, 42, 76, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 2, 3, 90 ],
      "decl-vars" : [ ],
      "line-start" : 1249,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 214,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 214,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "IPVlan"
            }
          },
          "go-type" : 213,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1252,
      "code" : "case *IPVlan:\n\tdata := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)\n\tdata.AddRtAttr(nl.IFLA_IPVLAN_MODE, nl.Uint16Attr(uint16(link.Mode)))\n\tdata.AddRtAttr(nl.IFLA_IPVLAN_FLAG, nl.Uint16Attr(uint16(link.Flag)))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 147 ],
      "in-vars" : [ 3, 90, 14, 42, 76, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 90, 89, 14, 42, 76, 2 ],
      "decl-vars" : [ 89 ],
      "line-start" : 1250,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          }, {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddRtAttr"
            },
            "go-type" : 165,
            "kind" : "expression",
            "target" : {
              "go-type" : 160,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "linkInfo",
                "variable" : 76
              }
            },
            "type" : "selector"
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1250,
      "code" : "data := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)",
      "entry" : false,
      "use-vars" : [ 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 148 ],
      "in-vars" : [ 76, 2, 3, 90, 89, 14, 42 ],
      "exit" : false,
      "out-vars" : [ 42, 76, 2, 3, 90, 89, 14 ],
      "decl-vars" : [ ],
      "line-start" : 1251,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 53,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 53,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint16"
                }
              },
              "go-type" : 53,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Mode",
                  "variable" : 91
                },
                "go-type" : 212,
                "kind" : "expression",
                "target" : {
                  "go-type" : 213,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "link",
                    "variable" : 90
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 210,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "nl"
              },
              "type" : "identifier",
              "value" : {
                "function" : 26,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uint16Attr"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddRtAttr"
            },
            "go-type" : 165,
            "kind" : "expression",
            "target" : {
              "go-type" : 160,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 89
              }
            },
            "type" : "selector"
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1251,
      "code" : "data.AddRtAttr(nl.IFLA_IPVLAN_MODE, nl.Uint16Attr(uint16(link.Mode)))",
      "entry" : false,
      "use-vars" : [ 90, 89 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 89, 14, 42, 76, 2, 3, 90 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1252,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          }, {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 53,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 53,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint16"
                }
              },
              "go-type" : 53,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Flag",
                  "variable" : 92
                },
                "go-type" : 216,
                "kind" : "expression",
                "target" : {
                  "go-type" : 213,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "link",
                    "variable" : 90
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 210,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "nl"
              },
              "type" : "identifier",
              "value" : {
                "function" : 26,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uint16Attr"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddRtAttr"
            },
            "go-type" : 165,
            "kind" : "expression",
            "target" : {
              "go-type" : 160,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 89
              }
            },
            "type" : "selector"
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1252,
      "code" : "data.AddRtAttr(nl.IFLA_IPVLAN_FLAG, nl.Uint16Attr(uint16(link.Flag)))",
      "entry" : false,
      "use-vars" : [ 89, 90 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 150 ],
      "in-vars" : [ 76, 13, 2, 3, 93, 14, 42 ],
      "exit" : false,
      "out-vars" : [ 76, 13, 2, 3, 93, 14, 42 ],
      "decl-vars" : [ ],
      "line-start" : 1253,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 219,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 219,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Macvlan"
            }
          },
          "go-type" : 218,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1257,
      "code" : "case *Macvlan:\n\tif link.Mode != MACVLAN_MODE_DEFAULT {\n\t\tdata := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)\n\t\tdata.AddRtAttr(nl.IFLA_MACVLAN_MODE, nl.Uint32Attr(macvlanModes[link.Mode]))\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 151, 177 ],
      "in-vars" : [ 76, 13, 2, 3, 93, 14, 42 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 13, 2, 3, 93 ],
      "decl-vars" : [ ],
      "line-start" : 1254,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Mode",
              "variable" : 94
            },
            "go-type" : 217,
            "kind" : "expression",
            "target" : {
              "go-type" : 218,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "link",
                "variable" : 93
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 217,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1257,
      "code" : "if link.Mode != MACVLAN_MODE_DEFAULT {\n\tdata := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)\n\tdata.AddRtAttr(nl.IFLA_MACVLAN_MODE, nl.Uint32Attr(macvlanModes[link.Mode]))\n}",
      "entry" : false,
      "use-vars" : [ 93 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 152 ],
      "in-vars" : [ 14, 42, 76, 13, 2, 3, 93 ],
      "exit" : false,
      "out-vars" : [ 93, 14, 42, 76, 13, 2, 3, 95 ],
      "decl-vars" : [ 95 ],
      "line-start" : 1255,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          }, {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddRtAttr"
            },
            "go-type" : 165,
            "kind" : "expression",
            "target" : {
              "go-type" : 160,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "linkInfo",
                "variable" : 76
              }
            },
            "type" : "selector"
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1255,
      "code" : "data := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)",
      "entry" : false,
      "use-vars" : [ 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 93, 14, 42, 76, 13, 2, 3, 95 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1256,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "arguments" : [ {
              "go-type" : 17,
              "index" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Mode",
                  "variable" : 94
                },
                "go-type" : 217,
                "kind" : "expression",
                "target" : {
                  "go-type" : 218,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "link",
                    "variable" : 93
                  }
                },
                "type" : "selector"
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 73,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "macvlanModes",
                  "variable" : 13
                }
              },
              "type" : "index"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 170,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "nl"
              },
              "type" : "identifier",
              "value" : {
                "function" : 17,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uint32Attr"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddRtAttr"
            },
            "go-type" : 165,
            "kind" : "expression",
            "target" : {
              "go-type" : 160,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 95
              }
            },
            "type" : "selector"
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1256,
      "code" : "data.AddRtAttr(nl.IFLA_MACVLAN_MODE, nl.Uint32Attr(macvlanModes[link.Mode]))",
      "entry" : false,
      "use-vars" : [ 95, 13, 93 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 154 ],
      "in-vars" : [ 14, 42, 76, 13, 96, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 14, 42, 76, 13, 96 ],
      "decl-vars" : [ ],
      "line-start" : 1258,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 223,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 223,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Macvtap"
            }
          },
          "go-type" : 222,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1262,
      "code" : "case *Macvtap:\n\tif link.Mode != MACVLAN_MODE_DEFAULT {\n\t\tdata := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)\n\t\tdata.AddRtAttr(nl.IFLA_MACVLAN_MODE, nl.Uint32Attr(macvlanModes[link.Mode]))\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 155, 177 ],
      "in-vars" : [ 2, 3, 14, 42, 76, 13, 96 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 13, 96, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1259,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Mode",
              "variable" : 94
            },
            "go-type" : 217,
            "kind" : "expression",
            "target" : {
              "go-type" : 222,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "link",
                "variable" : 96
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 217,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1262,
      "code" : "if link.Mode != MACVLAN_MODE_DEFAULT {\n\tdata := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)\n\tdata.AddRtAttr(nl.IFLA_MACVLAN_MODE, nl.Uint32Attr(macvlanModes[link.Mode]))\n}",
      "entry" : false,
      "use-vars" : [ 96 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 156 ],
      "in-vars" : [ 14, 42, 76, 13, 96, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 96, 2, 3, 14, 42, 97, 76, 13 ],
      "decl-vars" : [ 97 ],
      "line-start" : 1260,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          }, {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddRtAttr"
            },
            "go-type" : 165,
            "kind" : "expression",
            "target" : {
              "go-type" : 160,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "linkInfo",
                "variable" : 76
              }
            },
            "type" : "selector"
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1260,
      "code" : "data := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)",
      "entry" : false,
      "use-vars" : [ 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 2, 3, 14, 42, 97, 76, 13, 96 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1261,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "arguments" : [ {
              "go-type" : 17,
              "index" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Mode",
                  "variable" : 94
                },
                "go-type" : 217,
                "kind" : "expression",
                "target" : {
                  "go-type" : 222,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "link",
                    "variable" : 96
                  }
                },
                "type" : "selector"
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 73,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "macvlanModes",
                  "variable" : 13
                }
              },
              "type" : "index"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 170,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "nl"
              },
              "type" : "identifier",
              "value" : {
                "function" : 17,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uint32Attr"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddRtAttr"
            },
            "go-type" : 165,
            "kind" : "expression",
            "target" : {
              "go-type" : 160,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 97
              }
            },
            "type" : "selector"
          },
          "go-type" : 160,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1261,
      "code" : "data.AddRtAttr(nl.IFLA_MACVLAN_MODE, nl.Uint32Attr(macvlanModes[link.Mode]))",
      "entry" : false,
      "use-vars" : [ 96, 97, 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 158 ],
      "in-vars" : [ 42, 76, 2, 3, 98, 14 ],
      "exit" : false,
      "out-vars" : [ 3, 98, 14, 42, 76, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1263,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 228,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 228,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Gretap"
            }
          },
          "go-type" : 227,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1264,
      "code" : "case *Gretap:\n\taddGretapAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 98, 14, 42, 76, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1264,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 227,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "link",
              "variable" : 98
            }
          }, {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "linkInfo",
              "variable" : 76
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 225,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 27,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "addGretapAttrs"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1264,
      "code" : "addGretapAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ 98, 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 160 ],
      "in-vars" : [ 2, 3, 99, 14, 42, 76 ],
      "exit" : false,
      "out-vars" : [ 42, 76, 2, 3, 99, 14 ],
      "decl-vars" : [ ],
      "line-start" : 1265,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 233,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 233,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Iptun"
            }
          },
          "go-type" : 232,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1266,
      "code" : "case *Iptun:\n\taddIptunAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 3, 99, 14, 42, 76, 2 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1266,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 232,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "link",
              "variable" : 99
            }
          }, {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "linkInfo",
              "variable" : 76
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 28,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "addIptunAttrs"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1266,
      "code" : "addIptunAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ 76, 99 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 162 ],
      "in-vars" : [ 42, 76, 2, 3, 100, 14 ],
      "exit" : false,
      "out-vars" : [ 3, 100, 14, 42, 76, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1267,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 238,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 238,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Sittun"
            }
          },
          "go-type" : 237,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1268,
      "code" : "case *Sittun:\n\taddSittunAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 42, 76, 2, 3, 100, 14 ],
      "exit" : false,
      "out-vars" : [ 76, 2, 3, 14, 42 ],
      "decl-vars" : [ ],
      "line-start" : 1268,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 237,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "link",
              "variable" : 100
            }
          }, {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "linkInfo",
              "variable" : 76
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 235,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 29,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "addSittunAttrs"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1268,
      "code" : "addSittunAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ 100, 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 164 ],
      "in-vars" : [ 14, 42, 76, 2, 3, 101 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 2, 3, 101 ],
      "decl-vars" : [ ],
      "line-start" : 1269,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 243,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 243,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Gretun"
            }
          },
          "go-type" : 242,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1270,
      "code" : "case *Gretun:\n\taddGretunAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 101, 14, 42, 76, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1270,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 242,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "link",
              "variable" : 101
            }
          }, {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "linkInfo",
              "variable" : 76
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 240,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 30,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "addGretunAttrs"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1270,
      "code" : "addGretunAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ 101, 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 166 ],
      "in-vars" : [ 76, 2, 3, 102, 14, 42 ],
      "exit" : false,
      "out-vars" : [ 76, 2, 3, 102, 14, 42 ],
      "decl-vars" : [ ],
      "line-start" : 1271,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 248,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 248,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Vti"
            }
          },
          "go-type" : 247,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1272,
      "code" : "case *Vti:\n\taddVtiAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 14, 42, 76, 2, 3, 102 ],
      "exit" : false,
      "out-vars" : [ 3, 14, 42, 76, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1272,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 247,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "link",
              "variable" : 102
            }
          }, {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "linkInfo",
              "variable" : 76
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 245,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 31,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "addVtiAttrs"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1272,
      "code" : "addVtiAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ 76, 102 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 168 ],
      "in-vars" : [ 14, 42, 76, 2, 3, 103 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 2, 3, 103 ],
      "decl-vars" : [ ],
      "line-start" : 1273,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 253,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 253,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Vrf"
            }
          },
          "go-type" : 252,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1274,
      "code" : "case *Vrf:\n\taddVrfAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 76, 2, 3, 103, 14, 42 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1274,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 252,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "link",
              "variable" : 103
            }
          }, {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "linkInfo",
              "variable" : 76
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 250,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 32,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "addVrfAttrs"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1274,
      "code" : "addVrfAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ 76, 103 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 170 ],
      "in-vars" : [ 3, 104, 14, 42, 76, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 104, 14, 42, 76, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1275,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 258,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 258,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Bridge"
            }
          },
          "go-type" : 257,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1276,
      "code" : "case *Bridge:\n\taddBridgeAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 14, 42, 76, 2, 3, 104 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1276,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 257,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "link",
              "variable" : 104
            }
          }, {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "linkInfo",
              "variable" : 76
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 255,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 33,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "addBridgeAttrs"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1276,
      "code" : "addBridgeAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ 104, 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 172 ],
      "in-vars" : [ 14, 42, 76, 2, 3, 105 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 105, 14, 42, 76 ],
      "decl-vars" : [ ],
      "line-start" : 1277,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 265,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 265,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "GTP"
            }
          },
          "go-type" : 264,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1278,
      "code" : "case *GTP:\n\taddGTPAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 42, 76, 2, 3, 105, 14 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 14, 42, 76 ],
      "decl-vars" : [ ],
      "line-start" : 1278,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 264,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "link",
              "variable" : 105
            }
          }, {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "linkInfo",
              "variable" : 76
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 262,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 34,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "addGTPAttrs"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1278,
      "code" : "addGTPAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ 105, 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 174 ],
      "in-vars" : [ 14, 42, 76, 2, 3, 106 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 2, 3, 106 ],
      "decl-vars" : [ ],
      "line-start" : 1279,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 270,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 270,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Xfrmi"
            }
          },
          "go-type" : 269,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1280,
      "code" : "case *Xfrmi:\n\taddXfrmiAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 3, 106, 14, 42, 76, 2 ],
      "exit" : false,
      "out-vars" : [ 42, 76, 2, 3, 14 ],
      "decl-vars" : [ ],
      "line-start" : 1280,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 269,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "link",
              "variable" : 106
            }
          }, {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "linkInfo",
              "variable" : 76
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 267,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 35,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "addXfrmiAttrs"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1280,
      "code" : "addXfrmiAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ 106, 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 176 ],
      "in-vars" : [ 76, 2, 3, 107, 14, 42 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 2, 3, 107 ],
      "decl-vars" : [ ],
      "line-start" : 1281,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 275,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 275,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "IPoIB"
            }
          },
          "go-type" : 274,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1282,
      "code" : "case *IPoIB:\n\taddIPoIBAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 76, 2, 3, 107, 14, 42 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 76, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1282,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 274,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "link",
              "variable" : 107
            }
          }, {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "linkInfo",
              "variable" : 76
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 272,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 36,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "addIPoIBAttrs"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1282,
      "code" : "addIPoIBAttrs(link, linkInfo)",
      "entry" : false,
      "use-vars" : [ 107, 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 178 ],
      "in-vars" : [ 14, 42, 76, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 14, 42, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1285,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "linkInfo",
              "variable" : 76
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddData"
            },
            "go-type" : 158,
            "kind" : "expression",
            "target" : {
              "go-type" : 137,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "req",
                "variable" : 42
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1285,
      "code" : "req.AddData(linkInfo)",
      "entry" : false,
      "use-vars" : [ 42, 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 179 ],
      "in-vars" : [ 2, 3, 14, 42 ],
      "exit" : false,
      "out-vars" : [ 14, 2, 3, 108 ],
      "decl-vars" : [ 109, 108 ],
      "line-start" : 1287,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 53,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 37,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Execute"
            },
            "go-type" : 280,
            "kind" : "expression",
            "target" : {
              "go-type" : 137,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "req",
                "variable" : 42
              }
            },
            "type" : "selector"
          },
          "go-type" : 278,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1287,
      "code" : "_, err := req.Execute(unix.NETLINK_ROUTE, 0)",
      "entry" : false,
      "use-vars" : [ 42 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 180, 181 ],
      "in-vars" : [ 14, 2, 3, 108 ],
      "exit" : false,
      "out-vars" : [ 14, 2, 3, 108 ],
      "decl-vars" : [ ],
      "line-start" : 1288,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 108
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1290,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 108 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 108 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1289,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 38,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 108
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1289,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 108 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 182 ],
      "in-vars" : [ 3, 14, 2 ],
      "exit" : false,
      "out-vars" : [ 14, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1292,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "base",
              "variable" : 14
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ensureIndex"
            },
            "go-type" : 133,
            "kind" : "expression",
            "target" : {
              "go-type" : 40,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 2
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1292,
      "code" : "h.ensureIndex(base)",
      "entry" : false,
      "use-vars" : [ 2, 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 183, 184 ],
      "in-vars" : [ 3, 14, 2 ],
      "exit" : false,
      "out-vars" : [ 14, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1295,
      "ast" : {
        "condition" : {
          "go-type" : 105,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "MasterIndex",
              "variable" : 33
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1298,
      "code" : "if base.MasterIndex != 0 {\n\n\treturn h.LinkSetMasterByIndex(link, base.MasterIndex)\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 3, 14, 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1297,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "link",
              "variable" : 3
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "MasterIndex",
              "variable" : 33
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 14
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "LinkSetMasterByIndex"
            },
            "go-type" : 135,
            "kind" : "expression",
            "target" : {
              "go-type" : 40,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 2
              }
            },
            "type" : "selector"
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1297,
      "code" : "return h.LinkSetMasterByIndex(link, base.MasterIndex)",
      "entry" : false,
      "use-vars" : [ 3, 14, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1299,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 117,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1299,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func (h *Handle) linkModify(link Link, flags int) error {\n\n\tbase := link.Attrs()\n\n\ttuntap, isTuntap := link.(*Tuntap)\n\n\tif base.Name == \"\" && !isTuntap {\n\t\treturn fmt.Errorf(\"LinkAttrs.Name cannot be empty\")\n\t}\n\n\tif isTuntap {\n\n\t\tif tuntap.Mode < unix.IFF_TUN || tuntap.Mode > unix.IFF_TAP {\n\t\t\treturn fmt.Errorf(\"Tuntap.Mode %v unknown\", tuntap.Mode)\n\t\t}\n\n\t\tqueues := tuntap.Queues\n\n\t\tvar fds []*os.File\n\t\tvar req ifReq\n\t\tcopy(req.Name[:15], base.Name)\n\n\t\treq.Flags = uint16(tuntap.Flags)\n\n\t\tif queues == 0 {\n\t\t\tqueues = 1\n\t\t\tif tuntap.Flags == 0 {\n\t\t\t\treq.Flags = uint16(TUNTAP_DEFAULTS)\n\t\t\t}\n\t\t} else {\n\n\t\t\tif tuntap.Flags == 0 {\n\t\t\t\treq.Flags = uint16(TUNTAP_MULTI_QUEUE_DEFAULTS)\n\t\t\t}\n\t\t}\n\n\t\treq.Flags |= uint16(tuntap.Mode)\n\n\t\tfor i := 0; i < queues; i++ {\n\t\t\tlocalReq := req\n\t\t\tfile, err := os.OpenFile(\"/dev/net/tun\", os.O_RDWR, 0)\n\t\t\tif err != nil {\n\t\t\t\tcleanupFds(fds)\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tfds = append(fds, file)\n\t\t\t_, _, errno := unix.Syscall(unix.SYS_IOCTL, file.Fd(), uintptr(unix.TUNSETIFF), uintptr(unsafe.Pointer(&localReq)))\n\t\t\tif errno != 0 {\n\t\t\t\tcleanupFds(fds)\n\t\t\t\treturn fmt.Errorf(\"Tuntap IOCTL TUNSETIFF failed [%d], errno %v\", i, errno)\n\t\t\t}\n\n\t\t\tif i == 0 {\n\t\t\t\tlink.Attrs().Name = strings.Trim(string(localReq.Name[:]), \"\\x00\")\n\t\t\t}\n\t\t}\n\n\t\tif !tuntap.NonPersist {\n\t\t\t_, _, errno := unix.Syscall(unix.SYS_IOCTL, fds[0].Fd(), uintptr(unix.TUNSETPERSIST), 1)\n\t\t\tif errno != 0 {\n\t\t\t\tcleanupFds(fds)\n\t\t\t\treturn fmt.Errorf(\"Tuntap IOCTL TUNSETPERSIST failed, errno %v\", errno)\n\t\t\t}\n\t\t}\n\n\t\th.ensureIndex(base)\n\n\t\tif base.MasterIndex != 0 {\n\n\t\t\terr := h.LinkSetMasterByIndex(link, base.MasterIndex)\n\t\t\tif err != nil {\n\n\t\t\t\tif !tuntap.NonPersist {\n\t\t\t\t\t_, _, _ = unix.Syscall(unix.SYS_IOCTL, fds[0].Fd(), uintptr(unix.TUNSETPERSIST), 0)\n\t\t\t\t}\n\t\t\t\tcleanupFds(fds)\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\tif tuntap.Queues == 0 {\n\t\t\tcleanupFds(fds)\n\t\t} else {\n\t\t\ttuntap.Fds = fds\n\t\t}\n\n\t\treturn nil\n\t}\n\n\treq := h.newNetlinkRequest(unix.RTM_NEWLINK, flags)\n\n\tmsg := nl.NewIfInfomsg(unix.AF_UNSPEC)\n\n\tif base.Flags&net.FlagUp != 0 {\n\t\tmsg.Change = unix.IFF_UP\n\t\tmsg.Flags = unix.IFF_UP\n\t}\n\tif base.Flags&net.FlagBroadcast != 0 {\n\t\tmsg.Change |= unix.IFF_BROADCAST\n\t\tmsg.Flags |= unix.IFF_BROADCAST\n\t}\n\tif base.Flags&net.FlagLoopback != 0 {\n\t\tmsg.Change |= unix.IFF_LOOPBACK\n\t\tmsg.Flags |= unix.IFF_LOOPBACK\n\t}\n\tif base.Flags&net.FlagPointToPoint != 0 {\n\t\tmsg.Change |= unix.IFF_POINTOPOINT\n\t\tmsg.Flags |= unix.IFF_POINTOPOINT\n\t}\n\tif base.Flags&net.FlagMulticast != 0 {\n\t\tmsg.Change |= unix.IFF_MULTICAST\n\t\tmsg.Flags |= unix.IFF_MULTICAST\n\t}\n\tif base.Index != 0 {\n\t\tmsg.Index = int32(base.Index)\n\t}\n\n\treq.AddData(msg)\n\n\tif base.ParentIndex != 0 {\n\t\tb := make([]byte, 4)\n\t\tnative.PutUint32(b, uint32(base.ParentIndex))\n\t\tdata := nl.NewRtAttr(unix.IFLA_LINK, b)\n\t\treq.AddData(data)\n\t} else if link.Type() == \"ipvlan\" || link.Type() == \"ipoib\" {\n\t\treturn fmt.Errorf(\"Can't create %s link without ParentIndex\", link.Type())\n\t}\n\n\tnameData := nl.NewRtAttr(unix.IFLA_IFNAME, nl.ZeroTerminated(base.Name))\n\treq.AddData(nameData)\n\n\tif base.MTU > 0 {\n\t\tmtu := nl.NewRtAttr(unix.IFLA_MTU, nl.Uint32Attr(uint32(base.MTU)))\n\t\treq.AddData(mtu)\n\t}\n\n\tif base.TxQLen >= 0 {\n\t\tqlen := nl.NewRtAttr(unix.IFLA_TXQLEN, nl.Uint32Attr(uint32(base.TxQLen)))\n\t\treq.AddData(qlen)\n\t}\n\n\tif base.HardwareAddr != nil {\n\t\thwaddr := nl.NewRtAttr(unix.IFLA_ADDRESS, []byte(base.HardwareAddr))\n\t\treq.AddData(hwaddr)\n\t}\n\n\tif base.NumTxQueues > 0 {\n\t\ttxqueues := nl.NewRtAttr(unix.IFLA_NUM_TX_QUEUES, nl.Uint32Attr(uint32(base.NumTxQueues)))\n\t\treq.AddData(txqueues)\n\t}\n\n\tif base.NumRxQueues > 0 {\n\t\trxqueues := nl.NewRtAttr(unix.IFLA_NUM_RX_QUEUES, nl.Uint32Attr(uint32(base.NumRxQueues)))\n\t\treq.AddData(rxqueues)\n\t}\n\n\tif base.GSOMaxSegs > 0 {\n\t\tgsoAttr := nl.NewRtAttr(unix.IFLA_GSO_MAX_SEGS, nl.Uint32Attr(base.GSOMaxSegs))\n\t\treq.AddData(gsoAttr)\n\t}\n\n\tif base.GSOMaxSize > 0 {\n\t\tgsoAttr := nl.NewRtAttr(unix.IFLA_GSO_MAX_SIZE, nl.Uint32Attr(base.GSOMaxSize))\n\t\treq.AddData(gsoAttr)\n\t}\n\n\tif base.Group > 0 {\n\t\tgroupAttr := nl.NewRtAttr(unix.IFLA_GROUP, nl.Uint32Attr(base.Group))\n\t\treq.AddData(groupAttr)\n\t}\n\n\tif base.Namespace != nil {\n\t\tvar attr *nl.RtAttr\n\t\tswitch ns := base.Namespace.(type) {\n\t\tcase NsPid:\n\t\t\tval := nl.Uint32Attr(uint32(ns))\n\t\t\tattr = nl.NewRtAttr(unix.IFLA_NET_NS_PID, val)\n\t\tcase NsFd:\n\t\t\tval := nl.Uint32Attr(uint32(ns))\n\t\t\tattr = nl.NewRtAttr(unix.IFLA_NET_NS_FD, val)\n\t\t}\n\n\t\treq.AddData(attr)\n\t}\n\n\tif base.Xdp != nil {\n\t\taddXdpAttrs(base.Xdp, req)\n\t}\n\n\tlinkInfo := nl.NewRtAttr(unix.IFLA_LINKINFO, nil)\n\tlinkInfo.AddRtAttr(nl.IFLA_INFO_KIND, nl.NonZeroTerminated(link.Type()))\n\n\tswitch link := link.(type) {\n\tcase *Vlan:\n\t\tb := make([]byte, 2)\n\t\tnative.PutUint16(b, uint16(link.VlanId))\n\t\tdata := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)\n\t\tdata.AddRtAttr(nl.IFLA_VLAN_ID, b)\n\n\t\tif link.VlanProtocol != VLAN_PROTOCOL_UNKNOWN {\n\t\t\tdata.AddRtAttr(nl.IFLA_VLAN_PROTOCOL, htons(uint16(link.VlanProtocol)))\n\t\t}\n\tcase *Veth:\n\t\tdata := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)\n\t\tpeer := data.AddRtAttr(nl.VETH_INFO_PEER, nil)\n\t\tnl.NewIfInfomsgChild(peer, unix.AF_UNSPEC)\n\t\tpeer.AddRtAttr(unix.IFLA_IFNAME, nl.ZeroTerminated(link.PeerName))\n\t\tif base.TxQLen >= 0 {\n\t\t\tpeer.AddRtAttr(unix.IFLA_TXQLEN, nl.Uint32Attr(uint32(base.TxQLen)))\n\t\t}\n\t\tif base.MTU > 0 {\n\t\t\tpeer.AddRtAttr(unix.IFLA_MTU, nl.Uint32Attr(uint32(base.MTU)))\n\t\t}\n\t\tif link.PeerHardwareAddr != nil {\n\t\t\tpeer.AddRtAttr(unix.IFLA_ADDRESS, []byte(link.PeerHardwareAddr))\n\t\t}\n\tcase *Vxlan:\n\t\taddVxlanAttrs(link, linkInfo)\n\tcase *Bond:\n\t\taddBondAttrs(link, linkInfo)\n\tcase *IPVlan:\n\t\tdata := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)\n\t\tdata.AddRtAttr(nl.IFLA_IPVLAN_MODE, nl.Uint16Attr(uint16(link.Mode)))\n\t\tdata.AddRtAttr(nl.IFLA_IPVLAN_FLAG, nl.Uint16Attr(uint16(link.Flag)))\n\tcase *Macvlan:\n\t\tif link.Mode != MACVLAN_MODE_DEFAULT {\n\t\t\tdata := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)\n\t\t\tdata.AddRtAttr(nl.IFLA_MACVLAN_MODE, nl.Uint32Attr(macvlanModes[link.Mode]))\n\t\t}\n\tcase *Macvtap:\n\t\tif link.Mode != MACVLAN_MODE_DEFAULT {\n\t\t\tdata := linkInfo.AddRtAttr(nl.IFLA_INFO_DATA, nil)\n\t\t\tdata.AddRtAttr(nl.IFLA_MACVLAN_MODE, nl.Uint32Attr(macvlanModes[link.Mode]))\n\t\t}\n\tcase *Gretap:\n\t\taddGretapAttrs(link, linkInfo)\n\tcase *Iptun:\n\t\taddIptunAttrs(link, linkInfo)\n\tcase *Sittun:\n\t\taddSittunAttrs(link, linkInfo)\n\tcase *Gretun:\n\t\taddGretunAttrs(link, linkInfo)\n\tcase *Vti:\n\t\taddVtiAttrs(link, linkInfo)\n\tcase *Vrf:\n\t\taddVrfAttrs(link, linkInfo)\n\tcase *Bridge:\n\t\taddBridgeAttrs(link, linkInfo)\n\tcase *GTP:\n\t\taddGTPAttrs(link, linkInfo)\n\tcase *Xfrmi:\n\t\taddXfrmiAttrs(link, linkInfo)\n\tcase *IPoIB:\n\t\taddIPoIBAttrs(link, linkInfo)\n\t}\n\n\treq.AddData(linkInfo)\n\n\t_, err := req.Execute(unix.NETLINK_ROUTE, 0)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\th.ensureIndex(base)\n\n\tif base.MasterIndex != 0 {\n\n\t\treturn h.LinkSetMasterByIndex(link, base.MasterIndex)\n\t}\n\treturn nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "linkModify",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Attrs",
      "package" : 0,
      "type" : 4,
      "exported" : true
    }, {
      "name" : "Errorf",
      "package" : 9,
      "type" : 102,
      "exported" : true
    }, {
      "name" : "OpenFile",
      "package" : 6,
      "type" : 114,
      "exported" : true
    }, {
      "name" : "cleanupFds",
      "package" : 0,
      "type" : 118,
      "exported" : false
    }, {
      "name" : "Syscall",
      "package" : 3,
      "type" : 125,
      "exported" : true
    }, {
      "name" : "Fd",
      "package" : 6,
      "type" : 127,
      "exported" : true
    }, {
      "name" : "Trim",
      "package" : 11,
      "type" : 131,
      "exported" : true
    }, {
      "name" : "ensureIndex",
      "package" : 0,
      "type" : 133,
      "exported" : false
    }, {
      "name" : "LinkSetMasterByIndex",
      "package" : 0,
      "type" : 135,
      "exported" : true
    }, {
      "name" : "newNetlinkRequest",
      "package" : 0,
      "type" : 147,
      "exported" : false
    }, {
      "name" : "NewIfInfomsg",
      "package" : 2,
      "type" : 155,
      "exported" : true
    }, {
      "name" : "AddData",
      "package" : 2,
      "type" : 158,
      "exported" : true
    }, {
      "name" : "PutUint32",
      "package" : 5,
      "type" : 62,
      "exported" : true
    }, {
      "name" : "NewRtAttr",
      "package" : 2,
      "type" : 165,
      "exported" : true
    }, {
      "name" : "Type",
      "package" : 0,
      "type" : 35,
      "exported" : true
    }, {
      "name" : "ZeroTerminated",
      "package" : 2,
      "type" : 168,
      "exported" : true
    }, {
      "name" : "Uint32Attr",
      "package" : 2,
      "type" : 170,
      "exported" : true
    }, {
      "name" : "addXdpAttrs",
      "package" : 0,
      "type" : 174,
      "exported" : false
    }, {
      "name" : "AddRtAttr",
      "package" : 2,
      "type" : 165,
      "exported" : true
    }, {
      "name" : "NonZeroTerminated",
      "package" : 2,
      "type" : 168,
      "exported" : true
    }, {
      "name" : "PutUint16",
      "package" : 5,
      "type" : 60,
      "exported" : true
    }, {
      "name" : "htons",
      "package" : 0,
      "type" : 180,
      "exported" : false
    }, {
      "name" : "NewIfInfomsgChild",
      "package" : 2,
      "type" : 182,
      "exported" : true
    }, {
      "name" : "addVxlanAttrs",
      "package" : 0,
      "type" : 187,
      "exported" : false
    }, {
      "name" : "addBondAttrs",
      "package" : 0,
      "type" : 193,
      "exported" : false
    }, {
      "name" : "Uint16Attr",
      "package" : 2,
      "type" : 210,
      "exported" : true
    }, {
      "name" : "addGretapAttrs",
      "package" : 0,
      "type" : 225,
      "exported" : false
    }, {
      "name" : "addIptunAttrs",
      "package" : 0,
      "type" : 230,
      "exported" : false
    }, {
      "name" : "addSittunAttrs",
      "package" : 0,
      "type" : 235,
      "exported" : false
    }, {
      "name" : "addGretunAttrs",
      "package" : 0,
      "type" : 240,
      "exported" : false
    }, {
      "name" : "addVtiAttrs",
      "package" : 0,
      "type" : 245,
      "exported" : false
    }, {
      "name" : "addVrfAttrs",
      "package" : 0,
      "type" : 250,
      "exported" : false
    }, {
      "name" : "addBridgeAttrs",
      "package" : 0,
      "type" : 255,
      "exported" : false
    }, {
      "name" : "addGTPAttrs",
      "package" : 0,
      "type" : 262,
      "exported" : false
    }, {
      "name" : "addXfrmiAttrs",
      "package" : 0,
      "type" : 267,
      "exported" : false
    }, {
      "name" : "addIPoIBAttrs",
      "package" : 0,
      "type" : 272,
      "exported" : false
    }, {
      "name" : "Execute",
      "package" : 2,
      "type" : 280,
      "exported" : true
    } ],
    "line-end" : 1300,
    "line-start" : 1015,
    "names" : [ "linkModify" ],
    "package" : 0,
    "packages" : [ {
      "name" : "netlink",
      "path" : "github.com/vishvananda/netlink"
    }, {
      "name" : "net",
      "path" : "net"
    }, {
      "name" : "nl",
      "path" : "github.com/vishvananda/netlink/nl"
    }, {
      "name" : "unix",
      "path" : "golang.org/x/sys/unix"
    }, {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "binary",
      "path" : "encoding/binary"
    }, {
      "name" : "os",
      "path" : "os"
    }, {
      "name" : "poll",
      "path" : "internal/poll"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    }, {
      "name" : "fmt",
      "path" : "fmt"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "strings",
      "path" : "strings"
    } ],
    "params" : [ 3, 4 ],
    "receivers" : [ 2 ],
    "results" : [ 5 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(link github.com/vishvananda/netlink.Link, flags int) error",
      "params" : 1,
      "recv" : 2,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "link",
        "type" : 2
      }, {
        "name" : "flags",
        "type" : 10
      } ],
      "name" : "(link github.com/vishvananda/netlink.Link, flags int)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Link",
      "name" : "github.com/vishvananda/netlink.Link",
      "package" : 0,
      "type" : "Named",
      "underlying" : 3
    }, {
      "methods" : [ {
        "name" : "Attrs",
        "type" : 4
      }, {
        "name" : "Type",
        "type" : 35
      } ],
      "name" : "interface{Attrs() *github.com/vishvananda/netlink.LinkAttrs; Type() string}",
      "type" : "Interface",
      "underlying" : 3
    }, {
      "name" : "func() *github.com/vishvananda/netlink.LinkAttrs",
      "params" : 5,
      "recv" : 0,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 4,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(*github.com/vishvananda/netlink.LinkAttrs)",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "elem" : 8,
      "name" : "*github.com/vishvananda/netlink.LinkAttrs",
      "type" : "Pointer",
      "underlying" : 7
    }, {
      "local-name" : "LinkAttrs",
      "name" : "github.com/vishvananda/netlink.LinkAttrs",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "Index",
        "type" : 10
      }, {
        "name" : "MTU",
        "type" : 10
      }, {
        "name" : "TxQLen",
        "type" : 10
      }, {
        "name" : "Name",
        "type" : 11
      }, {
        "name" : "HardwareAddr",
        "type" : 12
      }, {
        "name" : "Flags",
        "type" : 15
      }, {
        "name" : "RawFlags",
        "type" : 17
      }, {
        "name" : "ParentIndex",
        "type" : 10
      }, {
        "name" : "MasterIndex",
        "type" : 10
      }, {
        "name" : "Namespace",
        "type" : 18
      }, {
        "name" : "Alias",
        "type" : 11
      }, {
        "name" : "Statistics",
        "type" : 19
      }, {
        "name" : "Promisc",
        "type" : 10
      }, {
        "name" : "Xdp",
        "type" : 23
      }, {
        "name" : "EncapType",
        "type" : 11
      }, {
        "name" : "Protinfo",
        "type" : 27
      }, {
        "name" : "OperState",
        "type" : 30
      }, {
        "name" : "NetNsID",
        "type" : 10
      }, {
        "name" : "NumTxQueues",
        "type" : 10
      }, {
        "name" : "NumRxQueues",
        "type" : 10
      }, {
        "name" : "GSOMaxSize",
        "type" : 17
      }, {
        "name" : "GSOMaxSegs",
        "type" : 17
      }, {
        "name" : "Vfs",
        "type" : 32
      }, {
        "name" : "Group",
        "type" : 17
      } ],
      "name" : "struct{Index int; MTU int; TxQLen int; Name string; HardwareAddr net.HardwareAddr; Flags net.Flags; RawFlags uint32; ParentIndex int; MasterIndex int; Namespace interface{}; Alias string; Statistics *github.com/vishvananda/netlink.LinkStatistics; Promisc int; Xdp *github.com/vishvananda/netlink.LinkXdp; EncapType string; Protinfo *github.com/vishvananda/netlink.Protinfo; OperState github.com/vishvananda/netlink.LinkOperState; NetNsID int; NumTxQueues int; NumRxQueues int; GSOMaxSize uint32; GSOMaxSegs uint32; Vfs []github.com/vishvananda/netlink.VfInfo; Group uint32}",
      "type" : "Struct",
      "underlying" : 9
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "local-name" : "HardwareAddr",
      "name" : "net.HardwareAddr",
      "package" : 1,
      "type" : "Named",
      "underlying" : 13
    }, {
      "elem" : 14,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 13
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "local-name" : "Flags",
      "name" : "net.Flags",
      "package" : 1,
      "type" : "Named",
      "underlying" : 16
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 18
    }, {
      "elem" : 20,
      "name" : "*github.com/vishvananda/netlink.LinkStatistics",
      "type" : "Pointer",
      "underlying" : 19
    }, {
      "local-name" : "LinkStatistics",
      "name" : "github.com/vishvananda/netlink.LinkStatistics",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "RxPackets",
        "type" : 22
      }, {
        "name" : "TxPackets",
        "type" : 22
      }, {
        "name" : "RxBytes",
        "type" : 22
      }, {
        "name" : "TxBytes",
        "type" : 22
      }, {
        "name" : "RxErrors",
        "type" : 22
      }, {
        "name" : "TxErrors",
        "type" : 22
      }, {
        "name" : "RxDropped",
        "type" : 22
      }, {
        "name" : "TxDropped",
        "type" : 22
      }, {
        "name" : "Multicast",
        "type" : 22
      }, {
        "name" : "Collisions",
        "type" : 22
      }, {
        "name" : "RxLengthErrors",
        "type" : 22
      }, {
        "name" : "RxOverErrors",
        "type" : 22
      }, {
        "name" : "RxCrcErrors",
        "type" : 22
      }, {
        "name" : "RxFrameErrors",
        "type" : 22
      }, {
        "name" : "RxFifoErrors",
        "type" : 22
      }, {
        "name" : "RxMissedErrors",
        "type" : 22
      }, {
        "name" : "TxAbortedErrors",
        "type" : 22
      }, {
        "name" : "TxCarrierErrors",
        "type" : 22
      }, {
        "name" : "TxFifoErrors",
        "type" : 22
      }, {
        "name" : "TxHeartbeatErrors",
        "type" : 22
      }, {
        "name" : "TxWindowErrors",
        "type" : 22
      }, {
        "name" : "RxCompressed",
        "type" : 22
      }, {
        "name" : "TxCompressed",
        "type" : 22
      } ],
      "name" : "struct{RxPackets uint64; TxPackets uint64; RxBytes uint64; TxBytes uint64; RxErrors uint64; TxErrors uint64; RxDropped uint64; TxDropped uint64; Multicast uint64; Collisions uint64; RxLengthErrors uint64; RxOverErrors uint64; RxCrcErrors uint64; RxFrameErrors uint64; RxFifoErrors uint64; RxMissedErrors uint64; TxAbortedErrors uint64; TxCarrierErrors uint64; TxFifoErrors uint64; TxHeartbeatErrors uint64; TxWindowErrors uint64; RxCompressed uint64; TxCompressed uint64}",
      "type" : "Struct",
      "underlying" : 21
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "elem" : 24,
      "name" : "*github.com/vishvananda/netlink.LinkXdp",
      "type" : "Pointer",
      "underlying" : 23
    }, {
      "local-name" : "LinkXdp",
      "name" : "github.com/vishvananda/netlink.LinkXdp",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "Fd",
        "type" : 10
      }, {
        "name" : "Attached",
        "type" : 26
      }, {
        "name" : "Flags",
        "type" : 17
      }, {
        "name" : "ProgId",
        "type" : 17
      } ],
      "name" : "struct{Fd int; Attached bool; Flags uint32; ProgId uint32}",
      "type" : "Struct",
      "underlying" : 25
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "elem" : 28,
      "name" : "*github.com/vishvananda/netlink.Protinfo",
      "type" : "Pointer",
      "underlying" : 27
    }, {
      "local-name" : "Protinfo",
      "name" : "github.com/vishvananda/netlink.Protinfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 29
    }, {
      "fields" : [ {
        "name" : "Hairpin",
        "type" : 26
      }, {
        "name" : "Guard",
        "type" : 26
      }, {
        "name" : "FastLeave",
        "type" : 26
      }, {
        "name" : "RootBlock",
        "type" : 26
      }, {
        "name" : "Learning",
        "type" : 26
      }, {
        "name" : "Flood",
        "type" : 26
      }, {
        "name" : "ProxyArp",
        "type" : 26
      }, {
        "name" : "ProxyArpWiFi",
        "type" : 26
      } ],
      "name" : "struct{Hairpin bool; Guard bool; FastLeave bool; RootBlock bool; Learning bool; Flood bool; ProxyArp bool; ProxyArpWiFi bool}",
      "type" : "Struct",
      "underlying" : 29
    }, {
      "local-name" : "LinkOperState",
      "name" : "github.com/vishvananda/netlink.LinkOperState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 31
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 31
    }, {
      "elem" : 33,
      "name" : "[]github.com/vishvananda/netlink.VfInfo",
      "type" : "Slice",
      "underlying" : 32
    }, {
      "local-name" : "VfInfo",
      "name" : "github.com/vishvananda/netlink.VfInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 34
    }, {
      "fields" : [ {
        "name" : "ID",
        "type" : 10
      }, {
        "name" : "Mac",
        "type" : 12
      }, {
        "name" : "Vlan",
        "type" : 10
      }, {
        "name" : "Qos",
        "type" : 10
      }, {
        "name" : "TxRate",
        "type" : 10
      }, {
        "name" : "Spoofchk",
        "type" : 26
      }, {
        "name" : "LinkState",
        "type" : 17
      }, {
        "name" : "MaxTxRate",
        "type" : 17
      }, {
        "name" : "MinTxRate",
        "type" : 17
      } ],
      "name" : "struct{ID int; Mac net.HardwareAddr; Vlan int; Qos int; TxRate int; Spoofchk bool; LinkState uint32; MaxTxRate uint32; MinTxRate uint32}",
      "type" : "Struct",
      "underlying" : 34
    }, {
      "name" : "func() string",
      "params" : 5,
      "recv" : 1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 38
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 37
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 39
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 35
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 39
    }, {
      "elem" : 41,
      "name" : "*github.com/vishvananda/netlink.Handle",
      "type" : "Pointer",
      "underlying" : 40
    }, {
      "local-name" : "Handle",
      "name" : "github.com/vishvananda/netlink.Handle",
      "package" : 0,
      "type" : "Named",
      "underlying" : 42
    }, {
      "fields" : [ {
        "name" : "sockets",
        "type" : 43
      }, {
        "name" : "lookupByDump",
        "type" : 26
      } ],
      "name" : "struct{sockets map[int]*github.com/vishvananda/netlink/nl.SocketHandle; lookupByDump bool}",
      "type" : "Struct",
      "underlying" : 42
    }, {
      "elem" : 44,
      "key" : 10,
      "name" : "map[int]*github.com/vishvananda/netlink/nl.SocketHandle",
      "type" : "Map",
      "underlying" : 43
    }, {
      "elem" : 45,
      "name" : "*github.com/vishvananda/netlink/nl.SocketHandle",
      "type" : "Pointer",
      "underlying" : 44
    }, {
      "local-name" : "SocketHandle",
      "name" : "github.com/vishvananda/netlink/nl.SocketHandle",
      "package" : 2,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "Seq",
        "type" : 17
      }, {
        "name" : "Socket",
        "type" : 47
      } ],
      "name" : "struct{Seq uint32; Socket *github.com/vishvananda/netlink/nl.NetlinkSocket}",
      "type" : "Struct",
      "underlying" : 46
    }, {
      "elem" : 48,
      "name" : "*github.com/vishvananda/netlink/nl.NetlinkSocket",
      "type" : "Pointer",
      "underlying" : 47
    }, {
      "local-name" : "NetlinkSocket",
      "name" : "github.com/vishvananda/netlink/nl.NetlinkSocket",
      "package" : 2,
      "type" : "Named",
      "underlying" : 49
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 50
      }, {
        "name" : "lsa",
        "type" : 51
      }, {
        "name" : "Mutex",
        "type" : 56
      } ],
      "name" : "struct{fd int32; lsa golang.org/x/sys/unix.SockaddrNetlink; sync.Mutex}",
      "type" : "Struct",
      "underlying" : 49
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 50
    }, {
      "local-name" : "SockaddrNetlink",
      "name" : "golang.org/x/sys/unix.SockaddrNetlink",
      "package" : 3,
      "type" : "Named",
      "underlying" : 52
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 53
      }, {
        "name" : "Pad",
        "type" : 53
      }, {
        "name" : "Pid",
        "type" : 17
      }, {
        "name" : "Groups",
        "type" : 17
      }, {
        "name" : "raw",
        "type" : 54
      } ],
      "name" : "struct{Family uint16; Pad uint16; Pid uint32; Groups uint32; raw golang.org/x/sys/unix.RawSockaddrNetlink}",
      "type" : "Struct",
      "underlying" : 52
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 53
    }, {
      "local-name" : "RawSockaddrNetlink",
      "name" : "golang.org/x/sys/unix.RawSockaddrNetlink",
      "package" : 3,
      "type" : "Named",
      "underlying" : 55
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 53
      }, {
        "name" : "Pad",
        "type" : 53
      }, {
        "name" : "Pid",
        "type" : 17
      }, {
        "name" : "Groups",
        "type" : 17
      } ],
      "name" : "struct{Family uint16; Pad uint16; Pid uint32; Groups uint32}",
      "type" : "Struct",
      "underlying" : 55
    }, {
      "local-name" : "Mutex",
      "name" : "sync.Mutex",
      "package" : 4,
      "type" : "Named",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "state",
        "type" : 50
      }, {
        "name" : "sema",
        "type" : 17
      } ],
      "name" : "struct{state int32; sema uint32}",
      "type" : "Struct",
      "underlying" : 57
    }, {
      "local-name" : "ByteOrder",
      "name" : "encoding/binary.ByteOrder",
      "package" : 5,
      "type" : "Named",
      "underlying" : 59
    }, {
      "methods" : [ {
        "name" : "PutUint16",
        "type" : 60
      }, {
        "name" : "PutUint32",
        "type" : 62
      }, {
        "name" : "PutUint64",
        "type" : 64
      }, {
        "name" : "String",
        "type" : 35
      }, {
        "name" : "Uint16",
        "type" : 66
      }, {
        "name" : "Uint32",
        "type" : 69
      }, {
        "name" : "Uint64",
        "type" : 71
      } ],
      "name" : "interface{PutUint16([]byte, uint16); PutUint32([]byte, uint32); PutUint64([]byte, uint64); String() string; Uint16([]byte) uint16; Uint32([]byte) uint32; Uint64([]byte) uint64}",
      "type" : "Interface",
      "underlying" : 59
    }, {
      "name" : "func([]byte, uint16)",
      "params" : 61,
      "recv" : 6,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 60,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 53
      } ],
      "name" : "([]byte, uint16)",
      "type" : "Tuple",
      "underlying" : 61
    }, {
      "name" : "func([]byte, uint32)",
      "params" : 63,
      "recv" : 7,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 62,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 17
      } ],
      "name" : "([]byte, uint32)",
      "type" : "Tuple",
      "underlying" : 63
    }, {
      "name" : "func([]byte, uint64)",
      "params" : 65,
      "recv" : 8,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 64,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 22
      } ],
      "name" : "([]byte, uint64)",
      "type" : "Tuple",
      "underlying" : 65
    }, {
      "name" : "func([]byte) uint16",
      "params" : 67,
      "recv" : 9,
      "results" : 68,
      "type" : "Signature",
      "underlying" : 66,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 67
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 53
      } ],
      "name" : "(uint16)",
      "type" : "Tuple",
      "underlying" : 68
    }, {
      "name" : "func([]byte) uint32",
      "params" : 67,
      "recv" : 10,
      "results" : 70,
      "type" : "Signature",
      "underlying" : 69,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 70
    }, {
      "name" : "func([]byte) uint64",
      "params" : 67,
      "recv" : 11,
      "results" : 72,
      "type" : "Signature",
      "underlying" : 71,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 22
      } ],
      "name" : "(uint64)",
      "type" : "Tuple",
      "underlying" : 72
    }, {
      "elem" : 17,
      "name" : "[6]uint32",
      "type" : "Array",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 75
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(*github.com/vishvananda/netlink.Tuntap, bool)",
      "type" : "Tuple",
      "underlying" : 74
    }, {
      "elem" : 76,
      "name" : "*github.com/vishvananda/netlink.Tuntap",
      "type" : "Pointer",
      "underlying" : 75
    }, {
      "local-name" : "Tuntap",
      "name" : "github.com/vishvananda/netlink.Tuntap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 77
    }, {
      "fields" : [ {
        "name" : "LinkAttrs",
        "type" : 8
      }, {
        "name" : "Mode",
        "type" : 78
      }, {
        "name" : "Flags",
        "type" : 79
      }, {
        "name" : "NonPersist",
        "type" : 26
      }, {
        "name" : "Queues",
        "type" : 10
      }, {
        "name" : "Fds",
        "type" : 80
      }, {
        "name" : "Owner",
        "type" : 17
      }, {
        "name" : "Group",
        "type" : 17
      } ],
      "name" : "struct{github.com/vishvananda/netlink.LinkAttrs; Mode github.com/vishvananda/netlink.TuntapMode; Flags github.com/vishvananda/netlink.TuntapFlag; NonPersist bool; Queues int; Fds []*os.File; Owner uint32; Group uint32}",
      "type" : "Struct",
      "underlying" : 77
    }, {
      "local-name" : "TuntapMode",
      "name" : "github.com/vishvananda/netlink.TuntapMode",
      "package" : 0,
      "type" : "Named",
      "underlying" : 53
    }, {
      "local-name" : "TuntapFlag",
      "name" : "github.com/vishvananda/netlink.TuntapFlag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 53
    }, {
      "elem" : 81,
      "name" : "[]*os.File",
      "type" : "Slice",
      "underlying" : 80
    }, {
      "elem" : 82,
      "name" : "*os.File",
      "type" : "Pointer",
      "underlying" : 81
    }, {
      "local-name" : "File",
      "name" : "os.File",
      "package" : 6,
      "type" : "Named",
      "underlying" : 83
    }, {
      "fields" : [ {
        "name" : "file",
        "type" : 84
      } ],
      "name" : "struct{*os.file}",
      "type" : "Struct",
      "underlying" : 83
    }, {
      "elem" : 85,
      "name" : "*os.file",
      "type" : "Pointer",
      "underlying" : 84
    }, {
      "local-name" : "file",
      "name" : "os.file",
      "package" : 6,
      "type" : "Named",
      "underlying" : 86
    }, {
      "fields" : [ {
        "name" : "pfd",
        "type" : 87
      }, {
        "name" : "name",
        "type" : 11
      }, {
        "name" : "dirinfo",
        "type" : 99
      }, {
        "name" : "nonblock",
        "type" : 26
      }, {
        "name" : "stdoutOrErr",
        "type" : 26
      }, {
        "name" : "appendMode",
        "type" : 26
      } ],
      "name" : "struct{pfd internal/poll.FD; name string; dirinfo *os.dirInfo; nonblock bool; stdoutOrErr bool; appendMode bool}",
      "type" : "Struct",
      "underlying" : 86
    }, {
      "local-name" : "FD",
      "name" : "internal/poll.FD",
      "package" : 7,
      "type" : "Named",
      "underlying" : 88
    }, {
      "fields" : [ {
        "name" : "fdmu",
        "type" : 89
      }, {
        "name" : "Sysfd",
        "type" : 10
      }, {
        "name" : "pd",
        "type" : 91
      }, {
        "name" : "iovecs",
        "type" : 94
      }, {
        "name" : "csema",
        "type" : 17
      }, {
        "name" : "isBlocking",
        "type" : 17
      }, {
        "name" : "IsStream",
        "type" : 26
      }, {
        "name" : "ZeroReadIsEOF",
        "type" : 26
      }, {
        "name" : "isFile",
        "type" : 26
      } ],
      "name" : "struct{fdmu internal/poll.fdMutex; Sysfd int; pd internal/poll.pollDesc; iovecs *[]syscall.Iovec; csema uint32; isBlocking uint32; IsStream bool; ZeroReadIsEOF bool; isFile bool}",
      "type" : "Struct",
      "underlying" : 88
    }, {
      "local-name" : "fdMutex",
      "name" : "internal/poll.fdMutex",
      "package" : 7,
      "type" : "Named",
      "underlying" : 90
    }, {
      "fields" : [ {
        "name" : "state",
        "type" : 22
      }, {
        "name" : "rsema",
        "type" : 17
      }, {
        "name" : "wsema",
        "type" : 17
      } ],
      "name" : "struct{state uint64; rsema uint32; wsema uint32}",
      "type" : "Struct",
      "underlying" : 90
    }, {
      "local-name" : "pollDesc",
      "name" : "internal/poll.pollDesc",
      "package" : 7,
      "type" : "Named",
      "underlying" : 92
    }, {
      "fields" : [ {
        "name" : "runtimeCtx",
        "type" : 93
      } ],
      "name" : "struct{runtimeCtx uintptr}",
      "type" : "Struct",
      "underlying" : 92
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 93
    }, {
      "elem" : 95,
      "name" : "*[]syscall.Iovec",
      "type" : "Pointer",
      "underlying" : 94
    }, {
      "elem" : 96,
      "name" : "[]syscall.Iovec",
      "type" : "Slice",
      "underlying" : 95
    }, {
      "local-name" : "Iovec",
      "name" : "syscall.Iovec",
      "package" : 8,
      "type" : "Named",
      "underlying" : 97
    }, {
      "fields" : [ {
        "name" : "Base",
        "type" : 98
      }, {
        "name" : "Len",
        "type" : 22
      } ],
      "name" : "struct{Base *byte; Len uint64}",
      "type" : "Struct",
      "underlying" : 97
    }, {
      "elem" : 14,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 98
    }, {
      "elem" : 100,
      "name" : "*os.dirInfo",
      "type" : "Pointer",
      "underlying" : 99
    }, {
      "local-name" : "dirInfo",
      "name" : "os.dirInfo",
      "package" : 6,
      "type" : "Named",
      "underlying" : 101
    }, {
      "fields" : [ {
        "name" : "buf",
        "type" : 13
      }, {
        "name" : "nbuf",
        "type" : 10
      }, {
        "name" : "bufp",
        "type" : 10
      } ],
      "name" : "struct{buf []byte; nbuf int; bufp int}",
      "type" : "Struct",
      "underlying" : 101
    }, {
      "name" : "func(format string, a ...interface{}) error",
      "params" : 103,
      "recv" : -1,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 102,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "format",
        "type" : 11
      }, {
        "name" : "a",
        "type" : 104
      } ],
      "name" : "(format string, a []interface{})",
      "type" : "Tuple",
      "underlying" : 103
    }, {
      "elem" : 18,
      "name" : "[]interface{}",
      "type" : "Slice",
      "underlying" : 104
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 105
    }, {
      "local-name" : "ifReq",
      "name" : "github.com/vishvananda/netlink.ifReq",
      "package" : 0,
      "type" : "Named",
      "underlying" : 107
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 108
      }, {
        "name" : "Flags",
        "type" : 53
      }, {
        "name" : "pad",
        "type" : 109
      } ],
      "name" : "struct{Name [16]byte; Flags uint16; pad [22]byte}",
      "type" : "Struct",
      "underlying" : 107
    }, {
      "elem" : 14,
      "name" : "[16]byte",
      "type" : "Array",
      "underlying" : 108
    }, {
      "elem" : 14,
      "name" : "[22]byte",
      "type" : "Array",
      "underlying" : 109
    }, {
      "name" : "func([]byte, string) int",
      "params" : 111,
      "recv" : -1,
      "results" : 112,
      "type" : "Signature",
      "underlying" : 110,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "([]byte, string)",
      "type" : "Tuple",
      "underlying" : 111
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 112
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 81
      }, {
        "name" : "",
        "type" : 38
      } ],
      "name" : "(*os.File, error)",
      "type" : "Tuple",
      "underlying" : 113
    }, {
      "name" : "func(name string, flag int, perm os.FileMode) (*os.File, error)",
      "params" : 115,
      "recv" : -1,
      "results" : 113,
      "type" : "Signature",
      "underlying" : 114,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 11
      }, {
        "name" : "flag",
        "type" : 10
      }, {
        "name" : "perm",
        "type" : 116
      } ],
      "name" : "(name string, flag int, perm os.FileMode)",
      "type" : "Tuple",
      "underlying" : 115
    }, {
      "local-name" : "FileMode",
      "name" : "os.FileMode",
      "package" : 6,
      "type" : "Named",
      "underlying" : 17
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 117
    }, {
      "name" : "func(fds []*os.File)",
      "params" : 119,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 118,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fds",
        "type" : 80
      } ],
      "name" : "(fds []*os.File)",
      "type" : "Tuple",
      "underlying" : 119
    }, {
      "name" : "func([]*os.File, ...*os.File) []*os.File",
      "params" : 121,
      "recv" : -1,
      "results" : 122,
      "type" : "Signature",
      "underlying" : 120,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 80
      }, {
        "name" : "",
        "type" : 80
      } ],
      "name" : "([]*os.File, []*os.File)",
      "type" : "Tuple",
      "underlying" : 121
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 80
      } ],
      "name" : "([]*os.File)",
      "type" : "Tuple",
      "underlying" : 122
    }, {
      "fields" : [ {
        "name" : "r1",
        "type" : 93
      }, {
        "name" : "r2",
        "type" : 93
      }, {
        "name" : "err",
        "type" : 124
      } ],
      "name" : "(r1 uintptr, r2 uintptr, err syscall.Errno)",
      "type" : "Tuple",
      "underlying" : 123
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 8,
      "type" : "Named",
      "underlying" : 93
    }, {
      "name" : "func(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr) (r1 uintptr, r2 uintptr, err syscall.Errno)",
      "params" : 126,
      "recv" : -1,
      "results" : 123,
      "type" : "Signature",
      "underlying" : 125,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "trap",
        "type" : 93
      }, {
        "name" : "a1",
        "type" : 93
      }, {
        "name" : "a2",
        "type" : 93
      }, {
        "name" : "a3",
        "type" : 93
      } ],
      "name" : "(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr)",
      "type" : "Tuple",
      "underlying" : 126
    }, {
      "name" : "func() uintptr",
      "params" : 5,
      "recv" : -1,
      "results" : 128,
      "type" : "Signature",
      "underlying" : 127,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 93
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 128
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 10,
      "type" : "Basic",
      "underlying" : 129
    }, {
      "elem" : 106,
      "name" : "*github.com/vishvananda/netlink.ifReq",
      "type" : "Pointer",
      "underlying" : 130
    }, {
      "name" : "func(s string, cutset string) string",
      "params" : 132,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 131,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 11
      }, {
        "name" : "cutset",
        "type" : 11
      } ],
      "name" : "(s string, cutset string)",
      "type" : "Tuple",
      "underlying" : 132
    }, {
      "name" : "func(link *github.com/vishvananda/netlink.LinkAttrs)",
      "params" : 134,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 133,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "link",
        "type" : 7
      } ],
      "name" : "(link *github.com/vishvananda/netlink.LinkAttrs)",
      "type" : "Tuple",
      "underlying" : 134
    }, {
      "name" : "func(link github.com/vishvananda/netlink.Link, masterIndex int) error",
      "params" : 136,
      "recv" : -1,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 135,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "link",
        "type" : 2
      }, {
        "name" : "masterIndex",
        "type" : 10
      } ],
      "name" : "(link github.com/vishvananda/netlink.Link, masterIndex int)",
      "type" : "Tuple",
      "underlying" : 136
    }, {
      "elem" : 138,
      "name" : "*github.com/vishvananda/netlink/nl.NetlinkRequest",
      "type" : "Pointer",
      "underlying" : 137
    }, {
      "local-name" : "NetlinkRequest",
      "name" : "github.com/vishvananda/netlink/nl.NetlinkRequest",
      "package" : 2,
      "type" : "Named",
      "underlying" : 139
    }, {
      "fields" : [ {
        "name" : "NlMsghdr",
        "type" : 140
      }, {
        "name" : "Data",
        "type" : 142
      }, {
        "name" : "RawData",
        "type" : 13
      }, {
        "name" : "Sockets",
        "type" : 43
      } ],
      "name" : "struct{golang.org/x/sys/unix.NlMsghdr; Data []github.com/vishvananda/netlink/nl.NetlinkRequestData; RawData []byte; Sockets map[int]*github.com/vishvananda/netlink/nl.SocketHandle}",
      "type" : "Struct",
      "underlying" : 139
    }, {
      "local-name" : "NlMsghdr",
      "name" : "golang.org/x/sys/unix.NlMsghdr",
      "package" : 3,
      "type" : "Named",
      "underlying" : 141
    }, {
      "fields" : [ {
        "name" : "Len",
        "type" : 17
      }, {
        "name" : "Type",
        "type" : 53
      }, {
        "name" : "Flags",
        "type" : 53
      }, {
        "name" : "Seq",
        "type" : 17
      }, {
        "name" : "Pid",
        "type" : 17
      } ],
      "name" : "struct{Len uint32; Type uint16; Flags uint16; Seq uint32; Pid uint32}",
      "type" : "Struct",
      "underlying" : 141
    }, {
      "elem" : 143,
      "name" : "[]github.com/vishvananda/netlink/nl.NetlinkRequestData",
      "type" : "Slice",
      "underlying" : 142
    }, {
      "local-name" : "NetlinkRequestData",
      "name" : "github.com/vishvananda/netlink/nl.NetlinkRequestData",
      "package" : 2,
      "type" : "Named",
      "underlying" : 144
    }, {
      "methods" : [ {
        "name" : "Len",
        "type" : 145
      }, {
        "name" : "Serialize",
        "type" : 146
      } ],
      "name" : "interface{Len() int; Serialize() []byte}",
      "type" : "Interface",
      "underlying" : 144
    }, {
      "name" : "func() int",
      "params" : 5,
      "recv" : 40,
      "results" : 112,
      "type" : "Signature",
      "underlying" : 145,
      "variadic" : false
    }, {
      "name" : "func() []byte",
      "params" : 5,
      "recv" : 41,
      "results" : 67,
      "type" : "Signature",
      "underlying" : 146,
      "variadic" : false
    }, {
      "name" : "func(proto int, flags int) *github.com/vishvananda/netlink/nl.NetlinkRequest",
      "params" : 148,
      "recv" : -1,
      "results" : 149,
      "type" : "Signature",
      "underlying" : 147,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "proto",
        "type" : 10
      }, {
        "name" : "flags",
        "type" : 10
      } ],
      "name" : "(proto int, flags int)",
      "type" : "Tuple",
      "underlying" : 148
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 137
      } ],
      "name" : "(*github.com/vishvananda/netlink/nl.NetlinkRequest)",
      "type" : "Tuple",
      "underlying" : 149
    }, {
      "elem" : 151,
      "name" : "*github.com/vishvananda/netlink/nl.IfInfomsg",
      "type" : "Pointer",
      "underlying" : 150
    }, {
      "local-name" : "IfInfomsg",
      "name" : "github.com/vishvananda/netlink/nl.IfInfomsg",
      "package" : 2,
      "type" : "Named",
      "underlying" : 152
    }, {
      "fields" : [ {
        "name" : "IfInfomsg",
        "type" : 153
      } ],
      "name" : "struct{golang.org/x/sys/unix.IfInfomsg}",
      "type" : "Struct",
      "underlying" : 152
    }, {
      "local-name" : "IfInfomsg",
      "name" : "golang.org/x/sys/unix.IfInfomsg",
      "package" : 3,
      "type" : "Named",
      "underlying" : 154
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 31
      }, {
        "name" : "_",
        "type" : 31
      }, {
        "name" : "Type",
        "type" : 53
      }, {
        "name" : "Index",
        "type" : 50
      }, {
        "name" : "Flags",
        "type" : 17
      }, {
        "name" : "Change",
        "type" : 17
      } ],
      "name" : "struct{Family uint8; _ uint8; Type uint16; Index int32; Flags uint32; Change uint32}",
      "type" : "Struct",
      "underlying" : 154
    }, {
      "name" : "func(family int) *github.com/vishvananda/netlink/nl.IfInfomsg",
      "params" : 156,
      "recv" : -1,
      "results" : 157,
      "type" : "Signature",
      "underlying" : 155,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "family",
        "type" : 10
      } ],
      "name" : "(family int)",
      "type" : "Tuple",
      "underlying" : 156
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 150
      } ],
      "name" : "(*github.com/vishvananda/netlink/nl.IfInfomsg)",
      "type" : "Tuple",
      "underlying" : 157
    }, {
      "name" : "func(data github.com/vishvananda/netlink/nl.NetlinkRequestData)",
      "params" : 159,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 158,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 143
      } ],
      "name" : "(data github.com/vishvananda/netlink/nl.NetlinkRequestData)",
      "type" : "Tuple",
      "underlying" : 159
    }, {
      "elem" : 161,
      "name" : "*github.com/vishvananda/netlink/nl.RtAttr",
      "type" : "Pointer",
      "underlying" : 160
    }, {
      "local-name" : "RtAttr",
      "name" : "github.com/vishvananda/netlink/nl.RtAttr",
      "package" : 2,
      "type" : "Named",
      "underlying" : 162
    }, {
      "fields" : [ {
        "name" : "RtAttr",
        "type" : 163
      }, {
        "name" : "Data",
        "type" : 13
      }, {
        "name" : "children",
        "type" : 142
      } ],
      "name" : "struct{golang.org/x/sys/unix.RtAttr; Data []byte; children []github.com/vishvananda/netlink/nl.NetlinkRequestData}",
      "type" : "Struct",
      "underlying" : 162
    }, {
      "local-name" : "RtAttr",
      "name" : "golang.org/x/sys/unix.RtAttr",
      "package" : 3,
      "type" : "Named",
      "underlying" : 164
    }, {
      "fields" : [ {
        "name" : "Len",
        "type" : 53
      }, {
        "name" : "Type",
        "type" : 53
      } ],
      "name" : "struct{Len uint16; Type uint16}",
      "type" : "Struct",
      "underlying" : 164
    }, {
      "name" : "func(attrType int, data []byte) *github.com/vishvananda/netlink/nl.RtAttr",
      "params" : 166,
      "recv" : -1,
      "results" : 167,
      "type" : "Signature",
      "underlying" : 165,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "attrType",
        "type" : 10
      }, {
        "name" : "data",
        "type" : 13
      } ],
      "name" : "(attrType int, data []byte)",
      "type" : "Tuple",
      "underlying" : 166
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 160
      } ],
      "name" : "(*github.com/vishvananda/netlink/nl.RtAttr)",
      "type" : "Tuple",
      "underlying" : 167
    }, {
      "name" : "func(s string) []byte",
      "params" : 169,
      "recv" : -1,
      "results" : 67,
      "type" : "Signature",
      "underlying" : 168,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 11
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 169
    }, {
      "name" : "func(v uint32) []byte",
      "params" : 171,
      "recv" : -1,
      "results" : 67,
      "type" : "Signature",
      "underlying" : 170,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 17
      } ],
      "name" : "(v uint32)",
      "type" : "Tuple",
      "underlying" : 171
    }, {
      "local-name" : "NsPid",
      "name" : "github.com/vishvananda/netlink.NsPid",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "local-name" : "NsFd",
      "name" : "github.com/vishvananda/netlink.NsFd",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "name" : "func(xdp *github.com/vishvananda/netlink.LinkXdp, req *github.com/vishvananda/netlink/nl.NetlinkRequest)",
      "params" : 175,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 174,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "xdp",
        "type" : 23
      }, {
        "name" : "req",
        "type" : 137
      } ],
      "name" : "(xdp *github.com/vishvananda/netlink.LinkXdp, req *github.com/vishvananda/netlink/nl.NetlinkRequest)",
      "type" : "Tuple",
      "underlying" : 175
    }, {
      "elem" : 177,
      "name" : "*github.com/vishvananda/netlink.Vlan",
      "type" : "Pointer",
      "underlying" : 176
    }, {
      "local-name" : "Vlan",
      "name" : "github.com/vishvananda/netlink.Vlan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 178
    }, {
      "fields" : [ {
        "name" : "LinkAttrs",
        "type" : 8
      }, {
        "name" : "VlanId",
        "type" : 10
      }, {
        "name" : "VlanProtocol",
        "type" : 179
      } ],
      "name" : "struct{github.com/vishvananda/netlink.LinkAttrs; VlanId int; VlanProtocol github.com/vishvananda/netlink.VlanProtocol}",
      "type" : "Struct",
      "underlying" : 178
    }, {
      "local-name" : "VlanProtocol",
      "name" : "github.com/vishvananda/netlink.VlanProtocol",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "name" : "func(val uint16) []byte",
      "params" : 181,
      "recv" : -1,
      "results" : 67,
      "type" : "Signature",
      "underlying" : 180,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "val",
        "type" : 53
      } ],
      "name" : "(val uint16)",
      "type" : "Tuple",
      "underlying" : 181
    }, {
      "name" : "func(parent *github.com/vishvananda/netlink/nl.RtAttr, family int) *github.com/vishvananda/netlink/nl.IfInfomsg",
      "params" : 183,
      "recv" : -1,
      "results" : 157,
      "type" : "Signature",
      "underlying" : 182,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "parent",
        "type" : 160
      }, {
        "name" : "family",
        "type" : 10
      } ],
      "name" : "(parent *github.com/vishvananda/netlink/nl.RtAttr, family int)",
      "type" : "Tuple",
      "underlying" : 183
    }, {
      "elem" : 185,
      "name" : "*github.com/vishvananda/netlink.Veth",
      "type" : "Pointer",
      "underlying" : 184
    }, {
      "local-name" : "Veth",
      "name" : "github.com/vishvananda/netlink.Veth",
      "package" : 0,
      "type" : "Named",
      "underlying" : 186
    }, {
      "fields" : [ {
        "name" : "LinkAttrs",
        "type" : 8
      }, {
        "name" : "PeerName",
        "type" : 11
      }, {
        "name" : "PeerHardwareAddr",
        "type" : 12
      } ],
      "name" : "struct{github.com/vishvananda/netlink.LinkAttrs; PeerName string; PeerHardwareAddr net.HardwareAddr}",
      "type" : "Struct",
      "underlying" : 186
    }, {
      "name" : "func(vxlan *github.com/vishvananda/netlink.Vxlan, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "params" : 188,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 187,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "vxlan",
        "type" : 189
      }, {
        "name" : "linkInfo",
        "type" : 160
      } ],
      "name" : "(vxlan *github.com/vishvananda/netlink.Vxlan, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "type" : "Tuple",
      "underlying" : 188
    }, {
      "elem" : 190,
      "name" : "*github.com/vishvananda/netlink.Vxlan",
      "type" : "Pointer",
      "underlying" : 189
    }, {
      "local-name" : "Vxlan",
      "name" : "github.com/vishvananda/netlink.Vxlan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 191
    }, {
      "fields" : [ {
        "name" : "LinkAttrs",
        "type" : 8
      }, {
        "name" : "VxlanId",
        "type" : 10
      }, {
        "name" : "VtepDevIndex",
        "type" : 10
      }, {
        "name" : "SrcAddr",
        "type" : 192
      }, {
        "name" : "Group",
        "type" : 192
      }, {
        "name" : "TTL",
        "type" : 10
      }, {
        "name" : "TOS",
        "type" : 10
      }, {
        "name" : "Learning",
        "type" : 26
      }, {
        "name" : "Proxy",
        "type" : 26
      }, {
        "name" : "RSC",
        "type" : 26
      }, {
        "name" : "L2miss",
        "type" : 26
      }, {
        "name" : "L3miss",
        "type" : 26
      }, {
        "name" : "UDPCSum",
        "type" : 26
      }, {
        "name" : "UDP6ZeroCSumTx",
        "type" : 26
      }, {
        "name" : "UDP6ZeroCSumRx",
        "type" : 26
      }, {
        "name" : "NoAge",
        "type" : 26
      }, {
        "name" : "GBP",
        "type" : 26
      }, {
        "name" : "FlowBased",
        "type" : 26
      }, {
        "name" : "Age",
        "type" : 10
      }, {
        "name" : "Limit",
        "type" : 10
      }, {
        "name" : "Port",
        "type" : 10
      }, {
        "name" : "PortLow",
        "type" : 10
      }, {
        "name" : "PortHigh",
        "type" : 10
      } ],
      "name" : "struct{github.com/vishvananda/netlink.LinkAttrs; VxlanId int; VtepDevIndex int; SrcAddr net.IP; Group net.IP; TTL int; TOS int; Learning bool; Proxy bool; RSC bool; L2miss bool; L3miss bool; UDPCSum bool; UDP6ZeroCSumTx bool; UDP6ZeroCSumRx bool; NoAge bool; GBP bool; FlowBased bool; Age int; Limit int; Port int; PortLow int; PortHigh int}",
      "type" : "Struct",
      "underlying" : 191
    }, {
      "local-name" : "IP",
      "name" : "net.IP",
      "package" : 1,
      "type" : "Named",
      "underlying" : 13
    }, {
      "name" : "func(bond *github.com/vishvananda/netlink.Bond, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "params" : 194,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 193,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "bond",
        "type" : 195
      }, {
        "name" : "linkInfo",
        "type" : 160
      } ],
      "name" : "(bond *github.com/vishvananda/netlink.Bond, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "type" : "Tuple",
      "underlying" : 194
    }, {
      "elem" : 196,
      "name" : "*github.com/vishvananda/netlink.Bond",
      "type" : "Pointer",
      "underlying" : 195
    }, {
      "local-name" : "Bond",
      "name" : "github.com/vishvananda/netlink.Bond",
      "package" : 0,
      "type" : "Named",
      "underlying" : 197
    }, {
      "fields" : [ {
        "name" : "LinkAttrs",
        "type" : 8
      }, {
        "name" : "Mode",
        "type" : 198
      }, {
        "name" : "ActiveSlave",
        "type" : 10
      }, {
        "name" : "Miimon",
        "type" : 10
      }, {
        "name" : "UpDelay",
        "type" : 10
      }, {
        "name" : "DownDelay",
        "type" : 10
      }, {
        "name" : "UseCarrier",
        "type" : 10
      }, {
        "name" : "ArpInterval",
        "type" : 10
      }, {
        "name" : "ArpIpTargets",
        "type" : 199
      }, {
        "name" : "ArpValidate",
        "type" : 200
      }, {
        "name" : "ArpAllTargets",
        "type" : 201
      }, {
        "name" : "Primary",
        "type" : 10
      }, {
        "name" : "PrimaryReselect",
        "type" : 202
      }, {
        "name" : "FailOverMac",
        "type" : 203
      }, {
        "name" : "XmitHashPolicy",
        "type" : 204
      }, {
        "name" : "ResendIgmp",
        "type" : 10
      }, {
        "name" : "NumPeerNotif",
        "type" : 10
      }, {
        "name" : "AllSlavesActive",
        "type" : 10
      }, {
        "name" : "MinLinks",
        "type" : 10
      }, {
        "name" : "LpInterval",
        "type" : 10
      }, {
        "name" : "PackersPerSlave",
        "type" : 10
      }, {
        "name" : "LacpRate",
        "type" : 205
      }, {
        "name" : "AdSelect",
        "type" : 206
      }, {
        "name" : "AdInfo",
        "type" : 207
      }, {
        "name" : "AdActorSysPrio",
        "type" : 10
      }, {
        "name" : "AdUserPortKey",
        "type" : 10
      }, {
        "name" : "AdActorSystem",
        "type" : 12
      }, {
        "name" : "TlbDynamicLb",
        "type" : 10
      } ],
      "name" : "struct{github.com/vishvananda/netlink.LinkAttrs; Mode github.com/vishvananda/netlink.BondMode; ActiveSlave int; Miimon int; UpDelay int; DownDelay int; UseCarrier int; ArpInterval int; ArpIpTargets []net.IP; ArpValidate github.com/vishvananda/netlink.BondArpValidate; ArpAllTargets github.com/vishvananda/netlink.BondArpAllTargets; Primary int; PrimaryReselect github.com/vishvananda/netlink.BondPrimaryReselect; FailOverMac github.com/vishvananda/netlink.BondFailOverMac; XmitHashPolicy github.com/vishvananda/netlink.BondXmitHashPolicy; ResendIgmp int; NumPeerNotif int; AllSlavesActive int; MinLinks int; LpInterval int; PackersPerSlave int; LacpRate github.com/vishvananda/netlink.BondLacpRate; AdSelect github.com/vishvananda/netlink.BondAdSelect; AdInfo *github.com/vishvananda/netlink.BondAdInfo; AdActorSysPrio int; AdUserPortKey int; AdActorSystem net.HardwareAddr; TlbDynamicLb int}",
      "type" : "Struct",
      "underlying" : 197
    }, {
      "local-name" : "BondMode",
      "name" : "github.com/vishvananda/netlink.BondMode",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "elem" : 192,
      "name" : "[]net.IP",
      "type" : "Slice",
      "underlying" : 199
    }, {
      "local-name" : "BondArpValidate",
      "name" : "github.com/vishvananda/netlink.BondArpValidate",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "local-name" : "BondArpAllTargets",
      "name" : "github.com/vishvananda/netlink.BondArpAllTargets",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "local-name" : "BondPrimaryReselect",
      "name" : "github.com/vishvananda/netlink.BondPrimaryReselect",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "local-name" : "BondFailOverMac",
      "name" : "github.com/vishvananda/netlink.BondFailOverMac",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "local-name" : "BondXmitHashPolicy",
      "name" : "github.com/vishvananda/netlink.BondXmitHashPolicy",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "local-name" : "BondLacpRate",
      "name" : "github.com/vishvananda/netlink.BondLacpRate",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "local-name" : "BondAdSelect",
      "name" : "github.com/vishvananda/netlink.BondAdSelect",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "elem" : 208,
      "name" : "*github.com/vishvananda/netlink.BondAdInfo",
      "type" : "Pointer",
      "underlying" : 207
    }, {
      "local-name" : "BondAdInfo",
      "name" : "github.com/vishvananda/netlink.BondAdInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 209
    }, {
      "fields" : [ {
        "name" : "AggregatorId",
        "type" : 10
      }, {
        "name" : "NumPorts",
        "type" : 10
      }, {
        "name" : "ActorKey",
        "type" : 10
      }, {
        "name" : "PartnerKey",
        "type" : 10
      }, {
        "name" : "PartnerMac",
        "type" : 12
      } ],
      "name" : "struct{AggregatorId int; NumPorts int; ActorKey int; PartnerKey int; PartnerMac net.HardwareAddr}",
      "type" : "Struct",
      "underlying" : 209
    }, {
      "name" : "func(v uint16) []byte",
      "params" : 211,
      "recv" : -1,
      "results" : 67,
      "type" : "Signature",
      "underlying" : 210,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 53
      } ],
      "name" : "(v uint16)",
      "type" : "Tuple",
      "underlying" : 211
    }, {
      "local-name" : "IPVlanMode",
      "name" : "github.com/vishvananda/netlink.IPVlanMode",
      "package" : 0,
      "type" : "Named",
      "underlying" : 53
    }, {
      "elem" : 214,
      "name" : "*github.com/vishvananda/netlink.IPVlan",
      "type" : "Pointer",
      "underlying" : 213
    }, {
      "local-name" : "IPVlan",
      "name" : "github.com/vishvananda/netlink.IPVlan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 215
    }, {
      "fields" : [ {
        "name" : "LinkAttrs",
        "type" : 8
      }, {
        "name" : "Mode",
        "type" : 212
      }, {
        "name" : "Flag",
        "type" : 216
      } ],
      "name" : "struct{github.com/vishvananda/netlink.LinkAttrs; Mode github.com/vishvananda/netlink.IPVlanMode; Flag github.com/vishvananda/netlink.IPVlanFlag}",
      "type" : "Struct",
      "underlying" : 215
    }, {
      "local-name" : "IPVlanFlag",
      "name" : "github.com/vishvananda/netlink.IPVlanFlag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 53
    }, {
      "local-name" : "MacvlanMode",
      "name" : "github.com/vishvananda/netlink.MacvlanMode",
      "package" : 0,
      "type" : "Named",
      "underlying" : 53
    }, {
      "elem" : 219,
      "name" : "*github.com/vishvananda/netlink.Macvlan",
      "type" : "Pointer",
      "underlying" : 218
    }, {
      "local-name" : "Macvlan",
      "name" : "github.com/vishvananda/netlink.Macvlan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 220
    }, {
      "fields" : [ {
        "name" : "LinkAttrs",
        "type" : 8
      }, {
        "name" : "Mode",
        "type" : 217
      }, {
        "name" : "MACAddrs",
        "type" : 221
      } ],
      "name" : "struct{github.com/vishvananda/netlink.LinkAttrs; Mode github.com/vishvananda/netlink.MacvlanMode; MACAddrs []net.HardwareAddr}",
      "type" : "Struct",
      "underlying" : 220
    }, {
      "elem" : 12,
      "name" : "[]net.HardwareAddr",
      "type" : "Slice",
      "underlying" : 221
    }, {
      "elem" : 223,
      "name" : "*github.com/vishvananda/netlink.Macvtap",
      "type" : "Pointer",
      "underlying" : 222
    }, {
      "local-name" : "Macvtap",
      "name" : "github.com/vishvananda/netlink.Macvtap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 224
    }, {
      "fields" : [ {
        "name" : "Macvlan",
        "type" : 219
      } ],
      "name" : "struct{github.com/vishvananda/netlink.Macvlan}",
      "type" : "Struct",
      "underlying" : 224
    }, {
      "name" : "func(gretap *github.com/vishvananda/netlink.Gretap, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "params" : 226,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 225,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "gretap",
        "type" : 227
      }, {
        "name" : "linkInfo",
        "type" : 160
      } ],
      "name" : "(gretap *github.com/vishvananda/netlink.Gretap, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "type" : "Tuple",
      "underlying" : 226
    }, {
      "elem" : 228,
      "name" : "*github.com/vishvananda/netlink.Gretap",
      "type" : "Pointer",
      "underlying" : 227
    }, {
      "local-name" : "Gretap",
      "name" : "github.com/vishvananda/netlink.Gretap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 229
    }, {
      "fields" : [ {
        "name" : "LinkAttrs",
        "type" : 8
      }, {
        "name" : "IKey",
        "type" : 17
      }, {
        "name" : "OKey",
        "type" : 17
      }, {
        "name" : "EncapSport",
        "type" : 53
      }, {
        "name" : "EncapDport",
        "type" : 53
      }, {
        "name" : "Local",
        "type" : 192
      }, {
        "name" : "Remote",
        "type" : 192
      }, {
        "name" : "IFlags",
        "type" : 53
      }, {
        "name" : "OFlags",
        "type" : 53
      }, {
        "name" : "PMtuDisc",
        "type" : 31
      }, {
        "name" : "Ttl",
        "type" : 31
      }, {
        "name" : "Tos",
        "type" : 31
      }, {
        "name" : "EncapType",
        "type" : 53
      }, {
        "name" : "EncapFlags",
        "type" : 53
      }, {
        "name" : "Link",
        "type" : 17
      }, {
        "name" : "FlowBased",
        "type" : 26
      } ],
      "name" : "struct{github.com/vishvananda/netlink.LinkAttrs; IKey uint32; OKey uint32; EncapSport uint16; EncapDport uint16; Local net.IP; Remote net.IP; IFlags uint16; OFlags uint16; PMtuDisc uint8; Ttl uint8; Tos uint8; EncapType uint16; EncapFlags uint16; Link uint32; FlowBased bool}",
      "type" : "Struct",
      "underlying" : 229
    }, {
      "name" : "func(iptun *github.com/vishvananda/netlink.Iptun, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "params" : 231,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 230,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "iptun",
        "type" : 232
      }, {
        "name" : "linkInfo",
        "type" : 160
      } ],
      "name" : "(iptun *github.com/vishvananda/netlink.Iptun, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "type" : "Tuple",
      "underlying" : 231
    }, {
      "elem" : 233,
      "name" : "*github.com/vishvananda/netlink.Iptun",
      "type" : "Pointer",
      "underlying" : 232
    }, {
      "local-name" : "Iptun",
      "name" : "github.com/vishvananda/netlink.Iptun",
      "package" : 0,
      "type" : "Named",
      "underlying" : 234
    }, {
      "fields" : [ {
        "name" : "LinkAttrs",
        "type" : 8
      }, {
        "name" : "Ttl",
        "type" : 31
      }, {
        "name" : "Tos",
        "type" : 31
      }, {
        "name" : "PMtuDisc",
        "type" : 31
      }, {
        "name" : "Link",
        "type" : 17
      }, {
        "name" : "Local",
        "type" : 192
      }, {
        "name" : "Remote",
        "type" : 192
      }, {
        "name" : "EncapSport",
        "type" : 53
      }, {
        "name" : "EncapDport",
        "type" : 53
      }, {
        "name" : "EncapType",
        "type" : 53
      }, {
        "name" : "EncapFlags",
        "type" : 53
      }, {
        "name" : "FlowBased",
        "type" : 26
      } ],
      "name" : "struct{github.com/vishvananda/netlink.LinkAttrs; Ttl uint8; Tos uint8; PMtuDisc uint8; Link uint32; Local net.IP; Remote net.IP; EncapSport uint16; EncapDport uint16; EncapType uint16; EncapFlags uint16; FlowBased bool}",
      "type" : "Struct",
      "underlying" : 234
    }, {
      "name" : "func(sittun *github.com/vishvananda/netlink.Sittun, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "params" : 236,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 235,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "sittun",
        "type" : 237
      }, {
        "name" : "linkInfo",
        "type" : 160
      } ],
      "name" : "(sittun *github.com/vishvananda/netlink.Sittun, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "type" : "Tuple",
      "underlying" : 236
    }, {
      "elem" : 238,
      "name" : "*github.com/vishvananda/netlink.Sittun",
      "type" : "Pointer",
      "underlying" : 237
    }, {
      "local-name" : "Sittun",
      "name" : "github.com/vishvananda/netlink.Sittun",
      "package" : 0,
      "type" : "Named",
      "underlying" : 239
    }, {
      "fields" : [ {
        "name" : "LinkAttrs",
        "type" : 8
      }, {
        "name" : "Link",
        "type" : 17
      }, {
        "name" : "Local",
        "type" : 192
      }, {
        "name" : "Remote",
        "type" : 192
      }, {
        "name" : "Ttl",
        "type" : 31
      }, {
        "name" : "Tos",
        "type" : 31
      }, {
        "name" : "PMtuDisc",
        "type" : 31
      }, {
        "name" : "EncapType",
        "type" : 53
      }, {
        "name" : "EncapFlags",
        "type" : 53
      }, {
        "name" : "EncapSport",
        "type" : 53
      }, {
        "name" : "EncapDport",
        "type" : 53
      } ],
      "name" : "struct{github.com/vishvananda/netlink.LinkAttrs; Link uint32; Local net.IP; Remote net.IP; Ttl uint8; Tos uint8; PMtuDisc uint8; EncapType uint16; EncapFlags uint16; EncapSport uint16; EncapDport uint16}",
      "type" : "Struct",
      "underlying" : 239
    }, {
      "name" : "func(gre *github.com/vishvananda/netlink.Gretun, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "params" : 241,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 240,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "gre",
        "type" : 242
      }, {
        "name" : "linkInfo",
        "type" : 160
      } ],
      "name" : "(gre *github.com/vishvananda/netlink.Gretun, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "type" : "Tuple",
      "underlying" : 241
    }, {
      "elem" : 243,
      "name" : "*github.com/vishvananda/netlink.Gretun",
      "type" : "Pointer",
      "underlying" : 242
    }, {
      "local-name" : "Gretun",
      "name" : "github.com/vishvananda/netlink.Gretun",
      "package" : 0,
      "type" : "Named",
      "underlying" : 244
    }, {
      "fields" : [ {
        "name" : "LinkAttrs",
        "type" : 8
      }, {
        "name" : "Link",
        "type" : 17
      }, {
        "name" : "IFlags",
        "type" : 53
      }, {
        "name" : "OFlags",
        "type" : 53
      }, {
        "name" : "IKey",
        "type" : 17
      }, {
        "name" : "OKey",
        "type" : 17
      }, {
        "name" : "Local",
        "type" : 192
      }, {
        "name" : "Remote",
        "type" : 192
      }, {
        "name" : "Ttl",
        "type" : 31
      }, {
        "name" : "Tos",
        "type" : 31
      }, {
        "name" : "PMtuDisc",
        "type" : 31
      }, {
        "name" : "EncapType",
        "type" : 53
      }, {
        "name" : "EncapFlags",
        "type" : 53
      }, {
        "name" : "EncapSport",
        "type" : 53
      }, {
        "name" : "EncapDport",
        "type" : 53
      } ],
      "name" : "struct{github.com/vishvananda/netlink.LinkAttrs; Link uint32; IFlags uint16; OFlags uint16; IKey uint32; OKey uint32; Local net.IP; Remote net.IP; Ttl uint8; Tos uint8; PMtuDisc uint8; EncapType uint16; EncapFlags uint16; EncapSport uint16; EncapDport uint16}",
      "type" : "Struct",
      "underlying" : 244
    }, {
      "name" : "func(vti *github.com/vishvananda/netlink.Vti, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "params" : 246,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 245,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "vti",
        "type" : 247
      }, {
        "name" : "linkInfo",
        "type" : 160
      } ],
      "name" : "(vti *github.com/vishvananda/netlink.Vti, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "type" : "Tuple",
      "underlying" : 246
    }, {
      "elem" : 248,
      "name" : "*github.com/vishvananda/netlink.Vti",
      "type" : "Pointer",
      "underlying" : 247
    }, {
      "local-name" : "Vti",
      "name" : "github.com/vishvananda/netlink.Vti",
      "package" : 0,
      "type" : "Named",
      "underlying" : 249
    }, {
      "fields" : [ {
        "name" : "LinkAttrs",
        "type" : 8
      }, {
        "name" : "IKey",
        "type" : 17
      }, {
        "name" : "OKey",
        "type" : 17
      }, {
        "name" : "Link",
        "type" : 17
      }, {
        "name" : "Local",
        "type" : 192
      }, {
        "name" : "Remote",
        "type" : 192
      } ],
      "name" : "struct{github.com/vishvananda/netlink.LinkAttrs; IKey uint32; OKey uint32; Link uint32; Local net.IP; Remote net.IP}",
      "type" : "Struct",
      "underlying" : 249
    }, {
      "name" : "func(vrf *github.com/vishvananda/netlink.Vrf, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "params" : 251,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 250,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "vrf",
        "type" : 252
      }, {
        "name" : "linkInfo",
        "type" : 160
      } ],
      "name" : "(vrf *github.com/vishvananda/netlink.Vrf, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "type" : "Tuple",
      "underlying" : 251
    }, {
      "elem" : 253,
      "name" : "*github.com/vishvananda/netlink.Vrf",
      "type" : "Pointer",
      "underlying" : 252
    }, {
      "local-name" : "Vrf",
      "name" : "github.com/vishvananda/netlink.Vrf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 254
    }, {
      "fields" : [ {
        "name" : "LinkAttrs",
        "type" : 8
      }, {
        "name" : "Table",
        "type" : 17
      } ],
      "name" : "struct{github.com/vishvananda/netlink.LinkAttrs; Table uint32}",
      "type" : "Struct",
      "underlying" : 254
    }, {
      "name" : "func(bridge *github.com/vishvananda/netlink.Bridge, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "params" : 256,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 255,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "bridge",
        "type" : 257
      }, {
        "name" : "linkInfo",
        "type" : 160
      } ],
      "name" : "(bridge *github.com/vishvananda/netlink.Bridge, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "type" : "Tuple",
      "underlying" : 256
    }, {
      "elem" : 258,
      "name" : "*github.com/vishvananda/netlink.Bridge",
      "type" : "Pointer",
      "underlying" : 257
    }, {
      "local-name" : "Bridge",
      "name" : "github.com/vishvananda/netlink.Bridge",
      "package" : 0,
      "type" : "Named",
      "underlying" : 259
    }, {
      "fields" : [ {
        "name" : "LinkAttrs",
        "type" : 8
      }, {
        "name" : "MulticastSnooping",
        "type" : 260
      }, {
        "name" : "HelloTime",
        "type" : 261
      }, {
        "name" : "VlanFiltering",
        "type" : 260
      } ],
      "name" : "struct{github.com/vishvananda/netlink.LinkAttrs; MulticastSnooping *bool; HelloTime *uint32; VlanFiltering *bool}",
      "type" : "Struct",
      "underlying" : 259
    }, {
      "elem" : 26,
      "name" : "*bool",
      "type" : "Pointer",
      "underlying" : 260
    }, {
      "elem" : 17,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 261
    }, {
      "name" : "func(gtp *github.com/vishvananda/netlink.GTP, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "params" : 263,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 262,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "gtp",
        "type" : 264
      }, {
        "name" : "linkInfo",
        "type" : 160
      } ],
      "name" : "(gtp *github.com/vishvananda/netlink.GTP, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "type" : "Tuple",
      "underlying" : 263
    }, {
      "elem" : 265,
      "name" : "*github.com/vishvananda/netlink.GTP",
      "type" : "Pointer",
      "underlying" : 264
    }, {
      "local-name" : "GTP",
      "name" : "github.com/vishvananda/netlink.GTP",
      "package" : 0,
      "type" : "Named",
      "underlying" : 266
    }, {
      "fields" : [ {
        "name" : "LinkAttrs",
        "type" : 8
      }, {
        "name" : "FD0",
        "type" : 10
      }, {
        "name" : "FD1",
        "type" : 10
      }, {
        "name" : "Role",
        "type" : 10
      }, {
        "name" : "PDPHashsize",
        "type" : 10
      } ],
      "name" : "struct{github.com/vishvananda/netlink.LinkAttrs; FD0 int; FD1 int; Role int; PDPHashsize int}",
      "type" : "Struct",
      "underlying" : 266
    }, {
      "name" : "func(xfrmi *github.com/vishvananda/netlink.Xfrmi, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "params" : 268,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 267,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "xfrmi",
        "type" : 269
      }, {
        "name" : "linkInfo",
        "type" : 160
      } ],
      "name" : "(xfrmi *github.com/vishvananda/netlink.Xfrmi, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "type" : "Tuple",
      "underlying" : 268
    }, {
      "elem" : 270,
      "name" : "*github.com/vishvananda/netlink.Xfrmi",
      "type" : "Pointer",
      "underlying" : 269
    }, {
      "local-name" : "Xfrmi",
      "name" : "github.com/vishvananda/netlink.Xfrmi",
      "package" : 0,
      "type" : "Named",
      "underlying" : 271
    }, {
      "fields" : [ {
        "name" : "LinkAttrs",
        "type" : 8
      }, {
        "name" : "Ifid",
        "type" : 17
      } ],
      "name" : "struct{github.com/vishvananda/netlink.LinkAttrs; Ifid uint32}",
      "type" : "Struct",
      "underlying" : 271
    }, {
      "name" : "func(ipoib *github.com/vishvananda/netlink.IPoIB, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "params" : 273,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 272,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ipoib",
        "type" : 274
      }, {
        "name" : "linkInfo",
        "type" : 160
      } ],
      "name" : "(ipoib *github.com/vishvananda/netlink.IPoIB, linkInfo *github.com/vishvananda/netlink/nl.RtAttr)",
      "type" : "Tuple",
      "underlying" : 273
    }, {
      "elem" : 275,
      "name" : "*github.com/vishvananda/netlink.IPoIB",
      "type" : "Pointer",
      "underlying" : 274
    }, {
      "local-name" : "IPoIB",
      "name" : "github.com/vishvananda/netlink.IPoIB",
      "package" : 0,
      "type" : "Named",
      "underlying" : 276
    }, {
      "fields" : [ {
        "name" : "LinkAttrs",
        "type" : 8
      }, {
        "name" : "Pkey",
        "type" : 53
      }, {
        "name" : "Mode",
        "type" : 277
      }, {
        "name" : "Umcast",
        "type" : 53
      } ],
      "name" : "struct{github.com/vishvananda/netlink.LinkAttrs; Pkey uint16; Mode github.com/vishvananda/netlink.IPoIBMode; Umcast uint16}",
      "type" : "Struct",
      "underlying" : 276
    }, {
      "local-name" : "IPoIBMode",
      "name" : "github.com/vishvananda/netlink.IPoIBMode",
      "package" : 0,
      "type" : "Named",
      "underlying" : 53
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 279
      }, {
        "name" : "",
        "type" : 38
      } ],
      "name" : "([][]byte, error)",
      "type" : "Tuple",
      "underlying" : 278
    }, {
      "elem" : 13,
      "name" : "[][]byte",
      "type" : "Slice",
      "underlying" : 279
    }, {
      "name" : "func(sockType int, resType uint16) ([][]byte, error)",
      "params" : 281,
      "recv" : -1,
      "results" : 278,
      "type" : "Signature",
      "underlying" : 280,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "sockType",
        "type" : 10
      }, {
        "name" : "resType",
        "type" : 53
      } ],
      "name" : "(sockType int, resType uint16)",
      "type" : "Tuple",
      "underlying" : 281
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 0,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "flags",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 58,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 58,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 58,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 58,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 58,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 58,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "native",
      "package" : 0,
      "type" : 58,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "macvlanModes",
      "package" : 0,
      "type" : 73,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "base",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tuntap",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isTuntap",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Name",
      "package" : 0,
      "type" : 11,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Mode",
      "package" : 0,
      "type" : 78,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Queues",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "req",
      "package" : 0,
      "type" : 106,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Name",
      "package" : 0,
      "type" : 108,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Flags",
      "package" : 0,
      "type" : 53,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Flags",
      "package" : 0,
      "type" : 79,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "queues",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fds",
      "package" : 0,
      "type" : 80,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "file",
      "package" : 0,
      "type" : 81,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "localReq",
      "package" : 0,
      "type" : 106,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "errno",
      "package" : 0,
      "type" : 124,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "NonPersist",
      "package" : 0,
      "type" : 26,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "errno",
      "package" : 0,
      "type" : 124,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "MasterIndex",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Fds",
      "package" : 0,
      "type" : 80,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 93,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 93,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 93,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 93,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 143,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 143,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "req",
      "package" : 0,
      "type" : 137,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "msg",
      "package" : 0,
      "type" : 150,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Flags",
      "package" : 0,
      "type" : 15,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Change",
      "package" : 3,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Flags",
      "package" : 3,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Index",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Index",
      "package" : 3,
      "type" : 50,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ParentIndex",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "nameData",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "MTU",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "mtu",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "TxQLen",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "qlen",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "HardwareAddr",
      "package" : 0,
      "type" : 12,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "hwaddr",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "NumTxQueues",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "txqueues",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "NumRxQueues",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "rxqueues",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "GSOMaxSegs",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "gsoAttr",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "GSOMaxSize",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "gsoAttr",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Group",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "groupAttr",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Namespace",
      "package" : 0,
      "type" : 18,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ns",
      "package" : 0,
      "type" : 172,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "attr",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "val",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ns",
      "package" : 0,
      "type" : 173,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "val",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Xdp",
      "package" : 0,
      "type" : 23,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "linkInfo",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 176,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "VlanId",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "VlanProtocol",
      "package" : 0,
      "type" : 179,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "peer",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 184,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "PeerName",
      "package" : 0,
      "type" : 11,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "PeerHardwareAddr",
      "package" : 0,
      "type" : 12,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 189,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 195,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 213,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Mode",
      "package" : 0,
      "type" : 212,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Flag",
      "package" : 0,
      "type" : 216,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 218,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Mode",
      "package" : 0,
      "type" : 217,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 222,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 227,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 232,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 237,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 242,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 247,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 252,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 257,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 264,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 269,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 274,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 279,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}