{
  "usage" : {
    "file" : "generic_cmp_vv.go",
    "label1" : "memory-access",
    "label2" : "layout",
    "line" : "628",
    "module" : "gorgonia.org/tensor",
    "pkg" : "gorgonia.org/tensor/internal/execution",
    "project" : "gorgonia/gorgonia",
    "snippet" : "func EqUnsafePointer(a []unsafe.Pointer, b []unsafe.Pointer, retVal []bool) {",
    "version" : "v0.9.6"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 3 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 629,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "a",
            "variable" : 0
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "type" : "slice",
          "three" : false,
          "high" : null,
          "max" : null,
          "kind" : "expression",
          "low" : null,
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "a",
              "variable" : 0
            }
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 0 ],
      "line-end" : 629,
      "code" : "a = a[:]",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 4 ],
      "in-vars" : [ 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 630,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "type" : "slice",
          "three" : false,
          "high" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 0
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "type" : "call"
          },
          "max" : null,
          "kind" : "expression",
          "low" : null,
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 1
            }
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 630,
      "code" : "b = b[:len(a)]",
      "entry" : false,
      "use-vars" : [ 1, 0 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 5 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 631,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "retVal",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "type" : "slice",
          "three" : false,
          "high" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 0
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "type" : "call"
          },
          "max" : null,
          "kind" : "expression",
          "low" : null,
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "retVal",
              "variable" : 2
            }
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 631,
      "code" : "retVal = retVal[:len(a)]",
      "entry" : false,
      "use-vars" : [ 0, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1, 6 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 1, 0 ],
      "decl-vars" : [ 3 ],
      "line-start" : 632,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "retVal",
            "variable" : 2
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 634,
      "code" : "for i := range retVal {\n\tretVal[i] = a[i] == b[i]\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 5 ],
      "in-vars" : [ 2, 3, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 633,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "index" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 3
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "retVal",
              "variable" : 2
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "index" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 3
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 0
              }
            },
            "type" : "index"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 3,
            "index" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 3
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 1
              }
            },
            "type" : "index"
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 633,
      "code" : "retVal[i] = a[i] == b[i]",
      "entry" : false,
      "use-vars" : [ 2, 3, 0, 1 ]
    } ],
    "code" : "func EqUnsafePointer(a []unsafe.Pointer, b []unsafe.Pointer, retVal []bool) {\n\ta = a[:]\n\tb = b[:len(a)]\n\tretVal = retVal[:len(a)]\n\tfor i := range retVal {\n\t\tretVal[i] = a[i] == b[i]\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "EqUnsafePointer",
      "package" : 0,
      "type" : 0,
      "exported" : true
    } ],
    "line-end" : 635,
    "line-start" : 628,
    "names" : [ "EqUnsafePointer" ],
    "package" : 0,
    "packages" : [ {
      "name" : "execution",
      "path" : "gorgonia.org/tensor/internal/execution"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1, 2 ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(a []unsafe.Pointer, b []unsafe.Pointer, retVal []bool)",
      "params" : 1,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 2
      }, {
        "name" : "b",
        "type" : 2
      }, {
        "name" : "retVal",
        "type" : 4
      } ],
      "name" : "(a []unsafe.Pointer, b []unsafe.Pointer, retVal []bool)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "[]unsafe.Pointer",
      "type" : "Slice",
      "underlying" : 2
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "[]bool",
      "type" : "Slice",
      "underlying" : 4
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "func([]unsafe.Pointer) int",
      "params" : 9,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "([]unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 10
    } ],
    "variables" : [ {
      "name" : "a",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "retVal",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 7,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}