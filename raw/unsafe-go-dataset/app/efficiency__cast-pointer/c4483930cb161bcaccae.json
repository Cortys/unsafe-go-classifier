{
  "usage" : {
    "file" : "marshalers.go",
    "label1" : "cast-pointer",
    "label2" : "efficiency",
    "line" : "56",
    "module" : "github.com/cilium/ebpf",
    "pkg" : "github.com/cilium/ebpf",
    "project" : "kubernetes/kubernetes",
    "snippet" : "if ptr, ok := dst.(unsafe.Pointer); ok {",
    "version" : "v0.0.0-20191113100448-d9fb101ca1fb"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 1, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 1, 5 ],
      "decl-vars" : [ ],
      "line-start" : 56,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 4
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 58,
      "code" : "if ptr, ok := dst.(unsafe.Pointer); ok {\n\treturn newPtr(ptr), nil\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 1 ],
      "decl-vars" : [ 4, 5 ],
      "line-start" : 56,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 7,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 7,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dst",
              "variable" : 0
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 56,
      "code" : "ptr, ok := dst.(unsafe.Pointer)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 57,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 5
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newPtr"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }, {
          "go-type" : 15,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 57,
      "code" : "return newPtr(ptr), nil",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 6 ],
      "decl-vars" : [ 6 ],
      "line-start" : 60,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "buf"
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 9,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 9,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 8,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 8,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "length",
              "variable" : 1
            }
          } ],
          "type" : "make"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 60,
      "code" : "buf := make([]byte, length)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 61,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 16,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 9,
                "index" : {
                  "go-type" : 3,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 8,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "buf",
                    "variable" : 6
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newPtr"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }, {
          "go-type" : 8,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "buf",
            "variable" : 6
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 61,
      "code" : "return newPtr(unsafe.Pointer(&buf[0])), buf",
      "entry" : false,
      "use-vars" : [ 6 ]
    } ],
    "code" : "func makeBuffer(dst interface{}, length int) (syscallPtr, []byte) {\n\tif ptr, ok := dst.(unsafe.Pointer); ok {\n\t\treturn newPtr(ptr), nil\n\t}\n\n\tbuf := make([]byte, length)\n\treturn newPtr(unsafe.Pointer(&buf[0])), buf\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "makeBuffer",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "newPtr",
      "package" : 0,
      "type" : 12,
      "exported" : false
    } ],
    "line-end" : 62,
    "line-start" : 55,
    "names" : [ "makeBuffer" ],
    "package" : 0,
    "packages" : [ {
      "name" : "ebpf",
      "path" : "github.com/cilium/ebpf"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1 ],
    "receivers" : [ ],
    "results" : [ 2, 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(dst interface{}, length int) (github.com/cilium/ebpf.syscallPtr, []byte)",
      "params" : 1,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dst",
        "type" : 2
      }, {
        "name" : "length",
        "type" : 3
      } ],
      "name" : "(dst interface{}, length int)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 2
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(github.com/cilium/ebpf.syscallPtr, []byte)",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "local-name" : "syscallPtr",
      "name" : "github.com/cilium/ebpf.syscallPtr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 7
      } ],
      "name" : "struct{ptr unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 7
    }, {
      "elem" : 9,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 8
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(unsafe.Pointer, bool)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "func(ptr unsafe.Pointer) github.com/cilium/ebpf.syscallPtr",
      "params" : 13,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 7
      } ],
      "name" : "(ptr unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(github.com/cilium/ebpf.syscallPtr)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 9,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 16
    } ],
    "variables" : [ {
      "name" : "dst",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "length",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}