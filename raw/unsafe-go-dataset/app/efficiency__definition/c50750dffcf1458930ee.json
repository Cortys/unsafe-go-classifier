{
  "usage" : {
    "file" : "tensor.go",
    "label1" : "definition",
    "label2" : "efficiency",
    "line" : "68",
    "module" : "gorgonia.org/tensor",
    "pkg" : "gorgonia.org/tensor",
    "project" : "gorgonia/gorgonia",
    "snippet" : "Pointer() unsafe.Pointer    // the pointer to the first elemment as a unsafe.Ponter",
    "version" : "v0.9.6"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 27,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "binds" : [ {
            "name" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "Tensor"
            },
            "value" : {
              "go-type" : 1,
              "incomplete" : false,
              "kind" : "type",
              "methods" : [ {
                "declared-type" : {
                  "go-type" : 193,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 177,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 177,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "Shape"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "Shape"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 206,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "element" : {
                        "go-type" : 20,
                        "kind" : "type",
                        "type" : "identifier",
                        "value" : {
                          "go-type" : 20,
                          "ident-kind" : "TypeName",
                          "kind" : "ident",
                          "value" : "int"
                        }
                      },
                      "go-type" : 38,
                      "kind" : "type",
                      "type" : "slice"
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "Strides"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 105,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 13,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 13,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "Dtype"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "Dtype"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 104,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 20,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 20,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "int"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "Dims"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 104,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 20,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 20,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "int"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "Size"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 104,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 20,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 20,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "int"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "DataSize"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 161,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 12,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 12,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "bool"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "RequiresIterator"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 162,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 164,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 164,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "Iterator"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "Iterator"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 101,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 103,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 103,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "DataOrder"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "DataOrder"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 312,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 312,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Slicer"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 91,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 4,
                      "incomplete" : false,
                      "kind" : "type",
                      "methods" : [ ],
                      "type" : "interface"
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  }, {
                    "declared-type" : {
                      "go-type" : 88,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 88,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "error"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : {
                    "declared-type" : {
                      "go-type" : 38,
                      "kind" : "type",
                      "type" : "ellipsis",
                      "value" : {
                        "go-type" : 20,
                        "kind" : "type",
                        "type" : "identifier",
                        "value" : {
                          "go-type" : 20,
                          "ident-kind" : "TypeName",
                          "kind" : "ident",
                          "value" : "int"
                        }
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "At"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 191,
                  "kind" : "type",
                  "params" : [ {
                    "declared-type" : {
                      "go-type" : 4,
                      "incomplete" : false,
                      "kind" : "type",
                      "methods" : [ ],
                      "type" : "interface"
                    },
                    "kind" : "field",
                    "names" : [ {
                      "ident-kind" : "NoKind",
                      "kind" : "ident",
                      "value" : "v"
                    } ],
                    "tag" : null
                  } ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 88,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 88,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "error"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : {
                    "declared-type" : {
                      "go-type" : 38,
                      "kind" : "type",
                      "type" : "ellipsis",
                      "value" : {
                        "go-type" : 20,
                        "kind" : "type",
                        "type" : "identifier",
                        "value" : {
                          "go-type" : 20,
                          "ident-kind" : "TypeName",
                          "kind" : "ident",
                          "value" : "int"
                        }
                      }
                    },
                    "kind" : "field",
                    "names" : [ {
                      "ident-kind" : "NoKind",
                      "kind" : "ident",
                      "value" : "coord"
                    } ],
                    "tag" : null
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "SetAt"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 189,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 88,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 88,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "error"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : {
                    "declared-type" : {
                      "go-type" : 38,
                      "kind" : "type",
                      "type" : "ellipsis",
                      "value" : {
                        "go-type" : 20,
                        "kind" : "type",
                        "type" : "identifier",
                        "value" : {
                          "go-type" : 20,
                          "ident-kind" : "TypeName",
                          "kind" : "ident",
                          "value" : "int"
                        }
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "Reshape"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 210,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 88,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 88,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "error"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : {
                    "declared-type" : {
                      "go-type" : 38,
                      "kind" : "type",
                      "type" : "ellipsis",
                      "value" : {
                        "go-type" : 20,
                        "kind" : "type",
                        "type" : "identifier",
                        "value" : {
                          "go-type" : 20,
                          "ident-kind" : "TypeName",
                          "kind" : "ident",
                          "value" : "int"
                        }
                      }
                    },
                    "kind" : "field",
                    "names" : [ {
                      "ident-kind" : "NoKind",
                      "kind" : "ident",
                      "value" : "axes"
                    } ],
                    "tag" : null
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "T"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 213,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : null,
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "UT"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 212,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 88,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 88,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "error"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "Transpose"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 2,
                  "kind" : "type",
                  "params" : [ {
                    "declared-type" : {
                      "go-type" : 4,
                      "incomplete" : false,
                      "kind" : "type",
                      "methods" : [ ],
                      "type" : "interface"
                    },
                    "kind" : "field",
                    "names" : [ {
                      "ident-kind" : "NoKind",
                      "kind" : "ident",
                      "value" : "fn"
                    } ],
                    "tag" : null
                  } ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 0,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 0,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "Tensor"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  }, {
                    "declared-type" : {
                      "go-type" : 88,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 88,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "error"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : {
                    "declared-type" : {
                      "go-type" : 5,
                      "kind" : "type",
                      "type" : "ellipsis",
                      "value" : {
                        "go-type" : 6,
                        "kind" : "type",
                        "type" : "identifier",
                        "value" : {
                          "go-type" : 6,
                          "ident-kind" : "TypeName",
                          "kind" : "ident",
                          "value" : "FuncOpt"
                        }
                      }
                    },
                    "kind" : "field",
                    "names" : [ {
                      "ident-kind" : "NoKind",
                      "kind" : "ident",
                      "value" : "opts"
                    } ],
                    "tag" : null
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "Apply"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 220,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 220,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Zeroer"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 180,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 180,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "MemSetter"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 99,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 99,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Dataer"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 134,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 134,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Eq"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 96,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 96,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Cloner"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 161,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 12,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 12,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "bool"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "IsScalar"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 190,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 4,
                      "incomplete" : false,
                      "kind" : "type",
                      "methods" : [ ],
                      "type" : "interface"
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "ScalarValue"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 107,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 109,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 109,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "Engine"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "Engine"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 178,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 37,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 37,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "uintptr"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "MemSize"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 178,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 37,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 37,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "uintptr"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "Uintptr"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 182,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 67,
                      "kind" : "type",
                      "qualifier" : {
                        "ident-kind" : "PkgName",
                        "kind" : "ident",
                        "package" : 2,
                        "value" : "unsafe"
                      },
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 67,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "Pointer"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "Pointer"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 161,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 12,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 12,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "bool"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "IsNativelyAccessible"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 161,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 12,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 12,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "bool"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "IsManuallyManaged"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 151,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "fmt"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 151,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Formatter"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 208,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "fmt"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 208,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Stringer"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 214,
                  "kind" : "type",
                  "params" : [ {
                    "declared-type" : {
                      "go-type" : 216,
                      "kind" : "type",
                      "qualifier" : {
                        "ident-kind" : "PkgName",
                        "kind" : "ident",
                        "package" : 5,
                        "value" : "io"
                      },
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 216,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "Writer"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 88,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 88,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "error"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "WriteNpy"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 183,
                  "kind" : "type",
                  "params" : [ {
                    "declared-type" : {
                      "go-type" : 185,
                      "kind" : "type",
                      "qualifier" : {
                        "ident-kind" : "PkgName",
                        "kind" : "ident",
                        "package" : 5,
                        "value" : "io"
                      },
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 185,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "Reader"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 88,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 88,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "error"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "ReadNpy"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 159,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 4,
                    "value" : "gob"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 159,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "GobEncoder"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 155,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 4,
                    "value" : "gob"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 155,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "GobDecoder"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 238,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 240,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 240,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "standardEngine"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "standardEngine"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 236,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 236,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "headerer"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 228,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 228,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "arrayer"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              } ],
              "type" : "interface"
            }
          } ],
          "kind" : "decl",
          "type" : "type-alias"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 85,
      "code" : "// Tensor represents a variety of n-dimensional arrays. The most commonly used tensor is the Dense tensor.\n// It can be used to represent a vector, matrix, 3D matrix and n-dimensional tensors.\ntype Tensor interface {\n\t// info about the ndarray\n\tShape() Shape\n\tStrides() []int\n\tDtype() Dtype\n\tDims() int\n\tSize() int\n\tDataSize() int\n\n\t// Data access related\n\tRequiresIterator() bool\n\tIterator() Iterator\n\tDataOrder() DataOrder\n\n\t// ops\n\tSlicer\n\tAt(...int) (interface{}, error)\n\tSetAt(v interface{}, coord ...int) error\n\tReshape(...int) error\n\tT(axes ...int) error\n\tUT()\n\tTranspose() error // Transpose actually moves the data\n\tApply(fn interface{}, opts ...FuncOpt) (Tensor, error)\n\n\t// data related interface\n\tZeroer\n\tMemSetter\n\tDataer\n\tEq\n\tCloner\n\n\t// type overloading methods\n\tIsScalar() bool\n\tScalarValue() interface{}\n\n\t// engine/memory related stuff\n\t// all Tensors should be able to be expressed of as a slab of memory\n\t// Note: the size of each element can be acquired by T.Dtype().Size()\n\tEngine() Engine             // Engine can be nil\n\tMemSize() uintptr           // the size in memory\n\tUintptr() uintptr           // the pointer to the first element, as a uintptr\n\tPointer() unsafe.Pointer    // the pointer to the first elemment as a unsafe.Ponter\n\tIsNativelyAccessible() bool // Can Go access the memory\n\tIsManuallyManaged() bool    // Must Go manage the memory\n\n\t// formatters\n\tfmt.Formatter\n\tfmt.Stringer\n\n\t// all Tensors are serializable to these formats\n\tWriteNpy(io.Writer) error\n\tReadNpy(io.Reader) error\n\tgob.GobEncoder\n\tgob.GobDecoder\n\n\tstandardEngine() standardEngine\n\theaderer\n\tarrayer\n}",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// Tensor represents a variety of n-dimensional arrays. The most commonly used tensor is the Dense tensor.\n// It can be used to represent a vector, matrix, 3D matrix and n-dimensional tensors.\ntype Tensor interface {\n\t// info about the ndarray\n\tShape() Shape\n\tStrides() []int\n\tDtype() Dtype\n\tDims() int\n\tSize() int\n\tDataSize() int\n\n\t// Data access related\n\tRequiresIterator() bool\n\tIterator() Iterator\n\tDataOrder() DataOrder\n\n\t// ops\n\tSlicer\n\tAt() (interface{}, error)\n\tSetAt(v interface{}) error\n\tReshape() error\n\tT() error\n\tUT()\n\tTranspose() error // Transpose actually moves the data\n\tApply(fn interface{}) (Tensor, error)\n\n\t// data related interface\n\tZeroer\n\tMemSetter\n\tDataer\n\tEq\n\tCloner\n\n\t// type overloading methods\n\tIsScalar() bool\n\tScalarValue() interface{}\n\n\t// engine/memory related stuff\n\t// all Tensors should be able to be expressed of as a slab of memory\n\t// Note: the size of each element can be acquired by T.Dtype().Size()\n\tEngine() Engine             // Engine can be nil\n\tMemSize() uintptr           // the size in memory\n\tUintptr() uintptr           // the pointer to the first element, as a uintptr\n\tPointer() unsafe.Pointer    // the pointer to the first elemment as a unsafe.Ponter\n\tIsNativelyAccessible() bool // Can Go access the memory\n\tIsManuallyManaged() bool    // Must Go manage the memory\n\n\t// formatters\n\tfmt.Formatter\n\tfmt.Stringer\n\n\t// all Tensors are serializable to these formats\n\tWriteNpy(io.Writer) error\n\tReadNpy(io.Reader) error\n\tgob.GobEncoder\n\tgob.GobDecoder\n\n\tstandardEngine() standardEngine\n\theaderer\n\tarrayer\n}",
    "defines" : [ 0 ],
    "functions" : [ ],
    "line-end" : 85,
    "line-start" : 27,
    "names" : [ "Tensor" ],
    "package" : 0,
    "packages" : [ {
      "name" : "tensor",
      "path" : "gorgonia.org/tensor"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "fmt",
      "path" : "fmt"
    }, {
      "name" : "gob",
      "path" : "encoding/gob"
    }, {
      "name" : "io",
      "path" : "io"
    }, {
      "name" : "storage",
      "path" : "gorgonia.org/tensor/internal/storage"
    } ],
    "params" : [ ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "type",
    "types" : [ {
      "local-name" : "Tensor",
      "name" : "gorgonia.org/tensor.Tensor",
      "package" : 0,
      "type" : "Named",
      "underlying" : 1
    }, {
      "methods" : [ {
        "name" : "Apply",
        "type" : 2
      }, {
        "name" : "At",
        "type" : 91
      }, {
        "name" : "Clone",
        "type" : 94
      }, {
        "name" : "Data",
        "type" : 98
      }, {
        "name" : "DataOrder",
        "type" : 101
      }, {
        "name" : "DataSize",
        "type" : 104
      }, {
        "name" : "Dims",
        "type" : 104
      }, {
        "name" : "Dtype",
        "type" : 105
      }, {
        "name" : "Engine",
        "type" : 107
      }, {
        "name" : "Eq",
        "type" : 133
      }, {
        "name" : "Format",
        "type" : 136
      }, {
        "name" : "GobDecode",
        "type" : 153
      }, {
        "name" : "GobEncode",
        "type" : 157
      }, {
        "name" : "IsManuallyManaged",
        "type" : 161
      }, {
        "name" : "IsNativelyAccessible",
        "type" : 161
      }, {
        "name" : "IsScalar",
        "type" : 161
      }, {
        "name" : "Iterator",
        "type" : 162
      }, {
        "name" : "MemSize",
        "type" : 178
      }, {
        "name" : "Memset",
        "type" : 179
      }, {
        "name" : "Pointer",
        "type" : 182
      }, {
        "name" : "ReadNpy",
        "type" : 183
      }, {
        "name" : "RequiresIterator",
        "type" : 161
      }, {
        "name" : "Reshape",
        "type" : 189
      }, {
        "name" : "ScalarValue",
        "type" : 190
      }, {
        "name" : "SetAt",
        "type" : 191
      }, {
        "name" : "Shape",
        "type" : 193
      }, {
        "name" : "Size",
        "type" : 104
      }, {
        "name" : "Slice",
        "type" : 194
      }, {
        "name" : "Strides",
        "type" : 206
      }, {
        "name" : "String",
        "type" : 207
      }, {
        "name" : "T",
        "type" : 210
      }, {
        "name" : "Transpose",
        "type" : 212
      }, {
        "name" : "UT",
        "type" : 213
      }, {
        "name" : "Uintptr",
        "type" : 178
      }, {
        "name" : "WriteNpy",
        "type" : 214
      }, {
        "name" : "Zero",
        "type" : 219
      }, {
        "name" : "arr",
        "type" : 222
      }, {
        "name" : "arrPtr",
        "type" : 230
      }, {
        "name" : "hdr",
        "type" : 233
      }, {
        "name" : "standardEngine",
        "type" : 238
      } ],
      "name" : "interface{Apply(fn interface{}, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); At(...int) (interface{}, error); DataOrder() gorgonia.org/tensor.DataOrder; DataSize() int; Dims() int; Dtype() gorgonia.org/tensor.Dtype; Engine() gorgonia.org/tensor.Engine; IsManuallyManaged() bool; IsNativelyAccessible() bool; IsScalar() bool; Iterator() gorgonia.org/tensor.Iterator; MemSize() uintptr; Pointer() unsafe.Pointer; ReadNpy(io.Reader) error; RequiresIterator() bool; Reshape(...int) error; ScalarValue() interface{}; SetAt(v interface{}, coord ...int) error; Shape() gorgonia.org/tensor.Shape; Size() int; Strides() []int; T(axes ...int) error; Transpose() error; UT(); Uintptr() uintptr; WriteNpy(io.Writer) error; standardEngine() gorgonia.org/tensor.standardEngine; gorgonia.org/tensor.Cloner; gorgonia.org/tensor.Dataer; gorgonia.org/tensor.Eq; fmt.Formatter; encoding/gob.GobDecoder; encoding/gob.GobEncoder; gorgonia.org/tensor.MemSetter; gorgonia.org/tensor.Slicer; fmt.Stringer; gorgonia.org/tensor.Zeroer; gorgonia.org/tensor.arrayer; gorgonia.org/tensor.headerer}",
      "type" : "Interface",
      "underlying" : 1
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func(fn interface{}, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 3,
      "recv" : 18,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 2,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 4
      }, {
        "name" : "opts",
        "type" : 5
      } ],
      "name" : "(fn interface{}, opts []gorgonia.org/tensor.FuncOpt)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "[]gorgonia.org/tensor.FuncOpt",
      "type" : "Slice",
      "underlying" : 5
    }, {
      "local-name" : "FuncOpt",
      "name" : "gorgonia.org/tensor.FuncOpt",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "name" : "func(*gorgonia.org/tensor.OpOpt)",
      "params" : 8,
      "recv" : -1,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 7,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(*gorgonia.org/tensor.OpOpt)",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "elem" : 10,
      "name" : "*gorgonia.org/tensor.OpOpt",
      "type" : "Pointer",
      "underlying" : 9
    }, {
      "local-name" : "OpOpt",
      "name" : "gorgonia.org/tensor.OpOpt",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "reuse",
        "type" : 0
      }, {
        "name" : "incr",
        "type" : 0
      }, {
        "name" : "unsafe",
        "type" : 12
      }, {
        "name" : "same",
        "type" : 12
      }, {
        "name" : "t",
        "type" : 13
      } ],
      "name" : "struct{reuse gorgonia.org/tensor.Tensor; incr gorgonia.org/tensor.Tensor; unsafe bool; same bool; t gorgonia.org/tensor.Dtype}",
      "type" : "Struct",
      "underlying" : 11
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "local-name" : "Dtype",
      "name" : "gorgonia.org/tensor.Dtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "Type",
        "type" : 15
      } ],
      "name" : "struct{reflect.Type}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 1,
      "type" : "Named",
      "underlying" : 16
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 17
      }, {
        "name" : "AssignableTo",
        "type" : 21
      }, {
        "name" : "Bits",
        "type" : 17
      }, {
        "name" : "ChanDir",
        "type" : 24
      }, {
        "name" : "Comparable",
        "type" : 27
      }, {
        "name" : "ConvertibleTo",
        "type" : 21
      }, {
        "name" : "Elem",
        "type" : 28
      }, {
        "name" : "Field",
        "type" : 30
      }, {
        "name" : "FieldAlign",
        "type" : 17
      }, {
        "name" : "FieldByIndex",
        "type" : 39
      }, {
        "name" : "FieldByName",
        "type" : 41
      }, {
        "name" : "FieldByNameFunc",
        "type" : 44
      }, {
        "name" : "Implements",
        "type" : 21
      }, {
        "name" : "In",
        "type" : 48
      }, {
        "name" : "IsVariadic",
        "type" : 27
      }, {
        "name" : "Key",
        "type" : 28
      }, {
        "name" : "Kind",
        "type" : 49
      }, {
        "name" : "Len",
        "type" : 17
      }, {
        "name" : "Method",
        "type" : 53
      }, {
        "name" : "MethodByName",
        "type" : 74
      }, {
        "name" : "Name",
        "type" : 76
      }, {
        "name" : "NumField",
        "type" : 17
      }, {
        "name" : "NumIn",
        "type" : 17
      }, {
        "name" : "NumMethod",
        "type" : 17
      }, {
        "name" : "NumOut",
        "type" : 17
      }, {
        "name" : "Out",
        "type" : 48
      }, {
        "name" : "PkgPath",
        "type" : 76
      }, {
        "name" : "Size",
        "type" : 77
      }, {
        "name" : "String",
        "type" : 76
      }, {
        "name" : "common",
        "type" : 79
      }, {
        "name" : "uncommon",
        "type" : 81
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 16
    }, {
      "name" : "(reflect.Type) func() int",
      "params" : 18,
      "recv" : 0,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 17,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 20
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "(reflect.Type) func(u reflect.Type) bool",
      "params" : 22,
      "recv" : 1,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 15
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 12
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "name" : "(reflect.Type) func() reflect.ChanDir",
      "params" : 18,
      "recv" : 2,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 1,
      "type" : "Named",
      "underlying" : 20
    }, {
      "name" : "(reflect.Type) func() bool",
      "params" : 18,
      "recv" : 3,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() reflect.Type",
      "params" : 18,
      "recv" : 4,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 28,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "name" : "(reflect.Type) func(i int) reflect.StructField",
      "params" : 31,
      "recv" : 5,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 20
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 33
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 32
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 1,
      "type" : "Named",
      "underlying" : 34
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 35
      }, {
        "name" : "PkgPath",
        "type" : 35
      }, {
        "name" : "Type",
        "type" : 15
      }, {
        "name" : "Tag",
        "type" : 36
      }, {
        "name" : "Offset",
        "type" : 37
      }, {
        "name" : "Index",
        "type" : 38
      }, {
        "name" : "Anonymous",
        "type" : 12
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 34
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 35
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 35
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 37
    }, {
      "elem" : 20,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 38
    }, {
      "name" : "(reflect.Type) func(index []int) reflect.StructField",
      "params" : 40,
      "recv" : 6,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 39,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 38
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 40
    }, {
      "name" : "(reflect.Type) func(name string) (reflect.StructField, bool)",
      "params" : 42,
      "recv" : 7,
      "results" : 43,
      "type" : "Signature",
      "underlying" : 41,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 35
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 33
      }, {
        "name" : "",
        "type" : 12
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 43
    }, {
      "name" : "(reflect.Type) func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 45,
      "recv" : 8,
      "results" : 43,
      "type" : "Signature",
      "underlying" : 44,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 46
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 45
    }, {
      "name" : "func(string) bool",
      "params" : 47,
      "recv" : -1,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 35
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 47
    }, {
      "name" : "(reflect.Type) func(i int) reflect.Type",
      "params" : 31,
      "recv" : 9,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 48,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() reflect.Kind",
      "params" : 18,
      "recv" : 10,
      "results" : 50,
      "type" : "Signature",
      "underlying" : 49,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 51
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 1,
      "type" : "Named",
      "underlying" : 52
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 52
    }, {
      "name" : "(reflect.Type) func(int) reflect.Method",
      "params" : 19,
      "recv" : 11,
      "results" : 54,
      "type" : "Signature",
      "underlying" : 53,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 55
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 54
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 1,
      "type" : "Named",
      "underlying" : 56
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 35
      }, {
        "name" : "PkgPath",
        "type" : 35
      }, {
        "name" : "Type",
        "type" : 15
      }, {
        "name" : "Func",
        "type" : 57
      }, {
        "name" : "Index",
        "type" : 20
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 56
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 1,
      "type" : "Named",
      "underlying" : 58
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 59
      }, {
        "name" : "ptr",
        "type" : 67
      }, {
        "name" : "flag",
        "type" : 73
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 58
    }, {
      "elem" : 60,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 59
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 1,
      "type" : "Named",
      "underlying" : 61
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 37
      }, {
        "name" : "ptrdata",
        "type" : 37
      }, {
        "name" : "hash",
        "type" : 62
      }, {
        "name" : "tflag",
        "type" : 63
      }, {
        "name" : "align",
        "type" : 64
      }, {
        "name" : "fieldAlign",
        "type" : 64
      }, {
        "name" : "kind",
        "type" : 64
      }, {
        "name" : "equal",
        "type" : 65
      }, {
        "name" : "gcdata",
        "type" : 68
      }, {
        "name" : "str",
        "type" : 70
      }, {
        "name" : "ptrToThis",
        "type" : 72
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 61
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 62
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 64
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 64
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 66,
      "recv" : -1,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 65,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 67
      }, {
        "name" : "",
        "type" : 67
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 66
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 67
    }, {
      "elem" : 69,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 68
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 69
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 71
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 71
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 71
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 37
    }, {
      "name" : "(reflect.Type) func(string) (reflect.Method, bool)",
      "params" : 47,
      "recv" : 12,
      "results" : 75,
      "type" : "Signature",
      "underlying" : 74,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 55
      }, {
        "name" : "",
        "type" : 12
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 75
    }, {
      "name" : "(reflect.Type) func() string",
      "params" : 18,
      "recv" : 13,
      "results" : 47,
      "type" : "Signature",
      "underlying" : 76,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() uintptr",
      "params" : 18,
      "recv" : 14,
      "results" : 78,
      "type" : "Signature",
      "underlying" : 77,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 37
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 78
    }, {
      "name" : "(reflect.Type) func() *reflect.rtype",
      "params" : 18,
      "recv" : 15,
      "results" : 80,
      "type" : "Signature",
      "underlying" : 79,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 59
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 80
    }, {
      "name" : "(reflect.Type) func() *reflect.uncommonType",
      "params" : 18,
      "recv" : 16,
      "results" : 82,
      "type" : "Signature",
      "underlying" : 81,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 83
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 82
    }, {
      "elem" : 84,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 83
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 1,
      "type" : "Named",
      "underlying" : 85
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 70
      }, {
        "name" : "mcount",
        "type" : 86
      }, {
        "name" : "xcount",
        "type" : 86
      }, {
        "name" : "moff",
        "type" : 62
      }, {
        "name" : "_",
        "type" : 62
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 85
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 86
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 0
      }, {
        "name" : "",
        "type" : 88
      } ],
      "name" : "(gorgonia.org/tensor.Tensor, error)",
      "type" : "Tuple",
      "underlying" : 87
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 89
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 90
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 89
    }, {
      "name" : "(error) func() string",
      "params" : 18,
      "recv" : 17,
      "results" : 47,
      "type" : "Signature",
      "underlying" : 90,
      "variadic" : false
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func(...int) (interface{}, error)",
      "params" : 92,
      "recv" : 19,
      "results" : 93,
      "type" : "Signature",
      "underlying" : 91,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 38
      } ],
      "name" : "([]int)",
      "type" : "Tuple",
      "underlying" : 92
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      }, {
        "name" : "",
        "type" : 88
      } ],
      "name" : "(interface{}, error)",
      "type" : "Tuple",
      "underlying" : 93
    }, {
      "name" : "(gorgonia.org/tensor.Cloner) func() interface{}",
      "params" : 18,
      "recv" : 20,
      "results" : 95,
      "type" : "Signature",
      "underlying" : 94,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 95
    }, {
      "local-name" : "Cloner",
      "name" : "gorgonia.org/tensor.Cloner",
      "package" : 0,
      "type" : "Named",
      "underlying" : 97
    }, {
      "methods" : [ {
        "name" : "Clone",
        "type" : 94
      } ],
      "name" : "interface{Clone() interface{}}",
      "type" : "Interface",
      "underlying" : 97
    }, {
      "name" : "(gorgonia.org/tensor.Dataer) func() interface{}",
      "params" : 18,
      "recv" : 21,
      "results" : 95,
      "type" : "Signature",
      "underlying" : 98,
      "variadic" : false
    }, {
      "local-name" : "Dataer",
      "name" : "gorgonia.org/tensor.Dataer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 100
    }, {
      "methods" : [ {
        "name" : "Data",
        "type" : 98
      } ],
      "name" : "interface{Data() interface{}}",
      "type" : "Interface",
      "underlying" : 100
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func() gorgonia.org/tensor.DataOrder",
      "params" : 18,
      "recv" : 22,
      "results" : 102,
      "type" : "Signature",
      "underlying" : 101,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 103
      } ],
      "name" : "(gorgonia.org/tensor.DataOrder)",
      "type" : "Tuple",
      "underlying" : 102
    }, {
      "local-name" : "DataOrder",
      "name" : "gorgonia.org/tensor.DataOrder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 69
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func() int",
      "params" : 18,
      "recv" : 23,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 104,
      "variadic" : false
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func() gorgonia.org/tensor.Dtype",
      "params" : 18,
      "recv" : 24,
      "results" : 106,
      "type" : "Signature",
      "underlying" : 105,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(gorgonia.org/tensor.Dtype)",
      "type" : "Tuple",
      "underlying" : 106
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func() gorgonia.org/tensor.Engine",
      "params" : 18,
      "recv" : 35,
      "results" : 108,
      "type" : "Signature",
      "underlying" : 107,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 109
      } ],
      "name" : "(gorgonia.org/tensor.Engine)",
      "type" : "Tuple",
      "underlying" : 108
    }, {
      "local-name" : "Engine",
      "name" : "gorgonia.org/tensor.Engine",
      "package" : 0,
      "type" : "Named",
      "underlying" : 110
    }, {
      "methods" : [ {
        "name" : "Accessible",
        "type" : 111
      }, {
        "name" : "Alloc",
        "type" : 119
      }, {
        "name" : "AllocAccessible",
        "type" : 122
      }, {
        "name" : "Free",
        "type" : 123
      }, {
        "name" : "Memclr",
        "type" : 126
      }, {
        "name" : "Memcpy",
        "type" : 127
      }, {
        "name" : "Memset",
        "type" : 129
      }, {
        "name" : "WorksWith",
        "type" : 131
      } ],
      "name" : "interface{Accessible(mem gorgonia.org/tensor.Memory) (gorgonia.org/tensor.Memory, error); Alloc(size int64) (gorgonia.org/tensor.Memory, error); AllocAccessible() bool; Free(mem gorgonia.org/tensor.Memory, size int64) error; Memclr(mem gorgonia.org/tensor.Memory); Memcpy(dst gorgonia.org/tensor.Memory, src gorgonia.org/tensor.Memory) error; Memset(mem gorgonia.org/tensor.Memory, val interface{}) error; WorksWith(order gorgonia.org/tensor.DataOrder) bool}",
      "type" : "Interface",
      "underlying" : 110
    }, {
      "name" : "(gorgonia.org/tensor.Engine) func(mem gorgonia.org/tensor.Memory) (gorgonia.org/tensor.Memory, error)",
      "params" : 112,
      "recv" : 27,
      "results" : 118,
      "type" : "Signature",
      "underlying" : 111,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "mem",
        "type" : 113
      } ],
      "name" : "(mem gorgonia.org/tensor.Memory)",
      "type" : "Tuple",
      "underlying" : 112
    }, {
      "local-name" : "Memory",
      "name" : "gorgonia.org/tensor.Memory",
      "package" : 0,
      "type" : "Named",
      "underlying" : 114
    }, {
      "methods" : [ {
        "name" : "MemSize",
        "type" : 115
      }, {
        "name" : "Pointer",
        "type" : 116
      }, {
        "name" : "Uintptr",
        "type" : 115
      } ],
      "name" : "interface{MemSize() uintptr; Pointer() unsafe.Pointer; Uintptr() uintptr}",
      "type" : "Interface",
      "underlying" : 114
    }, {
      "name" : "(gorgonia.org/tensor.Memory) func() uintptr",
      "params" : 18,
      "recv" : 25,
      "results" : 78,
      "type" : "Signature",
      "underlying" : 115,
      "variadic" : false
    }, {
      "name" : "(gorgonia.org/tensor.Memory) func() unsafe.Pointer",
      "params" : 18,
      "recv" : 26,
      "results" : 117,
      "type" : "Signature",
      "underlying" : 116,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 67
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 117
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 113
      }, {
        "name" : "",
        "type" : 88
      } ],
      "name" : "(gorgonia.org/tensor.Memory, error)",
      "type" : "Tuple",
      "underlying" : 118
    }, {
      "name" : "(gorgonia.org/tensor.Engine) func(size int64) (gorgonia.org/tensor.Memory, error)",
      "params" : 120,
      "recv" : 28,
      "results" : 118,
      "type" : "Signature",
      "underlying" : 119,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 121
      } ],
      "name" : "(size int64)",
      "type" : "Tuple",
      "underlying" : 120
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 121
    }, {
      "name" : "(gorgonia.org/tensor.Engine) func() bool",
      "params" : 18,
      "recv" : 29,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 122,
      "variadic" : false
    }, {
      "name" : "(gorgonia.org/tensor.Engine) func(mem gorgonia.org/tensor.Memory, size int64) error",
      "params" : 124,
      "recv" : 30,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 123,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "mem",
        "type" : 113
      }, {
        "name" : "size",
        "type" : 121
      } ],
      "name" : "(mem gorgonia.org/tensor.Memory, size int64)",
      "type" : "Tuple",
      "underlying" : 124
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 88
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 125
    }, {
      "name" : "(gorgonia.org/tensor.Engine) func(mem gorgonia.org/tensor.Memory)",
      "params" : 112,
      "recv" : 31,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 126,
      "variadic" : false
    }, {
      "name" : "(gorgonia.org/tensor.Engine) func(dst gorgonia.org/tensor.Memory, src gorgonia.org/tensor.Memory) error",
      "params" : 128,
      "recv" : 32,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 127,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dst",
        "type" : 113
      }, {
        "name" : "src",
        "type" : 113
      } ],
      "name" : "(dst gorgonia.org/tensor.Memory, src gorgonia.org/tensor.Memory)",
      "type" : "Tuple",
      "underlying" : 128
    }, {
      "name" : "(gorgonia.org/tensor.Engine) func(mem gorgonia.org/tensor.Memory, val interface{}) error",
      "params" : 130,
      "recv" : 33,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 129,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "mem",
        "type" : 113
      }, {
        "name" : "val",
        "type" : 4
      } ],
      "name" : "(mem gorgonia.org/tensor.Memory, val interface{})",
      "type" : "Tuple",
      "underlying" : 130
    }, {
      "name" : "(gorgonia.org/tensor.Engine) func(order gorgonia.org/tensor.DataOrder) bool",
      "params" : 132,
      "recv" : 34,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 131,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "order",
        "type" : 103
      } ],
      "name" : "(order gorgonia.org/tensor.DataOrder)",
      "type" : "Tuple",
      "underlying" : 132
    }, {
      "name" : "(gorgonia.org/tensor.Eq) func(interface{}) bool",
      "params" : 95,
      "recv" : 36,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 133,
      "variadic" : false
    }, {
      "local-name" : "Eq",
      "name" : "gorgonia.org/tensor.Eq",
      "package" : 0,
      "type" : "Named",
      "underlying" : 135
    }, {
      "methods" : [ {
        "name" : "Eq",
        "type" : 133
      } ],
      "name" : "interface{Eq(interface{}) bool}",
      "type" : "Interface",
      "underlying" : 135
    }, {
      "name" : "(fmt.Formatter) func(f fmt.State, c rune)",
      "params" : 137,
      "recv" : 41,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 136,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 138
      }, {
        "name" : "c",
        "type" : 150
      } ],
      "name" : "(f fmt.State, c rune)",
      "type" : "Tuple",
      "underlying" : 137
    }, {
      "local-name" : "State",
      "name" : "fmt.State",
      "package" : 3,
      "type" : "Named",
      "underlying" : 139
    }, {
      "methods" : [ {
        "name" : "Flag",
        "type" : 140
      }, {
        "name" : "Precision",
        "type" : 142
      }, {
        "name" : "Width",
        "type" : 144
      }, {
        "name" : "Write",
        "type" : 146
      } ],
      "name" : "interface{Flag(c int) bool; Precision() (prec int, ok bool); Width() (wid int, ok bool); Write(b []byte) (n int, err error)}",
      "type" : "Interface",
      "underlying" : 139
    }, {
      "name" : "(fmt.State) func(c int) bool",
      "params" : 141,
      "recv" : 37,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 140,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "c",
        "type" : 20
      } ],
      "name" : "(c int)",
      "type" : "Tuple",
      "underlying" : 141
    }, {
      "name" : "(fmt.State) func() (prec int, ok bool)",
      "params" : 18,
      "recv" : 38,
      "results" : 143,
      "type" : "Signature",
      "underlying" : 142,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "prec",
        "type" : 20
      }, {
        "name" : "ok",
        "type" : 12
      } ],
      "name" : "(prec int, ok bool)",
      "type" : "Tuple",
      "underlying" : 143
    }, {
      "name" : "(fmt.State) func() (wid int, ok bool)",
      "params" : 18,
      "recv" : 39,
      "results" : 145,
      "type" : "Signature",
      "underlying" : 144,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "wid",
        "type" : 20
      }, {
        "name" : "ok",
        "type" : 12
      } ],
      "name" : "(wid int, ok bool)",
      "type" : "Tuple",
      "underlying" : 145
    }, {
      "name" : "(fmt.State) func(b []byte) (n int, err error)",
      "params" : 147,
      "recv" : 40,
      "results" : 149,
      "type" : "Signature",
      "underlying" : 146,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 148
      } ],
      "name" : "(b []byte)",
      "type" : "Tuple",
      "underlying" : 147
    }, {
      "elem" : 69,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 148
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 20
      }, {
        "name" : "err",
        "type" : 88
      } ],
      "name" : "(n int, err error)",
      "type" : "Tuple",
      "underlying" : 149
    }, {
      "name" : "rune",
      "type" : "Basic",
      "underlying" : 150
    }, {
      "local-name" : "Formatter",
      "name" : "fmt.Formatter",
      "package" : 3,
      "type" : "Named",
      "underlying" : 152
    }, {
      "methods" : [ {
        "name" : "Format",
        "type" : 136
      } ],
      "name" : "interface{Format(f fmt.State, c rune)}",
      "type" : "Interface",
      "underlying" : 152
    }, {
      "name" : "(encoding/gob.GobDecoder) func([]byte) error",
      "params" : 154,
      "recv" : 42,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 153,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 148
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 154
    }, {
      "local-name" : "GobDecoder",
      "name" : "encoding/gob.GobDecoder",
      "package" : 4,
      "type" : "Named",
      "underlying" : 156
    }, {
      "methods" : [ {
        "name" : "GobDecode",
        "type" : 153
      } ],
      "name" : "interface{GobDecode([]byte) error}",
      "type" : "Interface",
      "underlying" : 156
    }, {
      "name" : "(encoding/gob.GobEncoder) func() ([]byte, error)",
      "params" : 18,
      "recv" : 43,
      "results" : 158,
      "type" : "Signature",
      "underlying" : 157,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 148
      }, {
        "name" : "",
        "type" : 88
      } ],
      "name" : "([]byte, error)",
      "type" : "Tuple",
      "underlying" : 158
    }, {
      "local-name" : "GobEncoder",
      "name" : "encoding/gob.GobEncoder",
      "package" : 4,
      "type" : "Named",
      "underlying" : 160
    }, {
      "methods" : [ {
        "name" : "GobEncode",
        "type" : 157
      } ],
      "name" : "interface{GobEncode() ([]byte, error)}",
      "type" : "Interface",
      "underlying" : 160
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func() bool",
      "params" : 18,
      "recv" : 44,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 161,
      "variadic" : false
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func() gorgonia.org/tensor.Iterator",
      "params" : 18,
      "recv" : 52,
      "results" : 163,
      "type" : "Signature",
      "underlying" : 162,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 164
      } ],
      "name" : "(gorgonia.org/tensor.Iterator)",
      "type" : "Tuple",
      "underlying" : 163
    }, {
      "local-name" : "Iterator",
      "name" : "gorgonia.org/tensor.Iterator",
      "package" : 0,
      "type" : "Named",
      "underlying" : 165
    }, {
      "methods" : [ {
        "name" : "Coord",
        "type" : 166
      }, {
        "name" : "Done",
        "type" : 167
      }, {
        "name" : "Next",
        "type" : 168
      }, {
        "name" : "NextInvalid",
        "type" : 170
      }, {
        "name" : "NextValid",
        "type" : 170
      }, {
        "name" : "NextValidity",
        "type" : 172
      }, {
        "name" : "Reset",
        "type" : 174
      }, {
        "name" : "SetForward",
        "type" : 174
      }, {
        "name" : "SetReverse",
        "type" : 174
      }, {
        "name" : "Shape",
        "type" : 175
      }, {
        "name" : "Start",
        "type" : 168
      } ],
      "name" : "interface{Coord() []int; Done() bool; Next() (int, error); NextInvalid() (int, int, error); NextValid() (int, int, error); NextValidity() (int, bool, error); Reset(); SetForward(); SetReverse(); Shape() gorgonia.org/tensor.Shape; Start() (int, error)}",
      "type" : "Interface",
      "underlying" : 165
    }, {
      "name" : "(gorgonia.org/tensor.Iterator) func() []int",
      "params" : 18,
      "recv" : 45,
      "results" : 92,
      "type" : "Signature",
      "underlying" : 166,
      "variadic" : false
    }, {
      "name" : "(gorgonia.org/tensor.Iterator) func() bool",
      "params" : 18,
      "recv" : 46,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 167,
      "variadic" : false
    }, {
      "name" : "(gorgonia.org/tensor.Iterator) func() (int, error)",
      "params" : 18,
      "recv" : 47,
      "results" : 169,
      "type" : "Signature",
      "underlying" : 168,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 20
      }, {
        "name" : "",
        "type" : 88
      } ],
      "name" : "(int, error)",
      "type" : "Tuple",
      "underlying" : 169
    }, {
      "name" : "(gorgonia.org/tensor.Iterator) func() (int, int, error)",
      "params" : 18,
      "recv" : 48,
      "results" : 171,
      "type" : "Signature",
      "underlying" : 170,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 20
      }, {
        "name" : "",
        "type" : 20
      }, {
        "name" : "",
        "type" : 88
      } ],
      "name" : "(int, int, error)",
      "type" : "Tuple",
      "underlying" : 171
    }, {
      "name" : "(gorgonia.org/tensor.Iterator) func() (int, bool, error)",
      "params" : 18,
      "recv" : 49,
      "results" : 173,
      "type" : "Signature",
      "underlying" : 172,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 20
      }, {
        "name" : "",
        "type" : 12
      }, {
        "name" : "",
        "type" : 88
      } ],
      "name" : "(int, bool, error)",
      "type" : "Tuple",
      "underlying" : 173
    }, {
      "name" : "(gorgonia.org/tensor.Iterator) func()",
      "params" : 18,
      "recv" : 50,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 174,
      "variadic" : false
    }, {
      "name" : "(gorgonia.org/tensor.Iterator) func() gorgonia.org/tensor.Shape",
      "params" : 18,
      "recv" : 51,
      "results" : 176,
      "type" : "Signature",
      "underlying" : 175,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 177
      } ],
      "name" : "(gorgonia.org/tensor.Shape)",
      "type" : "Tuple",
      "underlying" : 176
    }, {
      "local-name" : "Shape",
      "name" : "gorgonia.org/tensor.Shape",
      "package" : 0,
      "type" : "Named",
      "underlying" : 38
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func() uintptr",
      "params" : 18,
      "recv" : 53,
      "results" : 78,
      "type" : "Signature",
      "underlying" : 178,
      "variadic" : false
    }, {
      "name" : "(gorgonia.org/tensor.MemSetter) func(interface{}) error",
      "params" : 95,
      "recv" : 54,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 179,
      "variadic" : false
    }, {
      "local-name" : "MemSetter",
      "name" : "gorgonia.org/tensor.MemSetter",
      "package" : 0,
      "type" : "Named",
      "underlying" : 181
    }, {
      "methods" : [ {
        "name" : "Memset",
        "type" : 179
      } ],
      "name" : "interface{Memset(interface{}) error}",
      "type" : "Interface",
      "underlying" : 181
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func() unsafe.Pointer",
      "params" : 18,
      "recv" : 55,
      "results" : 117,
      "type" : "Signature",
      "underlying" : 182,
      "variadic" : false
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func(io.Reader) error",
      "params" : 184,
      "recv" : 57,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 183,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 185
      } ],
      "name" : "(io.Reader)",
      "type" : "Tuple",
      "underlying" : 184
    }, {
      "local-name" : "Reader",
      "name" : "io.Reader",
      "package" : 5,
      "type" : "Named",
      "underlying" : 186
    }, {
      "methods" : [ {
        "name" : "Read",
        "type" : 187
      } ],
      "name" : "interface{Read(p []byte) (n int, err error)}",
      "type" : "Interface",
      "underlying" : 186
    }, {
      "name" : "(io.Reader) func(p []byte) (n int, err error)",
      "params" : 188,
      "recv" : 56,
      "results" : 149,
      "type" : "Signature",
      "underlying" : 187,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 148
      } ],
      "name" : "(p []byte)",
      "type" : "Tuple",
      "underlying" : 188
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func(...int) error",
      "params" : 92,
      "recv" : 58,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 189,
      "variadic" : true
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func() interface{}",
      "params" : 18,
      "recv" : 59,
      "results" : 95,
      "type" : "Signature",
      "underlying" : 190,
      "variadic" : false
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func(v interface{}, coord ...int) error",
      "params" : 192,
      "recv" : 60,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 191,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 4
      }, {
        "name" : "coord",
        "type" : 38
      } ],
      "name" : "(v interface{}, coord []int)",
      "type" : "Tuple",
      "underlying" : 192
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func() gorgonia.org/tensor.Shape",
      "params" : 18,
      "recv" : 61,
      "results" : 176,
      "type" : "Signature",
      "underlying" : 193,
      "variadic" : false
    }, {
      "name" : "(gorgonia.org/tensor.Slicer) func(...gorgonia.org/tensor.Slice) (gorgonia.org/tensor.View, error)",
      "params" : 195,
      "recv" : 106,
      "results" : 200,
      "type" : "Signature",
      "underlying" : 194,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 196
      } ],
      "name" : "([]gorgonia.org/tensor.Slice)",
      "type" : "Tuple",
      "underlying" : 195
    }, {
      "elem" : 197,
      "name" : "[]gorgonia.org/tensor.Slice",
      "type" : "Slice",
      "underlying" : 196
    }, {
      "local-name" : "Slice",
      "name" : "gorgonia.org/tensor.Slice",
      "package" : 0,
      "type" : "Named",
      "underlying" : 198
    }, {
      "methods" : [ {
        "name" : "End",
        "type" : 199
      }, {
        "name" : "Start",
        "type" : 199
      }, {
        "name" : "Step",
        "type" : 199
      } ],
      "name" : "interface{End() int; Start() int; Step() int}",
      "type" : "Interface",
      "underlying" : 198
    }, {
      "name" : "(gorgonia.org/tensor.Slice) func() int",
      "params" : 18,
      "recv" : 62,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 199,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 201
      }, {
        "name" : "",
        "type" : 88
      } ],
      "name" : "(gorgonia.org/tensor.View, error)",
      "type" : "Tuple",
      "underlying" : 200
    }, {
      "local-name" : "View",
      "name" : "gorgonia.org/tensor.View",
      "package" : 0,
      "type" : "Named",
      "underlying" : 202
    }, {
      "methods" : [ {
        "name" : "Apply",
        "type" : 2
      }, {
        "name" : "At",
        "type" : 91
      }, {
        "name" : "Clone",
        "type" : 94
      }, {
        "name" : "Data",
        "type" : 98
      }, {
        "name" : "DataOrder",
        "type" : 101
      }, {
        "name" : "DataSize",
        "type" : 104
      }, {
        "name" : "Dims",
        "type" : 104
      }, {
        "name" : "Dtype",
        "type" : 105
      }, {
        "name" : "Engine",
        "type" : 107
      }, {
        "name" : "Eq",
        "type" : 133
      }, {
        "name" : "Format",
        "type" : 136
      }, {
        "name" : "GobDecode",
        "type" : 153
      }, {
        "name" : "GobEncode",
        "type" : 157
      }, {
        "name" : "IsManuallyManaged",
        "type" : 161
      }, {
        "name" : "IsMaterializable",
        "type" : 203
      }, {
        "name" : "IsNativelyAccessible",
        "type" : 161
      }, {
        "name" : "IsScalar",
        "type" : 161
      }, {
        "name" : "IsView",
        "type" : 203
      }, {
        "name" : "Iterator",
        "type" : 162
      }, {
        "name" : "Materialize",
        "type" : 204
      }, {
        "name" : "MemSize",
        "type" : 178
      }, {
        "name" : "Memset",
        "type" : 179
      }, {
        "name" : "Pointer",
        "type" : 182
      }, {
        "name" : "ReadNpy",
        "type" : 183
      }, {
        "name" : "RequiresIterator",
        "type" : 161
      }, {
        "name" : "Reshape",
        "type" : 189
      }, {
        "name" : "ScalarValue",
        "type" : 190
      }, {
        "name" : "SetAt",
        "type" : 191
      }, {
        "name" : "Shape",
        "type" : 193
      }, {
        "name" : "Size",
        "type" : 104
      }, {
        "name" : "Slice",
        "type" : 194
      }, {
        "name" : "Strides",
        "type" : 206
      }, {
        "name" : "String",
        "type" : 207
      }, {
        "name" : "T",
        "type" : 210
      }, {
        "name" : "Transpose",
        "type" : 212
      }, {
        "name" : "UT",
        "type" : 213
      }, {
        "name" : "Uintptr",
        "type" : 178
      }, {
        "name" : "WriteNpy",
        "type" : 214
      }, {
        "name" : "Zero",
        "type" : 219
      }, {
        "name" : "arr",
        "type" : 222
      }, {
        "name" : "arrPtr",
        "type" : 230
      }, {
        "name" : "hdr",
        "type" : 233
      }, {
        "name" : "standardEngine",
        "type" : 238
      } ],
      "name" : "interface{IsMaterializable() bool; IsView() bool; Materialize() gorgonia.org/tensor.Tensor; gorgonia.org/tensor.Tensor}",
      "type" : "Interface",
      "underlying" : 202
    }, {
      "name" : "(gorgonia.org/tensor.View) func() bool",
      "params" : 18,
      "recv" : 63,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 203,
      "variadic" : false
    }, {
      "name" : "(gorgonia.org/tensor.View) func() gorgonia.org/tensor.Tensor",
      "params" : 18,
      "recv" : 64,
      "results" : 205,
      "type" : "Signature",
      "underlying" : 204,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 0
      } ],
      "name" : "(gorgonia.org/tensor.Tensor)",
      "type" : "Tuple",
      "underlying" : 205
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func() []int",
      "params" : 18,
      "recv" : 65,
      "results" : 92,
      "type" : "Signature",
      "underlying" : 206,
      "variadic" : false
    }, {
      "name" : "(fmt.Stringer) func() string",
      "params" : 18,
      "recv" : 66,
      "results" : 47,
      "type" : "Signature",
      "underlying" : 207,
      "variadic" : false
    }, {
      "local-name" : "Stringer",
      "name" : "fmt.Stringer",
      "package" : 3,
      "type" : "Named",
      "underlying" : 209
    }, {
      "methods" : [ {
        "name" : "String",
        "type" : 207
      } ],
      "name" : "interface{String() string}",
      "type" : "Interface",
      "underlying" : 209
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func(axes ...int) error",
      "params" : 211,
      "recv" : 67,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 210,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "axes",
        "type" : 38
      } ],
      "name" : "(axes []int)",
      "type" : "Tuple",
      "underlying" : 211
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func() error",
      "params" : 18,
      "recv" : 68,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 212,
      "variadic" : false
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func()",
      "params" : 18,
      "recv" : 69,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 213,
      "variadic" : false
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func(io.Writer) error",
      "params" : 215,
      "recv" : 71,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 214,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 216
      } ],
      "name" : "(io.Writer)",
      "type" : "Tuple",
      "underlying" : 215
    }, {
      "local-name" : "Writer",
      "name" : "io.Writer",
      "package" : 5,
      "type" : "Named",
      "underlying" : 217
    }, {
      "methods" : [ {
        "name" : "Write",
        "type" : 218
      } ],
      "name" : "interface{Write(p []byte) (n int, err error)}",
      "type" : "Interface",
      "underlying" : 217
    }, {
      "name" : "(io.Writer) func(p []byte) (n int, err error)",
      "params" : 188,
      "recv" : 70,
      "results" : 149,
      "type" : "Signature",
      "underlying" : 218,
      "variadic" : false
    }, {
      "name" : "(gorgonia.org/tensor.Zeroer) func()",
      "params" : 18,
      "recv" : 72,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 219,
      "variadic" : false
    }, {
      "local-name" : "Zeroer",
      "name" : "gorgonia.org/tensor.Zeroer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 221
    }, {
      "methods" : [ {
        "name" : "Zero",
        "type" : 219
      } ],
      "name" : "interface{Zero()}",
      "type" : "Interface",
      "underlying" : 221
    }, {
      "name" : "(gorgonia.org/tensor.arrayer) func() gorgonia.org/tensor.array",
      "params" : 18,
      "recv" : 74,
      "results" : 223,
      "type" : "Signature",
      "underlying" : 222,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 224
      } ],
      "name" : "(gorgonia.org/tensor.array)",
      "type" : "Tuple",
      "underlying" : 223
    }, {
      "local-name" : "array",
      "name" : "gorgonia.org/tensor.array",
      "package" : 0,
      "type" : "Named",
      "underlying" : 225
    }, {
      "fields" : [ {
        "name" : "Header",
        "type" : 226
      }, {
        "name" : "t",
        "type" : 13
      }, {
        "name" : "v",
        "type" : 4
      } ],
      "name" : "struct{gorgonia.org/tensor/internal/storage.Header; t gorgonia.org/tensor.Dtype; v interface{}}",
      "type" : "Struct",
      "underlying" : 225
    }, {
      "local-name" : "Header",
      "name" : "gorgonia.org/tensor/internal/storage.Header",
      "package" : 6,
      "type" : "Named",
      "underlying" : 227
    }, {
      "fields" : [ {
        "name" : "Ptr",
        "type" : 67
      }, {
        "name" : "L",
        "type" : 20
      }, {
        "name" : "C",
        "type" : 20
      } ],
      "name" : "struct{Ptr unsafe.Pointer; L int; C int}",
      "type" : "Struct",
      "underlying" : 227
    }, {
      "local-name" : "arrayer",
      "name" : "gorgonia.org/tensor.arrayer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 229
    }, {
      "methods" : [ {
        "name" : "arr",
        "type" : 222
      }, {
        "name" : "arrPtr",
        "type" : 230
      } ],
      "name" : "interface{arr() gorgonia.org/tensor.array; arrPtr() *gorgonia.org/tensor.array}",
      "type" : "Interface",
      "underlying" : 229
    }, {
      "name" : "(gorgonia.org/tensor.arrayer) func() *gorgonia.org/tensor.array",
      "params" : 18,
      "recv" : 73,
      "results" : 231,
      "type" : "Signature",
      "underlying" : 230,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 232
      } ],
      "name" : "(*gorgonia.org/tensor.array)",
      "type" : "Tuple",
      "underlying" : 231
    }, {
      "elem" : 224,
      "name" : "*gorgonia.org/tensor.array",
      "type" : "Pointer",
      "underlying" : 232
    }, {
      "name" : "(gorgonia.org/tensor.headerer) func() *gorgonia.org/tensor/internal/storage.Header",
      "params" : 18,
      "recv" : 75,
      "results" : 234,
      "type" : "Signature",
      "underlying" : 233,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 235
      } ],
      "name" : "(*gorgonia.org/tensor/internal/storage.Header)",
      "type" : "Tuple",
      "underlying" : 234
    }, {
      "elem" : 226,
      "name" : "*gorgonia.org/tensor/internal/storage.Header",
      "type" : "Pointer",
      "underlying" : 235
    }, {
      "local-name" : "headerer",
      "name" : "gorgonia.org/tensor.headerer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 237
    }, {
      "methods" : [ {
        "name" : "hdr",
        "type" : 233
      } ],
      "name" : "interface{hdr() *gorgonia.org/tensor/internal/storage.Header}",
      "type" : "Interface",
      "underlying" : 237
    }, {
      "name" : "(gorgonia.org/tensor.Tensor) func() gorgonia.org/tensor.standardEngine",
      "params" : 18,
      "recv" : 105,
      "results" : 239,
      "type" : "Signature",
      "underlying" : 238,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 240
      } ],
      "name" : "(gorgonia.org/tensor.standardEngine)",
      "type" : "Tuple",
      "underlying" : 239
    }, {
      "local-name" : "standardEngine",
      "name" : "gorgonia.org/tensor.standardEngine",
      "package" : 0,
      "type" : "Named",
      "underlying" : 241
    }, {
      "methods" : [ {
        "name" : "Accessible",
        "type" : 111
      }, {
        "name" : "Add",
        "type" : 242
      }, {
        "name" : "AddScalar",
        "type" : 246
      }, {
        "name" : "Alloc",
        "type" : 119
      }, {
        "name" : "AllocAccessible",
        "type" : 122
      }, {
        "name" : "Div",
        "type" : 248
      }, {
        "name" : "DivScalar",
        "type" : 251
      }, {
        "name" : "Dot",
        "type" : 252
      }, {
        "name" : "ElEq",
        "type" : 255
      }, {
        "name" : "ElNe",
        "type" : 255
      }, {
        "name" : "EqScalar",
        "type" : 258
      }, {
        "name" : "FMA",
        "type" : 259
      }, {
        "name" : "FMAScalar",
        "type" : 263
      }, {
        "name" : "Free",
        "type" : 123
      }, {
        "name" : "Gt",
        "type" : 265
      }, {
        "name" : "GtScalar",
        "type" : 268
      }, {
        "name" : "Gte",
        "type" : 269
      }, {
        "name" : "GteScalar",
        "type" : 272
      }, {
        "name" : "Lt",
        "type" : 273
      }, {
        "name" : "LtScalar",
        "type" : 276
      }, {
        "name" : "Lte",
        "type" : 277
      }, {
        "name" : "LteScalar",
        "type" : 280
      }, {
        "name" : "MatMul",
        "type" : 281
      }, {
        "name" : "MatVecMul",
        "type" : 285
      }, {
        "name" : "Memclr",
        "type" : 126
      }, {
        "name" : "Memcpy",
        "type" : 127
      }, {
        "name" : "Memset",
        "type" : 129
      }, {
        "name" : "Mod",
        "type" : 288
      }, {
        "name" : "ModScalar",
        "type" : 291
      }, {
        "name" : "Mul",
        "type" : 292
      }, {
        "name" : "MulScalar",
        "type" : 295
      }, {
        "name" : "NeScalar",
        "type" : 258
      }, {
        "name" : "Outer",
        "type" : 296
      }, {
        "name" : "Pow",
        "type" : 299
      }, {
        "name" : "PowScalar",
        "type" : 302
      }, {
        "name" : "SVD",
        "type" : 303
      }, {
        "name" : "Sub",
        "type" : 308
      }, {
        "name" : "SubScalar",
        "type" : 311
      }, {
        "name" : "WorksWith",
        "type" : 131
      } ],
      "name" : "interface{gorgonia.org/tensor.Adder; gorgonia.org/tensor.Diver; gorgonia.org/tensor.Dotter; gorgonia.org/tensor.ElEqer; gorgonia.org/tensor.Engine; gorgonia.org/tensor.FMAer; gorgonia.org/tensor.Gteer; gorgonia.org/tensor.Gter; gorgonia.org/tensor.Lteer; gorgonia.org/tensor.Lter; gorgonia.org/tensor.MatMuler; gorgonia.org/tensor.MatVecMuler; gorgonia.org/tensor.Moder; gorgonia.org/tensor.Muler; gorgonia.org/tensor.OuterProder; gorgonia.org/tensor.Power; gorgonia.org/tensor.SVDer; gorgonia.org/tensor.Suber}",
      "type" : "Interface",
      "underlying" : 241
    }, {
      "name" : "(gorgonia.org/tensor.Adder) func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 243,
      "recv" : 77,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 242,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 0
      }, {
        "name" : "b",
        "type" : 0
      }, {
        "name" : "opts",
        "type" : 5
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts []gorgonia.org/tensor.FuncOpt)",
      "type" : "Tuple",
      "underlying" : 243
    }, {
      "local-name" : "Adder",
      "name" : "gorgonia.org/tensor.Adder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 245
    }, {
      "methods" : [ {
        "name" : "Add",
        "type" : 242
      }, {
        "name" : "AddScalar",
        "type" : 246
      } ],
      "name" : "interface{Add(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); AddScalar(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)}",
      "type" : "Interface",
      "underlying" : 245
    }, {
      "name" : "(gorgonia.org/tensor.Adder) func(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 247,
      "recv" : 76,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 246,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 0
      }, {
        "name" : "b",
        "type" : 4
      }, {
        "name" : "leftTensor",
        "type" : 12
      }, {
        "name" : "opts",
        "type" : 5
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts []gorgonia.org/tensor.FuncOpt)",
      "type" : "Tuple",
      "underlying" : 247
    }, {
      "name" : "(gorgonia.org/tensor.Diver) func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 243,
      "recv" : 79,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 248,
      "variadic" : true
    }, {
      "local-name" : "Diver",
      "name" : "gorgonia.org/tensor.Diver",
      "package" : 0,
      "type" : "Named",
      "underlying" : 250
    }, {
      "methods" : [ {
        "name" : "Div",
        "type" : 248
      }, {
        "name" : "DivScalar",
        "type" : 251
      } ],
      "name" : "interface{Div(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); DivScalar(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)}",
      "type" : "Interface",
      "underlying" : 250
    }, {
      "name" : "(gorgonia.org/tensor.Diver) func(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 247,
      "recv" : 78,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 251,
      "variadic" : true
    }, {
      "name" : "(gorgonia.org/tensor.Dotter) func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 243,
      "recv" : 80,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 252,
      "variadic" : true
    }, {
      "local-name" : "Dotter",
      "name" : "gorgonia.org/tensor.Dotter",
      "package" : 0,
      "type" : "Named",
      "underlying" : 254
    }, {
      "methods" : [ {
        "name" : "Dot",
        "type" : 252
      } ],
      "name" : "interface{Dot(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)}",
      "type" : "Interface",
      "underlying" : 254
    }, {
      "name" : "(gorgonia.org/tensor.ElEqer) func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 243,
      "recv" : 82,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 255,
      "variadic" : true
    }, {
      "local-name" : "ElEqer",
      "name" : "gorgonia.org/tensor.ElEqer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 257
    }, {
      "methods" : [ {
        "name" : "ElEq",
        "type" : 255
      }, {
        "name" : "ElNe",
        "type" : 255
      }, {
        "name" : "EqScalar",
        "type" : 258
      }, {
        "name" : "NeScalar",
        "type" : 258
      } ],
      "name" : "interface{ElEq(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); ElNe(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); EqScalar(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); NeScalar(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)}",
      "type" : "Interface",
      "underlying" : 257
    }, {
      "name" : "(gorgonia.org/tensor.ElEqer) func(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 247,
      "recv" : 81,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 258,
      "variadic" : true
    }, {
      "name" : "(gorgonia.org/tensor.FMAer) func(a gorgonia.org/tensor.Tensor, x gorgonia.org/tensor.Tensor, y gorgonia.org/tensor.Tensor) (gorgonia.org/tensor.Tensor, error)",
      "params" : 260,
      "recv" : 84,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 259,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 0
      }, {
        "name" : "x",
        "type" : 0
      }, {
        "name" : "y",
        "type" : 0
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, x gorgonia.org/tensor.Tensor, y gorgonia.org/tensor.Tensor)",
      "type" : "Tuple",
      "underlying" : 260
    }, {
      "local-name" : "FMAer",
      "name" : "gorgonia.org/tensor.FMAer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 262
    }, {
      "methods" : [ {
        "name" : "FMA",
        "type" : 259
      }, {
        "name" : "FMAScalar",
        "type" : 263
      } ],
      "name" : "interface{FMA(a gorgonia.org/tensor.Tensor, x gorgonia.org/tensor.Tensor, y gorgonia.org/tensor.Tensor) (gorgonia.org/tensor.Tensor, error); FMAScalar(a gorgonia.org/tensor.Tensor, x interface{}, y gorgonia.org/tensor.Tensor) (gorgonia.org/tensor.Tensor, error)}",
      "type" : "Interface",
      "underlying" : 262
    }, {
      "name" : "(gorgonia.org/tensor.FMAer) func(a gorgonia.org/tensor.Tensor, x interface{}, y gorgonia.org/tensor.Tensor) (gorgonia.org/tensor.Tensor, error)",
      "params" : 264,
      "recv" : 83,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 263,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 0
      }, {
        "name" : "x",
        "type" : 4
      }, {
        "name" : "y",
        "type" : 0
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, x interface{}, y gorgonia.org/tensor.Tensor)",
      "type" : "Tuple",
      "underlying" : 264
    }, {
      "name" : "(gorgonia.org/tensor.Gter) func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 243,
      "recv" : 86,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 265,
      "variadic" : true
    }, {
      "local-name" : "Gter",
      "name" : "gorgonia.org/tensor.Gter",
      "package" : 0,
      "type" : "Named",
      "underlying" : 267
    }, {
      "methods" : [ {
        "name" : "Gt",
        "type" : 265
      }, {
        "name" : "GtScalar",
        "type" : 268
      } ],
      "name" : "interface{Gt(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); GtScalar(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)}",
      "type" : "Interface",
      "underlying" : 267
    }, {
      "name" : "(gorgonia.org/tensor.Gter) func(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 247,
      "recv" : 85,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 268,
      "variadic" : true
    }, {
      "name" : "(gorgonia.org/tensor.Gteer) func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 243,
      "recv" : 88,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 269,
      "variadic" : true
    }, {
      "local-name" : "Gteer",
      "name" : "gorgonia.org/tensor.Gteer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 271
    }, {
      "methods" : [ {
        "name" : "Gte",
        "type" : 269
      }, {
        "name" : "GteScalar",
        "type" : 272
      } ],
      "name" : "interface{Gte(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); GteScalar(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)}",
      "type" : "Interface",
      "underlying" : 271
    }, {
      "name" : "(gorgonia.org/tensor.Gteer) func(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 247,
      "recv" : 87,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 272,
      "variadic" : true
    }, {
      "name" : "(gorgonia.org/tensor.Lter) func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 243,
      "recv" : 90,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 273,
      "variadic" : true
    }, {
      "local-name" : "Lter",
      "name" : "gorgonia.org/tensor.Lter",
      "package" : 0,
      "type" : "Named",
      "underlying" : 275
    }, {
      "methods" : [ {
        "name" : "Lt",
        "type" : 273
      }, {
        "name" : "LtScalar",
        "type" : 276
      } ],
      "name" : "interface{Lt(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); LtScalar(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)}",
      "type" : "Interface",
      "underlying" : 275
    }, {
      "name" : "(gorgonia.org/tensor.Lter) func(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 247,
      "recv" : 89,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 276,
      "variadic" : true
    }, {
      "name" : "(gorgonia.org/tensor.Lteer) func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 243,
      "recv" : 92,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 277,
      "variadic" : true
    }, {
      "local-name" : "Lteer",
      "name" : "gorgonia.org/tensor.Lteer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 279
    }, {
      "methods" : [ {
        "name" : "Lte",
        "type" : 277
      }, {
        "name" : "LteScalar",
        "type" : 280
      } ],
      "name" : "interface{Lte(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); LteScalar(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)}",
      "type" : "Interface",
      "underlying" : 279
    }, {
      "name" : "(gorgonia.org/tensor.Lteer) func(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 247,
      "recv" : 91,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 280,
      "variadic" : true
    }, {
      "name" : "(gorgonia.org/tensor.MatMuler) func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, preallocated gorgonia.org/tensor.Tensor) error",
      "params" : 282,
      "recv" : 93,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 281,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 0
      }, {
        "name" : "b",
        "type" : 0
      }, {
        "name" : "preallocated",
        "type" : 0
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, preallocated gorgonia.org/tensor.Tensor)",
      "type" : "Tuple",
      "underlying" : 282
    }, {
      "local-name" : "MatMuler",
      "name" : "gorgonia.org/tensor.MatMuler",
      "package" : 0,
      "type" : "Named",
      "underlying" : 284
    }, {
      "methods" : [ {
        "name" : "MatMul",
        "type" : 281
      } ],
      "name" : "interface{MatMul(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, preallocated gorgonia.org/tensor.Tensor) error}",
      "type" : "Interface",
      "underlying" : 284
    }, {
      "name" : "(gorgonia.org/tensor.MatVecMuler) func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, preallocated gorgonia.org/tensor.Tensor) error",
      "params" : 282,
      "recv" : 94,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 285,
      "variadic" : false
    }, {
      "local-name" : "MatVecMuler",
      "name" : "gorgonia.org/tensor.MatVecMuler",
      "package" : 0,
      "type" : "Named",
      "underlying" : 287
    }, {
      "methods" : [ {
        "name" : "MatVecMul",
        "type" : 285
      } ],
      "name" : "interface{MatVecMul(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, preallocated gorgonia.org/tensor.Tensor) error}",
      "type" : "Interface",
      "underlying" : 287
    }, {
      "name" : "(gorgonia.org/tensor.Moder) func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 243,
      "recv" : 96,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 288,
      "variadic" : true
    }, {
      "local-name" : "Moder",
      "name" : "gorgonia.org/tensor.Moder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 290
    }, {
      "methods" : [ {
        "name" : "Mod",
        "type" : 288
      }, {
        "name" : "ModScalar",
        "type" : 291
      } ],
      "name" : "interface{Mod(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); ModScalar(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)}",
      "type" : "Interface",
      "underlying" : 290
    }, {
      "name" : "(gorgonia.org/tensor.Moder) func(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 247,
      "recv" : 95,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 291,
      "variadic" : true
    }, {
      "name" : "(gorgonia.org/tensor.Muler) func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 243,
      "recv" : 98,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 292,
      "variadic" : true
    }, {
      "local-name" : "Muler",
      "name" : "gorgonia.org/tensor.Muler",
      "package" : 0,
      "type" : "Named",
      "underlying" : 294
    }, {
      "methods" : [ {
        "name" : "Mul",
        "type" : 292
      }, {
        "name" : "MulScalar",
        "type" : 295
      } ],
      "name" : "interface{Mul(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); MulScalar(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)}",
      "type" : "Interface",
      "underlying" : 294
    }, {
      "name" : "(gorgonia.org/tensor.Muler) func(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 247,
      "recv" : 97,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 295,
      "variadic" : true
    }, {
      "name" : "(gorgonia.org/tensor.OuterProder) func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, preallocated gorgonia.org/tensor.Tensor) error",
      "params" : 282,
      "recv" : 99,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 296,
      "variadic" : false
    }, {
      "local-name" : "OuterProder",
      "name" : "gorgonia.org/tensor.OuterProder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 298
    }, {
      "methods" : [ {
        "name" : "Outer",
        "type" : 296
      } ],
      "name" : "interface{Outer(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, preallocated gorgonia.org/tensor.Tensor) error}",
      "type" : "Interface",
      "underlying" : 298
    }, {
      "name" : "(gorgonia.org/tensor.Power) func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 243,
      "recv" : 101,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 299,
      "variadic" : true
    }, {
      "local-name" : "Power",
      "name" : "gorgonia.org/tensor.Power",
      "package" : 0,
      "type" : "Named",
      "underlying" : 301
    }, {
      "methods" : [ {
        "name" : "Pow",
        "type" : 299
      }, {
        "name" : "PowScalar",
        "type" : 302
      } ],
      "name" : "interface{Pow(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); PowScalar(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)}",
      "type" : "Interface",
      "underlying" : 301
    }, {
      "name" : "(gorgonia.org/tensor.Power) func(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 247,
      "recv" : 100,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 302,
      "variadic" : true
    }, {
      "name" : "(gorgonia.org/tensor.SVDer) func(a gorgonia.org/tensor.Tensor, uv bool, full bool) (s gorgonia.org/tensor.Tensor, u gorgonia.org/tensor.Tensor, v gorgonia.org/tensor.Tensor, err error)",
      "params" : 304,
      "recv" : 102,
      "results" : 305,
      "type" : "Signature",
      "underlying" : 303,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 0
      }, {
        "name" : "uv",
        "type" : 12
      }, {
        "name" : "full",
        "type" : 12
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, uv bool, full bool)",
      "type" : "Tuple",
      "underlying" : 304
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 0
      }, {
        "name" : "u",
        "type" : 0
      }, {
        "name" : "v",
        "type" : 0
      }, {
        "name" : "err",
        "type" : 88
      } ],
      "name" : "(s gorgonia.org/tensor.Tensor, u gorgonia.org/tensor.Tensor, v gorgonia.org/tensor.Tensor, err error)",
      "type" : "Tuple",
      "underlying" : 305
    }, {
      "local-name" : "SVDer",
      "name" : "gorgonia.org/tensor.SVDer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 307
    }, {
      "methods" : [ {
        "name" : "SVD",
        "type" : 303
      } ],
      "name" : "interface{SVD(a gorgonia.org/tensor.Tensor, uv bool, full bool) (s gorgonia.org/tensor.Tensor, u gorgonia.org/tensor.Tensor, v gorgonia.org/tensor.Tensor, err error)}",
      "type" : "Interface",
      "underlying" : 307
    }, {
      "name" : "(gorgonia.org/tensor.Suber) func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 243,
      "recv" : 104,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 308,
      "variadic" : true
    }, {
      "local-name" : "Suber",
      "name" : "gorgonia.org/tensor.Suber",
      "package" : 0,
      "type" : "Named",
      "underlying" : 310
    }, {
      "methods" : [ {
        "name" : "Sub",
        "type" : 308
      }, {
        "name" : "SubScalar",
        "type" : 311
      } ],
      "name" : "interface{Sub(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); SubScalar(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)}",
      "type" : "Interface",
      "underlying" : 310
    }, {
      "name" : "(gorgonia.org/tensor.Suber) func(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 247,
      "recv" : 103,
      "results" : 87,
      "type" : "Signature",
      "underlying" : 311,
      "variadic" : true
    }, {
      "local-name" : "Slicer",
      "name" : "gorgonia.org/tensor.Slicer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 313
    }, {
      "methods" : [ {
        "name" : "Slice",
        "type" : 194
      } ],
      "name" : "interface{Slice(...gorgonia.org/tensor.Slice) (gorgonia.org/tensor.View, error)}",
      "type" : "Interface",
      "underlying" : 313
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : -1,
      "type" : 88,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 99,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 113,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 113,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 134,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 138,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 138,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 138,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 138,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 151,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 155,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 159,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 164,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 164,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 164,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 164,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 164,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 164,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 164,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 180,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 185,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 197,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 201,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 201,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 208,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 216,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 220,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 228,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 228,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 236,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 244,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 244,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 249,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 249,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 253,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 256,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 256,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 261,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 261,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 266,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 266,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 270,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 270,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 274,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 274,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 278,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 278,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 283,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 286,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 289,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 289,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 293,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 293,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 297,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 300,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 300,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 306,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 309,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 309,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 312,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}