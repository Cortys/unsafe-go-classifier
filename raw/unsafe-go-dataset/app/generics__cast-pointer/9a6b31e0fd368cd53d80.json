{
  "usage" : {
    "file" : "array.go",
    "label1" : "cast-pointer",
    "label2" : "generics",
    "line" : "520",
    "module" : "gorgonia.org/tensor",
    "pkg" : "gorgonia.org/tensor",
    "project" : "gorgonia/gorgonia",
    "snippet" : "return unsafe.Pointer(at)",
    "version" : "v0.9.6"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 3, 22, 28, 5, 11, 36, 38, 21, 29, 18, 10, 6, 37, 23, 27, 39, 4, 32, 34, 15, 20, 13, 14, 17, 31, 30, 26, 33, 9, 7, 12, 8, 24, 0, 19, 25, 35, 16 ],
      "decl-vars" : [ 4, 5, 8, 19, 28, 32, 30, 38, 39, 7, 9, 25, 31, 33, 34, 13, 16, 11, 14, 22, 36, 3, 10, 12, 15, 18, 23, 26, 29, 6, 20, 21, 17, 24, 27, 35, 37 ],
      "line-start" : 453,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 531,
      "code" : "switch at := a.(type) {\ncase Memory:\n\treturn at.Pointer()\ncase bool:\n\treturn unsafe.Pointer(&at)\ncase int:\n\treturn unsafe.Pointer(&at)\ncase int8:\n\treturn unsafe.Pointer(&at)\ncase int16:\n\treturn unsafe.Pointer(&at)\ncase int32:\n\treturn unsafe.Pointer(&at)\ncase int64:\n\treturn unsafe.Pointer(&at)\ncase uint:\n\treturn unsafe.Pointer(&at)\ncase uint8:\n\treturn unsafe.Pointer(&at)\ncase uint16:\n\treturn unsafe.Pointer(&at)\ncase uint32:\n\treturn unsafe.Pointer(&at)\ncase uint64:\n\treturn unsafe.Pointer(&at)\ncase float32:\n\treturn unsafe.Pointer(&at)\ncase float64:\n\treturn unsafe.Pointer(&at)\ncase complex64:\n\treturn unsafe.Pointer(&at)\ncase complex128:\n\treturn unsafe.Pointer(&at)\ncase string:\n\treturn unsafe.Pointer(&at)\ncase uintptr:\n\treturn unsafe.Pointer(at)\ncase unsafe.Pointer:\n\treturn at\n\ncase *bool:\n\treturn unsafe.Pointer(at)\ncase *int:\n\treturn unsafe.Pointer(at)\ncase *int8:\n\treturn unsafe.Pointer(at)\ncase *int16:\n\treturn unsafe.Pointer(at)\ncase *int32:\n\treturn unsafe.Pointer(at)\ncase *int64:\n\treturn unsafe.Pointer(at)\ncase *uint:\n\treturn unsafe.Pointer(at)\ncase *uint8:\n\treturn unsafe.Pointer(at)\ncase *uint16:\n\treturn unsafe.Pointer(at)\ncase *uint32:\n\treturn unsafe.Pointer(at)\ncase *uint64:\n\treturn unsafe.Pointer(at)\ncase *float32:\n\treturn unsafe.Pointer(at)\ncase *float64:\n\treturn unsafe.Pointer(at)\ncase *complex64:\n\treturn unsafe.Pointer(at)\ncase *complex128:\n\treturn unsafe.Pointer(at)\ncase *string:\n\treturn unsafe.Pointer(at)\ncase *uintptr:\n\treturn unsafe.Pointer(*at)\ncase *unsafe.Pointer:\n\treturn *at\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78 ],
      "in-vars" : [ 27, 5, 7, 8, 10, 11, 12, 24, 26, 37, 31, 0, 30, 33, 20, 21, 16, 6, 18, 22, 25, 23, 38, 14, 19, 4, 32, 29, 17, 3, 39, 13, 35, 9, 36, 34, 15, 28 ],
      "exit" : false,
      "out-vars" : [ 39, 4, 17, 11, 25, 21, 37, 19, 33, 22, 34, 13, 28, 10, 30, 18, 29, 31, 7, 5, 32, 36, 9, 6, 26, 24, 20, 15, 23, 3, 27, 8, 35, 16, 14, 12, 38 ],
      "decl-vars" : [ ],
      "line-start" : 453,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "a",
              "variable" : 0
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 453,
      "code" : "at := a.(type)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 454,
      "ast" : {
        "expressions" : [ {
          "go-type" : 7,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 7,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "Memory"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 455,
      "code" : "case Memory:\n\treturn at.Pointer()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 455,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Pointer"
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 455,
      "code" : "return at.Pointer()",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 456,
      "ast" : {
        "expressions" : [ {
          "go-type" : 13,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 13,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "bool"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 457,
      "code" : "case bool:\n\treturn unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 457,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 12,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 4
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 457,
      "code" : "return unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 458,
      "ast" : {
        "expressions" : [ {
          "go-type" : 15,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 15,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "int"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 459,
      "code" : "case int:\n\treturn unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 459,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 15,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 5
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 459,
      "code" : "return unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ 6 ],
      "decl-vars" : [ ],
      "line-start" : 460,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 17,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "int8"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 461,
      "code" : "case int8:\n\treturn unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 461,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 16,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 6
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 461,
      "code" : "return unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 7 ],
      "exit" : false,
      "out-vars" : [ 7 ],
      "decl-vars" : [ ],
      "line-start" : 462,
      "ast" : {
        "expressions" : [ {
          "go-type" : 19,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 19,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "int16"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 463,
      "code" : "case int16:\n\treturn unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 463,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 7
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 463,
      "code" : "return unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 8 ],
      "exit" : false,
      "out-vars" : [ 8 ],
      "decl-vars" : [ ],
      "line-start" : 464,
      "ast" : {
        "expressions" : [ {
          "go-type" : 21,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 21,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "int32"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 465,
      "code" : "case int32:\n\treturn unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 8 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 465,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 20,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 8
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 465,
      "code" : "return unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 9 ],
      "exit" : false,
      "out-vars" : [ 9 ],
      "decl-vars" : [ ],
      "line-start" : 466,
      "ast" : {
        "expressions" : [ {
          "go-type" : 23,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 23,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "int64"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 467,
      "code" : "case int64:\n\treturn unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 9 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 467,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 22,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 23,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 9
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 467,
      "code" : "return unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 10 ],
      "exit" : false,
      "out-vars" : [ 10 ],
      "decl-vars" : [ ],
      "line-start" : 468,
      "ast" : {
        "expressions" : [ {
          "go-type" : 25,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 25,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "uint"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 469,
      "code" : "case uint:\n\treturn unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 10 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 469,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 25,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 10
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 469,
      "code" : "return unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 11 ],
      "exit" : false,
      "out-vars" : [ 11 ],
      "decl-vars" : [ ],
      "line-start" : 470,
      "ast" : {
        "expressions" : [ {
          "go-type" : 27,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 27,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "uint8"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 471,
      "code" : "case uint8:\n\treturn unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 11 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 471,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 27,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 11
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 471,
      "code" : "return unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 12 ],
      "exit" : false,
      "out-vars" : [ 12 ],
      "decl-vars" : [ ],
      "line-start" : 472,
      "ast" : {
        "expressions" : [ {
          "go-type" : 29,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 29,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "uint16"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 473,
      "code" : "case uint16:\n\treturn unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 12 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 473,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 28,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 12
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 473,
      "code" : "return unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 13 ],
      "exit" : false,
      "out-vars" : [ 13 ],
      "decl-vars" : [ ],
      "line-start" : 474,
      "ast" : {
        "expressions" : [ {
          "go-type" : 31,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 31,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "uint32"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 475,
      "code" : "case uint32:\n\treturn unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 13 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 475,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 31,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 13
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 475,
      "code" : "return unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 14 ],
      "exit" : false,
      "out-vars" : [ 14 ],
      "decl-vars" : [ ],
      "line-start" : 476,
      "ast" : {
        "expressions" : [ {
          "go-type" : 33,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 33,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "uint64"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 477,
      "code" : "case uint64:\n\treturn unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 14 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 477,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 32,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 33,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 14
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 477,
      "code" : "return unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 15 ],
      "exit" : false,
      "out-vars" : [ 15 ],
      "decl-vars" : [ ],
      "line-start" : 478,
      "ast" : {
        "expressions" : [ {
          "go-type" : 35,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 35,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "float32"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 479,
      "code" : "case float32:\n\treturn unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 15 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 479,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 34,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 15
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 479,
      "code" : "return unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 16 ],
      "exit" : false,
      "out-vars" : [ 16 ],
      "decl-vars" : [ ],
      "line-start" : 480,
      "ast" : {
        "expressions" : [ {
          "go-type" : 37,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 37,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "float64"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 481,
      "code" : "case float64:\n\treturn unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 16 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 481,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 36,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 37,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 16
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 481,
      "code" : "return unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 17 ],
      "exit" : false,
      "out-vars" : [ 17 ],
      "decl-vars" : [ ],
      "line-start" : 482,
      "ast" : {
        "expressions" : [ {
          "go-type" : 39,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 39,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "complex64"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 483,
      "code" : "case complex64:\n\treturn unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 483,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 38,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 39,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 17
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 483,
      "code" : "return unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 18 ],
      "exit" : false,
      "out-vars" : [ 18 ],
      "decl-vars" : [ ],
      "line-start" : 484,
      "ast" : {
        "expressions" : [ {
          "go-type" : 41,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 41,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "complex128"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 485,
      "code" : "case complex128:\n\treturn unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 18 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 485,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 40,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 41,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 18
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 485,
      "code" : "return unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 486,
      "ast" : {
        "expressions" : [ {
          "go-type" : 43,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 43,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "string"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 487,
      "code" : "case string:\n\treturn unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 487,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 42,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 43,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 19
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 487,
      "code" : "return unsafe.Pointer(&at)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 20 ],
      "exit" : false,
      "out-vars" : [ 20 ],
      "decl-vars" : [ ],
      "line-start" : 488,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 11,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "uintptr"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 489,
      "code" : "case uintptr:\n\treturn unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 20 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 489,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 20
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 489,
      "code" : "return unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 21 ],
      "exit" : false,
      "out-vars" : [ 21 ],
      "decl-vars" : [ ],
      "line-start" : 490,
      "ast" : {
        "expressions" : [ {
          "go-type" : 4,
          "kind" : "type",
          "qualifier" : {
            "ident-kind" : "PkgName",
            "kind" : "ident",
            "package" : 1,
            "value" : "unsafe"
          },
          "type" : "identifier",
          "value" : {
            "go-type" : 4,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "Pointer"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 491,
      "code" : "case unsafe.Pointer:\n\treturn at",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 21 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 491,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "at",
            "variable" : 21
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 491,
      "code" : "return at",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 22 ],
      "exit" : false,
      "out-vars" : [ 22 ],
      "decl-vars" : [ ],
      "line-start" : 495,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 13,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 13,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "bool"
            }
          },
          "go-type" : 12,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 496,
      "code" : "case *bool:\n\treturn unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 22 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 496,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 22
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 496,
      "code" : "return unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 497,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 15,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 15,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 14,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 498,
      "code" : "case *int:\n\treturn unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 498,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 23
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 498,
      "code" : "return unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 24 ],
      "exit" : false,
      "out-vars" : [ 24 ],
      "decl-vars" : [ ],
      "line-start" : 499,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 17,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 17,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int8"
            }
          },
          "go-type" : 16,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 500,
      "code" : "case *int8:\n\treturn unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 24 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 500,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 24
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 500,
      "code" : "return unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 25 ],
      "exit" : false,
      "out-vars" : [ 25 ],
      "decl-vars" : [ ],
      "line-start" : 501,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 19,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 19,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int16"
            }
          },
          "go-type" : 18,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 502,
      "code" : "case *int16:\n\treturn unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 25 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 502,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 25
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 502,
      "code" : "return unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ 26 ],
      "decl-vars" : [ ],
      "line-start" : 503,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 21,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 21,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int32"
            }
          },
          "go-type" : 20,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 504,
      "code" : "case *int32:\n\treturn unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 504,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 20,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 26
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 504,
      "code" : "return unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 27 ],
      "exit" : false,
      "out-vars" : [ 27 ],
      "decl-vars" : [ ],
      "line-start" : 505,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 23,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 23,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int64"
            }
          },
          "go-type" : 22,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 506,
      "code" : "case *int64:\n\treturn unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 27 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 506,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 27
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 506,
      "code" : "return unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 28 ],
      "exit" : false,
      "out-vars" : [ 28 ],
      "decl-vars" : [ ],
      "line-start" : 507,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 25,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 25,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint"
            }
          },
          "go-type" : 24,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 508,
      "code" : "case *uint:\n\treturn unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 28 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 508,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 28
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 508,
      "code" : "return unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57 ],
      "in-vars" : [ 29 ],
      "exit" : false,
      "out-vars" : [ 29 ],
      "decl-vars" : [ ],
      "line-start" : 509,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 27,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 27,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint8"
            }
          },
          "go-type" : 26,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 510,
      "code" : "case *uint8:\n\treturn unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 29 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 510,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 29
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 510,
      "code" : "return unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59 ],
      "in-vars" : [ 30 ],
      "exit" : false,
      "out-vars" : [ 30 ],
      "decl-vars" : [ ],
      "line-start" : 511,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 29,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 29,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint16"
            }
          },
          "go-type" : 28,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 512,
      "code" : "case *uint16:\n\treturn unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 30 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 512,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 30
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 512,
      "code" : "return unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61 ],
      "in-vars" : [ 31 ],
      "exit" : false,
      "out-vars" : [ 31 ],
      "decl-vars" : [ ],
      "line-start" : 513,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 31,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 31,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : 30,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 514,
      "code" : "case *uint32:\n\treturn unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 31 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 514,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 31
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 514,
      "code" : "return unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63 ],
      "in-vars" : [ 32 ],
      "exit" : false,
      "out-vars" : [ 32 ],
      "decl-vars" : [ ],
      "line-start" : 515,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 33,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 33,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint64"
            }
          },
          "go-type" : 32,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 516,
      "code" : "case *uint64:\n\treturn unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 32 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 516,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 32
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 516,
      "code" : "return unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65 ],
      "in-vars" : [ 33 ],
      "exit" : false,
      "out-vars" : [ 33 ],
      "decl-vars" : [ ],
      "line-start" : 517,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 35,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 35,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "float32"
            }
          },
          "go-type" : 34,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 518,
      "code" : "case *float32:\n\treturn unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 33 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 518,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 34,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 33
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 518,
      "code" : "return unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 67 ],
      "in-vars" : [ 34 ],
      "exit" : false,
      "out-vars" : [ 34 ],
      "decl-vars" : [ ],
      "line-start" : 519,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 37,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 37,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "float64"
            }
          },
          "go-type" : 36,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 520,
      "code" : "case *float64:\n\treturn unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 34 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 520,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 36,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 34
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 520,
      "code" : "return unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 69 ],
      "in-vars" : [ 35 ],
      "exit" : false,
      "out-vars" : [ 35 ],
      "decl-vars" : [ ],
      "line-start" : 521,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 39,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 39,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "complex64"
            }
          },
          "go-type" : 38,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 522,
      "code" : "case *complex64:\n\treturn unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 35 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 522,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 35
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 522,
      "code" : "return unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 71 ],
      "in-vars" : [ 36 ],
      "exit" : false,
      "out-vars" : [ 36 ],
      "decl-vars" : [ ],
      "line-start" : 523,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 41,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 41,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "complex128"
            }
          },
          "go-type" : 40,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 524,
      "code" : "case *complex128:\n\treturn unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 36 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 524,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 36
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 524,
      "code" : "return unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 73 ],
      "in-vars" : [ 37 ],
      "exit" : false,
      "out-vars" : [ 37 ],
      "decl-vars" : [ ],
      "line-start" : 525,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 43,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 43,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "string"
            }
          },
          "go-type" : 42,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 526,
      "code" : "case *string:\n\treturn unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 37 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 526,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 42,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 37
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 526,
      "code" : "return unsafe.Pointer(at)",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 75 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 527,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 11,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 11,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 44,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 528,
      "code" : "case *uintptr:\n\treturn unsafe.Pointer(*at)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 528,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 44,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 38
              }
            },
            "type" : "star"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 528,
      "code" : "return unsafe.Pointer(*at)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 77 ],
      "in-vars" : [ 39 ],
      "exit" : false,
      "out-vars" : [ 39 ],
      "decl-vars" : [ ],
      "line-start" : 529,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 45,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 530,
      "code" : "case *unsafe.Pointer:\n\treturn *at",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 39 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 530,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 45,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 39
            }
          },
          "type" : "star"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 530,
      "code" : "return *at",
      "entry" : false,
      "use-vars" : [ 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 533,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 43,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot get pointer"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 46,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 533,
      "code" : "panic(\"Cannot get pointer\")",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func getPointer(a interface{}) unsafe.Pointer {\n\tswitch at := a.(type) {\n\tcase Memory:\n\t\treturn at.Pointer()\n\tcase bool:\n\t\treturn unsafe.Pointer(&at)\n\tcase int:\n\t\treturn unsafe.Pointer(&at)\n\tcase int8:\n\t\treturn unsafe.Pointer(&at)\n\tcase int16:\n\t\treturn unsafe.Pointer(&at)\n\tcase int32:\n\t\treturn unsafe.Pointer(&at)\n\tcase int64:\n\t\treturn unsafe.Pointer(&at)\n\tcase uint:\n\t\treturn unsafe.Pointer(&at)\n\tcase uint8:\n\t\treturn unsafe.Pointer(&at)\n\tcase uint16:\n\t\treturn unsafe.Pointer(&at)\n\tcase uint32:\n\t\treturn unsafe.Pointer(&at)\n\tcase uint64:\n\t\treturn unsafe.Pointer(&at)\n\tcase float32:\n\t\treturn unsafe.Pointer(&at)\n\tcase float64:\n\t\treturn unsafe.Pointer(&at)\n\tcase complex64:\n\t\treturn unsafe.Pointer(&at)\n\tcase complex128:\n\t\treturn unsafe.Pointer(&at)\n\tcase string:\n\t\treturn unsafe.Pointer(&at)\n\tcase uintptr:\n\t\treturn unsafe.Pointer(at)\n\tcase unsafe.Pointer:\n\t\treturn at\n\n\tcase *bool:\n\t\treturn unsafe.Pointer(at)\n\tcase *int:\n\t\treturn unsafe.Pointer(at)\n\tcase *int8:\n\t\treturn unsafe.Pointer(at)\n\tcase *int16:\n\t\treturn unsafe.Pointer(at)\n\tcase *int32:\n\t\treturn unsafe.Pointer(at)\n\tcase *int64:\n\t\treturn unsafe.Pointer(at)\n\tcase *uint:\n\t\treturn unsafe.Pointer(at)\n\tcase *uint8:\n\t\treturn unsafe.Pointer(at)\n\tcase *uint16:\n\t\treturn unsafe.Pointer(at)\n\tcase *uint32:\n\t\treturn unsafe.Pointer(at)\n\tcase *uint64:\n\t\treturn unsafe.Pointer(at)\n\tcase *float32:\n\t\treturn unsafe.Pointer(at)\n\tcase *float64:\n\t\treturn unsafe.Pointer(at)\n\tcase *complex64:\n\t\treturn unsafe.Pointer(at)\n\tcase *complex128:\n\t\treturn unsafe.Pointer(at)\n\tcase *string:\n\t\treturn unsafe.Pointer(at)\n\tcase *uintptr:\n\t\treturn unsafe.Pointer(*at)\n\tcase *unsafe.Pointer:\n\t\treturn *at\n\t}\n\n\tpanic(\"Cannot get pointer\")\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "getPointer",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Pointer",
      "package" : 0,
      "type" : 5,
      "exported" : true
    } ],
    "line-end" : 534,
    "line-start" : 452,
    "names" : [ "getPointer" ],
    "package" : 0,
    "packages" : [ {
      "name" : "tensor",
      "path" : "gorgonia.org/tensor"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0 ],
    "receivers" : [ ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(a interface{}) unsafe.Pointer",
      "params" : 1,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 2
      } ],
      "name" : "(a interface{})",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 4
    }, {
      "name" : "func() unsafe.Pointer",
      "params" : 6,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 5,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "local-name" : "Memory",
      "name" : "gorgonia.org/tensor.Memory",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "methods" : [ {
        "name" : "MemSize",
        "type" : 9
      }, {
        "name" : "Pointer",
        "type" : 5
      }, {
        "name" : "Uintptr",
        "type" : 9
      } ],
      "name" : "interface{MemSize() uintptr; Pointer() unsafe.Pointer; Uintptr() uintptr}",
      "type" : "Interface",
      "underlying" : 8
    }, {
      "name" : "func() uintptr",
      "params" : 6,
      "recv" : 2,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "*bool",
      "type" : "Pointer",
      "underlying" : 12
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "*int",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "*int8",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "elem" : 19,
      "name" : "*int16",
      "type" : "Pointer",
      "underlying" : 18
    }, {
      "name" : "int16",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "elem" : 21,
      "name" : "*int32",
      "type" : "Pointer",
      "underlying" : 20
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "elem" : 23,
      "name" : "*int64",
      "type" : "Pointer",
      "underlying" : 22
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "elem" : 25,
      "name" : "*uint",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "elem" : 27,
      "name" : "*uint8",
      "type" : "Pointer",
      "underlying" : 26
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "elem" : 29,
      "name" : "*uint16",
      "type" : "Pointer",
      "underlying" : 28
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 29
    }, {
      "elem" : 31,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 30
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 31
    }, {
      "elem" : 33,
      "name" : "*uint64",
      "type" : "Pointer",
      "underlying" : 32
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 33
    }, {
      "elem" : 35,
      "name" : "*float32",
      "type" : "Pointer",
      "underlying" : 34
    }, {
      "name" : "float32",
      "type" : "Basic",
      "underlying" : 35
    }, {
      "elem" : 37,
      "name" : "*float64",
      "type" : "Pointer",
      "underlying" : 36
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 37
    }, {
      "elem" : 39,
      "name" : "*complex64",
      "type" : "Pointer",
      "underlying" : 38
    }, {
      "name" : "complex64",
      "type" : "Basic",
      "underlying" : 39
    }, {
      "elem" : 41,
      "name" : "*complex128",
      "type" : "Pointer",
      "underlying" : 40
    }, {
      "name" : "complex128",
      "type" : "Basic",
      "underlying" : 41
    }, {
      "elem" : 43,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 42
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 43
    }, {
      "elem" : 11,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 44
    }, {
      "elem" : 4,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 45
    }, {
      "name" : "func(interface{})",
      "params" : 47,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 47
    } ],
    "variables" : [ {
      "name" : "a",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 27,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 31,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 33,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 37,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 39,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 41,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 43,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 20,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 28,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 32,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 44,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 45,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}