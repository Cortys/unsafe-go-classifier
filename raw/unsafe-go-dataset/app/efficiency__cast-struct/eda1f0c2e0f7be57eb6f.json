{
  "usage" : {
    "file" : "freelist.go",
    "label1" : "cast-struct",
    "label2" : "efficiency",
    "line" : "251",
    "module" : "github.com/coreos/bbolt",
    "pkg" : "github.com/coreos/bbolt",
    "project" : "elastic/beats",
    "snippet" : "ids := ((*[maxAllocSize]pgid)(unsafe.Pointer(&p.ptr)))[idx : idx+count]",
    "version" : "v1.3.1-coreos.6.0.20180318001526-af9db2027c98"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 236,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "flags",
                  "variable" : 2
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "p",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "operator" : "&",
              "right" : {
                "go-type" : 7,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "16"
                }
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 238,
      "code" : "if (p.flags & freelistPageFlag) == 0 {\n\tpanic(fmt.Sprintf(\"invalid freelist page: %d, page type is %s\", p.id, p.typ()))\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 237,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 28,
              "kind" : "constant",
              "value" : {
                "type" : "STRING",
                "value" : "invalid freelist page: %d, page type is %s"
              }
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "id",
                "variable" : 3
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 1
                }
              },
              "type" : "selector"
            }, {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 2,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "typ"
                },
                "go-type" : 33,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "p",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "go-type" : 28,
              "kind" : "expression",
              "type" : "call"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 29,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "fmt"
              },
              "type" : "identifier",
              "value" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Sprintf"
              }
            },
            "go-type" : 28,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 237,
      "code" : "panic(fmt.Sprintf(\"invalid freelist page: %d, page type is %s\", p.id, p.typ()))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 1, 7 ],
      "decl-vars" : [ 6, 7 ],
      "line-start" : 241,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "count"
          }
        } ],
        "right" : [ {
          "go-type" : 35,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "coerced-to" : {
            "go-type" : 35,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 35,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 35,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "count",
              "variable" : 5
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 241,
      "code" : "idx, count := 0, int(p.count)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 8 ],
      "in-vars" : [ 0, 6, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 242,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "count",
              "variable" : 6
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 35,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "65535"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 245,
      "code" : "if count == 0xFFFF {\n\tidx = 1\n\tcount = int(((*[maxAllocSize]pgid)(unsafe.Pointer(&p.ptr)))[0])\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 7 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 243,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 35,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "idx",
            "variable" : 7
          }
        } ],
        "right" : [ {
          "go-type" : 35,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 7 ],
      "line-end" : 243,
      "code" : "idx = 1",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 8 ],
      "in-vars" : [ 0, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 1, 7, 0, 6 ],
      "decl-vars" : [ ],
      "line-start" : 244,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 35,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "count",
            "variable" : 6
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 35,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 35,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 35,
          "kind" : "expression",
          "target" : {
            "go-type" : 5,
            "index" : {
              "go-type" : 35,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 36,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "contained" : {
                    "element" : {
                      "go-type" : 5,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 5,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "pgid"
                      }
                    },
                    "go-type" : 37,
                    "kind" : "type",
                    "length" : {
                      "go-type" : 38,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "2147483647"
                      }
                    },
                    "type" : "array"
                  },
                  "go-type" : 36,
                  "kind" : "type",
                  "type" : "pointer"
                },
                "go-type" : 36,
                "kind" : "expression",
                "target" : {
                  "coerced-to" : {
                    "go-type" : 39,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 2,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 39,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 39,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 40,
                    "kind" : "expression",
                    "operator" : "&",
                    "target" : {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "ptr",
                        "variable" : 8
                      },
                      "go-type" : 9,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 2,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "p",
                          "variable" : 1
                        }
                      },
                      "type" : "selector"
                    },
                    "type" : "unary"
                  },
                  "type" : "cast"
                },
                "type" : "cast"
              },
              "type" : "paren"
            },
            "type" : "index"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 6 ],
      "line-end" : 244,
      "code" : "count = int(((*[maxAllocSize]pgid)(unsafe.Pointer(&p.ptr)))[0])",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 10 ],
      "in-vars" : [ 7, 0, 6, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 248,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "count",
              "variable" : 6
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 35,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 257,
      "code" : "if count == 0 {\n\tf.ids = nil\n} else {\n\tids := ((*[maxAllocSize]pgid)(unsafe.Pointer(&p.ptr)))[idx : idx+count]\n\tf.ids = make([]pgid, len(ids))\n\tcopy(f.ids, ids)\n\n\tsort.Sort(pgids(f.ids))\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 14 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 249,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ids",
            "variable" : 9
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 41,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 249,
      "code" : "f.ids = nil",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 1, 7, 0, 6 ],
      "exit" : false,
      "out-vars" : [ 0, 10 ],
      "decl-vars" : [ 10 ],
      "line-start" : 251,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ids"
          }
        } ],
        "right" : [ {
          "go-type" : 14,
          "type" : "slice",
          "three" : false,
          "high" : {
            "go-type" : 35,
            "kind" : "expression",
            "left" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 7
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "count",
                "variable" : 6
              }
            },
            "type" : "binary"
          },
          "max" : null,
          "kind" : "expression",
          "low" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "idx",
              "variable" : 7
            }
          },
          "target" : {
            "go-type" : 36,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "element" : {
                    "go-type" : 5,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 5,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "pgid"
                    }
                  },
                  "go-type" : 37,
                  "kind" : "type",
                  "length" : {
                    "go-type" : 38,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "2147483647"
                    }
                  },
                  "type" : "array"
                },
                "go-type" : 36,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 36,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 39,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 2,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 39,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 39,
                "kind" : "expression",
                "target" : {
                  "go-type" : 40,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "ptr",
                      "variable" : 8
                    },
                    "go-type" : 9,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 2,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "p",
                        "variable" : 1
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "paren"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 251,
      "code" : "ids := ((*[maxAllocSize]pgid)(unsafe.Pointer(&p.ptr)))[idx : idx+count]",
      "entry" : false,
      "use-vars" : [ 7, 1, 6 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 12 ],
      "in-vars" : [ 0, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 10 ],
      "decl-vars" : [ ],
      "line-start" : 252,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ids",
            "variable" : 9
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "pgid"
              }
            },
            "go-type" : 14,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 14,
          "kind" : "expression",
          "rest" : [ {
            "arguments" : [ {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ids",
                "variable" : 10
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 42,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 35,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 252,
      "code" : "f.ids = make([]pgid, len(ids))",
      "entry" : false,
      "use-vars" : [ 0, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 0, 10 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 253,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ids",
              "variable" : 9
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ids",
              "variable" : 10
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 45,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 35,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 253,
      "code" : "copy(f.ids, ids)",
      "entry" : false,
      "use-vars" : [ 0, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 256,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 56,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 56,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "pgids"
              }
            },
            "go-type" : 56,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ids",
                "variable" : 9
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 47,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "sort"
            },
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Sort"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 256,
      "code" : "sort.Sort(pgids(f.ids))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 260,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reindex"
            },
            "go-type" : 57,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 260,
      "code" : "f.reindex()",
      "entry" : false,
      "use-vars" : [ 0 ]
    } ],
    "code" : "// read initializes the freelist from a freelist page.\nfunc (f *freelist) read(p *page) {\n\tif (p.flags & freelistPageFlag) == 0 {\n\t\tpanic(fmt.Sprintf(\"invalid freelist page: %d, page type is %s\", p.id, p.typ()))\n\t}\n\n\tidx, count := 0, int(p.count)\n\tif count == 0xFFFF {\n\t\tidx = 1\n\t\tcount = int(((*[maxAllocSize]pgid)(unsafe.Pointer(&p.ptr)))[0])\n\t}\n\n\tif count == 0 {\n\t\tf.ids = nil\n\t} else {\n\t\tids := ((*[maxAllocSize]pgid)(unsafe.Pointer(&p.ptr)))[idx : idx+count]\n\t\tf.ids = make([]pgid, len(ids))\n\t\tcopy(f.ids, ids)\n\n\t\tsort.Sort(pgids(f.ids))\n\t}\n\n\tf.reindex()\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "read",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Sprintf",
      "package" : 1,
      "type" : 29,
      "exported" : true
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 34,
      "exported" : false
    }, {
      "name" : "Sort",
      "package" : 3,
      "type" : 47,
      "exported" : true
    }, {
      "name" : "reindex",
      "package" : 0,
      "type" : 58,
      "exported" : false
    } ],
    "line-end" : 261,
    "line-start" : 235,
    "names" : [ "read" ],
    "package" : 0,
    "packages" : [ {
      "name" : "bolt",
      "path" : "github.com/coreos/bbolt"
    }, {
      "name" : "fmt",
      "path" : "fmt"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sort",
      "path" : "sort"
    } ],
    "params" : [ 1 ],
    "receivers" : [ 0 ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "(*github.com/coreos/bbolt.freelist) func(p *github.com/coreos/bbolt.page)",
      "params" : 1,
      "recv" : 0,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 2
      } ],
      "name" : "(p *github.com/coreos/bbolt.page)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*github.com/coreos/bbolt.page",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "page",
      "name" : "github.com/coreos/bbolt.page",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "id",
        "type" : 5
      }, {
        "name" : "flags",
        "type" : 7
      }, {
        "name" : "count",
        "type" : 7
      }, {
        "name" : "overflow",
        "type" : 8
      }, {
        "name" : "ptr",
        "type" : 9
      } ],
      "name" : "struct{id github.com/coreos/bbolt.pgid; flags uint16; count uint16; overflow uint32; ptr uintptr}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "pgid",
      "name" : "github.com/coreos/bbolt.pgid",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "elem" : 12,
      "name" : "*github.com/coreos/bbolt.freelist",
      "type" : "Pointer",
      "underlying" : 11
    }, {
      "local-name" : "freelist",
      "name" : "github.com/coreos/bbolt.freelist",
      "package" : 0,
      "type" : "Named",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "ids",
        "type" : 14
      }, {
        "name" : "allocs",
        "type" : 15
      }, {
        "name" : "pending",
        "type" : 17
      }, {
        "name" : "cache",
        "type" : 22
      } ],
      "name" : "struct{ids []github.com/coreos/bbolt.pgid; allocs map[github.com/coreos/bbolt.pgid]github.com/coreos/bbolt.txid; pending map[github.com/coreos/bbolt.txid]*github.com/coreos/bbolt.txPending; cache map[github.com/coreos/bbolt.pgid]bool}",
      "type" : "Struct",
      "underlying" : 13
    }, {
      "elem" : 5,
      "name" : "[]github.com/coreos/bbolt.pgid",
      "type" : "Slice",
      "underlying" : 14
    }, {
      "elem" : 16,
      "key" : 5,
      "name" : "map[github.com/coreos/bbolt.pgid]github.com/coreos/bbolt.txid",
      "type" : "Map",
      "underlying" : 15
    }, {
      "local-name" : "txid",
      "name" : "github.com/coreos/bbolt.txid",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "elem" : 18,
      "key" : 16,
      "name" : "map[github.com/coreos/bbolt.txid]*github.com/coreos/bbolt.txPending",
      "type" : "Map",
      "underlying" : 17
    }, {
      "elem" : 19,
      "name" : "*github.com/coreos/bbolt.txPending",
      "type" : "Pointer",
      "underlying" : 18
    }, {
      "local-name" : "txPending",
      "name" : "github.com/coreos/bbolt.txPending",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "ids",
        "type" : 14
      }, {
        "name" : "alloctx",
        "type" : 21
      }, {
        "name" : "lastReleaseBegin",
        "type" : 16
      } ],
      "name" : "struct{ids []github.com/coreos/bbolt.pgid; alloctx []github.com/coreos/bbolt.txid; lastReleaseBegin github.com/coreos/bbolt.txid}",
      "type" : "Struct",
      "underlying" : 20
    }, {
      "elem" : 16,
      "name" : "[]github.com/coreos/bbolt.txid",
      "type" : "Slice",
      "underlying" : 21
    }, {
      "elem" : 23,
      "key" : 5,
      "name" : "map[github.com/coreos/bbolt.pgid]bool",
      "type" : "Map",
      "underlying" : 22
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "name" : "func(interface{})",
      "params" : 26,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 25,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 27
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 27
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "name" : "func(format string, a ...interface{}) string",
      "params" : 30,
      "recv" : -1,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "format",
        "type" : 28
      }, {
        "name" : "a",
        "type" : 31
      } ],
      "name" : "(format string, a []interface{})",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "elem" : 27,
      "name" : "[]interface{}",
      "type" : "Slice",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 28
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 32
    }, {
      "name" : "func() string",
      "params" : 10,
      "recv" : -1,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "name" : "(*github.com/coreos/bbolt.page) func() string",
      "params" : 10,
      "recv" : 4,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 34,
      "variadic" : false
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 35
    }, {
      "elem" : 37,
      "name" : "*[2147483647]github.com/coreos/bbolt.pgid",
      "type" : "Pointer",
      "underlying" : 36
    }, {
      "elem" : 5,
      "name" : "[2147483647]github.com/coreos/bbolt.pgid",
      "type" : "Array",
      "underlying" : 37
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 38
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 39
    }, {
      "elem" : 9,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 40
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 41
    }, {
      "name" : "func([]github.com/coreos/bbolt.pgid) int",
      "params" : 43,
      "recv" : -1,
      "results" : 44,
      "type" : "Signature",
      "underlying" : 42,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "([]github.com/coreos/bbolt.pgid)",
      "type" : "Tuple",
      "underlying" : 43
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 35
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "name" : "func([]github.com/coreos/bbolt.pgid, []github.com/coreos/bbolt.pgid) int",
      "params" : 46,
      "recv" : -1,
      "results" : 44,
      "type" : "Signature",
      "underlying" : 45,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      }, {
        "name" : "",
        "type" : 14
      } ],
      "name" : "([]github.com/coreos/bbolt.pgid, []github.com/coreos/bbolt.pgid)",
      "type" : "Tuple",
      "underlying" : 46
    }, {
      "name" : "func(data sort.Interface)",
      "params" : 48,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 47,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 49
      } ],
      "name" : "(data sort.Interface)",
      "type" : "Tuple",
      "underlying" : 48
    }, {
      "local-name" : "Interface",
      "name" : "sort.Interface",
      "package" : 3,
      "type" : "Named",
      "underlying" : 50
    }, {
      "methods" : [ {
        "name" : "Len",
        "type" : 51
      }, {
        "name" : "Less",
        "type" : 52
      }, {
        "name" : "Swap",
        "type" : 55
      } ],
      "name" : "interface{Len() int; Less(i int, j int) bool; Swap(i int, j int)}",
      "type" : "Interface",
      "underlying" : 50
    }, {
      "name" : "(sort.Interface) func() int",
      "params" : 10,
      "recv" : 11,
      "results" : 44,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "name" : "(sort.Interface) func(i int, j int) bool",
      "params" : 53,
      "recv" : 12,
      "results" : 54,
      "type" : "Signature",
      "underlying" : 52,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 35
      }, {
        "name" : "j",
        "type" : 35
      } ],
      "name" : "(i int, j int)",
      "type" : "Tuple",
      "underlying" : 53
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 54
    }, {
      "name" : "(sort.Interface) func(i int, j int)",
      "params" : 53,
      "recv" : 13,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 55,
      "variadic" : false
    }, {
      "local-name" : "pgids",
      "name" : "github.com/coreos/bbolt.pgids",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "name" : "func()",
      "params" : 10,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 57,
      "variadic" : false
    }, {
      "name" : "(*github.com/coreos/bbolt.freelist) func()",
      "params" : 10,
      "recv" : 14,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 58,
      "variadic" : false
    } ],
    "variables" : [ {
      "name" : "f",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "flags",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "id",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "count",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "count",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ids",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ids",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}