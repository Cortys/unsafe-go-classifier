{
  "usage" : {
    "file" : "iterator_native2.go",
    "label1" : "cast-struct",
    "label2" : "efficiency",
    "line" : "286",
    "module" : "gorgonia.org/tensor",
    "pkg" : "gorgonia.org/tensor/native",
    "project" : "gorgonia/gorgonia",
    "snippet" : "retVal = append(retVal, *(*[]uint)(unsafe.Pointer(hdr)))",
    "version" : "v0.9.6"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 66, 67 ],
      "exit" : false,
      "out-vars" : [ 66, 67 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 66, 67, 71 ],
      "exit" : false,
      "out-vars" : [ 71, 66, 67 ],
      "decl-vars" : [ ],
      "line-start" : 261,
      "ast" : {
        "condition" : {
          "go-type" : 256,
          "kind" : "expression",
          "left" : {
            "go-type" : 100,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 71
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 257,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 263,
      "code" : "if err := checkNativeSelectable(t, axis, Uint); err != nil {\n\treturn nil, err\n}",
      "entry" : false,
      "use-vars" : [ 71 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 66, 67 ],
      "exit" : false,
      "out-vars" : [ 66, 67, 71 ],
      "decl-vars" : [ 71 ],
      "line-start" : 261,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 66
            }
          }, {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "axis",
              "variable" : 67
            }
          }, {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Uint",
              "variable" : 70
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 254,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "checkNativeSelectable"
            }
          },
          "go-type" : 100,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 261,
      "code" : "err := checkNativeSelectable(t, axis, Uint)",
      "entry" : false,
      "use-vars" : [ 66, 67 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 71 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 262,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 257,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 71
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 262,
      "code" : "return nil, err",
      "entry" : false,
      "use-vars" : [ 71 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 9, 13 ],
      "in-vars" : [ 66, 67 ],
      "exit" : false,
      "out-vars" : [ 67, 66 ],
      "decl-vars" : [ ],
      "line-start" : 265,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Dims"
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 2,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Shape"
                },
                "go-type" : 184,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 66
                  }
                },
                "type" : "selector"
              },
              "go-type" : 7,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "selector"
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 291,
      "code" : "switch t.Shape().Dims() {\ncase 0, 1:\n\tretVal = make([][]uint, 1)\n\tretVal[0] = t.Uints()\ncase 2:\n\tif axis == 0 {\n\t\treturn MatrixU(t)\n\t}\n\tfallthrough\ndefault:\n\n\tdata := t.Uints()\n\tstride := t.Strides()[axis]\n\tupper := ProdInts(t.Shape()[:axis+1])\n\tretVal = make([][]uint, 0, upper)\n\tfor i, r := 0, 0; r < upper; i += stride {\n\t\thdr := &reflect.SliceHeader{\n\t\t\tData: uintptr(unsafe.Pointer(&data[i])),\n\t\t\tLen:  stride,\n\t\t\tCap:  stride,\n\t\t}\n\t\tretVal = append(retVal, *(*[]uint)(unsafe.Pointer(hdr)))\n\t\tr++\n\t}\n\treturn retVal, nil\n\n}",
      "entry" : false,
      "use-vars" : [ 66 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 66 ],
      "exit" : false,
      "out-vars" : [ 66 ],
      "decl-vars" : [ ],
      "line-start" : 266,
      "ast" : {
        "expressions" : [ {
          "go-type" : 9,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 9,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 268,
      "code" : "case 0, 1:\n\tretVal = make([][]uint, 1)\n\tretVal[0] = t.Uints()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 68 ],
      "successors" : [ 8 ],
      "in-vars" : [ 66 ],
      "exit" : false,
      "out-vars" : [ 68, 66 ],
      "decl-vars" : [ ],
      "line-start" : 267,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 252,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "retVal",
            "variable" : 68
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "element" : {
                "go-type" : 56,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 56,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint"
                }
              },
              "go-type" : 253,
              "kind" : "type",
              "type" : "slice"
            },
            "go-type" : 252,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 252,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 9,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 68 ],
      "line-end" : 267,
      "code" : "retVal = make([][]uint, 1)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 68 ],
      "successors" : [ 25 ],
      "in-vars" : [ 68, 66 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 268,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 253,
          "index" : {
            "go-type" : 9,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 252,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "retVal",
              "variable" : 68
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uints"
            },
            "go-type" : 258,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 66
              }
            },
            "type" : "selector"
          },
          "go-type" : 253,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 268,
      "code" : "retVal[0] = t.Uints()",
      "entry" : false,
      "use-vars" : [ 68, 66 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 66, 67 ],
      "exit" : false,
      "out-vars" : [ 67, 66 ],
      "decl-vars" : [ ],
      "line-start" : 269,
      "ast" : {
        "expressions" : [ {
          "go-type" : 9,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "2"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 273,
      "code" : "case 2:\n\tif axis == 0 {\n\t\treturn MatrixU(t)\n\t}\n\tfallthrough",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 66, 67 ],
      "exit" : false,
      "out-vars" : [ 66, 67 ],
      "decl-vars" : [ ],
      "line-start" : 270,
      "ast" : {
        "condition" : {
          "go-type" : 256,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "axis",
              "variable" : 67
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 9,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 272,
      "code" : "if axis == 0 {\n\treturn MatrixU(t)\n}",
      "entry" : false,
      "use-vars" : [ 67 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 66 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 271,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 66
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 260,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "MatrixU"
            }
          },
          "go-type" : 251,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 271,
      "code" : "return MatrixU(t)",
      "entry" : false,
      "use-vars" : [ 66 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 66, 67 ],
      "exit" : false,
      "out-vars" : [ 66, 67 ],
      "decl-vars" : [ ],
      "line-start" : 273,
      "ast" : {
        "kind" : "statement",
        "type" : "fallthrough"
      },
      "assign-vars" : [ ],
      "line-end" : 273,
      "code" : "fallthrough",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 66, 67 ],
      "exit" : false,
      "out-vars" : [ 66, 67 ],
      "decl-vars" : [ ],
      "line-start" : 274,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 289,
      "code" : "default:\n\n\tdata := t.Uints()\n\tstride := t.Strides()[axis]\n\tupper := ProdInts(t.Shape()[:axis+1])\n\tretVal = make([][]uint, 0, upper)\n\tfor i, r := 0, 0; r < upper; i += stride {\n\t\thdr := &reflect.SliceHeader{\n\t\t\tData: uintptr(unsafe.Pointer(&data[i])),\n\t\t\tLen:  stride,\n\t\t\tCap:  stride,\n\t\t}\n\t\tretVal = append(retVal, *(*[]uint)(unsafe.Pointer(hdr)))\n\t\tr++\n\t}\n\treturn retVal, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 66, 67 ],
      "exit" : false,
      "out-vars" : [ 66, 77, 67 ],
      "decl-vars" : [ 77 ],
      "line-start" : 276,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uints"
            },
            "go-type" : 258,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 66
              }
            },
            "type" : "selector"
          },
          "go-type" : 253,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 276,
      "code" : "data := t.Uints()",
      "entry" : false,
      "use-vars" : [ 66 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 66, 77, 67 ],
      "exit" : false,
      "out-vars" : [ 67, 66, 77, 75 ],
      "decl-vars" : [ 75 ],
      "line-start" : 277,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "stride"
          }
        } ],
        "right" : [ {
          "go-type" : 9,
          "index" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "axis",
              "variable" : 67
            }
          },
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 6,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Strides"
              },
              "go-type" : 176,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 66
                }
              },
              "type" : "selector"
            },
            "go-type" : 8,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "index"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 277,
      "code" : "stride := t.Strides()[axis]",
      "entry" : false,
      "use-vars" : [ 66, 67 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 66, 77, 75, 67 ],
      "exit" : false,
      "out-vars" : [ 77, 75, 72 ],
      "decl-vars" : [ 72 ],
      "line-start" : 278,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "upper"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "type" : "slice",
            "three" : false,
            "high" : {
              "go-type" : 9,
              "kind" : "expression",
              "left" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "axis",
                  "variable" : 67
                }
              },
              "operator" : "+",
              "right" : {
                "go-type" : 9,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "type" : "binary"
            },
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 2,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Shape"
                },
                "go-type" : 184,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 66
                  }
                },
                "type" : "selector"
              },
              "go-type" : 7,
              "kind" : "expression",
              "type" : "call"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 262,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ProdInts"
            }
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 278,
      "code" : "upper := ProdInts(t.Shape()[:axis+1])",
      "entry" : false,
      "use-vars" : [ 67, 66 ]
    }, {
      "update-vars" : [ 68 ],
      "successors" : [ 19 ],
      "in-vars" : [ 72, 77, 75 ],
      "exit" : false,
      "out-vars" : [ 68, 72, 77, 75 ],
      "decl-vars" : [ ],
      "line-start" : 279,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 252,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "retVal",
            "variable" : 68
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "element" : {
                "go-type" : 56,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 56,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint"
                }
              },
              "go-type" : 253,
              "kind" : "type",
              "type" : "slice"
            },
            "go-type" : 252,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 252,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 9,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "upper",
              "variable" : 72
            }
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 68 ],
      "line-end" : 279,
      "code" : "retVal = make([][]uint, 0, upper)",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21, 24 ],
      "in-vars" : [ 75, 68, 72, 77, 73, 74 ],
      "exit" : false,
      "out-vars" : [ 75, 68, 72, 77, 73, 74 ],
      "decl-vars" : [ ],
      "line-start" : 280,
      "ast" : {
        "condition" : {
          "go-type" : 256,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "r",
              "variable" : 73
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "upper",
              "variable" : 72
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 288,
      "code" : "for i, r := 0, 0; r < upper; i += stride {\n\thdr := &reflect.SliceHeader{\n\t\tData: uintptr(unsafe.Pointer(&data[i])),\n\t\tLen:  stride,\n\t\tCap:  stride,\n\t}\n\tretVal = append(retVal, *(*[]uint)(unsafe.Pointer(hdr)))\n\tr++\n}",
      "entry" : false,
      "use-vars" : [ 73, 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 68, 72, 77, 75 ],
      "exit" : false,
      "out-vars" : [ 68, 72, 77, 73, 74, 75 ],
      "decl-vars" : [ 73, 74 ],
      "line-start" : 280,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "r"
          }
        } ],
        "right" : [ {
          "go-type" : 9,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 9,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 280,
      "code" : "i, r := 0, 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 74 ],
      "successors" : [ 18 ],
      "in-vars" : [ 72, 77, 73, 74, 75, 68 ],
      "exit" : false,
      "out-vars" : [ 75, 68, 72, 77, 73, 74 ],
      "decl-vars" : [ ],
      "line-start" : 280,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 74
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "stride",
            "variable" : 75
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 74 ],
      "line-end" : 280,
      "code" : "i += stride",
      "entry" : false,
      "use-vars" : [ 75, 74 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 75, 68, 72, 77, 73, 74 ],
      "exit" : false,
      "out-vars" : [ 77, 73, 74, 75, 68, 80, 72 ],
      "decl-vars" : [ 80 ],
      "line-start" : 281,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "hdr"
          }
        } ],
        "right" : [ {
          "go-type" : 265,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 266,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "reflect"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 266,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SliceHeader"
              }
            },
            "go-type" : 266,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Data",
                  "variable" : 76
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "coerced-to" : {
                  "go-type" : 42,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 42,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 42,
                "kind" : "expression",
                "target" : {
                  "coerced-to" : {
                    "go-type" : 18,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 3,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 18,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 18,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 268,
                    "kind" : "expression",
                    "operator" : "&",
                    "target" : {
                      "go-type" : 56,
                      "index" : {
                        "go-type" : 9,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "i",
                          "variable" : 74
                        }
                      },
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 253,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "data",
                          "variable" : 77
                        }
                      },
                      "type" : "index"
                    },
                    "type" : "unary"
                  },
                  "type" : "cast"
                },
                "type" : "cast"
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Len",
                  "variable" : 78
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stride",
                  "variable" : 75
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Cap",
                  "variable" : 79
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stride",
                  "variable" : 75
                }
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 285,
      "code" : "hdr := &reflect.SliceHeader{\n\tData: uintptr(unsafe.Pointer(&data[i])),\n\tLen:  stride,\n\tCap:  stride,\n}",
      "entry" : false,
      "use-vars" : [ 77, 75, 74 ]
    }, {
      "update-vars" : [ 68 ],
      "successors" : [ 23 ],
      "in-vars" : [ 75, 68, 80, 72, 77, 73, 74 ],
      "exit" : false,
      "out-vars" : [ 73, 74, 75, 68, 72, 77 ],
      "decl-vars" : [ ],
      "line-start" : 286,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 252,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "retVal",
            "variable" : 68
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 252,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "retVal",
              "variable" : 68
            }
          }, {
            "go-type" : 253,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "element" : {
                    "go-type" : 56,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 56,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uint"
                    }
                  },
                  "go-type" : 253,
                  "kind" : "type",
                  "type" : "slice"
                },
                "go-type" : 272,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 272,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 18,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 18,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 18,
                "kind" : "expression",
                "target" : {
                  "go-type" : 265,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "hdr",
                    "variable" : 80
                  }
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "star"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 269,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 252,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 68 ],
      "line-end" : 286,
      "code" : "retVal = append(retVal, *(*[]uint)(unsafe.Pointer(hdr)))",
      "entry" : false,
      "use-vars" : [ 68, 80 ]
    }, {
      "update-vars" : [ 73 ],
      "successors" : [ 20 ],
      "in-vars" : [ 73, 74, 75, 68, 72, 77 ],
      "exit" : false,
      "out-vars" : [ 68, 72, 77, 73, 74, 75 ],
      "decl-vars" : [ ],
      "line-start" : 287,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "r",
            "variable" : 73
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 73 ],
      "line-end" : 287,
      "code" : "r++",
      "entry" : false,
      "use-vars" : [ 73 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 68 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 289,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 252,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "retVal",
            "variable" : 68
          }
        }, {
          "go-type" : 257,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 289,
      "code" : "return retVal, nil",
      "entry" : false,
      "use-vars" : [ 68 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 292,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 292,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// SelectU creates a slice of flat data types. See Example of NativeSelectF64.\nfunc SelectU(t *Dense, axis int) (retVal [][]uint, err error) {\n\tif err := checkNativeSelectable(t, axis, Uint); err != nil {\n\t\treturn nil, err\n\t}\n\n\tswitch t.Shape().Dims() {\n\tcase 0, 1:\n\t\tretVal = make([][]uint, 1)\n\t\tretVal[0] = t.Uints()\n\tcase 2:\n\t\tif axis == 0 {\n\t\t\treturn MatrixU(t)\n\t\t}\n\t\tfallthrough\n\tdefault:\n\n\t\tdata := t.Uints()\n\t\tstride := t.Strides()[axis]\n\t\tupper := ProdInts(t.Shape()[:axis+1])\n\t\tretVal = make([][]uint, 0, upper)\n\t\tfor i, r := 0, 0; r < upper; i += stride {\n\t\t\thdr := &reflect.SliceHeader{\n\t\t\t\tData: uintptr(unsafe.Pointer(&data[i])),\n\t\t\t\tLen:  stride,\n\t\t\t\tCap:  stride,\n\t\t\t}\n\t\t\tretVal = append(retVal, *(*[]uint)(unsafe.Pointer(hdr)))\n\t\t\tr++\n\t\t}\n\t\treturn retVal, nil\n\n\t}\n\treturn\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "SelectU",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "checkNativeSelectable",
      "package" : 0,
      "type" : 254,
      "exported" : false
    }, {
      "name" : "Shape",
      "package" : 1,
      "type" : 184,
      "exported" : true
    }, {
      "name" : "Dims",
      "package" : 1,
      "type" : 23,
      "exported" : true
    }, {
      "name" : "Uints",
      "package" : 2,
      "type" : 258,
      "exported" : true
    }, {
      "name" : "MatrixU",
      "package" : 0,
      "type" : 260,
      "exported" : true
    }, {
      "name" : "Strides",
      "package" : 1,
      "type" : 176,
      "exported" : true
    }, {
      "name" : "ProdInts",
      "package" : 1,
      "type" : 262,
      "exported" : true
    } ],
    "line-end" : 293,
    "line-start" : 260,
    "names" : [ "SelectU" ],
    "package" : 0,
    "packages" : [ {
      "name" : "native",
      "path" : "gorgonia.org/tensor/native"
    }, {
      "name" : "tensor",
      "path" : "gorgonia.org/tensor"
    }, {
      "name" : "storage",
      "path" : "gorgonia.org/tensor/internal/storage"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "fmt",
      "path" : "fmt"
    }, {
      "name" : "gob",
      "path" : "encoding/gob"
    }, {
      "name" : "io",
      "path" : "io"
    } ],
    "params" : [ 66, 67 ],
    "receivers" : [ ],
    "results" : [ 68, 69 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(t *gorgonia.org/tensor.Dense, axis int) (retVal [][]uint, err error)",
      "params" : 1,
      "recv" : -1,
      "results" : 251,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "axis",
        "type" : 9
      } ],
      "name" : "(t *gorgonia.org/tensor.Dense, axis int)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*gorgonia.org/tensor.Dense",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "Dense",
      "name" : "gorgonia.org/tensor.Dense",
      "package" : 1,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "AP",
        "type" : 5
      }, {
        "name" : "array",
        "type" : 14
      }, {
        "name" : "flag",
        "type" : 90
      }, {
        "name" : "e",
        "type" : 91
      }, {
        "name" : "oe",
        "type" : 115
      }, {
        "name" : "old",
        "type" : 5
      }, {
        "name" : "transposeWith",
        "type" : 8
      }, {
        "name" : "viewOf",
        "type" : 42
      }, {
        "name" : "mask",
        "type" : 250
      }, {
        "name" : "maskIsSoft",
        "type" : 10
      } ],
      "name" : "struct{gorgonia.org/tensor.AP; gorgonia.org/tensor.array; flag gorgonia.org/tensor.MemoryFlag; e gorgonia.org/tensor.Engine; oe gorgonia.org/tensor.standardEngine; old gorgonia.org/tensor.AP; transposeWith []int; viewOf uintptr; mask []bool; maskIsSoft bool}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "AP",
      "name" : "gorgonia.org/tensor.AP",
      "package" : 1,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "shape",
        "type" : 7
      }, {
        "name" : "strides",
        "type" : 8
      }, {
        "name" : "fin",
        "type" : 10
      }, {
        "name" : "o",
        "type" : 11
      }, {
        "name" : "Δ",
        "type" : 13
      } ],
      "name" : "struct{shape gorgonia.org/tensor.Shape; strides []int; fin bool; o gorgonia.org/tensor.DataOrder; Δ gorgonia.org/tensor.Triangle}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "local-name" : "Shape",
      "name" : "gorgonia.org/tensor.Shape",
      "package" : 1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 9,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 8
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "local-name" : "DataOrder",
      "name" : "gorgonia.org/tensor.DataOrder",
      "package" : 1,
      "type" : "Named",
      "underlying" : 12
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "local-name" : "Triangle",
      "name" : "gorgonia.org/tensor.Triangle",
      "package" : 1,
      "type" : "Named",
      "underlying" : 12
    }, {
      "local-name" : "array",
      "name" : "gorgonia.org/tensor.array",
      "package" : 1,
      "type" : "Named",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "Header",
        "type" : 16
      }, {
        "name" : "t",
        "type" : 19
      }, {
        "name" : "v",
        "type" : 89
      } ],
      "name" : "struct{gorgonia.org/tensor/internal/storage.Header; t gorgonia.org/tensor.Dtype; v interface{}}",
      "type" : "Struct",
      "underlying" : 15
    }, {
      "local-name" : "Header",
      "name" : "gorgonia.org/tensor/internal/storage.Header",
      "package" : 2,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "Ptr",
        "type" : 18
      }, {
        "name" : "L",
        "type" : 9
      }, {
        "name" : "C",
        "type" : 9
      } ],
      "name" : "struct{Ptr unsafe.Pointer; L int; C int}",
      "type" : "Struct",
      "underlying" : 17
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 3,
      "type" : "Basic",
      "underlying" : 18
    }, {
      "local-name" : "Dtype",
      "name" : "gorgonia.org/tensor.Dtype",
      "package" : 1,
      "type" : "Named",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "Type",
        "type" : 21
      } ],
      "name" : "struct{reflect.Type}",
      "type" : "Struct",
      "underlying" : 20
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 4,
      "type" : "Named",
      "underlying" : 22
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 23
      }, {
        "name" : "AssignableTo",
        "type" : 26
      }, {
        "name" : "Bits",
        "type" : 23
      }, {
        "name" : "ChanDir",
        "type" : 29
      }, {
        "name" : "Comparable",
        "type" : 32
      }, {
        "name" : "ConvertibleTo",
        "type" : 26
      }, {
        "name" : "Elem",
        "type" : 33
      }, {
        "name" : "Field",
        "type" : 35
      }, {
        "name" : "FieldAlign",
        "type" : 23
      }, {
        "name" : "FieldByIndex",
        "type" : 43
      }, {
        "name" : "FieldByName",
        "type" : 45
      }, {
        "name" : "FieldByNameFunc",
        "type" : 48
      }, {
        "name" : "Implements",
        "type" : 26
      }, {
        "name" : "In",
        "type" : 52
      }, {
        "name" : "IsVariadic",
        "type" : 32
      }, {
        "name" : "Key",
        "type" : 33
      }, {
        "name" : "Kind",
        "type" : 53
      }, {
        "name" : "Len",
        "type" : 23
      }, {
        "name" : "Method",
        "type" : 57
      }, {
        "name" : "MethodByName",
        "type" : 76
      }, {
        "name" : "Name",
        "type" : 78
      }, {
        "name" : "NumField",
        "type" : 23
      }, {
        "name" : "NumIn",
        "type" : 23
      }, {
        "name" : "NumMethod",
        "type" : 23
      }, {
        "name" : "NumOut",
        "type" : 23
      }, {
        "name" : "Out",
        "type" : 52
      }, {
        "name" : "PkgPath",
        "type" : 78
      }, {
        "name" : "Size",
        "type" : 79
      }, {
        "name" : "String",
        "type" : 78
      }, {
        "name" : "common",
        "type" : 81
      }, {
        "name" : "uncommon",
        "type" : 83
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 22
    }, {
      "name" : "func() int",
      "params" : 24,
      "recv" : 0,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 23,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "name" : "func(u reflect.Type) bool",
      "params" : 27,
      "recv" : 1,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 26,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 21
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "name" : "func() reflect.ChanDir",
      "params" : 24,
      "recv" : 2,
      "results" : 30,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 31
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 4,
      "type" : "Named",
      "underlying" : 9
    }, {
      "name" : "func() bool",
      "params" : 24,
      "recv" : 3,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "name" : "func() reflect.Type",
      "params" : 24,
      "recv" : 4,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "name" : "func(i int) reflect.StructField",
      "params" : 36,
      "recv" : 5,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 9
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 38
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 37
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 4,
      "type" : "Named",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 40
      }, {
        "name" : "PkgPath",
        "type" : 40
      }, {
        "name" : "Type",
        "type" : 21
      }, {
        "name" : "Tag",
        "type" : 41
      }, {
        "name" : "Offset",
        "type" : 42
      }, {
        "name" : "Index",
        "type" : 8
      }, {
        "name" : "Anonymous",
        "type" : 10
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 39
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 4,
      "type" : "Named",
      "underlying" : 40
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 42
    }, {
      "name" : "func(index []int) reflect.StructField",
      "params" : 44,
      "recv" : 6,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 8
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "name" : "func(name string) (reflect.StructField, bool)",
      "params" : 46,
      "recv" : 7,
      "results" : 47,
      "type" : "Signature",
      "underlying" : 45,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 40
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 38
      }, {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 47
    }, {
      "name" : "func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 49,
      "recv" : 8,
      "results" : 47,
      "type" : "Signature",
      "underlying" : 48,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 50
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 49
    }, {
      "name" : "func(string) bool",
      "params" : 51,
      "recv" : -1,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 50,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 51
    }, {
      "name" : "func(i int) reflect.Type",
      "params" : 36,
      "recv" : 9,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 52,
      "variadic" : false
    }, {
      "name" : "func() reflect.Kind",
      "params" : 24,
      "recv" : 10,
      "results" : 54,
      "type" : "Signature",
      "underlying" : 53,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 55
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 54
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 4,
      "type" : "Named",
      "underlying" : 56
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 56
    }, {
      "name" : "func(int) reflect.Method",
      "params" : 25,
      "recv" : 11,
      "results" : 58,
      "type" : "Signature",
      "underlying" : 57,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 59
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 58
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 4,
      "type" : "Named",
      "underlying" : 60
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 40
      }, {
        "name" : "PkgPath",
        "type" : 40
      }, {
        "name" : "Type",
        "type" : 21
      }, {
        "name" : "Func",
        "type" : 61
      }, {
        "name" : "Index",
        "type" : 9
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 60
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 4,
      "type" : "Named",
      "underlying" : 62
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 63
      }, {
        "name" : "ptr",
        "type" : 18
      }, {
        "name" : "flag",
        "type" : 75
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 62
    }, {
      "elem" : 64,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 63
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 4,
      "type" : "Named",
      "underlying" : 65
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 42
      }, {
        "name" : "ptrdata",
        "type" : 42
      }, {
        "name" : "hash",
        "type" : 66
      }, {
        "name" : "tflag",
        "type" : 67
      }, {
        "name" : "align",
        "type" : 68
      }, {
        "name" : "fieldAlign",
        "type" : 68
      }, {
        "name" : "kind",
        "type" : 68
      }, {
        "name" : "equal",
        "type" : 69
      }, {
        "name" : "gcdata",
        "type" : 71
      }, {
        "name" : "str",
        "type" : 72
      }, {
        "name" : "ptrToThis",
        "type" : 74
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 65
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 66
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 4,
      "type" : "Named",
      "underlying" : 68
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 68
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 70,
      "recv" : -1,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 69,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 18
      }, {
        "name" : "",
        "type" : 18
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 70
    }, {
      "elem" : 12,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 71
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 4,
      "type" : "Named",
      "underlying" : 73
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 73
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 4,
      "type" : "Named",
      "underlying" : 73
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 4,
      "type" : "Named",
      "underlying" : 42
    }, {
      "name" : "func(string) (reflect.Method, bool)",
      "params" : 51,
      "recv" : 12,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 76,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 59
      }, {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 77
    }, {
      "name" : "func() string",
      "params" : 24,
      "recv" : 13,
      "results" : 51,
      "type" : "Signature",
      "underlying" : 78,
      "variadic" : false
    }, {
      "name" : "func() uintptr",
      "params" : 24,
      "recv" : 14,
      "results" : 80,
      "type" : "Signature",
      "underlying" : 79,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 42
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 80
    }, {
      "name" : "func() *reflect.rtype",
      "params" : 24,
      "recv" : 15,
      "results" : 82,
      "type" : "Signature",
      "underlying" : 81,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 63
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 82
    }, {
      "name" : "func() *reflect.uncommonType",
      "params" : 24,
      "recv" : 16,
      "results" : 84,
      "type" : "Signature",
      "underlying" : 83,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 85
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 84
    }, {
      "elem" : 86,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 85
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 4,
      "type" : "Named",
      "underlying" : 87
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 72
      }, {
        "name" : "mcount",
        "type" : 88
      }, {
        "name" : "xcount",
        "type" : 88
      }, {
        "name" : "moff",
        "type" : 66
      }, {
        "name" : "_",
        "type" : 66
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 87
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 88
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 89
    }, {
      "local-name" : "MemoryFlag",
      "name" : "gorgonia.org/tensor.MemoryFlag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 12
    }, {
      "local-name" : "Engine",
      "name" : "gorgonia.org/tensor.Engine",
      "package" : 1,
      "type" : "Named",
      "underlying" : 92
    }, {
      "methods" : [ {
        "name" : "Accessible",
        "type" : 93
      }, {
        "name" : "Alloc",
        "type" : 102
      }, {
        "name" : "AllocAccessible",
        "type" : 32
      }, {
        "name" : "Free",
        "type" : 105
      }, {
        "name" : "Memclr",
        "type" : 108
      }, {
        "name" : "Memcpy",
        "type" : 109
      }, {
        "name" : "Memset",
        "type" : 111
      }, {
        "name" : "WorksWith",
        "type" : 113
      } ],
      "name" : "interface{Accessible(mem gorgonia.org/tensor.Memory) (gorgonia.org/tensor.Memory, error); Alloc(size int64) (gorgonia.org/tensor.Memory, error); AllocAccessible() bool; Free(mem gorgonia.org/tensor.Memory, size int64) error; Memclr(mem gorgonia.org/tensor.Memory); Memcpy(dst gorgonia.org/tensor.Memory, src gorgonia.org/tensor.Memory) error; Memset(mem gorgonia.org/tensor.Memory, val interface{}) error; WorksWith(order gorgonia.org/tensor.DataOrder) bool}",
      "type" : "Interface",
      "underlying" : 92
    }, {
      "name" : "func(mem gorgonia.org/tensor.Memory) (gorgonia.org/tensor.Memory, error)",
      "params" : 94,
      "recv" : 18,
      "results" : 99,
      "type" : "Signature",
      "underlying" : 93,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "mem",
        "type" : 95
      } ],
      "name" : "(mem gorgonia.org/tensor.Memory)",
      "type" : "Tuple",
      "underlying" : 94
    }, {
      "local-name" : "Memory",
      "name" : "gorgonia.org/tensor.Memory",
      "package" : 1,
      "type" : "Named",
      "underlying" : 96
    }, {
      "methods" : [ {
        "name" : "MemSize",
        "type" : 79
      }, {
        "name" : "Pointer",
        "type" : 97
      }, {
        "name" : "Uintptr",
        "type" : 79
      } ],
      "name" : "interface{MemSize() uintptr; Pointer() unsafe.Pointer; Uintptr() uintptr}",
      "type" : "Interface",
      "underlying" : 96
    }, {
      "name" : "func() unsafe.Pointer",
      "params" : 24,
      "recv" : 17,
      "results" : 98,
      "type" : "Signature",
      "underlying" : 97,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 18
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 98
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 95
      }, {
        "name" : "",
        "type" : 100
      } ],
      "name" : "(gorgonia.org/tensor.Memory, error)",
      "type" : "Tuple",
      "underlying" : 99
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 101
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 78
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 101
    }, {
      "name" : "func(size int64) (gorgonia.org/tensor.Memory, error)",
      "params" : 103,
      "recv" : 19,
      "results" : 99,
      "type" : "Signature",
      "underlying" : 102,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 104
      } ],
      "name" : "(size int64)",
      "type" : "Tuple",
      "underlying" : 103
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 104
    }, {
      "name" : "func(mem gorgonia.org/tensor.Memory, size int64) error",
      "params" : 106,
      "recv" : 20,
      "results" : 107,
      "type" : "Signature",
      "underlying" : 105,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "mem",
        "type" : 95
      }, {
        "name" : "size",
        "type" : 104
      } ],
      "name" : "(mem gorgonia.org/tensor.Memory, size int64)",
      "type" : "Tuple",
      "underlying" : 106
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 100
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 107
    }, {
      "name" : "func(mem gorgonia.org/tensor.Memory)",
      "params" : 94,
      "recv" : 21,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 108,
      "variadic" : false
    }, {
      "name" : "func(dst gorgonia.org/tensor.Memory, src gorgonia.org/tensor.Memory) error",
      "params" : 110,
      "recv" : 22,
      "results" : 107,
      "type" : "Signature",
      "underlying" : 109,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dst",
        "type" : 95
      }, {
        "name" : "src",
        "type" : 95
      } ],
      "name" : "(dst gorgonia.org/tensor.Memory, src gorgonia.org/tensor.Memory)",
      "type" : "Tuple",
      "underlying" : 110
    }, {
      "name" : "func(mem gorgonia.org/tensor.Memory, val interface{}) error",
      "params" : 112,
      "recv" : 23,
      "results" : 107,
      "type" : "Signature",
      "underlying" : 111,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "mem",
        "type" : 95
      }, {
        "name" : "val",
        "type" : 89
      } ],
      "name" : "(mem gorgonia.org/tensor.Memory, val interface{})",
      "type" : "Tuple",
      "underlying" : 112
    }, {
      "name" : "func(order gorgonia.org/tensor.DataOrder) bool",
      "params" : 114,
      "recv" : 24,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 113,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "order",
        "type" : 11
      } ],
      "name" : "(order gorgonia.org/tensor.DataOrder)",
      "type" : "Tuple",
      "underlying" : 114
    }, {
      "local-name" : "standardEngine",
      "name" : "gorgonia.org/tensor.standardEngine",
      "package" : 1,
      "type" : "Named",
      "underlying" : 116
    }, {
      "methods" : [ {
        "name" : "Accessible",
        "type" : 93
      }, {
        "name" : "Add",
        "type" : 117
      }, {
        "name" : "AddScalar",
        "type" : 233
      }, {
        "name" : "Alloc",
        "type" : 102
      }, {
        "name" : "AllocAccessible",
        "type" : 32
      }, {
        "name" : "Div",
        "type" : 117
      }, {
        "name" : "DivScalar",
        "type" : 233
      }, {
        "name" : "Dot",
        "type" : 117
      }, {
        "name" : "ElEq",
        "type" : 117
      }, {
        "name" : "ElNe",
        "type" : 117
      }, {
        "name" : "EqScalar",
        "type" : 233
      }, {
        "name" : "FMA",
        "type" : 235
      }, {
        "name" : "FMAScalar",
        "type" : 239
      }, {
        "name" : "Free",
        "type" : 105
      }, {
        "name" : "Gt",
        "type" : 117
      }, {
        "name" : "GtScalar",
        "type" : 233
      }, {
        "name" : "Gte",
        "type" : 117
      }, {
        "name" : "GteScalar",
        "type" : 233
      }, {
        "name" : "Lt",
        "type" : 117
      }, {
        "name" : "LtScalar",
        "type" : 233
      }, {
        "name" : "Lte",
        "type" : 117
      }, {
        "name" : "LteScalar",
        "type" : 233
      }, {
        "name" : "MatMul",
        "type" : 241
      }, {
        "name" : "MatVecMul",
        "type" : 241
      }, {
        "name" : "Memclr",
        "type" : 108
      }, {
        "name" : "Memcpy",
        "type" : 109
      }, {
        "name" : "Memset",
        "type" : 111
      }, {
        "name" : "Mod",
        "type" : 117
      }, {
        "name" : "ModScalar",
        "type" : 233
      }, {
        "name" : "Mul",
        "type" : 117
      }, {
        "name" : "MulScalar",
        "type" : 233
      }, {
        "name" : "NeScalar",
        "type" : 233
      }, {
        "name" : "Outer",
        "type" : 241
      }, {
        "name" : "Pow",
        "type" : 117
      }, {
        "name" : "PowScalar",
        "type" : 233
      }, {
        "name" : "SVD",
        "type" : 245
      }, {
        "name" : "Sub",
        "type" : 117
      }, {
        "name" : "SubScalar",
        "type" : 233
      }, {
        "name" : "WorksWith",
        "type" : 113
      } ],
      "name" : "interface{gorgonia.org/tensor.Adder; gorgonia.org/tensor.Diver; gorgonia.org/tensor.Dotter; gorgonia.org/tensor.ElEqer; gorgonia.org/tensor.Engine; gorgonia.org/tensor.FMAer; gorgonia.org/tensor.Gteer; gorgonia.org/tensor.Gter; gorgonia.org/tensor.Lteer; gorgonia.org/tensor.Lter; gorgonia.org/tensor.MatMuler; gorgonia.org/tensor.MatVecMuler; gorgonia.org/tensor.Moder; gorgonia.org/tensor.Muler; gorgonia.org/tensor.OuterProder; gorgonia.org/tensor.Power; gorgonia.org/tensor.SVDer; gorgonia.org/tensor.Suber}",
      "type" : "Interface",
      "underlying" : 116
    }, {
      "name" : "func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 118,
      "recv" : 61,
      "results" : 130,
      "type" : "Signature",
      "underlying" : 117,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 119
      }, {
        "name" : "b",
        "type" : 119
      }, {
        "name" : "opts",
        "type" : 123
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts []gorgonia.org/tensor.FuncOpt)",
      "type" : "Tuple",
      "underlying" : 118
    }, {
      "local-name" : "Tensor",
      "name" : "gorgonia.org/tensor.Tensor",
      "package" : 1,
      "type" : "Named",
      "underlying" : 120
    }, {
      "methods" : [ {
        "name" : "Apply",
        "type" : 121
      }, {
        "name" : "At",
        "type" : 131
      }, {
        "name" : "Clone",
        "type" : 134
      }, {
        "name" : "Data",
        "type" : 134
      }, {
        "name" : "DataOrder",
        "type" : 138
      }, {
        "name" : "DataSize",
        "type" : 23
      }, {
        "name" : "Dims",
        "type" : 23
      }, {
        "name" : "Dtype",
        "type" : 140
      }, {
        "name" : "Engine",
        "type" : 142
      }, {
        "name" : "Eq",
        "type" : 144
      }, {
        "name" : "Format",
        "type" : 147
      }, {
        "name" : "GobDecode",
        "type" : 164
      }, {
        "name" : "GobEncode",
        "type" : 168
      }, {
        "name" : "IsManuallyManaged",
        "type" : 32
      }, {
        "name" : "IsNativelyAccessible",
        "type" : 32
      }, {
        "name" : "IsScalar",
        "type" : 32
      }, {
        "name" : "Iterator",
        "type" : 172
      }, {
        "name" : "MemSize",
        "type" : 79
      }, {
        "name" : "Memset",
        "type" : 186
      }, {
        "name" : "Pointer",
        "type" : 97
      }, {
        "name" : "ReadNpy",
        "type" : 189
      }, {
        "name" : "RequiresIterator",
        "type" : 32
      }, {
        "name" : "Reshape",
        "type" : 195
      }, {
        "name" : "ScalarValue",
        "type" : 134
      }, {
        "name" : "SetAt",
        "type" : 196
      }, {
        "name" : "Shape",
        "type" : 184
      }, {
        "name" : "Size",
        "type" : 23
      }, {
        "name" : "Slice",
        "type" : 198
      }, {
        "name" : "Strides",
        "type" : 176
      }, {
        "name" : "String",
        "type" : 78
      }, {
        "name" : "T",
        "type" : 208
      }, {
        "name" : "Transpose",
        "type" : 210
      }, {
        "name" : "UT",
        "type" : 183
      }, {
        "name" : "Uintptr",
        "type" : 79
      }, {
        "name" : "WriteNpy",
        "type" : 211
      }, {
        "name" : "Zero",
        "type" : 183
      }, {
        "name" : "arr",
        "type" : 215
      }, {
        "name" : "arrPtr",
        "type" : 219
      }, {
        "name" : "hdr",
        "type" : 222
      }, {
        "name" : "standardEngine",
        "type" : 227
      } ],
      "name" : "interface{Apply(fn interface{}, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); At(...int) (interface{}, error); DataOrder() gorgonia.org/tensor.DataOrder; DataSize() int; Dims() int; Dtype() gorgonia.org/tensor.Dtype; Engine() gorgonia.org/tensor.Engine; IsManuallyManaged() bool; IsNativelyAccessible() bool; IsScalar() bool; Iterator() gorgonia.org/tensor.Iterator; MemSize() uintptr; Pointer() unsafe.Pointer; ReadNpy(io.Reader) error; RequiresIterator() bool; Reshape(...int) error; ScalarValue() interface{}; SetAt(v interface{}, coord ...int) error; Shape() gorgonia.org/tensor.Shape; Size() int; Strides() []int; T(axes ...int) error; Transpose() error; UT(); Uintptr() uintptr; WriteNpy(io.Writer) error; standardEngine() gorgonia.org/tensor.standardEngine; gorgonia.org/tensor.Cloner; gorgonia.org/tensor.Dataer; gorgonia.org/tensor.Eq; fmt.Formatter; encoding/gob.GobDecoder; encoding/gob.GobEncoder; gorgonia.org/tensor.MemSetter; gorgonia.org/tensor.Slicer; fmt.Stringer; gorgonia.org/tensor.Zeroer; gorgonia.org/tensor.arrayer; gorgonia.org/tensor.headerer}",
      "type" : "Interface",
      "underlying" : 120
    }, {
      "name" : "func(fn interface{}, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 122,
      "recv" : 25,
      "results" : 130,
      "type" : "Signature",
      "underlying" : 121,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 89
      }, {
        "name" : "opts",
        "type" : 123
      } ],
      "name" : "(fn interface{}, opts []gorgonia.org/tensor.FuncOpt)",
      "type" : "Tuple",
      "underlying" : 122
    }, {
      "elem" : 124,
      "name" : "[]gorgonia.org/tensor.FuncOpt",
      "type" : "Slice",
      "underlying" : 123
    }, {
      "local-name" : "FuncOpt",
      "name" : "gorgonia.org/tensor.FuncOpt",
      "package" : 1,
      "type" : "Named",
      "underlying" : 125
    }, {
      "name" : "func(*gorgonia.org/tensor.OpOpt)",
      "params" : 126,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 125,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 127
      } ],
      "name" : "(*gorgonia.org/tensor.OpOpt)",
      "type" : "Tuple",
      "underlying" : 126
    }, {
      "elem" : 128,
      "name" : "*gorgonia.org/tensor.OpOpt",
      "type" : "Pointer",
      "underlying" : 127
    }, {
      "local-name" : "OpOpt",
      "name" : "gorgonia.org/tensor.OpOpt",
      "package" : 1,
      "type" : "Named",
      "underlying" : 129
    }, {
      "fields" : [ {
        "name" : "reuse",
        "type" : 119
      }, {
        "name" : "incr",
        "type" : 119
      }, {
        "name" : "unsafe",
        "type" : 10
      }, {
        "name" : "same",
        "type" : 10
      }, {
        "name" : "t",
        "type" : 19
      } ],
      "name" : "struct{reuse gorgonia.org/tensor.Tensor; incr gorgonia.org/tensor.Tensor; unsafe bool; same bool; t gorgonia.org/tensor.Dtype}",
      "type" : "Struct",
      "underlying" : 129
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 119
      }, {
        "name" : "",
        "type" : 100
      } ],
      "name" : "(gorgonia.org/tensor.Tensor, error)",
      "type" : "Tuple",
      "underlying" : 130
    }, {
      "name" : "func(...int) (interface{}, error)",
      "params" : 132,
      "recv" : 26,
      "results" : 133,
      "type" : "Signature",
      "underlying" : 131,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      } ],
      "name" : "([]int)",
      "type" : "Tuple",
      "underlying" : 132
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 89
      }, {
        "name" : "",
        "type" : 100
      } ],
      "name" : "(interface{}, error)",
      "type" : "Tuple",
      "underlying" : 133
    }, {
      "name" : "func() interface{}",
      "params" : 24,
      "recv" : 27,
      "results" : 135,
      "type" : "Signature",
      "underlying" : 134,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 89
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 135
    }, {
      "local-name" : "Cloner",
      "name" : "gorgonia.org/tensor.Cloner",
      "package" : 1,
      "type" : "Named",
      "underlying" : 137
    }, {
      "methods" : [ {
        "name" : "Clone",
        "type" : 134
      } ],
      "name" : "interface{Clone() interface{}}",
      "type" : "Interface",
      "underlying" : 137
    }, {
      "name" : "func() gorgonia.org/tensor.DataOrder",
      "params" : 24,
      "recv" : 28,
      "results" : 139,
      "type" : "Signature",
      "underlying" : 138,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(gorgonia.org/tensor.DataOrder)",
      "type" : "Tuple",
      "underlying" : 139
    }, {
      "name" : "func() gorgonia.org/tensor.Dtype",
      "params" : 24,
      "recv" : 29,
      "results" : 141,
      "type" : "Signature",
      "underlying" : 140,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 19
      } ],
      "name" : "(gorgonia.org/tensor.Dtype)",
      "type" : "Tuple",
      "underlying" : 141
    }, {
      "name" : "func() gorgonia.org/tensor.Engine",
      "params" : 24,
      "recv" : 30,
      "results" : 143,
      "type" : "Signature",
      "underlying" : 142,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 91
      } ],
      "name" : "(gorgonia.org/tensor.Engine)",
      "type" : "Tuple",
      "underlying" : 143
    }, {
      "name" : "func(interface{}) bool",
      "params" : 135,
      "recv" : 31,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 144,
      "variadic" : false
    }, {
      "local-name" : "Eq",
      "name" : "gorgonia.org/tensor.Eq",
      "package" : 1,
      "type" : "Named",
      "underlying" : 146
    }, {
      "methods" : [ {
        "name" : "Eq",
        "type" : 144
      } ],
      "name" : "interface{Eq(interface{}) bool}",
      "type" : "Interface",
      "underlying" : 146
    }, {
      "name" : "func(f fmt.State, c rune)",
      "params" : 148,
      "recv" : 36,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 147,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 149
      }, {
        "name" : "c",
        "type" : 161
      } ],
      "name" : "(f fmt.State, c rune)",
      "type" : "Tuple",
      "underlying" : 148
    }, {
      "local-name" : "State",
      "name" : "fmt.State",
      "package" : 5,
      "type" : "Named",
      "underlying" : 150
    }, {
      "methods" : [ {
        "name" : "Flag",
        "type" : 151
      }, {
        "name" : "Precision",
        "type" : 153
      }, {
        "name" : "Width",
        "type" : 155
      }, {
        "name" : "Write",
        "type" : 157
      } ],
      "name" : "interface{Flag(c int) bool; Precision() (prec int, ok bool); Width() (wid int, ok bool); Write(b []byte) (n int, err error)}",
      "type" : "Interface",
      "underlying" : 150
    }, {
      "name" : "func(c int) bool",
      "params" : 152,
      "recv" : 32,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 151,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "c",
        "type" : 9
      } ],
      "name" : "(c int)",
      "type" : "Tuple",
      "underlying" : 152
    }, {
      "name" : "func() (prec int, ok bool)",
      "params" : 24,
      "recv" : 33,
      "results" : 154,
      "type" : "Signature",
      "underlying" : 153,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "prec",
        "type" : 9
      }, {
        "name" : "ok",
        "type" : 10
      } ],
      "name" : "(prec int, ok bool)",
      "type" : "Tuple",
      "underlying" : 154
    }, {
      "name" : "func() (wid int, ok bool)",
      "params" : 24,
      "recv" : 34,
      "results" : 156,
      "type" : "Signature",
      "underlying" : 155,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "wid",
        "type" : 9
      }, {
        "name" : "ok",
        "type" : 10
      } ],
      "name" : "(wid int, ok bool)",
      "type" : "Tuple",
      "underlying" : 156
    }, {
      "name" : "func(b []byte) (n int, err error)",
      "params" : 158,
      "recv" : 35,
      "results" : 160,
      "type" : "Signature",
      "underlying" : 157,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 159
      } ],
      "name" : "(b []byte)",
      "type" : "Tuple",
      "underlying" : 158
    }, {
      "elem" : 12,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 159
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 9
      }, {
        "name" : "err",
        "type" : 100
      } ],
      "name" : "(n int, err error)",
      "type" : "Tuple",
      "underlying" : 160
    }, {
      "name" : "rune",
      "type" : "Basic",
      "underlying" : 161
    }, {
      "local-name" : "Formatter",
      "name" : "fmt.Formatter",
      "package" : 5,
      "type" : "Named",
      "underlying" : 163
    }, {
      "methods" : [ {
        "name" : "Format",
        "type" : 147
      } ],
      "name" : "interface{Format(f fmt.State, c rune)}",
      "type" : "Interface",
      "underlying" : 163
    }, {
      "name" : "func([]byte) error",
      "params" : 165,
      "recv" : 37,
      "results" : 107,
      "type" : "Signature",
      "underlying" : 164,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 159
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 165
    }, {
      "local-name" : "GobDecoder",
      "name" : "encoding/gob.GobDecoder",
      "package" : 6,
      "type" : "Named",
      "underlying" : 167
    }, {
      "methods" : [ {
        "name" : "GobDecode",
        "type" : 164
      } ],
      "name" : "interface{GobDecode([]byte) error}",
      "type" : "Interface",
      "underlying" : 167
    }, {
      "name" : "func() ([]byte, error)",
      "params" : 24,
      "recv" : 38,
      "results" : 169,
      "type" : "Signature",
      "underlying" : 168,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 159
      }, {
        "name" : "",
        "type" : 100
      } ],
      "name" : "([]byte, error)",
      "type" : "Tuple",
      "underlying" : 169
    }, {
      "local-name" : "GobEncoder",
      "name" : "encoding/gob.GobEncoder",
      "package" : 6,
      "type" : "Named",
      "underlying" : 171
    }, {
      "methods" : [ {
        "name" : "GobEncode",
        "type" : 168
      } ],
      "name" : "interface{GobEncode() ([]byte, error)}",
      "type" : "Interface",
      "underlying" : 171
    }, {
      "name" : "func() gorgonia.org/tensor.Iterator",
      "params" : 24,
      "recv" : 45,
      "results" : 173,
      "type" : "Signature",
      "underlying" : 172,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 174
      } ],
      "name" : "(gorgonia.org/tensor.Iterator)",
      "type" : "Tuple",
      "underlying" : 173
    }, {
      "local-name" : "Iterator",
      "name" : "gorgonia.org/tensor.Iterator",
      "package" : 1,
      "type" : "Named",
      "underlying" : 175
    }, {
      "methods" : [ {
        "name" : "Coord",
        "type" : 176
      }, {
        "name" : "Done",
        "type" : 32
      }, {
        "name" : "Next",
        "type" : 177
      }, {
        "name" : "NextInvalid",
        "type" : 179
      }, {
        "name" : "NextValid",
        "type" : 179
      }, {
        "name" : "NextValidity",
        "type" : 181
      }, {
        "name" : "Reset",
        "type" : 183
      }, {
        "name" : "SetForward",
        "type" : 183
      }, {
        "name" : "SetReverse",
        "type" : 183
      }, {
        "name" : "Shape",
        "type" : 184
      }, {
        "name" : "Start",
        "type" : 177
      } ],
      "name" : "interface{Coord() []int; Done() bool; Next() (int, error); NextInvalid() (int, int, error); NextValid() (int, int, error); NextValidity() (int, bool, error); Reset(); SetForward(); SetReverse(); Shape() gorgonia.org/tensor.Shape; Start() (int, error)}",
      "type" : "Interface",
      "underlying" : 175
    }, {
      "name" : "func() []int",
      "params" : 24,
      "recv" : 39,
      "results" : 132,
      "type" : "Signature",
      "underlying" : 176,
      "variadic" : false
    }, {
      "name" : "func() (int, error)",
      "params" : 24,
      "recv" : 40,
      "results" : 178,
      "type" : "Signature",
      "underlying" : 177,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 100
      } ],
      "name" : "(int, error)",
      "type" : "Tuple",
      "underlying" : 178
    }, {
      "name" : "func() (int, int, error)",
      "params" : 24,
      "recv" : 41,
      "results" : 180,
      "type" : "Signature",
      "underlying" : 179,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 100
      } ],
      "name" : "(int, int, error)",
      "type" : "Tuple",
      "underlying" : 180
    }, {
      "name" : "func() (int, bool, error)",
      "params" : 24,
      "recv" : 42,
      "results" : 182,
      "type" : "Signature",
      "underlying" : 181,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 10
      }, {
        "name" : "",
        "type" : 100
      } ],
      "name" : "(int, bool, error)",
      "type" : "Tuple",
      "underlying" : 182
    }, {
      "name" : "func()",
      "params" : 24,
      "recv" : 43,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 183,
      "variadic" : false
    }, {
      "name" : "func() gorgonia.org/tensor.Shape",
      "params" : 24,
      "recv" : 44,
      "results" : 185,
      "type" : "Signature",
      "underlying" : 184,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(gorgonia.org/tensor.Shape)",
      "type" : "Tuple",
      "underlying" : 185
    }, {
      "name" : "func(interface{}) error",
      "params" : 135,
      "recv" : 46,
      "results" : 107,
      "type" : "Signature",
      "underlying" : 186,
      "variadic" : false
    }, {
      "local-name" : "MemSetter",
      "name" : "gorgonia.org/tensor.MemSetter",
      "package" : 1,
      "type" : "Named",
      "underlying" : 188
    }, {
      "methods" : [ {
        "name" : "Memset",
        "type" : 186
      } ],
      "name" : "interface{Memset(interface{}) error}",
      "type" : "Interface",
      "underlying" : 188
    }, {
      "name" : "func(io.Reader) error",
      "params" : 190,
      "recv" : 48,
      "results" : 107,
      "type" : "Signature",
      "underlying" : 189,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 191
      } ],
      "name" : "(io.Reader)",
      "type" : "Tuple",
      "underlying" : 190
    }, {
      "local-name" : "Reader",
      "name" : "io.Reader",
      "package" : 7,
      "type" : "Named",
      "underlying" : 192
    }, {
      "methods" : [ {
        "name" : "Read",
        "type" : 193
      } ],
      "name" : "interface{Read(p []byte) (n int, err error)}",
      "type" : "Interface",
      "underlying" : 192
    }, {
      "name" : "func(p []byte) (n int, err error)",
      "params" : 194,
      "recv" : 47,
      "results" : 160,
      "type" : "Signature",
      "underlying" : 193,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 159
      } ],
      "name" : "(p []byte)",
      "type" : "Tuple",
      "underlying" : 194
    }, {
      "name" : "func(...int) error",
      "params" : 132,
      "recv" : 49,
      "results" : 107,
      "type" : "Signature",
      "underlying" : 195,
      "variadic" : true
    }, {
      "name" : "func(v interface{}, coord ...int) error",
      "params" : 197,
      "recv" : 50,
      "results" : 107,
      "type" : "Signature",
      "underlying" : 196,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 89
      }, {
        "name" : "coord",
        "type" : 8
      } ],
      "name" : "(v interface{}, coord []int)",
      "type" : "Tuple",
      "underlying" : 197
    }, {
      "name" : "func(...gorgonia.org/tensor.Slice) (gorgonia.org/tensor.View, error)",
      "params" : 199,
      "recv" : 59,
      "results" : 203,
      "type" : "Signature",
      "underlying" : 198,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 200
      } ],
      "name" : "([]gorgonia.org/tensor.Slice)",
      "type" : "Tuple",
      "underlying" : 199
    }, {
      "elem" : 201,
      "name" : "[]gorgonia.org/tensor.Slice",
      "type" : "Slice",
      "underlying" : 200
    }, {
      "local-name" : "Slice",
      "name" : "gorgonia.org/tensor.Slice",
      "package" : 1,
      "type" : "Named",
      "underlying" : 202
    }, {
      "methods" : [ {
        "name" : "End",
        "type" : 23
      }, {
        "name" : "Start",
        "type" : 23
      }, {
        "name" : "Step",
        "type" : 23
      } ],
      "name" : "interface{End() int; Start() int; Step() int}",
      "type" : "Interface",
      "underlying" : 202
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 204
      }, {
        "name" : "",
        "type" : 100
      } ],
      "name" : "(gorgonia.org/tensor.View, error)",
      "type" : "Tuple",
      "underlying" : 203
    }, {
      "local-name" : "View",
      "name" : "gorgonia.org/tensor.View",
      "package" : 1,
      "type" : "Named",
      "underlying" : 205
    }, {
      "methods" : [ {
        "name" : "Apply",
        "type" : 121
      }, {
        "name" : "At",
        "type" : 131
      }, {
        "name" : "Clone",
        "type" : 134
      }, {
        "name" : "Data",
        "type" : 134
      }, {
        "name" : "DataOrder",
        "type" : 138
      }, {
        "name" : "DataSize",
        "type" : 23
      }, {
        "name" : "Dims",
        "type" : 23
      }, {
        "name" : "Dtype",
        "type" : 140
      }, {
        "name" : "Engine",
        "type" : 142
      }, {
        "name" : "Eq",
        "type" : 144
      }, {
        "name" : "Format",
        "type" : 147
      }, {
        "name" : "GobDecode",
        "type" : 164
      }, {
        "name" : "GobEncode",
        "type" : 168
      }, {
        "name" : "IsManuallyManaged",
        "type" : 32
      }, {
        "name" : "IsMaterializable",
        "type" : 32
      }, {
        "name" : "IsNativelyAccessible",
        "type" : 32
      }, {
        "name" : "IsScalar",
        "type" : 32
      }, {
        "name" : "IsView",
        "type" : 32
      }, {
        "name" : "Iterator",
        "type" : 172
      }, {
        "name" : "Materialize",
        "type" : 206
      }, {
        "name" : "MemSize",
        "type" : 79
      }, {
        "name" : "Memset",
        "type" : 186
      }, {
        "name" : "Pointer",
        "type" : 97
      }, {
        "name" : "ReadNpy",
        "type" : 189
      }, {
        "name" : "RequiresIterator",
        "type" : 32
      }, {
        "name" : "Reshape",
        "type" : 195
      }, {
        "name" : "ScalarValue",
        "type" : 134
      }, {
        "name" : "SetAt",
        "type" : 196
      }, {
        "name" : "Shape",
        "type" : 184
      }, {
        "name" : "Size",
        "type" : 23
      }, {
        "name" : "Slice",
        "type" : 198
      }, {
        "name" : "Strides",
        "type" : 176
      }, {
        "name" : "String",
        "type" : 78
      }, {
        "name" : "T",
        "type" : 208
      }, {
        "name" : "Transpose",
        "type" : 210
      }, {
        "name" : "UT",
        "type" : 183
      }, {
        "name" : "Uintptr",
        "type" : 79
      }, {
        "name" : "WriteNpy",
        "type" : 211
      }, {
        "name" : "Zero",
        "type" : 183
      }, {
        "name" : "arr",
        "type" : 215
      }, {
        "name" : "arrPtr",
        "type" : 219
      }, {
        "name" : "hdr",
        "type" : 222
      }, {
        "name" : "standardEngine",
        "type" : 227
      } ],
      "name" : "interface{IsMaterializable() bool; IsView() bool; Materialize() gorgonia.org/tensor.Tensor; gorgonia.org/tensor.Tensor}",
      "type" : "Interface",
      "underlying" : 205
    }, {
      "name" : "func() gorgonia.org/tensor.Tensor",
      "params" : 24,
      "recv" : 51,
      "results" : 207,
      "type" : "Signature",
      "underlying" : 206,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 119
      } ],
      "name" : "(gorgonia.org/tensor.Tensor)",
      "type" : "Tuple",
      "underlying" : 207
    }, {
      "name" : "func(axes ...int) error",
      "params" : 209,
      "recv" : 52,
      "results" : 107,
      "type" : "Signature",
      "underlying" : 208,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "axes",
        "type" : 8
      } ],
      "name" : "(axes []int)",
      "type" : "Tuple",
      "underlying" : 209
    }, {
      "name" : "func() error",
      "params" : 24,
      "recv" : 53,
      "results" : 107,
      "type" : "Signature",
      "underlying" : 210,
      "variadic" : false
    }, {
      "name" : "func(io.Writer) error",
      "params" : 212,
      "recv" : 54,
      "results" : 107,
      "type" : "Signature",
      "underlying" : 211,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 213
      } ],
      "name" : "(io.Writer)",
      "type" : "Tuple",
      "underlying" : 212
    }, {
      "local-name" : "Writer",
      "name" : "io.Writer",
      "package" : 7,
      "type" : "Named",
      "underlying" : 214
    }, {
      "methods" : [ {
        "name" : "Write",
        "type" : 193
      } ],
      "name" : "interface{Write(p []byte) (n int, err error)}",
      "type" : "Interface",
      "underlying" : 214
    }, {
      "name" : "func() gorgonia.org/tensor.array",
      "params" : 24,
      "recv" : 56,
      "results" : 216,
      "type" : "Signature",
      "underlying" : 215,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(gorgonia.org/tensor.array)",
      "type" : "Tuple",
      "underlying" : 216
    }, {
      "local-name" : "arrayer",
      "name" : "gorgonia.org/tensor.arrayer",
      "package" : 1,
      "type" : "Named",
      "underlying" : 218
    }, {
      "methods" : [ {
        "name" : "arr",
        "type" : 215
      }, {
        "name" : "arrPtr",
        "type" : 219
      } ],
      "name" : "interface{arr() gorgonia.org/tensor.array; arrPtr() *gorgonia.org/tensor.array}",
      "type" : "Interface",
      "underlying" : 218
    }, {
      "name" : "func() *gorgonia.org/tensor.array",
      "params" : 24,
      "recv" : 55,
      "results" : 220,
      "type" : "Signature",
      "underlying" : 219,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 221
      } ],
      "name" : "(*gorgonia.org/tensor.array)",
      "type" : "Tuple",
      "underlying" : 220
    }, {
      "elem" : 14,
      "name" : "*gorgonia.org/tensor.array",
      "type" : "Pointer",
      "underlying" : 221
    }, {
      "name" : "func() *gorgonia.org/tensor/internal/storage.Header",
      "params" : 24,
      "recv" : 57,
      "results" : 223,
      "type" : "Signature",
      "underlying" : 222,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 224
      } ],
      "name" : "(*gorgonia.org/tensor/internal/storage.Header)",
      "type" : "Tuple",
      "underlying" : 223
    }, {
      "elem" : 16,
      "name" : "*gorgonia.org/tensor/internal/storage.Header",
      "type" : "Pointer",
      "underlying" : 224
    }, {
      "local-name" : "headerer",
      "name" : "gorgonia.org/tensor.headerer",
      "package" : 1,
      "type" : "Named",
      "underlying" : 226
    }, {
      "methods" : [ {
        "name" : "hdr",
        "type" : 222
      } ],
      "name" : "interface{hdr() *gorgonia.org/tensor/internal/storage.Header}",
      "type" : "Interface",
      "underlying" : 226
    }, {
      "name" : "func() gorgonia.org/tensor.standardEngine",
      "params" : 24,
      "recv" : 58,
      "results" : 228,
      "type" : "Signature",
      "underlying" : 227,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 115
      } ],
      "name" : "(gorgonia.org/tensor.standardEngine)",
      "type" : "Tuple",
      "underlying" : 228
    }, {
      "local-name" : "Slicer",
      "name" : "gorgonia.org/tensor.Slicer",
      "package" : 1,
      "type" : "Named",
      "underlying" : 230
    }, {
      "methods" : [ {
        "name" : "Slice",
        "type" : 198
      } ],
      "name" : "interface{Slice(...gorgonia.org/tensor.Slice) (gorgonia.org/tensor.View, error)}",
      "type" : "Interface",
      "underlying" : 230
    }, {
      "local-name" : "Adder",
      "name" : "gorgonia.org/tensor.Adder",
      "package" : 1,
      "type" : "Named",
      "underlying" : 232
    }, {
      "methods" : [ {
        "name" : "Add",
        "type" : 117
      }, {
        "name" : "AddScalar",
        "type" : 233
      } ],
      "name" : "interface{Add(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); AddScalar(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)}",
      "type" : "Interface",
      "underlying" : 232
    }, {
      "name" : "func(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 234,
      "recv" : 60,
      "results" : 130,
      "type" : "Signature",
      "underlying" : 233,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 119
      }, {
        "name" : "b",
        "type" : 89
      }, {
        "name" : "leftTensor",
        "type" : 10
      }, {
        "name" : "opts",
        "type" : 123
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts []gorgonia.org/tensor.FuncOpt)",
      "type" : "Tuple",
      "underlying" : 234
    }, {
      "name" : "func(a gorgonia.org/tensor.Tensor, x gorgonia.org/tensor.Tensor, y gorgonia.org/tensor.Tensor) (gorgonia.org/tensor.Tensor, error)",
      "params" : 236,
      "recv" : 63,
      "results" : 130,
      "type" : "Signature",
      "underlying" : 235,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 119
      }, {
        "name" : "x",
        "type" : 119
      }, {
        "name" : "y",
        "type" : 119
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, x gorgonia.org/tensor.Tensor, y gorgonia.org/tensor.Tensor)",
      "type" : "Tuple",
      "underlying" : 236
    }, {
      "local-name" : "FMAer",
      "name" : "gorgonia.org/tensor.FMAer",
      "package" : 1,
      "type" : "Named",
      "underlying" : 238
    }, {
      "methods" : [ {
        "name" : "FMA",
        "type" : 235
      }, {
        "name" : "FMAScalar",
        "type" : 239
      } ],
      "name" : "interface{FMA(a gorgonia.org/tensor.Tensor, x gorgonia.org/tensor.Tensor, y gorgonia.org/tensor.Tensor) (gorgonia.org/tensor.Tensor, error); FMAScalar(a gorgonia.org/tensor.Tensor, x interface{}, y gorgonia.org/tensor.Tensor) (gorgonia.org/tensor.Tensor, error)}",
      "type" : "Interface",
      "underlying" : 238
    }, {
      "name" : "func(a gorgonia.org/tensor.Tensor, x interface{}, y gorgonia.org/tensor.Tensor) (gorgonia.org/tensor.Tensor, error)",
      "params" : 240,
      "recv" : 62,
      "results" : 130,
      "type" : "Signature",
      "underlying" : 239,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 119
      }, {
        "name" : "x",
        "type" : 89
      }, {
        "name" : "y",
        "type" : 119
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, x interface{}, y gorgonia.org/tensor.Tensor)",
      "type" : "Tuple",
      "underlying" : 240
    }, {
      "name" : "func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, preallocated gorgonia.org/tensor.Tensor) error",
      "params" : 242,
      "recv" : 64,
      "results" : 107,
      "type" : "Signature",
      "underlying" : 241,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 119
      }, {
        "name" : "b",
        "type" : 119
      }, {
        "name" : "preallocated",
        "type" : 119
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, preallocated gorgonia.org/tensor.Tensor)",
      "type" : "Tuple",
      "underlying" : 242
    }, {
      "local-name" : "MatMuler",
      "name" : "gorgonia.org/tensor.MatMuler",
      "package" : 1,
      "type" : "Named",
      "underlying" : 244
    }, {
      "methods" : [ {
        "name" : "MatMul",
        "type" : 241
      } ],
      "name" : "interface{MatMul(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, preallocated gorgonia.org/tensor.Tensor) error}",
      "type" : "Interface",
      "underlying" : 244
    }, {
      "name" : "func(a gorgonia.org/tensor.Tensor, uv bool, full bool) (s gorgonia.org/tensor.Tensor, u gorgonia.org/tensor.Tensor, v gorgonia.org/tensor.Tensor, err error)",
      "params" : 246,
      "recv" : 65,
      "results" : 247,
      "type" : "Signature",
      "underlying" : 245,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 119
      }, {
        "name" : "uv",
        "type" : 10
      }, {
        "name" : "full",
        "type" : 10
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, uv bool, full bool)",
      "type" : "Tuple",
      "underlying" : 246
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 119
      }, {
        "name" : "u",
        "type" : 119
      }, {
        "name" : "v",
        "type" : 119
      }, {
        "name" : "err",
        "type" : 100
      } ],
      "name" : "(s gorgonia.org/tensor.Tensor, u gorgonia.org/tensor.Tensor, v gorgonia.org/tensor.Tensor, err error)",
      "type" : "Tuple",
      "underlying" : 247
    }, {
      "local-name" : "SVDer",
      "name" : "gorgonia.org/tensor.SVDer",
      "package" : 1,
      "type" : "Named",
      "underlying" : 249
    }, {
      "methods" : [ {
        "name" : "SVD",
        "type" : 245
      } ],
      "name" : "interface{SVD(a gorgonia.org/tensor.Tensor, uv bool, full bool) (s gorgonia.org/tensor.Tensor, u gorgonia.org/tensor.Tensor, v gorgonia.org/tensor.Tensor, err error)}",
      "type" : "Interface",
      "underlying" : 249
    }, {
      "elem" : 10,
      "name" : "[]bool",
      "type" : "Slice",
      "underlying" : 250
    }, {
      "fields" : [ {
        "name" : "retVal",
        "type" : 252
      }, {
        "name" : "err",
        "type" : 100
      } ],
      "name" : "(retVal [][]uint, err error)",
      "type" : "Tuple",
      "underlying" : 251
    }, {
      "elem" : 253,
      "name" : "[][]uint",
      "type" : "Slice",
      "underlying" : 252
    }, {
      "elem" : 56,
      "name" : "[]uint",
      "type" : "Slice",
      "underlying" : 253
    }, {
      "name" : "func(t *gorgonia.org/tensor.Dense, axis int, dt gorgonia.org/tensor.Dtype) error",
      "params" : 255,
      "recv" : -1,
      "results" : 107,
      "type" : "Signature",
      "underlying" : 254,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "axis",
        "type" : 9
      }, {
        "name" : "dt",
        "type" : 19
      } ],
      "name" : "(t *gorgonia.org/tensor.Dense, axis int, dt gorgonia.org/tensor.Dtype)",
      "type" : "Tuple",
      "underlying" : 255
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 256
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 257
    }, {
      "name" : "func() []uint",
      "params" : 24,
      "recv" : -1,
      "results" : 259,
      "type" : "Signature",
      "underlying" : 258,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 253
      } ],
      "name" : "([]uint)",
      "type" : "Tuple",
      "underlying" : 259
    }, {
      "name" : "func(t *gorgonia.org/tensor.Dense) (retVal [][]uint, err error)",
      "params" : 261,
      "recv" : -1,
      "results" : 251,
      "type" : "Signature",
      "underlying" : 260,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      } ],
      "name" : "(t *gorgonia.org/tensor.Dense)",
      "type" : "Tuple",
      "underlying" : 261
    }, {
      "name" : "func(a []int) (retVal int)",
      "params" : 263,
      "recv" : -1,
      "results" : 264,
      "type" : "Signature",
      "underlying" : 262,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 8
      } ],
      "name" : "(a []int)",
      "type" : "Tuple",
      "underlying" : 263
    }, {
      "fields" : [ {
        "name" : "retVal",
        "type" : 9
      } ],
      "name" : "(retVal int)",
      "type" : "Tuple",
      "underlying" : 264
    }, {
      "elem" : 266,
      "name" : "*reflect.SliceHeader",
      "type" : "Pointer",
      "underlying" : 265
    }, {
      "local-name" : "SliceHeader",
      "name" : "reflect.SliceHeader",
      "package" : 4,
      "type" : "Named",
      "underlying" : 267
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 42
      }, {
        "name" : "Len",
        "type" : 9
      }, {
        "name" : "Cap",
        "type" : 9
      } ],
      "name" : "struct{Data uintptr; Len int; Cap int}",
      "type" : "Struct",
      "underlying" : 267
    }, {
      "elem" : 56,
      "name" : "*uint",
      "type" : "Pointer",
      "underlying" : 268
    }, {
      "name" : "func([][]uint, ...[]uint) [][]uint",
      "params" : 270,
      "recv" : -1,
      "results" : 271,
      "type" : "Signature",
      "underlying" : 269,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 252
      }, {
        "name" : "",
        "type" : 252
      } ],
      "name" : "([][]uint, [][]uint)",
      "type" : "Tuple",
      "underlying" : 270
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 252
      } ],
      "name" : "([][]uint)",
      "type" : "Tuple",
      "underlying" : 271
    }, {
      "elem" : 253,
      "name" : "*[]uint",
      "type" : "Pointer",
      "underlying" : 272
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 4,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 95,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 91,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 91,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 91,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 91,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 91,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 91,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 91,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 119,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 119,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 136,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 119,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 119,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 119,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 145,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 149,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 149,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 149,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 149,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 162,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 166,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 170,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 174,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 174,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 174,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 174,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 174,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 174,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 119,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 187,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 7,
      "type" : 191,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 119,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 119,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 119,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 204,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 119,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 119,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 119,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 217,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 217,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 225,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 119,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 229,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 231,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 231,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 237,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 237,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 243,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 248,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "axis",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "retVal",
      "package" : 0,
      "type" : 252,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 100,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uint",
      "package" : 1,
      "type" : 19,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 100,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "upper",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "r",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "stride",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Data",
      "package" : 4,
      "type" : 42,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 253,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Len",
      "package" : 4,
      "type" : 9,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Cap",
      "package" : 4,
      "type" : 9,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "hdr",
      "package" : 0,
      "type" : 265,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}