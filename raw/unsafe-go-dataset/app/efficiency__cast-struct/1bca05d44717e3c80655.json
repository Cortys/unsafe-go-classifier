{
  "usage" : {
    "file" : "zz_generated.conversion.go",
    "label1" : "cast-struct",
    "label2" : "efficiency",
    "line" : "309",
    "module" : "k8s.io/apiserver",
    "pkg" : "k8s.io/apiserver/pkg/apis/audit/v1",
    "project" : "rancher/rancher",
    "snippet" : "out.Users = *(*[]string)(unsafe.Pointer(&in.Users))",
    "version" : "v0.18.0"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 3 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 308,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Level",
            "variable" : 9
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 16,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 16,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Level"
            }
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Level",
              "variable" : 10
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 308,
      "code" : "out.Level = Level(in.Level)",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 4 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 309,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Users",
            "variable" : 11
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 6,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 6,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "go-type" : 7,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 49,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 49,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 50,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 4,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 50,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 50,
              "kind" : "expression",
              "target" : {
                "go-type" : 49,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Users",
                    "variable" : 12
                  },
                  "go-type" : 7,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 309,
      "code" : "out.Users = *(*[]string)(unsafe.Pointer(&in.Users))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 5 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 6 ],
      "decl-vars" : [ ],
      "line-start" : 310,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "UserGroups",
            "variable" : 13
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 6,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 6,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "go-type" : 7,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 49,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 49,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 50,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 4,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 50,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 50,
              "kind" : "expression",
              "target" : {
                "go-type" : 49,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "UserGroups",
                    "variable" : 14
                  },
                  "go-type" : 7,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 310,
      "code" : "out.UserGroups = *(*[]string)(unsafe.Pointer(&in.UserGroups))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 6 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 311,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Verbs",
            "variable" : 15
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 6,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 6,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "go-type" : 7,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 49,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 49,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 50,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 4,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 50,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 50,
              "kind" : "expression",
              "target" : {
                "go-type" : 49,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Verbs",
                    "variable" : 16
                  },
                  "go-type" : 7,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 311,
      "code" : "out.Verbs = *(*[]string)(unsafe.Pointer(&in.Verbs))",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 7 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 312,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Resources",
            "variable" : 17
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 18,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 18,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "GroupResources"
                  }
                },
                "go-type" : 17,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 51,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 51,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 50,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 4,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 50,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 50,
              "kind" : "expression",
              "target" : {
                "go-type" : 52,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Resources",
                    "variable" : 18
                  },
                  "go-type" : 8,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 312,
      "code" : "out.Resources = *(*[]GroupResources)(unsafe.Pointer(&in.Resources))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 8 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 313,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Namespaces",
            "variable" : 19
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 6,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 6,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "go-type" : 7,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 49,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 49,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 50,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 4,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 50,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 50,
              "kind" : "expression",
              "target" : {
                "go-type" : 49,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Namespaces",
                    "variable" : 20
                  },
                  "go-type" : 7,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 313,
      "code" : "out.Namespaces = *(*[]string)(unsafe.Pointer(&in.Namespaces))",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 9 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 314,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "NonResourceURLs",
            "variable" : 21
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 6,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 6,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "go-type" : 7,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 49,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 49,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 50,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 4,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 50,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 50,
              "kind" : "expression",
              "target" : {
                "go-type" : 49,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "NonResourceURLs",
                    "variable" : 22
                  },
                  "go-type" : 7,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 314,
      "code" : "out.NonResourceURLs = *(*[]string)(unsafe.Pointer(&in.NonResourceURLs))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 10 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 315,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "OmitStages",
            "variable" : 23
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 21,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 21,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Stage"
                  }
                },
                "go-type" : 20,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 53,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 53,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 50,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 4,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 50,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 50,
              "kind" : "expression",
              "target" : {
                "go-type" : 54,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "OmitStages",
                    "variable" : 24
                  },
                  "go-type" : 11,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 315,
      "code" : "out.OmitStages = *(*[]Stage)(unsafe.Pointer(&in.OmitStages))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 316,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 55,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 316,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func autoConvert_audit_PolicyRule_To_v1_PolicyRule(in *audit.PolicyRule, out *PolicyRule, s conversion.Scope) error {\n\tout.Level = Level(in.Level)\n\tout.Users = *(*[]string)(unsafe.Pointer(&in.Users))\n\tout.UserGroups = *(*[]string)(unsafe.Pointer(&in.UserGroups))\n\tout.Verbs = *(*[]string)(unsafe.Pointer(&in.Verbs))\n\tout.Resources = *(*[]GroupResources)(unsafe.Pointer(&in.Resources))\n\tout.Namespaces = *(*[]string)(unsafe.Pointer(&in.Namespaces))\n\tout.NonResourceURLs = *(*[]string)(unsafe.Pointer(&in.NonResourceURLs))\n\tout.OmitStages = *(*[]Stage)(unsafe.Pointer(&in.OmitStages))\n\treturn nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "autoConvert_audit_PolicyRule_To_v1_PolicyRule",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ],
    "line-end" : 317,
    "line-start" : 307,
    "names" : [ "autoConvert_audit_PolicyRule_To_v1_PolicyRule" ],
    "package" : 0,
    "packages" : [ {
      "name" : "v1",
      "path" : "k8s.io/apiserver/pkg/apis/audit/v1"
    }, {
      "name" : "audit",
      "path" : "k8s.io/apiserver/pkg/apis/audit"
    }, {
      "name" : "conversion",
      "path" : "k8s.io/apimachinery/pkg/conversion"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 5, 6, 7 ],
    "receivers" : [ ],
    "results" : [ 8 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(in *k8s.io/apiserver/pkg/apis/audit.PolicyRule, out *k8s.io/apiserver/pkg/apis/audit/v1.PolicyRule, s k8s.io/apimachinery/pkg/conversion.Scope) error",
      "params" : 1,
      "recv" : -1,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 2
      }, {
        "name" : "out",
        "type" : 13
      }, {
        "name" : "s",
        "type" : 22
      } ],
      "name" : "(in *k8s.io/apiserver/pkg/apis/audit.PolicyRule, out *k8s.io/apiserver/pkg/apis/audit/v1.PolicyRule, s k8s.io/apimachinery/pkg/conversion.Scope)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*k8s.io/apiserver/pkg/apis/audit.PolicyRule",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "PolicyRule",
      "name" : "k8s.io/apiserver/pkg/apis/audit.PolicyRule",
      "package" : 1,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "Level",
        "type" : 5
      }, {
        "name" : "Users",
        "type" : 7
      }, {
        "name" : "UserGroups",
        "type" : 7
      }, {
        "name" : "Verbs",
        "type" : 7
      }, {
        "name" : "Resources",
        "type" : 8
      }, {
        "name" : "Namespaces",
        "type" : 7
      }, {
        "name" : "NonResourceURLs",
        "type" : 7
      }, {
        "name" : "OmitStages",
        "type" : 11
      } ],
      "name" : "struct{Level k8s.io/apiserver/pkg/apis/audit.Level; Users []string; UserGroups []string; Verbs []string; Resources []k8s.io/apiserver/pkg/apis/audit.GroupResources; Namespaces []string; NonResourceURLs []string; OmitStages []k8s.io/apiserver/pkg/apis/audit.Stage}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "Level",
      "name" : "k8s.io/apiserver/pkg/apis/audit.Level",
      "package" : 1,
      "type" : "Named",
      "underlying" : 6
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "elem" : 6,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 7
    }, {
      "elem" : 9,
      "name" : "[]k8s.io/apiserver/pkg/apis/audit.GroupResources",
      "type" : "Slice",
      "underlying" : 8
    }, {
      "local-name" : "GroupResources",
      "name" : "k8s.io/apiserver/pkg/apis/audit.GroupResources",
      "package" : 1,
      "type" : "Named",
      "underlying" : 10
    }, {
      "fields" : [ {
        "name" : "Group",
        "type" : 6
      }, {
        "name" : "Resources",
        "type" : 7
      }, {
        "name" : "ResourceNames",
        "type" : 7
      } ],
      "name" : "struct{Group string; Resources []string; ResourceNames []string}",
      "type" : "Struct",
      "underlying" : 10
    }, {
      "elem" : 12,
      "name" : "[]k8s.io/apiserver/pkg/apis/audit.Stage",
      "type" : "Slice",
      "underlying" : 11
    }, {
      "local-name" : "Stage",
      "name" : "k8s.io/apiserver/pkg/apis/audit.Stage",
      "package" : 1,
      "type" : "Named",
      "underlying" : 6
    }, {
      "elem" : 14,
      "name" : "*k8s.io/apiserver/pkg/apis/audit/v1.PolicyRule",
      "type" : "Pointer",
      "underlying" : 13
    }, {
      "local-name" : "PolicyRule",
      "name" : "k8s.io/apiserver/pkg/apis/audit/v1.PolicyRule",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "Level",
        "type" : 16
      }, {
        "name" : "Users",
        "type" : 7
      }, {
        "name" : "UserGroups",
        "type" : 7
      }, {
        "name" : "Verbs",
        "type" : 7
      }, {
        "name" : "Resources",
        "type" : 17
      }, {
        "name" : "Namespaces",
        "type" : 7
      }, {
        "name" : "NonResourceURLs",
        "type" : 7
      }, {
        "name" : "OmitStages",
        "type" : 20
      } ],
      "name" : "struct{Level k8s.io/apiserver/pkg/apis/audit/v1.Level \"json:\\\"level\\\" protobuf:\\\"bytes,1,opt,name=level,casttype=Level\\\"\"; Users []string \"json:\\\"users,omitempty\\\" protobuf:\\\"bytes,2,rep,name=users\\\"\"; UserGroups []string \"json:\\\"userGroups,omitempty\\\" protobuf:\\\"bytes,3,rep,name=userGroups\\\"\"; Verbs []string \"json:\\\"verbs,omitempty\\\" protobuf:\\\"bytes,4,rep,name=verbs\\\"\"; Resources []k8s.io/apiserver/pkg/apis/audit/v1.GroupResources \"json:\\\"resources,omitempty\\\" protobuf:\\\"bytes,5,rep,name=resources\\\"\"; Namespaces []string \"json:\\\"namespaces,omitempty\\\" protobuf:\\\"bytes,6,rep,name=namespaces\\\"\"; NonResourceURLs []string \"json:\\\"nonResourceURLs,omitempty\\\" protobuf:\\\"bytes,7,rep,name=nonResourceURLs\\\"\"; OmitStages []k8s.io/apiserver/pkg/apis/audit/v1.Stage \"json:\\\"omitStages,omitempty\\\" protobuf:\\\"bytes,8,rep,name=omitStages\\\"\"}",
      "type" : "Struct",
      "underlying" : 15
    }, {
      "local-name" : "Level",
      "name" : "k8s.io/apiserver/pkg/apis/audit/v1.Level",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "elem" : 18,
      "name" : "[]k8s.io/apiserver/pkg/apis/audit/v1.GroupResources",
      "type" : "Slice",
      "underlying" : 17
    }, {
      "local-name" : "GroupResources",
      "name" : "k8s.io/apiserver/pkg/apis/audit/v1.GroupResources",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "Group",
        "type" : 6
      }, {
        "name" : "Resources",
        "type" : 7
      }, {
        "name" : "ResourceNames",
        "type" : 7
      } ],
      "name" : "struct{Group string \"json:\\\"group,omitempty\\\" protobuf:\\\"bytes,1,opt,name=group\\\"\"; Resources []string \"json:\\\"resources,omitempty\\\" protobuf:\\\"bytes,2,rep,name=resources\\\"\"; ResourceNames []string \"json:\\\"resourceNames,omitempty\\\" protobuf:\\\"bytes,3,rep,name=resourceNames\\\"\"}",
      "type" : "Struct",
      "underlying" : 19
    }, {
      "elem" : 21,
      "name" : "[]k8s.io/apiserver/pkg/apis/audit/v1.Stage",
      "type" : "Slice",
      "underlying" : 20
    }, {
      "local-name" : "Stage",
      "name" : "k8s.io/apiserver/pkg/apis/audit/v1.Stage",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "local-name" : "Scope",
      "name" : "k8s.io/apimachinery/pkg/conversion.Scope",
      "package" : 2,
      "type" : "Named",
      "underlying" : 23
    }, {
      "methods" : [ {
        "name" : "Convert",
        "type" : 24
      }, {
        "name" : "DestTag",
        "type" : 35
      }, {
        "name" : "Flags",
        "type" : 38
      }, {
        "name" : "Meta",
        "type" : 40
      }, {
        "name" : "SrcTag",
        "type" : 35
      } ],
      "name" : "interface{Convert(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags) error; DestTag() reflect.StructTag; Flags() k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags; Meta() *k8s.io/apimachinery/pkg/conversion.Meta; SrcTag() reflect.StructTag}",
      "type" : "Interface",
      "underlying" : 23
    }, {
      "name" : "func(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags) error",
      "params" : 25,
      "recv" : 1,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "src",
        "type" : 26
      }, {
        "name" : "dest",
        "type" : 26
      }, {
        "name" : "flags",
        "type" : 27
      } ],
      "name" : "(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 26
    }, {
      "local-name" : "FieldMatchingFlags",
      "name" : "k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags",
      "package" : 2,
      "type" : "Named",
      "underlying" : 28
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 30
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 31
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 32
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 31
    }, {
      "name" : "func() string",
      "params" : 33,
      "recv" : 0,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "name" : "func() reflect.StructTag",
      "params" : 33,
      "recv" : 2,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 37
      } ],
      "name" : "(reflect.StructTag)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 3,
      "type" : "Named",
      "underlying" : 6
    }, {
      "name" : "func() k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags",
      "params" : 33,
      "recv" : 3,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 38,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 27
      } ],
      "name" : "(k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags)",
      "type" : "Tuple",
      "underlying" : 39
    }, {
      "name" : "func() *k8s.io/apimachinery/pkg/conversion.Meta",
      "params" : 33,
      "recv" : 4,
      "results" : 41,
      "type" : "Signature",
      "underlying" : 40,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 42
      } ],
      "name" : "(*k8s.io/apimachinery/pkg/conversion.Meta)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "elem" : 43,
      "name" : "*k8s.io/apimachinery/pkg/conversion.Meta",
      "type" : "Pointer",
      "underlying" : 42
    }, {
      "local-name" : "Meta",
      "name" : "k8s.io/apimachinery/pkg/conversion.Meta",
      "package" : 2,
      "type" : "Named",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "KeyNameMapping",
        "type" : 45
      }, {
        "name" : "Context",
        "type" : 26
      } ],
      "name" : "struct{KeyNameMapping k8s.io/apimachinery/pkg/conversion.FieldMappingFunc; Context interface{}}",
      "type" : "Struct",
      "underlying" : 44
    }, {
      "local-name" : "FieldMappingFunc",
      "name" : "k8s.io/apimachinery/pkg/conversion.FieldMappingFunc",
      "package" : 2,
      "type" : "Named",
      "underlying" : 46
    }, {
      "name" : "func(key string, sourceTag reflect.StructTag, destTag reflect.StructTag) (source string, dest string)",
      "params" : 47,
      "recv" : -1,
      "results" : 48,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 6
      }, {
        "name" : "sourceTag",
        "type" : 37
      }, {
        "name" : "destTag",
        "type" : 37
      } ],
      "name" : "(key string, sourceTag reflect.StructTag, destTag reflect.StructTag)",
      "type" : "Tuple",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "source",
        "type" : 6
      }, {
        "name" : "dest",
        "type" : 6
      } ],
      "name" : "(source string, dest string)",
      "type" : "Tuple",
      "underlying" : 48
    }, {
      "elem" : 7,
      "name" : "*[]string",
      "type" : "Pointer",
      "underlying" : 49
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 4,
      "type" : "Basic",
      "underlying" : 50
    }, {
      "elem" : 17,
      "name" : "*[]k8s.io/apiserver/pkg/apis/audit/v1.GroupResources",
      "type" : "Pointer",
      "underlying" : 51
    }, {
      "elem" : 8,
      "name" : "*[]k8s.io/apiserver/pkg/apis/audit.GroupResources",
      "type" : "Pointer",
      "underlying" : 52
    }, {
      "elem" : 20,
      "name" : "*[]k8s.io/apiserver/pkg/apis/audit/v1.Stage",
      "type" : "Pointer",
      "underlying" : 53
    }, {
      "elem" : 11,
      "name" : "*[]k8s.io/apiserver/pkg/apis/audit.Stage",
      "type" : "Pointer",
      "underlying" : 54
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 55
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Level",
      "package" : 0,
      "type" : 16,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Level",
      "package" : 1,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Users",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Users",
      "package" : 1,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "UserGroups",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "UserGroups",
      "package" : 1,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Verbs",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Verbs",
      "package" : 1,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Resources",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Resources",
      "package" : 1,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Namespaces",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Namespaces",
      "package" : 1,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "NonResourceURLs",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "NonResourceURLs",
      "package" : 1,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "OmitStages",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "OmitStages",
      "package" : 1,
      "type" : 11,
      "exported" : true,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}