{
  "usage" : {
    "file" : "zz_generated.conversion.go",
    "label1" : "cast-struct",
    "label2" : "efficiency",
    "line" : "3872",
    "module" : "k8s.io/kubernetes",
    "pkg" : "k8s.io/kubernetes/pkg/apis/core/v1",
    "project" : "rook/rook",
    "snippet" : "out.HTTPHeaders = *(*[]v1.HTTPHeader)(unsafe.Pointer(&in.HTTPHeaders))",
    "version" : "v1.17.2"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 6 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 3 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 3868,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Path",
            "variable" : 9
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Path",
            "variable" : 10
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 3868,
      "code" : "out.Path = in.Path",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 4 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 3869,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Port",
            "variable" : 11
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Port",
            "variable" : 12
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 3869,
      "code" : "out.Port = in.Port",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 5 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 3870,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Host",
            "variable" : 13
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Host",
            "variable" : 14
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 3870,
      "code" : "out.Host = in.Host",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 6 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 3871,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Scheme",
            "variable" : 15
          },
          "go-type" : 18,
          "kind" : "expression",
          "target" : {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 18,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "v1"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 18,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "URIScheme"
            }
          },
          "go-type" : 18,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Scheme",
              "variable" : 16
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 3871,
      "code" : "out.Scheme = v1.URIScheme(in.Scheme)",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 7 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 3872,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "HTTPHeaders",
            "variable" : 17
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 20,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "v1"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 20,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "HTTPHeader"
                  }
                },
                "go-type" : 19,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 49,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 49,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 50,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 6,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 50,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 50,
              "kind" : "expression",
              "target" : {
                "go-type" : 51,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "HTTPHeaders",
                    "variable" : 18
                  },
                  "go-type" : 12,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 3872,
      "code" : "out.HTTPHeaders = *(*[]v1.HTTPHeader)(unsafe.Pointer(&in.HTTPHeaders))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 3873,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 52,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 3873,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func autoConvert_core_HTTPGetAction_To_v1_HTTPGetAction(in *core.HTTPGetAction, out *v1.HTTPGetAction, s conversion.Scope) error {\n\tout.Path = in.Path\n\tout.Port = in.Port\n\tout.Host = in.Host\n\tout.Scheme = v1.URIScheme(in.Scheme)\n\tout.HTTPHeaders = *(*[]v1.HTTPHeader)(unsafe.Pointer(&in.HTTPHeaders))\n\treturn nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "autoConvert_core_HTTPGetAction_To_v1_HTTPGetAction",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ],
    "line-end" : 3874,
    "line-start" : 3867,
    "names" : [ "autoConvert_core_HTTPGetAction_To_v1_HTTPGetAction" ],
    "package" : 0,
    "packages" : [ {
      "name" : "v1",
      "path" : "k8s.io/kubernetes/pkg/apis/core/v1"
    }, {
      "name" : "core",
      "path" : "k8s.io/kubernetes/pkg/apis/core"
    }, {
      "name" : "intstr",
      "path" : "k8s.io/apimachinery/pkg/util/intstr"
    }, {
      "name" : "v1",
      "path" : "k8s.io/api/core/v1"
    }, {
      "name" : "conversion",
      "path" : "k8s.io/apimachinery/pkg/conversion"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 5, 6, 7 ],
    "receivers" : [ ],
    "results" : [ 8 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(in *k8s.io/kubernetes/pkg/apis/core.HTTPGetAction, out *k8s.io/api/core/v1.HTTPGetAction, s k8s.io/apimachinery/pkg/conversion.Scope) error",
      "params" : 1,
      "recv" : -1,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 2
      }, {
        "name" : "out",
        "type" : 15
      }, {
        "name" : "s",
        "type" : 22
      } ],
      "name" : "(in *k8s.io/kubernetes/pkg/apis/core.HTTPGetAction, out *k8s.io/api/core/v1.HTTPGetAction, s k8s.io/apimachinery/pkg/conversion.Scope)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*k8s.io/kubernetes/pkg/apis/core.HTTPGetAction",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "HTTPGetAction",
      "name" : "k8s.io/kubernetes/pkg/apis/core.HTTPGetAction",
      "package" : 1,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "Path",
        "type" : 5
      }, {
        "name" : "Port",
        "type" : 6
      }, {
        "name" : "Host",
        "type" : 5
      }, {
        "name" : "Scheme",
        "type" : 11
      }, {
        "name" : "HTTPHeaders",
        "type" : 12
      } ],
      "name" : "struct{Path string; Port k8s.io/apimachinery/pkg/util/intstr.IntOrString; Host string; Scheme k8s.io/kubernetes/pkg/apis/core.URIScheme; HTTPHeaders []k8s.io/kubernetes/pkg/apis/core.HTTPHeader}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "local-name" : "IntOrString",
      "name" : "k8s.io/apimachinery/pkg/util/intstr.IntOrString",
      "package" : 2,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "Type",
        "type" : 8
      }, {
        "name" : "IntVal",
        "type" : 10
      }, {
        "name" : "StrVal",
        "type" : 5
      } ],
      "name" : "struct{Type k8s.io/apimachinery/pkg/util/intstr.Type \"protobuf:\\\"varint,1,opt,name=type,casttype=Type\\\"\"; IntVal int32 \"protobuf:\\\"varint,2,opt,name=intVal\\\"\"; StrVal string \"protobuf:\\\"bytes,3,opt,name=strVal\\\"\"}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "local-name" : "Type",
      "name" : "k8s.io/apimachinery/pkg/util/intstr.Type",
      "package" : 2,
      "type" : "Named",
      "underlying" : 9
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "local-name" : "URIScheme",
      "name" : "k8s.io/kubernetes/pkg/apis/core.URIScheme",
      "package" : 1,
      "type" : "Named",
      "underlying" : 5
    }, {
      "elem" : 13,
      "name" : "[]k8s.io/kubernetes/pkg/apis/core.HTTPHeader",
      "type" : "Slice",
      "underlying" : 12
    }, {
      "local-name" : "HTTPHeader",
      "name" : "k8s.io/kubernetes/pkg/apis/core.HTTPHeader",
      "package" : 1,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 5
      }, {
        "name" : "Value",
        "type" : 5
      } ],
      "name" : "struct{Name string; Value string}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "elem" : 16,
      "name" : "*k8s.io/api/core/v1.HTTPGetAction",
      "type" : "Pointer",
      "underlying" : 15
    }, {
      "local-name" : "HTTPGetAction",
      "name" : "k8s.io/api/core/v1.HTTPGetAction",
      "package" : 3,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "Path",
        "type" : 5
      }, {
        "name" : "Port",
        "type" : 6
      }, {
        "name" : "Host",
        "type" : 5
      }, {
        "name" : "Scheme",
        "type" : 18
      }, {
        "name" : "HTTPHeaders",
        "type" : 19
      } ],
      "name" : "struct{Path string \"json:\\\"path,omitempty\\\" protobuf:\\\"bytes,1,opt,name=path\\\"\"; Port k8s.io/apimachinery/pkg/util/intstr.IntOrString \"json:\\\"port\\\" protobuf:\\\"bytes,2,opt,name=port\\\"\"; Host string \"json:\\\"host,omitempty\\\" protobuf:\\\"bytes,3,opt,name=host\\\"\"; Scheme k8s.io/api/core/v1.URIScheme \"json:\\\"scheme,omitempty\\\" protobuf:\\\"bytes,4,opt,name=scheme,casttype=URIScheme\\\"\"; HTTPHeaders []k8s.io/api/core/v1.HTTPHeader \"json:\\\"httpHeaders,omitempty\\\" protobuf:\\\"bytes,5,rep,name=httpHeaders\\\"\"}",
      "type" : "Struct",
      "underlying" : 17
    }, {
      "local-name" : "URIScheme",
      "name" : "k8s.io/api/core/v1.URIScheme",
      "package" : 3,
      "type" : "Named",
      "underlying" : 5
    }, {
      "elem" : 20,
      "name" : "[]k8s.io/api/core/v1.HTTPHeader",
      "type" : "Slice",
      "underlying" : 19
    }, {
      "local-name" : "HTTPHeader",
      "name" : "k8s.io/api/core/v1.HTTPHeader",
      "package" : 3,
      "type" : "Named",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 5
      }, {
        "name" : "Value",
        "type" : 5
      } ],
      "name" : "struct{Name string \"json:\\\"name\\\" protobuf:\\\"bytes,1,opt,name=name\\\"\"; Value string \"json:\\\"value\\\" protobuf:\\\"bytes,2,opt,name=value\\\"\"}",
      "type" : "Struct",
      "underlying" : 21
    }, {
      "local-name" : "Scope",
      "name" : "k8s.io/apimachinery/pkg/conversion.Scope",
      "package" : 4,
      "type" : "Named",
      "underlying" : 23
    }, {
      "methods" : [ {
        "name" : "Convert",
        "type" : 24
      }, {
        "name" : "DefaultConvert",
        "type" : 24
      }, {
        "name" : "DestTag",
        "type" : 35
      }, {
        "name" : "Flags",
        "type" : 38
      }, {
        "name" : "Meta",
        "type" : 40
      }, {
        "name" : "SrcTag",
        "type" : 35
      } ],
      "name" : "interface{Convert(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags) error; DefaultConvert(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags) error; DestTag() reflect.StructTag; Flags() k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags; Meta() *k8s.io/apimachinery/pkg/conversion.Meta; SrcTag() reflect.StructTag}",
      "type" : "Interface",
      "underlying" : 23
    }, {
      "name" : "func(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags) error",
      "params" : 25,
      "recv" : 1,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "src",
        "type" : 26
      }, {
        "name" : "dest",
        "type" : 26
      }, {
        "name" : "flags",
        "type" : 27
      } ],
      "name" : "(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 26
    }, {
      "local-name" : "FieldMatchingFlags",
      "name" : "k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags",
      "package" : 4,
      "type" : "Named",
      "underlying" : 28
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 30
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 31
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 32
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 31
    }, {
      "name" : "func() string",
      "params" : 33,
      "recv" : 0,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "name" : "func() reflect.StructTag",
      "params" : 33,
      "recv" : 2,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 37
      } ],
      "name" : "(reflect.StructTag)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 5,
      "type" : "Named",
      "underlying" : 5
    }, {
      "name" : "func() k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags",
      "params" : 33,
      "recv" : 3,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 38,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 27
      } ],
      "name" : "(k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags)",
      "type" : "Tuple",
      "underlying" : 39
    }, {
      "name" : "func() *k8s.io/apimachinery/pkg/conversion.Meta",
      "params" : 33,
      "recv" : 4,
      "results" : 41,
      "type" : "Signature",
      "underlying" : 40,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 42
      } ],
      "name" : "(*k8s.io/apimachinery/pkg/conversion.Meta)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "elem" : 43,
      "name" : "*k8s.io/apimachinery/pkg/conversion.Meta",
      "type" : "Pointer",
      "underlying" : 42
    }, {
      "local-name" : "Meta",
      "name" : "k8s.io/apimachinery/pkg/conversion.Meta",
      "package" : 4,
      "type" : "Named",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "KeyNameMapping",
        "type" : 45
      }, {
        "name" : "Context",
        "type" : 26
      } ],
      "name" : "struct{KeyNameMapping k8s.io/apimachinery/pkg/conversion.FieldMappingFunc; Context interface{}}",
      "type" : "Struct",
      "underlying" : 44
    }, {
      "local-name" : "FieldMappingFunc",
      "name" : "k8s.io/apimachinery/pkg/conversion.FieldMappingFunc",
      "package" : 4,
      "type" : "Named",
      "underlying" : 46
    }, {
      "name" : "func(key string, sourceTag reflect.StructTag, destTag reflect.StructTag) (source string, dest string)",
      "params" : 47,
      "recv" : -1,
      "results" : 48,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 5
      }, {
        "name" : "sourceTag",
        "type" : 37
      }, {
        "name" : "destTag",
        "type" : 37
      } ],
      "name" : "(key string, sourceTag reflect.StructTag, destTag reflect.StructTag)",
      "type" : "Tuple",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "source",
        "type" : 5
      }, {
        "name" : "dest",
        "type" : 5
      } ],
      "name" : "(source string, dest string)",
      "type" : "Tuple",
      "underlying" : 48
    }, {
      "elem" : 19,
      "name" : "*[]k8s.io/api/core/v1.HTTPHeader",
      "type" : "Pointer",
      "underlying" : 49
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 6,
      "type" : "Basic",
      "underlying" : 50
    }, {
      "elem" : 12,
      "name" : "*[]k8s.io/kubernetes/pkg/apis/core.HTTPHeader",
      "type" : "Pointer",
      "underlying" : 51
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 52
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Path",
      "package" : 3,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Path",
      "package" : 1,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Port",
      "package" : 3,
      "type" : 6,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Port",
      "package" : 1,
      "type" : 6,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Host",
      "package" : 3,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Host",
      "package" : 1,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Scheme",
      "package" : 3,
      "type" : 18,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Scheme",
      "package" : 1,
      "type" : 11,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "HTTPHeaders",
      "package" : 3,
      "type" : 19,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "HTTPHeaders",
      "package" : 1,
      "type" : 12,
      "exported" : true,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}