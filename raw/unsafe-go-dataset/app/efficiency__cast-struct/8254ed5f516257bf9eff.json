{
  "usage" : {
    "file" : "zz_generated.conversion.go",
    "label1" : "cast-struct",
    "label2" : "efficiency",
    "line" : "1803",
    "module" : "k8s.io/kubernetes",
    "pkg" : "k8s.io/kubernetes/pkg/apis/extensions/v1beta1",
    "project" : "kubernetes/kubernetes",
    "snippet" : "out.RequiredDropCapabilities = *(*[]core.Capability)(unsafe.Pointer(&in.RequiredDropCapabilities))",
    "version" : "project"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 3 ],
      "in-vars" : [ 5, 7, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1801,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Privileged",
            "variable" : 9
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Privileged",
            "variable" : 10
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1801,
      "code" : "out.Privileged = in.Privileged",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 4 ],
      "in-vars" : [ 7, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1802,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "DefaultAddCapabilities",
            "variable" : 11
          },
          "go-type" : 58,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 58,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 59,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 4,
                    "value" : "core"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 59,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Capability"
                  }
                },
                "go-type" : 58,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 128,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 128,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 129,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 7,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 129,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 129,
              "kind" : "expression",
              "target" : {
                "go-type" : 130,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "DefaultAddCapabilities",
                    "variable" : 12
                  },
                  "go-type" : 6,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1802,
      "code" : "out.DefaultAddCapabilities = *(*[]core.Capability)(unsafe.Pointer(&in.DefaultAddCapabilities))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 5 ],
      "in-vars" : [ 5, 7, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1803,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "RequiredDropCapabilities",
            "variable" : 13
          },
          "go-type" : 58,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 58,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 59,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 4,
                    "value" : "core"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 59,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Capability"
                  }
                },
                "go-type" : 58,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 128,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 128,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 129,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 7,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 129,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 129,
              "kind" : "expression",
              "target" : {
                "go-type" : 130,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "RequiredDropCapabilities",
                    "variable" : 14
                  },
                  "go-type" : 6,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1803,
      "code" : "out.RequiredDropCapabilities = *(*[]core.Capability)(unsafe.Pointer(&in.RequiredDropCapabilities))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 6 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1804,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "AllowedCapabilities",
            "variable" : 15
          },
          "go-type" : 58,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 58,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 59,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 4,
                    "value" : "core"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 59,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Capability"
                  }
                },
                "go-type" : 58,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 128,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 128,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 129,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 7,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 129,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 129,
              "kind" : "expression",
              "target" : {
                "go-type" : 130,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "AllowedCapabilities",
                    "variable" : 16
                  },
                  "go-type" : 6,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1804,
      "code" : "out.AllowedCapabilities = *(*[]core.Capability)(unsafe.Pointer(&in.AllowedCapabilities))",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 7 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1805,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Volumes",
            "variable" : 17
          },
          "go-type" : 60,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 60,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 61,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "policy"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 61,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "FSType"
                  }
                },
                "go-type" : 60,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 131,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 131,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 129,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 7,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 129,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 129,
              "kind" : "expression",
              "target" : {
                "go-type" : 132,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Volumes",
                    "variable" : 18
                  },
                  "go-type" : 9,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1805,
      "code" : "out.Volumes = *(*[]policy.FSType)(unsafe.Pointer(&in.Volumes))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 8 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1806,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "HostNetwork",
            "variable" : 19
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "HostNetwork",
            "variable" : 20
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1806,
      "code" : "out.HostNetwork = in.HostNetwork",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 9 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1807,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "HostPorts",
            "variable" : 21
          },
          "go-type" : 62,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 62,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 63,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "policy"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 63,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "HostPortRange"
                  }
                },
                "go-type" : 62,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 133,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 133,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 129,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 7,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 129,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 129,
              "kind" : "expression",
              "target" : {
                "go-type" : 134,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "HostPorts",
                    "variable" : 22
                  },
                  "go-type" : 11,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1807,
      "code" : "out.HostPorts = *(*[]policy.HostPortRange)(unsafe.Pointer(&in.HostPorts))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 10 ],
      "in-vars" : [ 7, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1808,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "HostPID",
            "variable" : 23
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "HostPID",
            "variable" : 24
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1808,
      "code" : "out.HostPID = in.HostPID",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 12 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1809,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "HostIPC",
            "variable" : 25
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "HostIPC",
            "variable" : 26
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1809,
      "code" : "out.HostIPC = in.HostIPC",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 15 ],
      "in-vars" : [ 5, 29, 7, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 29, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1810,
      "ast" : {
        "condition" : {
          "go-type" : 139,
          "kind" : "expression",
          "left" : {
            "go-type" : 109,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 29
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 140,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1812,
      "code" : "if err := Convert_v1beta1_SELinuxStrategyOptions_To_policy_SELinuxStrategyOptions(&in.SELinux, &out.SELinux, s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 29, 7 ],
      "decl-vars" : [ 29 ],
      "line-start" : 1810,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 137,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "SELinux",
                "variable" : 27
              },
              "go-type" : 15,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 138,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "SELinux",
                "variable" : 28
              },
              "go-type" : 65,
              "kind" : "expression",
              "target" : {
                "go-type" : 55,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "out",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 101,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 135,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_v1beta1_SELinuxStrategyOptions_To_policy_SELinuxStrategyOptions"
            }
          },
          "go-type" : 109,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1810,
      "code" : "err := Convert_v1beta1_SELinuxStrategyOptions_To_policy_SELinuxStrategyOptions(&in.SELinux, &out.SELinux, s)",
      "entry" : false,
      "use-vars" : [ 7, 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 29 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1811,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 109,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 29
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1811,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16, 17 ],
      "in-vars" : [ 7, 32, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 32 ],
      "decl-vars" : [ ],
      "line-start" : 1813,
      "ast" : {
        "condition" : {
          "go-type" : 139,
          "kind" : "expression",
          "left" : {
            "go-type" : 109,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 32
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 140,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1815,
      "code" : "if err := Convert_v1beta1_RunAsUserStrategyOptions_To_policy_RunAsUserStrategyOptions(&in.RunAsUser, &out.RunAsUser, s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 7, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 32 ],
      "decl-vars" : [ 32 ],
      "line-start" : 1813,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 143,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "RunAsUser",
                "variable" : 30
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 144,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "RunAsUser",
                "variable" : 31
              },
              "go-type" : 71,
              "kind" : "expression",
              "target" : {
                "go-type" : 55,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "out",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 101,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 141,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_v1beta1_RunAsUserStrategyOptions_To_policy_RunAsUserStrategyOptions"
            }
          },
          "go-type" : 109,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1813,
      "code" : "err := Convert_v1beta1_RunAsUserStrategyOptions_To_policy_RunAsUserStrategyOptions(&in.RunAsUser, &out.RunAsUser, s)",
      "entry" : false,
      "use-vars" : [ 7, 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 32 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1814,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 109,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 32
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1814,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 19 ],
      "in-vars" : [ 7, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1816,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "RunAsGroup",
            "variable" : 33
          },
          "go-type" : 77,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 78,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "policy"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 78,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RunAsGroupStrategyOptions"
              }
            },
            "go-type" : 77,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 77,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 129,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 7,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 129,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 129,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "RunAsGroup",
                "variable" : 34
              },
              "go-type" : 28,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1816,
      "code" : "out.RunAsGroup = (*policy.RunAsGroupStrategyOptions)(unsafe.Pointer(in.RunAsGroup))",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20, 22 ],
      "in-vars" : [ 6, 5, 7, 37 ],
      "exit" : false,
      "out-vars" : [ 37, 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1817,
      "ast" : {
        "condition" : {
          "go-type" : 139,
          "kind" : "expression",
          "left" : {
            "go-type" : 109,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 37
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 140,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1819,
      "code" : "if err := Convert_v1beta1_SupplementalGroupsStrategyOptions_To_policy_SupplementalGroupsStrategyOptions(&in.SupplementalGroups, &out.SupplementalGroups, s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 37 ],
      "decl-vars" : [ 37 ],
      "line-start" : 1817,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 147,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "SupplementalGroups",
                "variable" : 35
              },
              "go-type" : 32,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 148,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "SupplementalGroups",
                "variable" : 36
              },
              "go-type" : 81,
              "kind" : "expression",
              "target" : {
                "go-type" : 55,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "out",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 101,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 145,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_v1beta1_SupplementalGroupsStrategyOptions_To_policy_SupplementalGroupsStrategyOptions"
            }
          },
          "go-type" : 109,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1817,
      "code" : "err := Convert_v1beta1_SupplementalGroupsStrategyOptions_To_policy_SupplementalGroupsStrategyOptions(&in.SupplementalGroups, &out.SupplementalGroups, s)",
      "entry" : false,
      "use-vars" : [ 5, 6, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 37 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1818,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 109,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 37
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1818,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23, 24 ],
      "in-vars" : [ 6, 5, 7, 40 ],
      "exit" : false,
      "out-vars" : [ 7, 40, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1820,
      "ast" : {
        "condition" : {
          "go-type" : 139,
          "kind" : "expression",
          "left" : {
            "go-type" : 109,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 40
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 140,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1822,
      "code" : "if err := Convert_v1beta1_FSGroupStrategyOptions_To_policy_FSGroupStrategyOptions(&in.FSGroup, &out.FSGroup, s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 40, 6 ],
      "decl-vars" : [ 40 ],
      "line-start" : 1820,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 151,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "FSGroup",
                "variable" : 38
              },
              "go-type" : 35,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 152,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "FSGroup",
                "variable" : 39
              },
              "go-type" : 84,
              "kind" : "expression",
              "target" : {
                "go-type" : 55,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "out",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 101,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 149,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_v1beta1_FSGroupStrategyOptions_To_policy_FSGroupStrategyOptions"
            }
          },
          "go-type" : 109,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1820,
      "code" : "err := Convert_v1beta1_FSGroupStrategyOptions_To_policy_FSGroupStrategyOptions(&in.FSGroup, &out.FSGroup, s)",
      "entry" : false,
      "use-vars" : [ 7, 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 40 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1821,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 109,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 40
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1821,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 25 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1823,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ReadOnlyRootFilesystem",
            "variable" : 41
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ReadOnlyRootFilesystem",
            "variable" : 42
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1823,
      "code" : "out.ReadOnlyRootFilesystem = in.ReadOnlyRootFilesystem",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 27 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1824,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "DefaultAllowPrivilegeEscalation",
            "variable" : 43
          },
          "go-type" : 38,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "go-type" : 38,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 38,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 129,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 7,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 129,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 129,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "DefaultAllowPrivilegeEscalation",
                "variable" : 44
              },
              "go-type" : 38,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1824,
      "code" : "out.DefaultAllowPrivilegeEscalation = (*bool)(unsafe.Pointer(in.DefaultAllowPrivilegeEscalation))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28, 29 ],
      "in-vars" : [ 47, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 47 ],
      "decl-vars" : [ ],
      "line-start" : 1825,
      "ast" : {
        "condition" : {
          "go-type" : 139,
          "kind" : "expression",
          "left" : {
            "go-type" : 109,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 47
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 140,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1827,
      "code" : "if err := metav1.Convert_Pointer_bool_To_bool(&in.AllowPrivilegeEscalation, &out.AllowPrivilegeEscalation, s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 47 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 47 ],
      "decl-vars" : [ 47 ],
      "line-start" : 1825,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 155,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "AllowPrivilegeEscalation",
                "variable" : 45
              },
              "go-type" : 38,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 38,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "AllowPrivilegeEscalation",
                "variable" : 46
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 55,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "out",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 101,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 153,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "metav1"
            },
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_Pointer_bool_To_bool"
            }
          },
          "go-type" : 109,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1825,
      "code" : "err := metav1.Convert_Pointer_bool_To_bool(&in.AllowPrivilegeEscalation, &out.AllowPrivilegeEscalation, s)",
      "entry" : false,
      "use-vars" : [ 5, 6, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 47 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1826,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 109,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 47
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1826,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 47 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 30 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1828,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "AllowedHostPaths",
            "variable" : 48
          },
          "go-type" : 87,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 87,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 88,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "policy"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 88,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "AllowedHostPath"
                  }
                },
                "go-type" : 87,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 156,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 156,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 129,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 7,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 129,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 129,
              "kind" : "expression",
              "target" : {
                "go-type" : 157,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "AllowedHostPaths",
                    "variable" : 49
                  },
                  "go-type" : 39,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1828,
      "code" : "out.AllowedHostPaths = *(*[]policy.AllowedHostPath)(unsafe.Pointer(&in.AllowedHostPaths))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 31 ],
      "in-vars" : [ 5, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1829,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "AllowedFlexVolumes",
            "variable" : 50
          },
          "go-type" : 90,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 91,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "policy"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 91,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "AllowedFlexVolume"
                  }
                },
                "go-type" : 90,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 158,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 158,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 129,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 7,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 129,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 129,
              "kind" : "expression",
              "target" : {
                "go-type" : 159,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "AllowedFlexVolumes",
                    "variable" : 51
                  },
                  "go-type" : 42,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1829,
      "code" : "out.AllowedFlexVolumes = *(*[]policy.AllowedFlexVolume)(unsafe.Pointer(&in.AllowedFlexVolumes))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 32 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1830,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "AllowedCSIDrivers",
            "variable" : 52
          },
          "go-type" : 93,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 93,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 94,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "policy"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 94,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "AllowedCSIDriver"
                  }
                },
                "go-type" : 93,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 160,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 160,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 129,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 7,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 129,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 129,
              "kind" : "expression",
              "target" : {
                "go-type" : 161,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "AllowedCSIDrivers",
                    "variable" : 53
                  },
                  "go-type" : 45,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1830,
      "code" : "out.AllowedCSIDrivers = *(*[]policy.AllowedCSIDriver)(unsafe.Pointer(&in.AllowedCSIDrivers))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 33 ],
      "in-vars" : [ 5, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1831,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "AllowedUnsafeSysctls",
            "variable" : 54
          },
          "go-type" : 48,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 48,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 8,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 8,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "go-type" : 48,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 162,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 162,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 129,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 7,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 129,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 129,
              "kind" : "expression",
              "target" : {
                "go-type" : 162,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "AllowedUnsafeSysctls",
                    "variable" : 55
                  },
                  "go-type" : 48,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1831,
      "code" : "out.AllowedUnsafeSysctls = *(*[]string)(unsafe.Pointer(&in.AllowedUnsafeSysctls))",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 34 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1832,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ForbiddenSysctls",
            "variable" : 56
          },
          "go-type" : 48,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 48,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 8,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 8,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "go-type" : 48,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 162,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 162,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 129,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 7,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 129,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 129,
              "kind" : "expression",
              "target" : {
                "go-type" : 162,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ForbiddenSysctls",
                    "variable" : 57
                  },
                  "go-type" : 48,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1832,
      "code" : "out.ForbiddenSysctls = *(*[]string)(unsafe.Pointer(&in.ForbiddenSysctls))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 35 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1833,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "AllowedProcMountTypes",
            "variable" : 58
          },
          "go-type" : 96,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 97,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 4,
                    "value" : "core"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 97,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "ProcMountType"
                  }
                },
                "go-type" : 96,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 163,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 163,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 129,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 7,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 129,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 129,
              "kind" : "expression",
              "target" : {
                "go-type" : 164,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "AllowedProcMountTypes",
                    "variable" : 59
                  },
                  "go-type" : 49,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1833,
      "code" : "out.AllowedProcMountTypes = *(*[]core.ProcMountType)(unsafe.Pointer(&in.AllowedProcMountTypes))",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 36 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1834,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "RuntimeClass",
            "variable" : 60
          },
          "go-type" : 98,
          "kind" : "expression",
          "target" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 99,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "policy"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 99,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RuntimeClassStrategyOptions"
              }
            },
            "go-type" : 98,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 98,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 129,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 7,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 129,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 129,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "RuntimeClass",
                "variable" : 61
              },
              "go-type" : 51,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1834,
      "code" : "out.RuntimeClass = (*policy.RuntimeClassStrategyOptions)(unsafe.Pointer(in.RuntimeClass))",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1835,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 140,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1835,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func autoConvert_v1beta1_PodSecurityPolicySpec_To_policy_PodSecurityPolicySpec(in *v1beta1.PodSecurityPolicySpec, out *policy.PodSecurityPolicySpec, s conversion.Scope) error {\n\tout.Privileged = in.Privileged\n\tout.DefaultAddCapabilities = *(*[]core.Capability)(unsafe.Pointer(&in.DefaultAddCapabilities))\n\tout.RequiredDropCapabilities = *(*[]core.Capability)(unsafe.Pointer(&in.RequiredDropCapabilities))\n\tout.AllowedCapabilities = *(*[]core.Capability)(unsafe.Pointer(&in.AllowedCapabilities))\n\tout.Volumes = *(*[]policy.FSType)(unsafe.Pointer(&in.Volumes))\n\tout.HostNetwork = in.HostNetwork\n\tout.HostPorts = *(*[]policy.HostPortRange)(unsafe.Pointer(&in.HostPorts))\n\tout.HostPID = in.HostPID\n\tout.HostIPC = in.HostIPC\n\tif err := Convert_v1beta1_SELinuxStrategyOptions_To_policy_SELinuxStrategyOptions(&in.SELinux, &out.SELinux, s); err != nil {\n\t\treturn err\n\t}\n\tif err := Convert_v1beta1_RunAsUserStrategyOptions_To_policy_RunAsUserStrategyOptions(&in.RunAsUser, &out.RunAsUser, s); err != nil {\n\t\treturn err\n\t}\n\tout.RunAsGroup = (*policy.RunAsGroupStrategyOptions)(unsafe.Pointer(in.RunAsGroup))\n\tif err := Convert_v1beta1_SupplementalGroupsStrategyOptions_To_policy_SupplementalGroupsStrategyOptions(&in.SupplementalGroups, &out.SupplementalGroups, s); err != nil {\n\t\treturn err\n\t}\n\tif err := Convert_v1beta1_FSGroupStrategyOptions_To_policy_FSGroupStrategyOptions(&in.FSGroup, &out.FSGroup, s); err != nil {\n\t\treturn err\n\t}\n\tout.ReadOnlyRootFilesystem = in.ReadOnlyRootFilesystem\n\tout.DefaultAllowPrivilegeEscalation = (*bool)(unsafe.Pointer(in.DefaultAllowPrivilegeEscalation))\n\tif err := metav1.Convert_Pointer_bool_To_bool(&in.AllowPrivilegeEscalation, &out.AllowPrivilegeEscalation, s); err != nil {\n\t\treturn err\n\t}\n\tout.AllowedHostPaths = *(*[]policy.AllowedHostPath)(unsafe.Pointer(&in.AllowedHostPaths))\n\tout.AllowedFlexVolumes = *(*[]policy.AllowedFlexVolume)(unsafe.Pointer(&in.AllowedFlexVolumes))\n\tout.AllowedCSIDrivers = *(*[]policy.AllowedCSIDriver)(unsafe.Pointer(&in.AllowedCSIDrivers))\n\tout.AllowedUnsafeSysctls = *(*[]string)(unsafe.Pointer(&in.AllowedUnsafeSysctls))\n\tout.ForbiddenSysctls = *(*[]string)(unsafe.Pointer(&in.ForbiddenSysctls))\n\tout.AllowedProcMountTypes = *(*[]core.ProcMountType)(unsafe.Pointer(&in.AllowedProcMountTypes))\n\tout.RuntimeClass = (*policy.RuntimeClassStrategyOptions)(unsafe.Pointer(in.RuntimeClass))\n\treturn nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "autoConvert_v1beta1_PodSecurityPolicySpec_To_policy_PodSecurityPolicySpec",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Convert_v1beta1_SELinuxStrategyOptions_To_policy_SELinuxStrategyOptions",
      "package" : 0,
      "type" : 135,
      "exported" : true
    }, {
      "name" : "Convert_v1beta1_RunAsUserStrategyOptions_To_policy_RunAsUserStrategyOptions",
      "package" : 0,
      "type" : 141,
      "exported" : true
    }, {
      "name" : "Convert_v1beta1_SupplementalGroupsStrategyOptions_To_policy_SupplementalGroupsStrategyOptions",
      "package" : 0,
      "type" : 145,
      "exported" : true
    }, {
      "name" : "Convert_v1beta1_FSGroupStrategyOptions_To_policy_FSGroupStrategyOptions",
      "package" : 0,
      "type" : 149,
      "exported" : true
    }, {
      "name" : "Convert_Pointer_bool_To_bool",
      "package" : 8,
      "type" : 153,
      "exported" : true
    } ],
    "line-end" : 1836,
    "line-start" : 1800,
    "names" : [ "autoConvert_v1beta1_PodSecurityPolicySpec_To_policy_PodSecurityPolicySpec" ],
    "package" : 0,
    "packages" : [ {
      "name" : "v1beta1",
      "path" : "k8s.io/kubernetes/pkg/apis/extensions/v1beta1"
    }, {
      "name" : "v1beta1",
      "path" : "k8s.io/api/extensions/v1beta1"
    }, {
      "name" : "v1",
      "path" : "k8s.io/api/core/v1"
    }, {
      "name" : "policy",
      "path" : "k8s.io/kubernetes/pkg/apis/policy"
    }, {
      "name" : "core",
      "path" : "k8s.io/kubernetes/pkg/apis/core"
    }, {
      "name" : "conversion",
      "path" : "k8s.io/apimachinery/pkg/conversion"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "v1",
      "path" : "k8s.io/apimachinery/pkg/apis/meta/v1"
    } ],
    "params" : [ 5, 6, 7 ],
    "receivers" : [ ],
    "results" : [ 8 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(in *k8s.io/api/extensions/v1beta1.PodSecurityPolicySpec, out *k8s.io/kubernetes/pkg/apis/policy.PodSecurityPolicySpec, s k8s.io/apimachinery/pkg/conversion.Scope) error",
      "params" : 1,
      "recv" : -1,
      "results" : 108,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 2
      }, {
        "name" : "out",
        "type" : 55
      }, {
        "name" : "s",
        "type" : 101
      } ],
      "name" : "(in *k8s.io/api/extensions/v1beta1.PodSecurityPolicySpec, out *k8s.io/kubernetes/pkg/apis/policy.PodSecurityPolicySpec, s k8s.io/apimachinery/pkg/conversion.Scope)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*k8s.io/api/extensions/v1beta1.PodSecurityPolicySpec",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "PodSecurityPolicySpec",
      "name" : "k8s.io/api/extensions/v1beta1.PodSecurityPolicySpec",
      "package" : 1,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "Privileged",
        "type" : 5
      }, {
        "name" : "DefaultAddCapabilities",
        "type" : 6
      }, {
        "name" : "RequiredDropCapabilities",
        "type" : 6
      }, {
        "name" : "AllowedCapabilities",
        "type" : 6
      }, {
        "name" : "Volumes",
        "type" : 9
      }, {
        "name" : "HostNetwork",
        "type" : 5
      }, {
        "name" : "HostPorts",
        "type" : 11
      }, {
        "name" : "HostPID",
        "type" : 5
      }, {
        "name" : "HostIPC",
        "type" : 5
      }, {
        "name" : "SELinux",
        "type" : 15
      }, {
        "name" : "RunAsUser",
        "type" : 21
      }, {
        "name" : "RunAsGroup",
        "type" : 28
      }, {
        "name" : "SupplementalGroups",
        "type" : 32
      }, {
        "name" : "FSGroup",
        "type" : 35
      }, {
        "name" : "ReadOnlyRootFilesystem",
        "type" : 5
      }, {
        "name" : "DefaultAllowPrivilegeEscalation",
        "type" : 38
      }, {
        "name" : "AllowPrivilegeEscalation",
        "type" : 38
      }, {
        "name" : "AllowedHostPaths",
        "type" : 39
      }, {
        "name" : "AllowedFlexVolumes",
        "type" : 42
      }, {
        "name" : "AllowedCSIDrivers",
        "type" : 45
      }, {
        "name" : "AllowedUnsafeSysctls",
        "type" : 48
      }, {
        "name" : "ForbiddenSysctls",
        "type" : 48
      }, {
        "name" : "AllowedProcMountTypes",
        "type" : 49
      }, {
        "name" : "RuntimeClass",
        "type" : 51
      } ],
      "name" : "struct{Privileged bool \"json:\\\"privileged,omitempty\\\" protobuf:\\\"varint,1,opt,name=privileged\\\"\"; DefaultAddCapabilities []k8s.io/api/core/v1.Capability \"json:\\\"defaultAddCapabilities,omitempty\\\" protobuf:\\\"bytes,2,rep,name=defaultAddCapabilities,casttype=k8s.io/api/core/v1.Capability\\\"\"; RequiredDropCapabilities []k8s.io/api/core/v1.Capability \"json:\\\"requiredDropCapabilities,omitempty\\\" protobuf:\\\"bytes,3,rep,name=requiredDropCapabilities,casttype=k8s.io/api/core/v1.Capability\\\"\"; AllowedCapabilities []k8s.io/api/core/v1.Capability \"json:\\\"allowedCapabilities,omitempty\\\" protobuf:\\\"bytes,4,rep,name=allowedCapabilities,casttype=k8s.io/api/core/v1.Capability\\\"\"; Volumes []k8s.io/api/extensions/v1beta1.FSType \"json:\\\"volumes,omitempty\\\" protobuf:\\\"bytes,5,rep,name=volumes,casttype=FSType\\\"\"; HostNetwork bool \"json:\\\"hostNetwork,omitempty\\\" protobuf:\\\"varint,6,opt,name=hostNetwork\\\"\"; HostPorts []k8s.io/api/extensions/v1beta1.HostPortRange \"json:\\\"hostPorts,omitempty\\\" protobuf:\\\"bytes,7,rep,name=hostPorts\\\"\"; HostPID bool \"json:\\\"hostPID,omitempty\\\" protobuf:\\\"varint,8,opt,name=hostPID\\\"\"; HostIPC bool \"json:\\\"hostIPC,omitempty\\\" protobuf:\\\"varint,9,opt,name=hostIPC\\\"\"; SELinux k8s.io/api/extensions/v1beta1.SELinuxStrategyOptions \"json:\\\"seLinux\\\" protobuf:\\\"bytes,10,opt,name=seLinux\\\"\"; RunAsUser k8s.io/api/extensions/v1beta1.RunAsUserStrategyOptions \"json:\\\"runAsUser\\\" protobuf:\\\"bytes,11,opt,name=runAsUser\\\"\"; RunAsGroup *k8s.io/api/extensions/v1beta1.RunAsGroupStrategyOptions \"json:\\\"runAsGroup,omitempty\\\" protobuf:\\\"bytes,22,opt,name=runAsGroup\\\"\"; SupplementalGroups k8s.io/api/extensions/v1beta1.SupplementalGroupsStrategyOptions \"json:\\\"supplementalGroups\\\" protobuf:\\\"bytes,12,opt,name=supplementalGroups\\\"\"; FSGroup k8s.io/api/extensions/v1beta1.FSGroupStrategyOptions \"json:\\\"fsGroup\\\" protobuf:\\\"bytes,13,opt,name=fsGroup\\\"\"; ReadOnlyRootFilesystem bool \"json:\\\"readOnlyRootFilesystem,omitempty\\\" protobuf:\\\"varint,14,opt,name=readOnlyRootFilesystem\\\"\"; DefaultAllowPrivilegeEscalation *bool \"json:\\\"defaultAllowPrivilegeEscalation,omitempty\\\" protobuf:\\\"varint,15,opt,name=defaultAllowPrivilegeEscalation\\\"\"; AllowPrivilegeEscalation *bool \"json:\\\"allowPrivilegeEscalation,omitempty\\\" protobuf:\\\"varint,16,opt,name=allowPrivilegeEscalation\\\"\"; AllowedHostPaths []k8s.io/api/extensions/v1beta1.AllowedHostPath \"json:\\\"allowedHostPaths,omitempty\\\" protobuf:\\\"bytes,17,rep,name=allowedHostPaths\\\"\"; AllowedFlexVolumes []k8s.io/api/extensions/v1beta1.AllowedFlexVolume \"json:\\\"allowedFlexVolumes,omitempty\\\" protobuf:\\\"bytes,18,rep,name=allowedFlexVolumes\\\"\"; AllowedCSIDrivers []k8s.io/api/extensions/v1beta1.AllowedCSIDriver \"json:\\\"allowedCSIDrivers,omitempty\\\" protobuf:\\\"bytes,23,rep,name=allowedCSIDrivers\\\"\"; AllowedUnsafeSysctls []string \"json:\\\"allowedUnsafeSysctls,omitempty\\\" protobuf:\\\"bytes,19,rep,name=allowedUnsafeSysctls\\\"\"; ForbiddenSysctls []string \"json:\\\"forbiddenSysctls,omitempty\\\" protobuf:\\\"bytes,20,rep,name=forbiddenSysctls\\\"\"; AllowedProcMountTypes []k8s.io/api/core/v1.ProcMountType \"json:\\\"allowedProcMountTypes,omitempty\\\" protobuf:\\\"bytes,21,opt,name=allowedProcMountTypes\\\"\"; RuntimeClass *k8s.io/api/extensions/v1beta1.RuntimeClassStrategyOptions \"json:\\\"runtimeClass,omitempty\\\" protobuf:\\\"bytes,24,opt,name=runtimeClass\\\"\"}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "elem" : 7,
      "name" : "[]k8s.io/api/core/v1.Capability",
      "type" : "Slice",
      "underlying" : 6
    }, {
      "local-name" : "Capability",
      "name" : "k8s.io/api/core/v1.Capability",
      "package" : 2,
      "type" : "Named",
      "underlying" : 8
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "elem" : 10,
      "name" : "[]k8s.io/api/extensions/v1beta1.FSType",
      "type" : "Slice",
      "underlying" : 9
    }, {
      "local-name" : "FSType",
      "name" : "k8s.io/api/extensions/v1beta1.FSType",
      "package" : 1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 12,
      "name" : "[]k8s.io/api/extensions/v1beta1.HostPortRange",
      "type" : "Slice",
      "underlying" : 11
    }, {
      "local-name" : "HostPortRange",
      "name" : "k8s.io/api/extensions/v1beta1.HostPortRange",
      "package" : 1,
      "type" : "Named",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "Min",
        "type" : 14
      }, {
        "name" : "Max",
        "type" : 14
      } ],
      "name" : "struct{Min int32 \"json:\\\"min\\\" protobuf:\\\"varint,1,opt,name=min\\\"\"; Max int32 \"json:\\\"max\\\" protobuf:\\\"varint,2,opt,name=max\\\"\"}",
      "type" : "Struct",
      "underlying" : 13
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "local-name" : "SELinuxStrategyOptions",
      "name" : "k8s.io/api/extensions/v1beta1.SELinuxStrategyOptions",
      "package" : 1,
      "type" : "Named",
      "underlying" : 16
    }, {
      "fields" : [ {
        "name" : "Rule",
        "type" : 17
      }, {
        "name" : "SELinuxOptions",
        "type" : 18
      } ],
      "name" : "struct{Rule k8s.io/api/extensions/v1beta1.SELinuxStrategy \"json:\\\"rule\\\" protobuf:\\\"bytes,1,opt,name=rule,casttype=SELinuxStrategy\\\"\"; SELinuxOptions *k8s.io/api/core/v1.SELinuxOptions \"json:\\\"seLinuxOptions,omitempty\\\" protobuf:\\\"bytes,2,opt,name=seLinuxOptions\\\"\"}",
      "type" : "Struct",
      "underlying" : 16
    }, {
      "local-name" : "SELinuxStrategy",
      "name" : "k8s.io/api/extensions/v1beta1.SELinuxStrategy",
      "package" : 1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 19,
      "name" : "*k8s.io/api/core/v1.SELinuxOptions",
      "type" : "Pointer",
      "underlying" : 18
    }, {
      "local-name" : "SELinuxOptions",
      "name" : "k8s.io/api/core/v1.SELinuxOptions",
      "package" : 2,
      "type" : "Named",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "User",
        "type" : 8
      }, {
        "name" : "Role",
        "type" : 8
      }, {
        "name" : "Type",
        "type" : 8
      }, {
        "name" : "Level",
        "type" : 8
      } ],
      "name" : "struct{User string \"json:\\\"user,omitempty\\\" protobuf:\\\"bytes,1,opt,name=user\\\"\"; Role string \"json:\\\"role,omitempty\\\" protobuf:\\\"bytes,2,opt,name=role\\\"\"; Type string \"json:\\\"type,omitempty\\\" protobuf:\\\"bytes,3,opt,name=type\\\"\"; Level string \"json:\\\"level,omitempty\\\" protobuf:\\\"bytes,4,opt,name=level\\\"\"}",
      "type" : "Struct",
      "underlying" : 20
    }, {
      "local-name" : "RunAsUserStrategyOptions",
      "name" : "k8s.io/api/extensions/v1beta1.RunAsUserStrategyOptions",
      "package" : 1,
      "type" : "Named",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "Rule",
        "type" : 23
      }, {
        "name" : "Ranges",
        "type" : 24
      } ],
      "name" : "struct{Rule k8s.io/api/extensions/v1beta1.RunAsUserStrategy \"json:\\\"rule\\\" protobuf:\\\"bytes,1,opt,name=rule,casttype=RunAsUserStrategy\\\"\"; Ranges []k8s.io/api/extensions/v1beta1.IDRange \"json:\\\"ranges,omitempty\\\" protobuf:\\\"bytes,2,rep,name=ranges\\\"\"}",
      "type" : "Struct",
      "underlying" : 22
    }, {
      "local-name" : "RunAsUserStrategy",
      "name" : "k8s.io/api/extensions/v1beta1.RunAsUserStrategy",
      "package" : 1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 25,
      "name" : "[]k8s.io/api/extensions/v1beta1.IDRange",
      "type" : "Slice",
      "underlying" : 24
    }, {
      "local-name" : "IDRange",
      "name" : "k8s.io/api/extensions/v1beta1.IDRange",
      "package" : 1,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "Min",
        "type" : 27
      }, {
        "name" : "Max",
        "type" : 27
      } ],
      "name" : "struct{Min int64 \"json:\\\"min\\\" protobuf:\\\"varint,1,opt,name=min\\\"\"; Max int64 \"json:\\\"max\\\" protobuf:\\\"varint,2,opt,name=max\\\"\"}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "elem" : 29,
      "name" : "*k8s.io/api/extensions/v1beta1.RunAsGroupStrategyOptions",
      "type" : "Pointer",
      "underlying" : 28
    }, {
      "local-name" : "RunAsGroupStrategyOptions",
      "name" : "k8s.io/api/extensions/v1beta1.RunAsGroupStrategyOptions",
      "package" : 1,
      "type" : "Named",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "Rule",
        "type" : 31
      }, {
        "name" : "Ranges",
        "type" : 24
      } ],
      "name" : "struct{Rule k8s.io/api/extensions/v1beta1.RunAsGroupStrategy \"json:\\\"rule\\\" protobuf:\\\"bytes,1,opt,name=rule,casttype=RunAsGroupStrategy\\\"\"; Ranges []k8s.io/api/extensions/v1beta1.IDRange \"json:\\\"ranges,omitempty\\\" protobuf:\\\"bytes,2,rep,name=ranges\\\"\"}",
      "type" : "Struct",
      "underlying" : 30
    }, {
      "local-name" : "RunAsGroupStrategy",
      "name" : "k8s.io/api/extensions/v1beta1.RunAsGroupStrategy",
      "package" : 1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "local-name" : "SupplementalGroupsStrategyOptions",
      "name" : "k8s.io/api/extensions/v1beta1.SupplementalGroupsStrategyOptions",
      "package" : 1,
      "type" : "Named",
      "underlying" : 33
    }, {
      "fields" : [ {
        "name" : "Rule",
        "type" : 34
      }, {
        "name" : "Ranges",
        "type" : 24
      } ],
      "name" : "struct{Rule k8s.io/api/extensions/v1beta1.SupplementalGroupsStrategyType \"json:\\\"rule,omitempty\\\" protobuf:\\\"bytes,1,opt,name=rule,casttype=SupplementalGroupsStrategyType\\\"\"; Ranges []k8s.io/api/extensions/v1beta1.IDRange \"json:\\\"ranges,omitempty\\\" protobuf:\\\"bytes,2,rep,name=ranges\\\"\"}",
      "type" : "Struct",
      "underlying" : 33
    }, {
      "local-name" : "SupplementalGroupsStrategyType",
      "name" : "k8s.io/api/extensions/v1beta1.SupplementalGroupsStrategyType",
      "package" : 1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "local-name" : "FSGroupStrategyOptions",
      "name" : "k8s.io/api/extensions/v1beta1.FSGroupStrategyOptions",
      "package" : 1,
      "type" : "Named",
      "underlying" : 36
    }, {
      "fields" : [ {
        "name" : "Rule",
        "type" : 37
      }, {
        "name" : "Ranges",
        "type" : 24
      } ],
      "name" : "struct{Rule k8s.io/api/extensions/v1beta1.FSGroupStrategyType \"json:\\\"rule,omitempty\\\" protobuf:\\\"bytes,1,opt,name=rule,casttype=FSGroupStrategyType\\\"\"; Ranges []k8s.io/api/extensions/v1beta1.IDRange \"json:\\\"ranges,omitempty\\\" protobuf:\\\"bytes,2,rep,name=ranges\\\"\"}",
      "type" : "Struct",
      "underlying" : 36
    }, {
      "local-name" : "FSGroupStrategyType",
      "name" : "k8s.io/api/extensions/v1beta1.FSGroupStrategyType",
      "package" : 1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 5,
      "name" : "*bool",
      "type" : "Pointer",
      "underlying" : 38
    }, {
      "elem" : 40,
      "name" : "[]k8s.io/api/extensions/v1beta1.AllowedHostPath",
      "type" : "Slice",
      "underlying" : 39
    }, {
      "local-name" : "AllowedHostPath",
      "name" : "k8s.io/api/extensions/v1beta1.AllowedHostPath",
      "package" : 1,
      "type" : "Named",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "PathPrefix",
        "type" : 8
      }, {
        "name" : "ReadOnly",
        "type" : 5
      } ],
      "name" : "struct{PathPrefix string \"json:\\\"pathPrefix,omitempty\\\" protobuf:\\\"bytes,1,rep,name=pathPrefix\\\"\"; ReadOnly bool \"json:\\\"readOnly,omitempty\\\" protobuf:\\\"varint,2,opt,name=readOnly\\\"\"}",
      "type" : "Struct",
      "underlying" : 41
    }, {
      "elem" : 43,
      "name" : "[]k8s.io/api/extensions/v1beta1.AllowedFlexVolume",
      "type" : "Slice",
      "underlying" : 42
    }, {
      "local-name" : "AllowedFlexVolume",
      "name" : "k8s.io/api/extensions/v1beta1.AllowedFlexVolume",
      "package" : 1,
      "type" : "Named",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "Driver",
        "type" : 8
      } ],
      "name" : "struct{Driver string \"json:\\\"driver\\\" protobuf:\\\"bytes,1,opt,name=driver\\\"\"}",
      "type" : "Struct",
      "underlying" : 44
    }, {
      "elem" : 46,
      "name" : "[]k8s.io/api/extensions/v1beta1.AllowedCSIDriver",
      "type" : "Slice",
      "underlying" : 45
    }, {
      "local-name" : "AllowedCSIDriver",
      "name" : "k8s.io/api/extensions/v1beta1.AllowedCSIDriver",
      "package" : 1,
      "type" : "Named",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 8
      } ],
      "name" : "struct{Name string \"json:\\\"name\\\" protobuf:\\\"bytes,1,opt,name=name\\\"\"}",
      "type" : "Struct",
      "underlying" : 47
    }, {
      "elem" : 8,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 48
    }, {
      "elem" : 50,
      "name" : "[]k8s.io/api/core/v1.ProcMountType",
      "type" : "Slice",
      "underlying" : 49
    }, {
      "local-name" : "ProcMountType",
      "name" : "k8s.io/api/core/v1.ProcMountType",
      "package" : 2,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 52,
      "name" : "*k8s.io/api/extensions/v1beta1.RuntimeClassStrategyOptions",
      "type" : "Pointer",
      "underlying" : 51
    }, {
      "local-name" : "RuntimeClassStrategyOptions",
      "name" : "k8s.io/api/extensions/v1beta1.RuntimeClassStrategyOptions",
      "package" : 1,
      "type" : "Named",
      "underlying" : 53
    }, {
      "fields" : [ {
        "name" : "AllowedRuntimeClassNames",
        "type" : 48
      }, {
        "name" : "DefaultRuntimeClassName",
        "type" : 54
      } ],
      "name" : "struct{AllowedRuntimeClassNames []string \"json:\\\"allowedRuntimeClassNames\\\" protobuf:\\\"bytes,1,rep,name=allowedRuntimeClassNames\\\"\"; DefaultRuntimeClassName *string \"json:\\\"defaultRuntimeClassName,omitempty\\\" protobuf:\\\"bytes,2,opt,name=defaultRuntimeClassName\\\"\"}",
      "type" : "Struct",
      "underlying" : 53
    }, {
      "elem" : 8,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 54
    }, {
      "elem" : 56,
      "name" : "*k8s.io/kubernetes/pkg/apis/policy.PodSecurityPolicySpec",
      "type" : "Pointer",
      "underlying" : 55
    }, {
      "local-name" : "PodSecurityPolicySpec",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.PodSecurityPolicySpec",
      "package" : 3,
      "type" : "Named",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "Privileged",
        "type" : 5
      }, {
        "name" : "DefaultAddCapabilities",
        "type" : 58
      }, {
        "name" : "RequiredDropCapabilities",
        "type" : 58
      }, {
        "name" : "AllowedCapabilities",
        "type" : 58
      }, {
        "name" : "Volumes",
        "type" : 60
      }, {
        "name" : "HostNetwork",
        "type" : 5
      }, {
        "name" : "HostPorts",
        "type" : 62
      }, {
        "name" : "HostPID",
        "type" : 5
      }, {
        "name" : "HostIPC",
        "type" : 5
      }, {
        "name" : "SELinux",
        "type" : 65
      }, {
        "name" : "RunAsUser",
        "type" : 71
      }, {
        "name" : "RunAsGroup",
        "type" : 77
      }, {
        "name" : "SupplementalGroups",
        "type" : 81
      }, {
        "name" : "FSGroup",
        "type" : 84
      }, {
        "name" : "ReadOnlyRootFilesystem",
        "type" : 5
      }, {
        "name" : "DefaultAllowPrivilegeEscalation",
        "type" : 38
      }, {
        "name" : "AllowPrivilegeEscalation",
        "type" : 5
      }, {
        "name" : "AllowedHostPaths",
        "type" : 87
      }, {
        "name" : "AllowedFlexVolumes",
        "type" : 90
      }, {
        "name" : "AllowedCSIDrivers",
        "type" : 93
      }, {
        "name" : "AllowedUnsafeSysctls",
        "type" : 48
      }, {
        "name" : "ForbiddenSysctls",
        "type" : 48
      }, {
        "name" : "AllowedProcMountTypes",
        "type" : 96
      }, {
        "name" : "RuntimeClass",
        "type" : 98
      } ],
      "name" : "struct{Privileged bool; DefaultAddCapabilities []k8s.io/kubernetes/pkg/apis/core.Capability; RequiredDropCapabilities []k8s.io/kubernetes/pkg/apis/core.Capability; AllowedCapabilities []k8s.io/kubernetes/pkg/apis/core.Capability; Volumes []k8s.io/kubernetes/pkg/apis/policy.FSType; HostNetwork bool; HostPorts []k8s.io/kubernetes/pkg/apis/policy.HostPortRange; HostPID bool; HostIPC bool; SELinux k8s.io/kubernetes/pkg/apis/policy.SELinuxStrategyOptions; RunAsUser k8s.io/kubernetes/pkg/apis/policy.RunAsUserStrategyOptions; RunAsGroup *k8s.io/kubernetes/pkg/apis/policy.RunAsGroupStrategyOptions; SupplementalGroups k8s.io/kubernetes/pkg/apis/policy.SupplementalGroupsStrategyOptions; FSGroup k8s.io/kubernetes/pkg/apis/policy.FSGroupStrategyOptions; ReadOnlyRootFilesystem bool; DefaultAllowPrivilegeEscalation *bool; AllowPrivilegeEscalation bool; AllowedHostPaths []k8s.io/kubernetes/pkg/apis/policy.AllowedHostPath; AllowedFlexVolumes []k8s.io/kubernetes/pkg/apis/policy.AllowedFlexVolume; AllowedCSIDrivers []k8s.io/kubernetes/pkg/apis/policy.AllowedCSIDriver; AllowedUnsafeSysctls []string; ForbiddenSysctls []string; AllowedProcMountTypes []k8s.io/kubernetes/pkg/apis/core.ProcMountType; RuntimeClass *k8s.io/kubernetes/pkg/apis/policy.RuntimeClassStrategyOptions}",
      "type" : "Struct",
      "underlying" : 57
    }, {
      "elem" : 59,
      "name" : "[]k8s.io/kubernetes/pkg/apis/core.Capability",
      "type" : "Slice",
      "underlying" : 58
    }, {
      "local-name" : "Capability",
      "name" : "k8s.io/kubernetes/pkg/apis/core.Capability",
      "package" : 4,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 61,
      "name" : "[]k8s.io/kubernetes/pkg/apis/policy.FSType",
      "type" : "Slice",
      "underlying" : 60
    }, {
      "local-name" : "FSType",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.FSType",
      "package" : 3,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 63,
      "name" : "[]k8s.io/kubernetes/pkg/apis/policy.HostPortRange",
      "type" : "Slice",
      "underlying" : 62
    }, {
      "local-name" : "HostPortRange",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.HostPortRange",
      "package" : 3,
      "type" : "Named",
      "underlying" : 64
    }, {
      "fields" : [ {
        "name" : "Min",
        "type" : 14
      }, {
        "name" : "Max",
        "type" : 14
      } ],
      "name" : "struct{Min int32; Max int32}",
      "type" : "Struct",
      "underlying" : 64
    }, {
      "local-name" : "SELinuxStrategyOptions",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.SELinuxStrategyOptions",
      "package" : 3,
      "type" : "Named",
      "underlying" : 66
    }, {
      "fields" : [ {
        "name" : "Rule",
        "type" : 67
      }, {
        "name" : "SELinuxOptions",
        "type" : 68
      } ],
      "name" : "struct{Rule k8s.io/kubernetes/pkg/apis/policy.SELinuxStrategy; SELinuxOptions *k8s.io/kubernetes/pkg/apis/core.SELinuxOptions}",
      "type" : "Struct",
      "underlying" : 66
    }, {
      "local-name" : "SELinuxStrategy",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.SELinuxStrategy",
      "package" : 3,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 69,
      "name" : "*k8s.io/kubernetes/pkg/apis/core.SELinuxOptions",
      "type" : "Pointer",
      "underlying" : 68
    }, {
      "local-name" : "SELinuxOptions",
      "name" : "k8s.io/kubernetes/pkg/apis/core.SELinuxOptions",
      "package" : 4,
      "type" : "Named",
      "underlying" : 70
    }, {
      "fields" : [ {
        "name" : "User",
        "type" : 8
      }, {
        "name" : "Role",
        "type" : 8
      }, {
        "name" : "Type",
        "type" : 8
      }, {
        "name" : "Level",
        "type" : 8
      } ],
      "name" : "struct{User string; Role string; Type string; Level string}",
      "type" : "Struct",
      "underlying" : 70
    }, {
      "local-name" : "RunAsUserStrategyOptions",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.RunAsUserStrategyOptions",
      "package" : 3,
      "type" : "Named",
      "underlying" : 72
    }, {
      "fields" : [ {
        "name" : "Rule",
        "type" : 73
      }, {
        "name" : "Ranges",
        "type" : 74
      } ],
      "name" : "struct{Rule k8s.io/kubernetes/pkg/apis/policy.RunAsUserStrategy; Ranges []k8s.io/kubernetes/pkg/apis/policy.IDRange}",
      "type" : "Struct",
      "underlying" : 72
    }, {
      "local-name" : "RunAsUserStrategy",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.RunAsUserStrategy",
      "package" : 3,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 75,
      "name" : "[]k8s.io/kubernetes/pkg/apis/policy.IDRange",
      "type" : "Slice",
      "underlying" : 74
    }, {
      "local-name" : "IDRange",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.IDRange",
      "package" : 3,
      "type" : "Named",
      "underlying" : 76
    }, {
      "fields" : [ {
        "name" : "Min",
        "type" : 27
      }, {
        "name" : "Max",
        "type" : 27
      } ],
      "name" : "struct{Min int64; Max int64}",
      "type" : "Struct",
      "underlying" : 76
    }, {
      "elem" : 78,
      "name" : "*k8s.io/kubernetes/pkg/apis/policy.RunAsGroupStrategyOptions",
      "type" : "Pointer",
      "underlying" : 77
    }, {
      "local-name" : "RunAsGroupStrategyOptions",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.RunAsGroupStrategyOptions",
      "package" : 3,
      "type" : "Named",
      "underlying" : 79
    }, {
      "fields" : [ {
        "name" : "Rule",
        "type" : 80
      }, {
        "name" : "Ranges",
        "type" : 74
      } ],
      "name" : "struct{Rule k8s.io/kubernetes/pkg/apis/policy.RunAsGroupStrategy; Ranges []k8s.io/kubernetes/pkg/apis/policy.IDRange}",
      "type" : "Struct",
      "underlying" : 79
    }, {
      "local-name" : "RunAsGroupStrategy",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.RunAsGroupStrategy",
      "package" : 3,
      "type" : "Named",
      "underlying" : 8
    }, {
      "local-name" : "SupplementalGroupsStrategyOptions",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.SupplementalGroupsStrategyOptions",
      "package" : 3,
      "type" : "Named",
      "underlying" : 82
    }, {
      "fields" : [ {
        "name" : "Rule",
        "type" : 83
      }, {
        "name" : "Ranges",
        "type" : 74
      } ],
      "name" : "struct{Rule k8s.io/kubernetes/pkg/apis/policy.SupplementalGroupsStrategyType; Ranges []k8s.io/kubernetes/pkg/apis/policy.IDRange}",
      "type" : "Struct",
      "underlying" : 82
    }, {
      "local-name" : "SupplementalGroupsStrategyType",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.SupplementalGroupsStrategyType",
      "package" : 3,
      "type" : "Named",
      "underlying" : 8
    }, {
      "local-name" : "FSGroupStrategyOptions",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.FSGroupStrategyOptions",
      "package" : 3,
      "type" : "Named",
      "underlying" : 85
    }, {
      "fields" : [ {
        "name" : "Rule",
        "type" : 86
      }, {
        "name" : "Ranges",
        "type" : 74
      } ],
      "name" : "struct{Rule k8s.io/kubernetes/pkg/apis/policy.FSGroupStrategyType; Ranges []k8s.io/kubernetes/pkg/apis/policy.IDRange}",
      "type" : "Struct",
      "underlying" : 85
    }, {
      "local-name" : "FSGroupStrategyType",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.FSGroupStrategyType",
      "package" : 3,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 88,
      "name" : "[]k8s.io/kubernetes/pkg/apis/policy.AllowedHostPath",
      "type" : "Slice",
      "underlying" : 87
    }, {
      "local-name" : "AllowedHostPath",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.AllowedHostPath",
      "package" : 3,
      "type" : "Named",
      "underlying" : 89
    }, {
      "fields" : [ {
        "name" : "PathPrefix",
        "type" : 8
      }, {
        "name" : "ReadOnly",
        "type" : 5
      } ],
      "name" : "struct{PathPrefix string; ReadOnly bool}",
      "type" : "Struct",
      "underlying" : 89
    }, {
      "elem" : 91,
      "name" : "[]k8s.io/kubernetes/pkg/apis/policy.AllowedFlexVolume",
      "type" : "Slice",
      "underlying" : 90
    }, {
      "local-name" : "AllowedFlexVolume",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.AllowedFlexVolume",
      "package" : 3,
      "type" : "Named",
      "underlying" : 92
    }, {
      "fields" : [ {
        "name" : "Driver",
        "type" : 8
      } ],
      "name" : "struct{Driver string}",
      "type" : "Struct",
      "underlying" : 92
    }, {
      "elem" : 94,
      "name" : "[]k8s.io/kubernetes/pkg/apis/policy.AllowedCSIDriver",
      "type" : "Slice",
      "underlying" : 93
    }, {
      "local-name" : "AllowedCSIDriver",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.AllowedCSIDriver",
      "package" : 3,
      "type" : "Named",
      "underlying" : 95
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 8
      } ],
      "name" : "struct{Name string}",
      "type" : "Struct",
      "underlying" : 95
    }, {
      "elem" : 97,
      "name" : "[]k8s.io/kubernetes/pkg/apis/core.ProcMountType",
      "type" : "Slice",
      "underlying" : 96
    }, {
      "local-name" : "ProcMountType",
      "name" : "k8s.io/kubernetes/pkg/apis/core.ProcMountType",
      "package" : 4,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 99,
      "name" : "*k8s.io/kubernetes/pkg/apis/policy.RuntimeClassStrategyOptions",
      "type" : "Pointer",
      "underlying" : 98
    }, {
      "local-name" : "RuntimeClassStrategyOptions",
      "name" : "k8s.io/kubernetes/pkg/apis/policy.RuntimeClassStrategyOptions",
      "package" : 3,
      "type" : "Named",
      "underlying" : 100
    }, {
      "fields" : [ {
        "name" : "AllowedRuntimeClassNames",
        "type" : 48
      }, {
        "name" : "DefaultRuntimeClassName",
        "type" : 54
      } ],
      "name" : "struct{AllowedRuntimeClassNames []string; DefaultRuntimeClassName *string}",
      "type" : "Struct",
      "underlying" : 100
    }, {
      "local-name" : "Scope",
      "name" : "k8s.io/apimachinery/pkg/conversion.Scope",
      "package" : 5,
      "type" : "Named",
      "underlying" : 102
    }, {
      "methods" : [ {
        "name" : "Convert",
        "type" : 103
      }, {
        "name" : "DestTag",
        "type" : 114
      }, {
        "name" : "Flags",
        "type" : 117
      }, {
        "name" : "Meta",
        "type" : 119
      }, {
        "name" : "SrcTag",
        "type" : 114
      } ],
      "name" : "interface{Convert(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags) error; DestTag() reflect.StructTag; Flags() k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags; Meta() *k8s.io/apimachinery/pkg/conversion.Meta; SrcTag() reflect.StructTag}",
      "type" : "Interface",
      "underlying" : 102
    }, {
      "name" : "(k8s.io/apimachinery/pkg/conversion.Scope) func(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags) error",
      "params" : 104,
      "recv" : 1,
      "results" : 108,
      "type" : "Signature",
      "underlying" : 103,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "src",
        "type" : 105
      }, {
        "name" : "dest",
        "type" : 105
      }, {
        "name" : "flags",
        "type" : 106
      } ],
      "name" : "(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags)",
      "type" : "Tuple",
      "underlying" : 104
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 105
    }, {
      "local-name" : "FieldMatchingFlags",
      "name" : "k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags",
      "package" : 5,
      "type" : "Named",
      "underlying" : 107
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 107
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 109
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 108
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 110
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 111
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 110
    }, {
      "name" : "(error) func() string",
      "params" : 112,
      "recv" : 0,
      "results" : 113,
      "type" : "Signature",
      "underlying" : 111,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 112
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 113
    }, {
      "name" : "(k8s.io/apimachinery/pkg/conversion.Scope) func() reflect.StructTag",
      "params" : 112,
      "recv" : 2,
      "results" : 115,
      "type" : "Signature",
      "underlying" : 114,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 116
      } ],
      "name" : "(reflect.StructTag)",
      "type" : "Tuple",
      "underlying" : 115
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 6,
      "type" : "Named",
      "underlying" : 8
    }, {
      "name" : "(k8s.io/apimachinery/pkg/conversion.Scope) func() k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags",
      "params" : 112,
      "recv" : 3,
      "results" : 118,
      "type" : "Signature",
      "underlying" : 117,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 106
      } ],
      "name" : "(k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags)",
      "type" : "Tuple",
      "underlying" : 118
    }, {
      "name" : "(k8s.io/apimachinery/pkg/conversion.Scope) func() *k8s.io/apimachinery/pkg/conversion.Meta",
      "params" : 112,
      "recv" : 4,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 119,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 121
      } ],
      "name" : "(*k8s.io/apimachinery/pkg/conversion.Meta)",
      "type" : "Tuple",
      "underlying" : 120
    }, {
      "elem" : 122,
      "name" : "*k8s.io/apimachinery/pkg/conversion.Meta",
      "type" : "Pointer",
      "underlying" : 121
    }, {
      "local-name" : "Meta",
      "name" : "k8s.io/apimachinery/pkg/conversion.Meta",
      "package" : 5,
      "type" : "Named",
      "underlying" : 123
    }, {
      "fields" : [ {
        "name" : "KeyNameMapping",
        "type" : 124
      }, {
        "name" : "Context",
        "type" : 105
      } ],
      "name" : "struct{KeyNameMapping k8s.io/apimachinery/pkg/conversion.FieldMappingFunc; Context interface{}}",
      "type" : "Struct",
      "underlying" : 123
    }, {
      "local-name" : "FieldMappingFunc",
      "name" : "k8s.io/apimachinery/pkg/conversion.FieldMappingFunc",
      "package" : 5,
      "type" : "Named",
      "underlying" : 125
    }, {
      "name" : "func(key string, sourceTag reflect.StructTag, destTag reflect.StructTag) (source string, dest string)",
      "params" : 126,
      "recv" : -1,
      "results" : 127,
      "type" : "Signature",
      "underlying" : 125,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 8
      }, {
        "name" : "sourceTag",
        "type" : 116
      }, {
        "name" : "destTag",
        "type" : 116
      } ],
      "name" : "(key string, sourceTag reflect.StructTag, destTag reflect.StructTag)",
      "type" : "Tuple",
      "underlying" : 126
    }, {
      "fields" : [ {
        "name" : "source",
        "type" : 8
      }, {
        "name" : "dest",
        "type" : 8
      } ],
      "name" : "(source string, dest string)",
      "type" : "Tuple",
      "underlying" : 127
    }, {
      "elem" : 58,
      "name" : "*[]k8s.io/kubernetes/pkg/apis/core.Capability",
      "type" : "Pointer",
      "underlying" : 128
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 7,
      "type" : "Basic",
      "underlying" : 129
    }, {
      "elem" : 6,
      "name" : "*[]k8s.io/api/core/v1.Capability",
      "type" : "Pointer",
      "underlying" : 130
    }, {
      "elem" : 60,
      "name" : "*[]k8s.io/kubernetes/pkg/apis/policy.FSType",
      "type" : "Pointer",
      "underlying" : 131
    }, {
      "elem" : 9,
      "name" : "*[]k8s.io/api/extensions/v1beta1.FSType",
      "type" : "Pointer",
      "underlying" : 132
    }, {
      "elem" : 62,
      "name" : "*[]k8s.io/kubernetes/pkg/apis/policy.HostPortRange",
      "type" : "Pointer",
      "underlying" : 133
    }, {
      "elem" : 11,
      "name" : "*[]k8s.io/api/extensions/v1beta1.HostPortRange",
      "type" : "Pointer",
      "underlying" : 134
    }, {
      "name" : "func(in *k8s.io/api/extensions/v1beta1.SELinuxStrategyOptions, out *k8s.io/kubernetes/pkg/apis/policy.SELinuxStrategyOptions, s k8s.io/apimachinery/pkg/conversion.Scope) error",
      "params" : 136,
      "recv" : -1,
      "results" : 108,
      "type" : "Signature",
      "underlying" : 135,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 137
      }, {
        "name" : "out",
        "type" : 138
      }, {
        "name" : "s",
        "type" : 101
      } ],
      "name" : "(in *k8s.io/api/extensions/v1beta1.SELinuxStrategyOptions, out *k8s.io/kubernetes/pkg/apis/policy.SELinuxStrategyOptions, s k8s.io/apimachinery/pkg/conversion.Scope)",
      "type" : "Tuple",
      "underlying" : 136
    }, {
      "elem" : 15,
      "name" : "*k8s.io/api/extensions/v1beta1.SELinuxStrategyOptions",
      "type" : "Pointer",
      "underlying" : 137
    }, {
      "elem" : 65,
      "name" : "*k8s.io/kubernetes/pkg/apis/policy.SELinuxStrategyOptions",
      "type" : "Pointer",
      "underlying" : 138
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 139
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 140
    }, {
      "name" : "func(in *k8s.io/api/extensions/v1beta1.RunAsUserStrategyOptions, out *k8s.io/kubernetes/pkg/apis/policy.RunAsUserStrategyOptions, s k8s.io/apimachinery/pkg/conversion.Scope) error",
      "params" : 142,
      "recv" : -1,
      "results" : 108,
      "type" : "Signature",
      "underlying" : 141,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 143
      }, {
        "name" : "out",
        "type" : 144
      }, {
        "name" : "s",
        "type" : 101
      } ],
      "name" : "(in *k8s.io/api/extensions/v1beta1.RunAsUserStrategyOptions, out *k8s.io/kubernetes/pkg/apis/policy.RunAsUserStrategyOptions, s k8s.io/apimachinery/pkg/conversion.Scope)",
      "type" : "Tuple",
      "underlying" : 142
    }, {
      "elem" : 21,
      "name" : "*k8s.io/api/extensions/v1beta1.RunAsUserStrategyOptions",
      "type" : "Pointer",
      "underlying" : 143
    }, {
      "elem" : 71,
      "name" : "*k8s.io/kubernetes/pkg/apis/policy.RunAsUserStrategyOptions",
      "type" : "Pointer",
      "underlying" : 144
    }, {
      "name" : "func(in *k8s.io/api/extensions/v1beta1.SupplementalGroupsStrategyOptions, out *k8s.io/kubernetes/pkg/apis/policy.SupplementalGroupsStrategyOptions, s k8s.io/apimachinery/pkg/conversion.Scope) error",
      "params" : 146,
      "recv" : -1,
      "results" : 108,
      "type" : "Signature",
      "underlying" : 145,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 147
      }, {
        "name" : "out",
        "type" : 148
      }, {
        "name" : "s",
        "type" : 101
      } ],
      "name" : "(in *k8s.io/api/extensions/v1beta1.SupplementalGroupsStrategyOptions, out *k8s.io/kubernetes/pkg/apis/policy.SupplementalGroupsStrategyOptions, s k8s.io/apimachinery/pkg/conversion.Scope)",
      "type" : "Tuple",
      "underlying" : 146
    }, {
      "elem" : 32,
      "name" : "*k8s.io/api/extensions/v1beta1.SupplementalGroupsStrategyOptions",
      "type" : "Pointer",
      "underlying" : 147
    }, {
      "elem" : 81,
      "name" : "*k8s.io/kubernetes/pkg/apis/policy.SupplementalGroupsStrategyOptions",
      "type" : "Pointer",
      "underlying" : 148
    }, {
      "name" : "func(in *k8s.io/api/extensions/v1beta1.FSGroupStrategyOptions, out *k8s.io/kubernetes/pkg/apis/policy.FSGroupStrategyOptions, s k8s.io/apimachinery/pkg/conversion.Scope) error",
      "params" : 150,
      "recv" : -1,
      "results" : 108,
      "type" : "Signature",
      "underlying" : 149,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 151
      }, {
        "name" : "out",
        "type" : 152
      }, {
        "name" : "s",
        "type" : 101
      } ],
      "name" : "(in *k8s.io/api/extensions/v1beta1.FSGroupStrategyOptions, out *k8s.io/kubernetes/pkg/apis/policy.FSGroupStrategyOptions, s k8s.io/apimachinery/pkg/conversion.Scope)",
      "type" : "Tuple",
      "underlying" : 150
    }, {
      "elem" : 35,
      "name" : "*k8s.io/api/extensions/v1beta1.FSGroupStrategyOptions",
      "type" : "Pointer",
      "underlying" : 151
    }, {
      "elem" : 84,
      "name" : "*k8s.io/kubernetes/pkg/apis/policy.FSGroupStrategyOptions",
      "type" : "Pointer",
      "underlying" : 152
    }, {
      "name" : "func(in **bool, out *bool, s k8s.io/apimachinery/pkg/conversion.Scope) error",
      "params" : 154,
      "recv" : -1,
      "results" : 108,
      "type" : "Signature",
      "underlying" : 153,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 155
      }, {
        "name" : "out",
        "type" : 38
      }, {
        "name" : "s",
        "type" : 101
      } ],
      "name" : "(in **bool, out *bool, s k8s.io/apimachinery/pkg/conversion.Scope)",
      "type" : "Tuple",
      "underlying" : 154
    }, {
      "elem" : 38,
      "name" : "**bool",
      "type" : "Pointer",
      "underlying" : 155
    }, {
      "elem" : 87,
      "name" : "*[]k8s.io/kubernetes/pkg/apis/policy.AllowedHostPath",
      "type" : "Pointer",
      "underlying" : 156
    }, {
      "elem" : 39,
      "name" : "*[]k8s.io/api/extensions/v1beta1.AllowedHostPath",
      "type" : "Pointer",
      "underlying" : 157
    }, {
      "elem" : 90,
      "name" : "*[]k8s.io/kubernetes/pkg/apis/policy.AllowedFlexVolume",
      "type" : "Pointer",
      "underlying" : 158
    }, {
      "elem" : 42,
      "name" : "*[]k8s.io/api/extensions/v1beta1.AllowedFlexVolume",
      "type" : "Pointer",
      "underlying" : 159
    }, {
      "elem" : 93,
      "name" : "*[]k8s.io/kubernetes/pkg/apis/policy.AllowedCSIDriver",
      "type" : "Pointer",
      "underlying" : 160
    }, {
      "elem" : 45,
      "name" : "*[]k8s.io/api/extensions/v1beta1.AllowedCSIDriver",
      "type" : "Pointer",
      "underlying" : 161
    }, {
      "elem" : 48,
      "name" : "*[]string",
      "type" : "Pointer",
      "underlying" : 162
    }, {
      "elem" : 96,
      "name" : "*[]k8s.io/kubernetes/pkg/apis/core.ProcMountType",
      "type" : "Pointer",
      "underlying" : 163
    }, {
      "elem" : 49,
      "name" : "*[]k8s.io/api/core/v1.ProcMountType",
      "type" : "Pointer",
      "underlying" : 164
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 101,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 101,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 101,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 101,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 55,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 101,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Privileged",
      "package" : 3,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Privileged",
      "package" : 1,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "DefaultAddCapabilities",
      "package" : 3,
      "type" : 58,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "DefaultAddCapabilities",
      "package" : 1,
      "type" : 6,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "RequiredDropCapabilities",
      "package" : 3,
      "type" : 58,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "RequiredDropCapabilities",
      "package" : 1,
      "type" : 6,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "AllowedCapabilities",
      "package" : 3,
      "type" : 58,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "AllowedCapabilities",
      "package" : 1,
      "type" : 6,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Volumes",
      "package" : 3,
      "type" : 60,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Volumes",
      "package" : 1,
      "type" : 9,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "HostNetwork",
      "package" : 3,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "HostNetwork",
      "package" : 1,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "HostPorts",
      "package" : 3,
      "type" : 62,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "HostPorts",
      "package" : 1,
      "type" : 11,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "HostPID",
      "package" : 3,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "HostPID",
      "package" : 1,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "HostIPC",
      "package" : 3,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "HostIPC",
      "package" : 1,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "SELinux",
      "package" : 1,
      "type" : 15,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "SELinux",
      "package" : 3,
      "type" : 65,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "RunAsUser",
      "package" : 1,
      "type" : 21,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "RunAsUser",
      "package" : 3,
      "type" : 71,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "RunAsGroup",
      "package" : 3,
      "type" : 77,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "RunAsGroup",
      "package" : 1,
      "type" : 28,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "SupplementalGroups",
      "package" : 1,
      "type" : 32,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "SupplementalGroups",
      "package" : 3,
      "type" : 81,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "FSGroup",
      "package" : 1,
      "type" : 35,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "FSGroup",
      "package" : 3,
      "type" : 84,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ReadOnlyRootFilesystem",
      "package" : 3,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ReadOnlyRootFilesystem",
      "package" : 1,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "DefaultAllowPrivilegeEscalation",
      "package" : 3,
      "type" : 38,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "DefaultAllowPrivilegeEscalation",
      "package" : 1,
      "type" : 38,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "AllowPrivilegeEscalation",
      "package" : 1,
      "type" : 38,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "AllowPrivilegeEscalation",
      "package" : 3,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "AllowedHostPaths",
      "package" : 3,
      "type" : 87,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "AllowedHostPaths",
      "package" : 1,
      "type" : 39,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "AllowedFlexVolumes",
      "package" : 3,
      "type" : 90,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "AllowedFlexVolumes",
      "package" : 1,
      "type" : 42,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "AllowedCSIDrivers",
      "package" : 3,
      "type" : 93,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "AllowedCSIDrivers",
      "package" : 1,
      "type" : 45,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "AllowedUnsafeSysctls",
      "package" : 3,
      "type" : 48,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "AllowedUnsafeSysctls",
      "package" : 1,
      "type" : 48,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ForbiddenSysctls",
      "package" : 3,
      "type" : 48,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ForbiddenSysctls",
      "package" : 1,
      "type" : 48,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "AllowedProcMountTypes",
      "package" : 3,
      "type" : 96,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "AllowedProcMountTypes",
      "package" : 1,
      "type" : 49,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "RuntimeClass",
      "package" : 3,
      "type" : 98,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "RuntimeClass",
      "package" : 1,
      "type" : 51,
      "exported" : true,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}