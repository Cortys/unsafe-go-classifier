{
  "usage" : {
    "file" : "zz_generated_models.go",
    "label1" : "cast-struct",
    "label2" : "efficiency",
    "line" : "3227",
    "module" : "github.com/Azure/azure-storage-blob-go",
    "pkg" : "github.com/Azure/azure-storage-blob-go/azblob",
    "project" : "elastic/beats",
    "snippet" : "cp2 := (*containerProperties)(unsafe.Pointer(&cp))",
    "version" : "v0.8.0"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 3, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 3, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 6, 3, 4 ],
      "decl-vars" : [ 6 ],
      "line-start" : 3227,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "cp2"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 60,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 60,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "containerProperties"
              }
            },
            "go-type" : 59,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 59,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 64,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 5,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 64,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 64,
            "kind" : "expression",
            "target" : {
              "go-type" : 65,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 36,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "cp",
                  "variable" : 2
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 3227,
      "code" : "cp2 := (*containerProperties)(unsafe.Pointer(&cp))",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 3, 4, 6 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 3228,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 60,
            "kind" : "expression",
            "target" : {
              "go-type" : 59,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cp2",
                "variable" : 6
              }
            },
            "type" : "star"
          }, {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "start",
              "variable" : 4
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "EncodeElement"
            },
            "go-type" : 66,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "e",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 3228,
      "code" : "return e.EncodeElement(*cp2, start)",
      "entry" : false,
      "use-vars" : [ 6, 4, 3 ]
    } ],
    "code" : "// MarshalXML implements the xml.Marshaler interface for ContainerProperties.\nfunc (cp ContainerProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {\n\tcp2 := (*containerProperties)(unsafe.Pointer(&cp))\n\treturn e.EncodeElement(*cp2, start)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "MarshalXML",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "EncodeElement",
      "package" : 1,
      "type" : 69,
      "exported" : true
    } ],
    "line-end" : 3229,
    "line-start" : 3226,
    "names" : [ "MarshalXML" ],
    "package" : 0,
    "packages" : [ {
      "name" : "azblob",
      "path" : "github.com/Azure/azure-storage-blob-go/azblob"
    }, {
      "name" : "xml",
      "path" : "encoding/xml"
    }, {
      "name" : "bufio",
      "path" : "bufio"
    }, {
      "name" : "io",
      "path" : "io"
    }, {
      "name" : "time",
      "path" : "time"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 3, 4 ],
    "receivers" : [ 2 ],
    "results" : [ 5 ],
    "type" : "function",
    "types" : [ {
      "name" : "(github.com/Azure/azure-storage-blob-go/azblob.ContainerProperties) func(e *encoding/xml.Encoder, start encoding/xml.StartElement) error",
      "params" : 1,
      "recv" : 2,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "e",
        "type" : 2
      }, {
        "name" : "start",
        "type" : 30
      } ],
      "name" : "(e *encoding/xml.Encoder, start encoding/xml.StartElement)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*encoding/xml.Encoder",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "Encoder",
      "name" : "encoding/xml.Encoder",
      "package" : 1,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 5
      } ],
      "name" : "struct{p encoding/xml.printer}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "printer",
      "name" : "encoding/xml.printer",
      "package" : 1,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "Writer",
        "type" : 7
      }, {
        "name" : "encoder",
        "type" : 2
      }, {
        "name" : "seq",
        "type" : 18
      }, {
        "name" : "indent",
        "type" : 15
      }, {
        "name" : "prefix",
        "type" : 15
      }, {
        "name" : "depth",
        "type" : 18
      }, {
        "name" : "indentedIn",
        "type" : 24
      }, {
        "name" : "putNewline",
        "type" : 24
      }, {
        "name" : "attrNS",
        "type" : 25
      }, {
        "name" : "attrPrefix",
        "type" : 25
      }, {
        "name" : "prefixes",
        "type" : 26
      }, {
        "name" : "tags",
        "type" : 27
      } ],
      "name" : "struct{*bufio.Writer; encoder *encoding/xml.Encoder; seq int; indent string; prefix string; depth int; indentedIn bool; putNewline bool; attrNS map[string]string; attrPrefix map[string]string; prefixes []string; tags []encoding/xml.Name}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "elem" : 8,
      "name" : "*bufio.Writer",
      "type" : "Pointer",
      "underlying" : 7
    }, {
      "local-name" : "Writer",
      "name" : "bufio.Writer",
      "package" : 2,
      "type" : "Named",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 10
      }, {
        "name" : "buf",
        "type" : 16
      }, {
        "name" : "n",
        "type" : 18
      }, {
        "name" : "wr",
        "type" : 19
      } ],
      "name" : "struct{err error; buf []byte; n int; wr io.Writer}",
      "type" : "Struct",
      "underlying" : 9
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 11
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 12
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 11
    }, {
      "name" : "(error) func() string",
      "params" : 13,
      "recv" : 0,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 16
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "local-name" : "Writer",
      "name" : "io.Writer",
      "package" : 3,
      "type" : "Named",
      "underlying" : 20
    }, {
      "methods" : [ {
        "name" : "Write",
        "type" : 21
      } ],
      "name" : "interface{Write(p []byte) (n int, err error)}",
      "type" : "Interface",
      "underlying" : 20
    }, {
      "name" : "(io.Writer) func(p []byte) (n int, err error)",
      "params" : 22,
      "recv" : 1,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 16
      } ],
      "name" : "(p []byte)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 18
      }, {
        "name" : "err",
        "type" : 10
      } ],
      "name" : "(n int, err error)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "elem" : 15,
      "key" : 15,
      "name" : "map[string]string",
      "type" : "Map",
      "underlying" : 25
    }, {
      "elem" : 15,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 26
    }, {
      "elem" : 28,
      "name" : "[]encoding/xml.Name",
      "type" : "Slice",
      "underlying" : 27
    }, {
      "local-name" : "Name",
      "name" : "encoding/xml.Name",
      "package" : 1,
      "type" : "Named",
      "underlying" : 29
    }, {
      "fields" : [ {
        "name" : "Space",
        "type" : 15
      }, {
        "name" : "Local",
        "type" : 15
      } ],
      "name" : "struct{Space string; Local string}",
      "type" : "Struct",
      "underlying" : 29
    }, {
      "local-name" : "StartElement",
      "name" : "encoding/xml.StartElement",
      "package" : 1,
      "type" : "Named",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 28
      }, {
        "name" : "Attr",
        "type" : 32
      } ],
      "name" : "struct{Name encoding/xml.Name; Attr []encoding/xml.Attr}",
      "type" : "Struct",
      "underlying" : 31
    }, {
      "elem" : 33,
      "name" : "[]encoding/xml.Attr",
      "type" : "Slice",
      "underlying" : 32
    }, {
      "local-name" : "Attr",
      "name" : "encoding/xml.Attr",
      "package" : 1,
      "type" : "Named",
      "underlying" : 34
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 28
      }, {
        "name" : "Value",
        "type" : 15
      } ],
      "name" : "struct{Name encoding/xml.Name; Value string}",
      "type" : "Struct",
      "underlying" : 34
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "local-name" : "ContainerProperties",
      "name" : "github.com/Azure/azure-storage-blob-go/azblob.ContainerProperties",
      "package" : 0,
      "type" : "Named",
      "underlying" : 37
    }, {
      "fields" : [ {
        "name" : "LastModified",
        "type" : 38
      }, {
        "name" : "Etag",
        "type" : 53
      }, {
        "name" : "LeaseStatus",
        "type" : 54
      }, {
        "name" : "LeaseState",
        "type" : 55
      }, {
        "name" : "LeaseDuration",
        "type" : 56
      }, {
        "name" : "PublicAccess",
        "type" : 57
      }, {
        "name" : "HasImmutabilityPolicy",
        "type" : 58
      }, {
        "name" : "HasLegalHold",
        "type" : 58
      } ],
      "name" : "struct{LastModified time.Time \"xml:\\\"Last-Modified\\\"\"; Etag github.com/Azure/azure-storage-blob-go/azblob.ETag \"xml:\\\"Etag\\\"\"; LeaseStatus github.com/Azure/azure-storage-blob-go/azblob.LeaseStatusType \"xml:\\\"LeaseStatus\\\"\"; LeaseState github.com/Azure/azure-storage-blob-go/azblob.LeaseStateType \"xml:\\\"LeaseState\\\"\"; LeaseDuration github.com/Azure/azure-storage-blob-go/azblob.LeaseDurationType \"xml:\\\"LeaseDuration\\\"\"; PublicAccess github.com/Azure/azure-storage-blob-go/azblob.PublicAccessType \"xml:\\\"PublicAccess\\\"\"; HasImmutabilityPolicy *bool \"xml:\\\"HasImmutabilityPolicy\\\"\"; HasLegalHold *bool \"xml:\\\"HasLegalHold\\\"\"}",
      "type" : "Struct",
      "underlying" : 37
    }, {
      "local-name" : "Time",
      "name" : "time.Time",
      "package" : 4,
      "type" : "Named",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "wall",
        "type" : 40
      }, {
        "name" : "ext",
        "type" : 41
      }, {
        "name" : "loc",
        "type" : 42
      } ],
      "name" : "struct{wall uint64; ext int64; loc *time.Location}",
      "type" : "Struct",
      "underlying" : 39
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 41
    }, {
      "elem" : 43,
      "name" : "*time.Location",
      "type" : "Pointer",
      "underlying" : 42
    }, {
      "local-name" : "Location",
      "name" : "time.Location",
      "package" : 4,
      "type" : "Named",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 15
      }, {
        "name" : "zone",
        "type" : 45
      }, {
        "name" : "tx",
        "type" : 48
      }, {
        "name" : "cacheStart",
        "type" : 41
      }, {
        "name" : "cacheEnd",
        "type" : 41
      }, {
        "name" : "cacheZone",
        "type" : 52
      } ],
      "name" : "struct{name string; zone []time.zone; tx []time.zoneTrans; cacheStart int64; cacheEnd int64; cacheZone *time.zone}",
      "type" : "Struct",
      "underlying" : 44
    }, {
      "elem" : 46,
      "name" : "[]time.zone",
      "type" : "Slice",
      "underlying" : 45
    }, {
      "local-name" : "zone",
      "name" : "time.zone",
      "package" : 4,
      "type" : "Named",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 15
      }, {
        "name" : "offset",
        "type" : 18
      }, {
        "name" : "isDST",
        "type" : 24
      } ],
      "name" : "struct{name string; offset int; isDST bool}",
      "type" : "Struct",
      "underlying" : 47
    }, {
      "elem" : 49,
      "name" : "[]time.zoneTrans",
      "type" : "Slice",
      "underlying" : 48
    }, {
      "local-name" : "zoneTrans",
      "name" : "time.zoneTrans",
      "package" : 4,
      "type" : "Named",
      "underlying" : 50
    }, {
      "fields" : [ {
        "name" : "when",
        "type" : 41
      }, {
        "name" : "index",
        "type" : 51
      }, {
        "name" : "isstd",
        "type" : 24
      }, {
        "name" : "isutc",
        "type" : 24
      } ],
      "name" : "struct{when int64; index uint8; isstd bool; isutc bool}",
      "type" : "Struct",
      "underlying" : 50
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 51
    }, {
      "elem" : 46,
      "name" : "*time.zone",
      "type" : "Pointer",
      "underlying" : 52
    }, {
      "local-name" : "ETag",
      "name" : "github.com/Azure/azure-storage-blob-go/azblob.ETag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "local-name" : "LeaseStatusType",
      "name" : "github.com/Azure/azure-storage-blob-go/azblob.LeaseStatusType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "local-name" : "LeaseStateType",
      "name" : "github.com/Azure/azure-storage-blob-go/azblob.LeaseStateType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "local-name" : "LeaseDurationType",
      "name" : "github.com/Azure/azure-storage-blob-go/azblob.LeaseDurationType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "local-name" : "PublicAccessType",
      "name" : "github.com/Azure/azure-storage-blob-go/azblob.PublicAccessType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "elem" : 24,
      "name" : "*bool",
      "type" : "Pointer",
      "underlying" : 58
    }, {
      "elem" : 60,
      "name" : "*github.com/Azure/azure-storage-blob-go/azblob.containerProperties",
      "type" : "Pointer",
      "underlying" : 59
    }, {
      "local-name" : "containerProperties",
      "name" : "github.com/Azure/azure-storage-blob-go/azblob.containerProperties",
      "package" : 0,
      "type" : "Named",
      "underlying" : 61
    }, {
      "fields" : [ {
        "name" : "LastModified",
        "type" : 62
      }, {
        "name" : "Etag",
        "type" : 53
      }, {
        "name" : "LeaseStatus",
        "type" : 54
      }, {
        "name" : "LeaseState",
        "type" : 55
      }, {
        "name" : "LeaseDuration",
        "type" : 56
      }, {
        "name" : "PublicAccess",
        "type" : 57
      }, {
        "name" : "HasImmutabilityPolicy",
        "type" : 58
      }, {
        "name" : "HasLegalHold",
        "type" : 58
      } ],
      "name" : "struct{LastModified github.com/Azure/azure-storage-blob-go/azblob.timeRFC1123 \"xml:\\\"Last-Modified\\\"\"; Etag github.com/Azure/azure-storage-blob-go/azblob.ETag \"xml:\\\"Etag\\\"\"; LeaseStatus github.com/Azure/azure-storage-blob-go/azblob.LeaseStatusType \"xml:\\\"LeaseStatus\\\"\"; LeaseState github.com/Azure/azure-storage-blob-go/azblob.LeaseStateType \"xml:\\\"LeaseState\\\"\"; LeaseDuration github.com/Azure/azure-storage-blob-go/azblob.LeaseDurationType \"xml:\\\"LeaseDuration\\\"\"; PublicAccess github.com/Azure/azure-storage-blob-go/azblob.PublicAccessType \"xml:\\\"PublicAccess\\\"\"; HasImmutabilityPolicy *bool \"xml:\\\"HasImmutabilityPolicy\\\"\"; HasLegalHold *bool \"xml:\\\"HasLegalHold\\\"\"}",
      "type" : "Struct",
      "underlying" : 61
    }, {
      "local-name" : "timeRFC1123",
      "name" : "github.com/Azure/azure-storage-blob-go/azblob.timeRFC1123",
      "package" : 0,
      "type" : "Named",
      "underlying" : 63
    }, {
      "fields" : [ {
        "name" : "Time",
        "type" : 38
      } ],
      "name" : "struct{time.Time}",
      "type" : "Struct",
      "underlying" : 63
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 5,
      "type" : "Basic",
      "underlying" : 64
    }, {
      "elem" : 36,
      "name" : "*github.com/Azure/azure-storage-blob-go/azblob.ContainerProperties",
      "type" : "Pointer",
      "underlying" : 65
    }, {
      "name" : "func(v interface{}, start encoding/xml.StartElement) error",
      "params" : 67,
      "recv" : -1,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 66,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 68
      }, {
        "name" : "start",
        "type" : 30
      } ],
      "name" : "(v interface{}, start encoding/xml.StartElement)",
      "type" : "Tuple",
      "underlying" : 67
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 68
    }, {
      "name" : "(*encoding/xml.Encoder) func(v interface{}, start encoding/xml.StartElement) error",
      "params" : 67,
      "recv" : 7,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 69,
      "variadic" : false
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "cp",
      "package" : 0,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "e",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "start",
      "package" : 0,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "cp2",
      "package" : 0,
      "type" : 59,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "enc",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}