{
  "usage" : {
    "file" : "zz_generated.conversion.go",
    "label1" : "cast-struct",
    "label2" : "efficiency",
    "line" : "7492",
    "module" : "k8s.io/kubernetes",
    "pkg" : "k8s.io/kubernetes/pkg/apis/core/v1",
    "project" : "rook/rook",
    "snippet" : "out.TopologyKeys = *(*[]string)(unsafe.Pointer(&in.TopologyKeys))",
    "version" : "v1.17.2"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 3 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 7478,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Ports",
            "variable" : 9
          },
          "go-type" : 34,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 34,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 35,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "core"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 35,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "ServicePort"
                  }
                },
                "go-type" : 34,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 75,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 76,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 6,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 76,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 76,
              "kind" : "expression",
              "target" : {
                "go-type" : 77,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Ports",
                    "variable" : 10
                  },
                  "go-type" : 5,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 7478,
      "code" : "out.Ports = *(*[]core.ServicePort)(unsafe.Pointer(&in.Ports))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 4 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 7479,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Selector",
            "variable" : 11
          },
          "go-type" : 15,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 15,
                "key" : {
                  "go-type" : 8,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 8,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "kind" : "type",
                "type" : "map",
                "value" : {
                  "go-type" : 8,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 8,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                }
              },
              "go-type" : 78,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 78,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 76,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 6,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 76,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 76,
              "kind" : "expression",
              "target" : {
                "go-type" : 78,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Selector",
                    "variable" : 12
                  },
                  "go-type" : 15,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 7479,
      "code" : "out.Selector = *(*map[string]string)(unsafe.Pointer(&in.Selector))",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 5 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 7480,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ClusterIP",
            "variable" : 13
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ClusterIP",
            "variable" : 14
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 7480,
      "code" : "out.ClusterIP = in.ClusterIP",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 6 ],
      "in-vars" : [ 5, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 7481,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Type",
            "variable" : 15
          },
          "go-type" : 33,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 33,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "core"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 33,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "ServiceType"
            }
          },
          "go-type" : 33,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Type",
              "variable" : 16
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 7481,
      "code" : "out.Type = core.ServiceType(in.Type)",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 7 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 7482,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ExternalIPs",
            "variable" : 17
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 8,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 8,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "go-type" : 17,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 79,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 79,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 76,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 6,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 76,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 76,
              "kind" : "expression",
              "target" : {
                "go-type" : 79,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ExternalIPs",
                    "variable" : 18
                  },
                  "go-type" : 17,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 7482,
      "code" : "out.ExternalIPs = *(*[]string)(unsafe.Pointer(&in.ExternalIPs))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 8 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 7483,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "SessionAffinity",
            "variable" : 19
          },
          "go-type" : 38,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 38,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "core"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 38,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "ServiceAffinity"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "SessionAffinity",
              "variable" : 20
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 7483,
      "code" : "out.SessionAffinity = core.ServiceAffinity(in.SessionAffinity)",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 9 ],
      "in-vars" : [ 5, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 7484,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "LoadBalancerIP",
            "variable" : 21
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "LoadBalancerIP",
            "variable" : 22
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 7484,
      "code" : "out.LoadBalancerIP = in.LoadBalancerIP",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 10 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 7485,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "LoadBalancerSourceRanges",
            "variable" : 23
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 8,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 8,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "go-type" : 17,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 79,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 79,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 76,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 6,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 76,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 76,
              "kind" : "expression",
              "target" : {
                "go-type" : 79,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "LoadBalancerSourceRanges",
                    "variable" : 24
                  },
                  "go-type" : 17,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 7485,
      "code" : "out.LoadBalancerSourceRanges = *(*[]string)(unsafe.Pointer(&in.LoadBalancerSourceRanges))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 11 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 7486,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ExternalName",
            "variable" : 25
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ExternalName",
            "variable" : 26
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 7486,
      "code" : "out.ExternalName = in.ExternalName",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 12 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 7487,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ExternalTrafficPolicy",
            "variable" : 27
          },
          "go-type" : 45,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 45,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "core"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 45,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "ServiceExternalTrafficPolicyType"
            }
          },
          "go-type" : 45,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ExternalTrafficPolicy",
              "variable" : 28
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 7487,
      "code" : "out.ExternalTrafficPolicy = core.ServiceExternalTrafficPolicyType(in.ExternalTrafficPolicy)",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 13 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 7488,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "HealthCheckNodePort",
            "variable" : 29
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "HealthCheckNodePort",
            "variable" : 30
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 7488,
      "code" : "out.HealthCheckNodePort = in.HealthCheckNodePort",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 14 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 7489,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "PublishNotReadyAddresses",
            "variable" : 31
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "PublishNotReadyAddresses",
            "variable" : 32
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 7489,
      "code" : "out.PublishNotReadyAddresses = in.PublishNotReadyAddresses",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 15 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 7490,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "SessionAffinityConfig",
            "variable" : 33
          },
          "go-type" : 39,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 40,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "core"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 40,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SessionAffinityConfig"
              }
            },
            "go-type" : 39,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 39,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 76,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 6,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 76,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 76,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "SessionAffinityConfig",
                "variable" : 34
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 7490,
      "code" : "out.SessionAffinityConfig = (*core.SessionAffinityConfig)(unsafe.Pointer(in.SessionAffinityConfig))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 16 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 7491,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "IPFamily",
            "variable" : 35
          },
          "go-type" : 46,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 47,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "core"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 47,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "IPFamily"
              }
            },
            "go-type" : 46,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 46,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 76,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 6,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 76,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 76,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "IPFamily",
                "variable" : 36
              },
              "go-type" : 28,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 7491,
      "code" : "out.IPFamily = (*core.IPFamily)(unsafe.Pointer(in.IPFamily))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 17 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 7492,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "TopologyKeys",
            "variable" : 37
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 8,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 8,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "go-type" : 17,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 79,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 79,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 76,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 6,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 76,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 76,
              "kind" : "expression",
              "target" : {
                "go-type" : 79,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "TopologyKeys",
                    "variable" : 38
                  },
                  "go-type" : 17,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 7492,
      "code" : "out.TopologyKeys = *(*[]string)(unsafe.Pointer(&in.TopologyKeys))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 7493,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 80,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 7493,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func autoConvert_v1_ServiceSpec_To_core_ServiceSpec(in *v1.ServiceSpec, out *core.ServiceSpec, s conversion.Scope) error {\n\tout.Ports = *(*[]core.ServicePort)(unsafe.Pointer(&in.Ports))\n\tout.Selector = *(*map[string]string)(unsafe.Pointer(&in.Selector))\n\tout.ClusterIP = in.ClusterIP\n\tout.Type = core.ServiceType(in.Type)\n\tout.ExternalIPs = *(*[]string)(unsafe.Pointer(&in.ExternalIPs))\n\tout.SessionAffinity = core.ServiceAffinity(in.SessionAffinity)\n\tout.LoadBalancerIP = in.LoadBalancerIP\n\tout.LoadBalancerSourceRanges = *(*[]string)(unsafe.Pointer(&in.LoadBalancerSourceRanges))\n\tout.ExternalName = in.ExternalName\n\tout.ExternalTrafficPolicy = core.ServiceExternalTrafficPolicyType(in.ExternalTrafficPolicy)\n\tout.HealthCheckNodePort = in.HealthCheckNodePort\n\tout.PublishNotReadyAddresses = in.PublishNotReadyAddresses\n\tout.SessionAffinityConfig = (*core.SessionAffinityConfig)(unsafe.Pointer(in.SessionAffinityConfig))\n\tout.IPFamily = (*core.IPFamily)(unsafe.Pointer(in.IPFamily))\n\tout.TopologyKeys = *(*[]string)(unsafe.Pointer(&in.TopologyKeys))\n\treturn nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "autoConvert_v1_ServiceSpec_To_core_ServiceSpec",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ],
    "line-end" : 7494,
    "line-start" : 7477,
    "names" : [ "autoConvert_v1_ServiceSpec_To_core_ServiceSpec" ],
    "package" : 0,
    "packages" : [ {
      "name" : "v1",
      "path" : "k8s.io/kubernetes/pkg/apis/core/v1"
    }, {
      "name" : "v1",
      "path" : "k8s.io/api/core/v1"
    }, {
      "name" : "intstr",
      "path" : "k8s.io/apimachinery/pkg/util/intstr"
    }, {
      "name" : "core",
      "path" : "k8s.io/kubernetes/pkg/apis/core"
    }, {
      "name" : "conversion",
      "path" : "k8s.io/apimachinery/pkg/conversion"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 5, 6, 7 ],
    "receivers" : [ ],
    "results" : [ 8 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(in *k8s.io/api/core/v1.ServiceSpec, out *k8s.io/kubernetes/pkg/apis/core.ServiceSpec, s k8s.io/apimachinery/pkg/conversion.Scope) error",
      "params" : 1,
      "recv" : -1,
      "results" : 55,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 2
      }, {
        "name" : "out",
        "type" : 30
      }, {
        "name" : "s",
        "type" : 48
      } ],
      "name" : "(in *k8s.io/api/core/v1.ServiceSpec, out *k8s.io/kubernetes/pkg/apis/core.ServiceSpec, s k8s.io/apimachinery/pkg/conversion.Scope)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*k8s.io/api/core/v1.ServiceSpec",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "ServiceSpec",
      "name" : "k8s.io/api/core/v1.ServiceSpec",
      "package" : 1,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "Ports",
        "type" : 5
      }, {
        "name" : "Selector",
        "type" : 15
      }, {
        "name" : "ClusterIP",
        "type" : 8
      }, {
        "name" : "Type",
        "type" : 16
      }, {
        "name" : "ExternalIPs",
        "type" : 17
      }, {
        "name" : "SessionAffinity",
        "type" : 18
      }, {
        "name" : "LoadBalancerIP",
        "type" : 8
      }, {
        "name" : "LoadBalancerSourceRanges",
        "type" : 17
      }, {
        "name" : "ExternalName",
        "type" : 8
      }, {
        "name" : "ExternalTrafficPolicy",
        "type" : 19
      }, {
        "name" : "HealthCheckNodePort",
        "type" : 10
      }, {
        "name" : "PublishNotReadyAddresses",
        "type" : 20
      }, {
        "name" : "SessionAffinityConfig",
        "type" : 21
      }, {
        "name" : "IPFamily",
        "type" : 28
      }, {
        "name" : "TopologyKeys",
        "type" : 17
      } ],
      "name" : "struct{Ports []k8s.io/api/core/v1.ServicePort \"json:\\\"ports,omitempty\\\" patchStrategy:\\\"merge\\\" patchMergeKey:\\\"port\\\" protobuf:\\\"bytes,1,rep,name=ports\\\"\"; Selector map[string]string \"json:\\\"selector,omitempty\\\" protobuf:\\\"bytes,2,rep,name=selector\\\"\"; ClusterIP string \"json:\\\"clusterIP,omitempty\\\" protobuf:\\\"bytes,3,opt,name=clusterIP\\\"\"; Type k8s.io/api/core/v1.ServiceType \"json:\\\"type,omitempty\\\" protobuf:\\\"bytes,4,opt,name=type,casttype=ServiceType\\\"\"; ExternalIPs []string \"json:\\\"externalIPs,omitempty\\\" protobuf:\\\"bytes,5,rep,name=externalIPs\\\"\"; SessionAffinity k8s.io/api/core/v1.ServiceAffinity \"json:\\\"sessionAffinity,omitempty\\\" protobuf:\\\"bytes,7,opt,name=sessionAffinity,casttype=ServiceAffinity\\\"\"; LoadBalancerIP string \"json:\\\"loadBalancerIP,omitempty\\\" protobuf:\\\"bytes,8,opt,name=loadBalancerIP\\\"\"; LoadBalancerSourceRanges []string \"json:\\\"loadBalancerSourceRanges,omitempty\\\" protobuf:\\\"bytes,9,opt,name=loadBalancerSourceRanges\\\"\"; ExternalName string \"json:\\\"externalName,omitempty\\\" protobuf:\\\"bytes,10,opt,name=externalName\\\"\"; ExternalTrafficPolicy k8s.io/api/core/v1.ServiceExternalTrafficPolicyType \"json:\\\"externalTrafficPolicy,omitempty\\\" protobuf:\\\"bytes,11,opt,name=externalTrafficPolicy\\\"\"; HealthCheckNodePort int32 \"json:\\\"healthCheckNodePort,omitempty\\\" protobuf:\\\"bytes,12,opt,name=healthCheckNodePort\\\"\"; PublishNotReadyAddresses bool \"json:\\\"publishNotReadyAddresses,omitempty\\\" protobuf:\\\"varint,13,opt,name=publishNotReadyAddresses\\\"\"; SessionAffinityConfig *k8s.io/api/core/v1.SessionAffinityConfig \"json:\\\"sessionAffinityConfig,omitempty\\\" protobuf:\\\"bytes,14,opt,name=sessionAffinityConfig\\\"\"; IPFamily *k8s.io/api/core/v1.IPFamily \"json:\\\"ipFamily,omitempty\\\" protobuf:\\\"bytes,15,opt,name=ipFamily,Configcasttype=IPFamily\\\"\"; TopologyKeys []string \"json:\\\"topologyKeys,omitempty\\\" protobuf:\\\"bytes,16,opt,name=topologyKeys\\\"\"}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "[]k8s.io/api/core/v1.ServicePort",
      "type" : "Slice",
      "underlying" : 5
    }, {
      "local-name" : "ServicePort",
      "name" : "k8s.io/api/core/v1.ServicePort",
      "package" : 1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 8
      }, {
        "name" : "Protocol",
        "type" : 9
      }, {
        "name" : "Port",
        "type" : 10
      }, {
        "name" : "TargetPort",
        "type" : 11
      }, {
        "name" : "NodePort",
        "type" : 10
      } ],
      "name" : "struct{Name string \"json:\\\"name,omitempty\\\" protobuf:\\\"bytes,1,opt,name=name\\\"\"; Protocol k8s.io/api/core/v1.Protocol \"json:\\\"protocol,omitempty\\\" protobuf:\\\"bytes,2,opt,name=protocol,casttype=Protocol\\\"\"; Port int32 \"json:\\\"port\\\" protobuf:\\\"varint,3,opt,name=port\\\"\"; TargetPort k8s.io/apimachinery/pkg/util/intstr.IntOrString \"json:\\\"targetPort,omitempty\\\" protobuf:\\\"bytes,4,opt,name=targetPort\\\"\"; NodePort int32 \"json:\\\"nodePort,omitempty\\\" protobuf:\\\"varint,5,opt,name=nodePort\\\"\"}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "Protocol",
      "name" : "k8s.io/api/core/v1.Protocol",
      "package" : 1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "local-name" : "IntOrString",
      "name" : "k8s.io/apimachinery/pkg/util/intstr.IntOrString",
      "package" : 2,
      "type" : "Named",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "Type",
        "type" : 13
      }, {
        "name" : "IntVal",
        "type" : 10
      }, {
        "name" : "StrVal",
        "type" : 8
      } ],
      "name" : "struct{Type k8s.io/apimachinery/pkg/util/intstr.Type \"protobuf:\\\"varint,1,opt,name=type,casttype=Type\\\"\"; IntVal int32 \"protobuf:\\\"varint,2,opt,name=intVal\\\"\"; StrVal string \"protobuf:\\\"bytes,3,opt,name=strVal\\\"\"}",
      "type" : "Struct",
      "underlying" : 12
    }, {
      "local-name" : "Type",
      "name" : "k8s.io/apimachinery/pkg/util/intstr.Type",
      "package" : 2,
      "type" : "Named",
      "underlying" : 14
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "elem" : 8,
      "key" : 8,
      "name" : "map[string]string",
      "type" : "Map",
      "underlying" : 15
    }, {
      "local-name" : "ServiceType",
      "name" : "k8s.io/api/core/v1.ServiceType",
      "package" : 1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 8,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 17
    }, {
      "local-name" : "ServiceAffinity",
      "name" : "k8s.io/api/core/v1.ServiceAffinity",
      "package" : 1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "local-name" : "ServiceExternalTrafficPolicyType",
      "name" : "k8s.io/api/core/v1.ServiceExternalTrafficPolicyType",
      "package" : 1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "elem" : 22,
      "name" : "*k8s.io/api/core/v1.SessionAffinityConfig",
      "type" : "Pointer",
      "underlying" : 21
    }, {
      "local-name" : "SessionAffinityConfig",
      "name" : "k8s.io/api/core/v1.SessionAffinityConfig",
      "package" : 1,
      "type" : "Named",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "ClientIP",
        "type" : 24
      } ],
      "name" : "struct{ClientIP *k8s.io/api/core/v1.ClientIPConfig \"json:\\\"clientIP,omitempty\\\" protobuf:\\\"bytes,1,opt,name=clientIP\\\"\"}",
      "type" : "Struct",
      "underlying" : 23
    }, {
      "elem" : 25,
      "name" : "*k8s.io/api/core/v1.ClientIPConfig",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "local-name" : "ClientIPConfig",
      "name" : "k8s.io/api/core/v1.ClientIPConfig",
      "package" : 1,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "TimeoutSeconds",
        "type" : 27
      } ],
      "name" : "struct{TimeoutSeconds *int32 \"json:\\\"timeoutSeconds,omitempty\\\" protobuf:\\\"varint,1,opt,name=timeoutSeconds\\\"\"}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "elem" : 10,
      "name" : "*int32",
      "type" : "Pointer",
      "underlying" : 27
    }, {
      "elem" : 29,
      "name" : "*k8s.io/api/core/v1.IPFamily",
      "type" : "Pointer",
      "underlying" : 28
    }, {
      "local-name" : "IPFamily",
      "name" : "k8s.io/api/core/v1.IPFamily",
      "package" : 1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 31,
      "name" : "*k8s.io/kubernetes/pkg/apis/core.ServiceSpec",
      "type" : "Pointer",
      "underlying" : 30
    }, {
      "local-name" : "ServiceSpec",
      "name" : "k8s.io/kubernetes/pkg/apis/core.ServiceSpec",
      "package" : 3,
      "type" : "Named",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "Type",
        "type" : 33
      }, {
        "name" : "Ports",
        "type" : 34
      }, {
        "name" : "Selector",
        "type" : 15
      }, {
        "name" : "ClusterIP",
        "type" : 8
      }, {
        "name" : "ExternalName",
        "type" : 8
      }, {
        "name" : "ExternalIPs",
        "type" : 17
      }, {
        "name" : "LoadBalancerIP",
        "type" : 8
      }, {
        "name" : "SessionAffinity",
        "type" : 38
      }, {
        "name" : "SessionAffinityConfig",
        "type" : 39
      }, {
        "name" : "LoadBalancerSourceRanges",
        "type" : 17
      }, {
        "name" : "ExternalTrafficPolicy",
        "type" : 45
      }, {
        "name" : "HealthCheckNodePort",
        "type" : 10
      }, {
        "name" : "PublishNotReadyAddresses",
        "type" : 20
      }, {
        "name" : "IPFamily",
        "type" : 46
      }, {
        "name" : "TopologyKeys",
        "type" : 17
      } ],
      "name" : "struct{Type k8s.io/kubernetes/pkg/apis/core.ServiceType; Ports []k8s.io/kubernetes/pkg/apis/core.ServicePort; Selector map[string]string; ClusterIP string; ExternalName string; ExternalIPs []string; LoadBalancerIP string; SessionAffinity k8s.io/kubernetes/pkg/apis/core.ServiceAffinity; SessionAffinityConfig *k8s.io/kubernetes/pkg/apis/core.SessionAffinityConfig; LoadBalancerSourceRanges []string; ExternalTrafficPolicy k8s.io/kubernetes/pkg/apis/core.ServiceExternalTrafficPolicyType; HealthCheckNodePort int32; PublishNotReadyAddresses bool; IPFamily *k8s.io/kubernetes/pkg/apis/core.IPFamily; TopologyKeys []string}",
      "type" : "Struct",
      "underlying" : 32
    }, {
      "local-name" : "ServiceType",
      "name" : "k8s.io/kubernetes/pkg/apis/core.ServiceType",
      "package" : 3,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 35,
      "name" : "[]k8s.io/kubernetes/pkg/apis/core.ServicePort",
      "type" : "Slice",
      "underlying" : 34
    }, {
      "local-name" : "ServicePort",
      "name" : "k8s.io/kubernetes/pkg/apis/core.ServicePort",
      "package" : 3,
      "type" : "Named",
      "underlying" : 36
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 8
      }, {
        "name" : "Protocol",
        "type" : 37
      }, {
        "name" : "Port",
        "type" : 10
      }, {
        "name" : "TargetPort",
        "type" : 11
      }, {
        "name" : "NodePort",
        "type" : 10
      } ],
      "name" : "struct{Name string; Protocol k8s.io/kubernetes/pkg/apis/core.Protocol; Port int32; TargetPort k8s.io/apimachinery/pkg/util/intstr.IntOrString; NodePort int32}",
      "type" : "Struct",
      "underlying" : 36
    }, {
      "local-name" : "Protocol",
      "name" : "k8s.io/kubernetes/pkg/apis/core.Protocol",
      "package" : 3,
      "type" : "Named",
      "underlying" : 8
    }, {
      "local-name" : "ServiceAffinity",
      "name" : "k8s.io/kubernetes/pkg/apis/core.ServiceAffinity",
      "package" : 3,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 40,
      "name" : "*k8s.io/kubernetes/pkg/apis/core.SessionAffinityConfig",
      "type" : "Pointer",
      "underlying" : 39
    }, {
      "local-name" : "SessionAffinityConfig",
      "name" : "k8s.io/kubernetes/pkg/apis/core.SessionAffinityConfig",
      "package" : 3,
      "type" : "Named",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "ClientIP",
        "type" : 42
      } ],
      "name" : "struct{ClientIP *k8s.io/kubernetes/pkg/apis/core.ClientIPConfig}",
      "type" : "Struct",
      "underlying" : 41
    }, {
      "elem" : 43,
      "name" : "*k8s.io/kubernetes/pkg/apis/core.ClientIPConfig",
      "type" : "Pointer",
      "underlying" : 42
    }, {
      "local-name" : "ClientIPConfig",
      "name" : "k8s.io/kubernetes/pkg/apis/core.ClientIPConfig",
      "package" : 3,
      "type" : "Named",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "TimeoutSeconds",
        "type" : 27
      } ],
      "name" : "struct{TimeoutSeconds *int32}",
      "type" : "Struct",
      "underlying" : 44
    }, {
      "local-name" : "ServiceExternalTrafficPolicyType",
      "name" : "k8s.io/kubernetes/pkg/apis/core.ServiceExternalTrafficPolicyType",
      "package" : 3,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 47,
      "name" : "*k8s.io/kubernetes/pkg/apis/core.IPFamily",
      "type" : "Pointer",
      "underlying" : 46
    }, {
      "local-name" : "IPFamily",
      "name" : "k8s.io/kubernetes/pkg/apis/core.IPFamily",
      "package" : 3,
      "type" : "Named",
      "underlying" : 8
    }, {
      "local-name" : "Scope",
      "name" : "k8s.io/apimachinery/pkg/conversion.Scope",
      "package" : 4,
      "type" : "Named",
      "underlying" : 49
    }, {
      "methods" : [ {
        "name" : "Convert",
        "type" : 50
      }, {
        "name" : "DefaultConvert",
        "type" : 50
      }, {
        "name" : "DestTag",
        "type" : 61
      }, {
        "name" : "Flags",
        "type" : 64
      }, {
        "name" : "Meta",
        "type" : 66
      }, {
        "name" : "SrcTag",
        "type" : 61
      } ],
      "name" : "interface{Convert(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags) error; DefaultConvert(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags) error; DestTag() reflect.StructTag; Flags() k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags; Meta() *k8s.io/apimachinery/pkg/conversion.Meta; SrcTag() reflect.StructTag}",
      "type" : "Interface",
      "underlying" : 49
    }, {
      "name" : "func(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags) error",
      "params" : 51,
      "recv" : 1,
      "results" : 55,
      "type" : "Signature",
      "underlying" : 50,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "src",
        "type" : 52
      }, {
        "name" : "dest",
        "type" : 52
      }, {
        "name" : "flags",
        "type" : 53
      } ],
      "name" : "(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags)",
      "type" : "Tuple",
      "underlying" : 51
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 52
    }, {
      "local-name" : "FieldMatchingFlags",
      "name" : "k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags",
      "package" : 4,
      "type" : "Named",
      "underlying" : 54
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 54
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 56
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 55
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 57
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 58
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 57
    }, {
      "name" : "func() string",
      "params" : 59,
      "recv" : 0,
      "results" : 60,
      "type" : "Signature",
      "underlying" : 58,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 59
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 60
    }, {
      "name" : "func() reflect.StructTag",
      "params" : 59,
      "recv" : 2,
      "results" : 62,
      "type" : "Signature",
      "underlying" : 61,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 63
      } ],
      "name" : "(reflect.StructTag)",
      "type" : "Tuple",
      "underlying" : 62
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 5,
      "type" : "Named",
      "underlying" : 8
    }, {
      "name" : "func() k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags",
      "params" : 59,
      "recv" : 3,
      "results" : 65,
      "type" : "Signature",
      "underlying" : 64,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 53
      } ],
      "name" : "(k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags)",
      "type" : "Tuple",
      "underlying" : 65
    }, {
      "name" : "func() *k8s.io/apimachinery/pkg/conversion.Meta",
      "params" : 59,
      "recv" : 4,
      "results" : 67,
      "type" : "Signature",
      "underlying" : 66,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 68
      } ],
      "name" : "(*k8s.io/apimachinery/pkg/conversion.Meta)",
      "type" : "Tuple",
      "underlying" : 67
    }, {
      "elem" : 69,
      "name" : "*k8s.io/apimachinery/pkg/conversion.Meta",
      "type" : "Pointer",
      "underlying" : 68
    }, {
      "local-name" : "Meta",
      "name" : "k8s.io/apimachinery/pkg/conversion.Meta",
      "package" : 4,
      "type" : "Named",
      "underlying" : 70
    }, {
      "fields" : [ {
        "name" : "KeyNameMapping",
        "type" : 71
      }, {
        "name" : "Context",
        "type" : 52
      } ],
      "name" : "struct{KeyNameMapping k8s.io/apimachinery/pkg/conversion.FieldMappingFunc; Context interface{}}",
      "type" : "Struct",
      "underlying" : 70
    }, {
      "local-name" : "FieldMappingFunc",
      "name" : "k8s.io/apimachinery/pkg/conversion.FieldMappingFunc",
      "package" : 4,
      "type" : "Named",
      "underlying" : 72
    }, {
      "name" : "func(key string, sourceTag reflect.StructTag, destTag reflect.StructTag) (source string, dest string)",
      "params" : 73,
      "recv" : -1,
      "results" : 74,
      "type" : "Signature",
      "underlying" : 72,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 8
      }, {
        "name" : "sourceTag",
        "type" : 63
      }, {
        "name" : "destTag",
        "type" : 63
      } ],
      "name" : "(key string, sourceTag reflect.StructTag, destTag reflect.StructTag)",
      "type" : "Tuple",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "source",
        "type" : 8
      }, {
        "name" : "dest",
        "type" : 8
      } ],
      "name" : "(source string, dest string)",
      "type" : "Tuple",
      "underlying" : 74
    }, {
      "elem" : 34,
      "name" : "*[]k8s.io/kubernetes/pkg/apis/core.ServicePort",
      "type" : "Pointer",
      "underlying" : 75
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 6,
      "type" : "Basic",
      "underlying" : 76
    }, {
      "elem" : 5,
      "name" : "*[]k8s.io/api/core/v1.ServicePort",
      "type" : "Pointer",
      "underlying" : 77
    }, {
      "elem" : 15,
      "name" : "*map[string]string",
      "type" : "Pointer",
      "underlying" : 78
    }, {
      "elem" : 17,
      "name" : "*[]string",
      "type" : "Pointer",
      "underlying" : 79
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 80
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 56,
      "exported" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 48,
      "exported" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 48,
      "exported" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 48,
      "exported" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 48,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 30,
      "exported" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 48,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 56,
      "exported" : false
    }, {
      "name" : "Ports",
      "package" : 3,
      "type" : 34,
      "exported" : true
    }, {
      "name" : "Ports",
      "package" : 1,
      "type" : 5,
      "exported" : true
    }, {
      "name" : "Selector",
      "package" : 3,
      "type" : 15,
      "exported" : true
    }, {
      "name" : "Selector",
      "package" : 1,
      "type" : 15,
      "exported" : true
    }, {
      "name" : "ClusterIP",
      "package" : 3,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "ClusterIP",
      "package" : 1,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "Type",
      "package" : 3,
      "type" : 33,
      "exported" : true
    }, {
      "name" : "Type",
      "package" : 1,
      "type" : 16,
      "exported" : true
    }, {
      "name" : "ExternalIPs",
      "package" : 3,
      "type" : 17,
      "exported" : true
    }, {
      "name" : "ExternalIPs",
      "package" : 1,
      "type" : 17,
      "exported" : true
    }, {
      "name" : "SessionAffinity",
      "package" : 3,
      "type" : 38,
      "exported" : true
    }, {
      "name" : "SessionAffinity",
      "package" : 1,
      "type" : 18,
      "exported" : true
    }, {
      "name" : "LoadBalancerIP",
      "package" : 3,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "LoadBalancerIP",
      "package" : 1,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "LoadBalancerSourceRanges",
      "package" : 3,
      "type" : 17,
      "exported" : true
    }, {
      "name" : "LoadBalancerSourceRanges",
      "package" : 1,
      "type" : 17,
      "exported" : true
    }, {
      "name" : "ExternalName",
      "package" : 3,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "ExternalName",
      "package" : 1,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "ExternalTrafficPolicy",
      "package" : 3,
      "type" : 45,
      "exported" : true
    }, {
      "name" : "ExternalTrafficPolicy",
      "package" : 1,
      "type" : 19,
      "exported" : true
    }, {
      "name" : "HealthCheckNodePort",
      "package" : 3,
      "type" : 10,
      "exported" : true
    }, {
      "name" : "HealthCheckNodePort",
      "package" : 1,
      "type" : 10,
      "exported" : true
    }, {
      "name" : "PublishNotReadyAddresses",
      "package" : 3,
      "type" : 20,
      "exported" : true
    }, {
      "name" : "PublishNotReadyAddresses",
      "package" : 1,
      "type" : 20,
      "exported" : true
    }, {
      "name" : "SessionAffinityConfig",
      "package" : 3,
      "type" : 39,
      "exported" : true
    }, {
      "name" : "SessionAffinityConfig",
      "package" : 1,
      "type" : 21,
      "exported" : true
    }, {
      "name" : "IPFamily",
      "package" : 3,
      "type" : 46,
      "exported" : true
    }, {
      "name" : "IPFamily",
      "package" : 1,
      "type" : 28,
      "exported" : true
    }, {
      "name" : "TopologyKeys",
      "package" : 3,
      "type" : 17,
      "exported" : true
    }, {
      "name" : "TopologyKeys",
      "package" : 1,
      "type" : 17,
      "exported" : true
    } ]
  },
  "go-version" : "1.14.3"
}