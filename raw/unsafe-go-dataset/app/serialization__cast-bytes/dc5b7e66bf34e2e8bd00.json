{
  "usage" : {
    "file" : "default_enc.go",
    "label1" : "cast-bytes",
    "label2" : "serialization",
    "line" : "30",
    "module" : "github.com/nats-io/nats",
    "pkg" : "github.com/nats-io/nats/encoders/builtin",
    "project" : "weaveworks/scope",
    "snippet" : "bytes := *(*[]byte)(unsafe.Pointer(&arg))",
    "version" : "v1.2.1-0.20160607194537-ce9cdc9addff"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 3, 6, 7, 8 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 3, 6 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 3, 6, 7, 8 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 9, 15, 8, 11, 12, 3 ],
      "decl-vars" : [ 9, 11, 12, 16, 15 ],
      "line-start" : 28,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 46,
      "code" : "switch arg := v.(type) {\ncase string:\n\tbytes := *(*[]byte)(unsafe.Pointer(&arg))\n\treturn bytes, nil\ncase []byte:\n\treturn arg, nil\ncase bool:\n\tif arg {\n\t\treturn trueB, nil\n\t} else {\n\t\treturn falseB, nil\n\t}\ncase nil:\n\treturn nilB, nil\ndefault:\n\tvar buf bytes.Buffer\n\tfmt.Fprintf(&buf, \"%+v\", arg)\n\treturn buf.Bytes(), nil\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 7, 9, 13, 15 ],
      "in-vars" : [ 9, 15, 8, 11, 12, 3, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 8, 11, 12, 6, 7, 9, 15 ],
      "decl-vars" : [ ],
      "line-start" : 28,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "arg"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 3
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 28,
      "code" : "arg := v.(type)",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 9 ],
      "exit" : false,
      "out-vars" : [ 9 ],
      "decl-vars" : [ ],
      "line-start" : 29,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 2,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "string"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 31,
      "code" : "case string:\n\tbytes := *(*[]byte)(unsafe.Pointer(&arg))\n\treturn bytes, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 9 ],
      "exit" : false,
      "out-vars" : [ 10 ],
      "decl-vars" : [ 10 ],
      "line-start" : 30,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "bytes"
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 6,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 6,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "byte"
                  }
                },
                "go-type" : 5,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 15,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 16,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 16,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 16,
              "kind" : "expression",
              "target" : {
                "go-type" : 17,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "arg",
                    "variable" : 9
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 30,
      "code" : "bytes := *(*[]byte)(unsafe.Pointer(&arg))",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 10 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 31,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "bytes",
            "variable" : 10
          }
        }, {
          "go-type" : 18,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 31,
      "code" : "return bytes, nil",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 11 ],
      "exit" : false,
      "out-vars" : [ 11 ],
      "decl-vars" : [ ],
      "line-start" : 32,
      "ast" : {
        "expressions" : [ {
          "element" : {
            "go-type" : 6,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 6,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "byte"
            }
          },
          "go-type" : 5,
          "kind" : "type",
          "type" : "slice"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 33,
      "code" : "case []byte:\n\treturn arg, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 11 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 33,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "arg",
            "variable" : 11
          }
        }, {
          "go-type" : 18,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 33,
      "code" : "return arg, nil",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 12, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 12, 6 ],
      "decl-vars" : [ ],
      "line-start" : 34,
      "ast" : {
        "expressions" : [ {
          "go-type" : 19,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 19,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "bool"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 39,
      "code" : "case bool:\n\tif arg {\n\t\treturn trueB, nil\n\t} else {\n\t\treturn falseB, nil\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 12, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 35,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "arg",
            "variable" : 12
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 39,
      "code" : "if arg {\n\treturn trueB, nil\n} else {\n\treturn falseB, nil\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 36,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "trueB",
            "variable" : 7
          }
        }, {
          "go-type" : 18,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 36,
      "code" : "return trueB, nil",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 38,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "falseB",
            "variable" : 6
          }
        }, {
          "go-type" : 18,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 38,
      "code" : "return falseB, nil",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 8 ],
      "exit" : false,
      "out-vars" : [ 8 ],
      "decl-vars" : [ ],
      "line-start" : 40,
      "ast" : {
        "expressions" : [ {
          "go-type" : 18,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 41,
      "code" : "case nil:\n\treturn nilB, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 8 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 41,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nilB",
            "variable" : 8
          }
        }, {
          "go-type" : 18,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 41,
      "code" : "return nilB, nil",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 15 ],
      "exit" : false,
      "out-vars" : [ 15 ],
      "decl-vars" : [ ],
      "line-start" : 42,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 45,
      "code" : "default:\n\tvar buf bytes.Buffer\n\tfmt.Fprintf(&buf, \"%+v\", arg)\n\treturn buf.Bytes(), nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 15 ],
      "exit" : false,
      "out-vars" : [ 14, 15 ],
      "decl-vars" : [ 14 ],
      "line-start" : 43,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 20,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "bytes"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 20,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Buffer"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "buf"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 43,
      "code" : "var buf bytes.Buffer",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 14, 15 ],
      "exit" : false,
      "out-vars" : [ 14 ],
      "decl-vars" : [ ],
      "line-start" : 44,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 33,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 20,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buf",
                "variable" : 14
              }
            },
            "type" : "unary"
          }, {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "%+v"
            }
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "arg",
              "variable" : 15
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 26,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "fmt"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Fprintf"
            }
          },
          "go-type" : 25,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 44,
      "code" : "fmt.Fprintf(&buf, \"%+v\", arg)",
      "entry" : false,
      "use-vars" : [ 14, 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 14 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 45,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Bytes"
            },
            "go-type" : 34,
            "kind" : "expression",
            "target" : {
              "go-type" : 20,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buf",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }, {
          "go-type" : 18,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 45,
      "code" : "return buf.Bytes(), nil",
      "entry" : false,
      "use-vars" : [ 14 ]
    } ],
    "code" : "// Encode\nfunc (je *DefaultEncoder) Encode(subject string, v interface{}) ([]byte, error) {\n\tswitch arg := v.(type) {\n\tcase string:\n\t\tbytes := *(*[]byte)(unsafe.Pointer(&arg))\n\t\treturn bytes, nil\n\tcase []byte:\n\t\treturn arg, nil\n\tcase bool:\n\t\tif arg {\n\t\t\treturn trueB, nil\n\t\t} else {\n\t\t\treturn falseB, nil\n\t\t}\n\tcase nil:\n\t\treturn nilB, nil\n\tdefault:\n\t\tvar buf bytes.Buffer\n\t\tfmt.Fprintf(&buf, \"%+v\", arg)\n\t\treturn buf.Bytes(), nil\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Encode",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "Fprintf",
      "package" : 4,
      "type" : 26,
      "exported" : true
    }, {
      "name" : "Bytes",
      "package" : 2,
      "type" : 34,
      "exported" : true
    } ],
    "line-end" : 47,
    "line-start" : 27,
    "names" : [ "Encode" ],
    "package" : 0,
    "packages" : [ {
      "name" : "builtin",
      "path" : "github.com/nats-io/nats/encoders/builtin"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "bytes",
      "path" : "bytes"
    }, {
      "name" : "io",
      "path" : "io"
    }, {
      "name" : "fmt",
      "path" : "fmt"
    } ],
    "params" : [ 2, 3 ],
    "receivers" : [ 1 ],
    "results" : [ 4, 5 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(subject string, v interface{}) ([]byte, error)",
      "params" : 1,
      "recv" : 1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "subject",
        "type" : 2
      }, {
        "name" : "v",
        "type" : 3
      } ],
      "name" : "(subject string, v interface{})",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 7
      } ],
      "name" : "([]byte, error)",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 5
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 9
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 8
    }, {
      "name" : "func() string",
      "params" : 10,
      "recv" : 0,
      "results" : 11,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "*github.com/nats-io/nats/encoders/builtin.DefaultEncoder",
      "type" : "Pointer",
      "underlying" : 12
    }, {
      "local-name" : "DefaultEncoder",
      "name" : "github.com/nats-io/nats/encoders/builtin.DefaultEncoder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "elem" : 5,
      "name" : "*[]byte",
      "type" : "Pointer",
      "underlying" : 15
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 16
    }, {
      "elem" : 2,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 17
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "Buffer",
      "name" : "bytes.Buffer",
      "package" : 2,
      "type" : "Named",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "buf",
        "type" : 5
      }, {
        "name" : "off",
        "type" : 22
      }, {
        "name" : "lastRead",
        "type" : 23
      } ],
      "name" : "struct{buf []byte; off int; lastRead bytes.readOp}",
      "type" : "Struct",
      "underlying" : 21
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "local-name" : "readOp",
      "name" : "bytes.readOp",
      "package" : 2,
      "type" : "Named",
      "underlying" : 24
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 22
      }, {
        "name" : "err",
        "type" : 7
      } ],
      "name" : "(n int, err error)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "name" : "func(w io.Writer, format string, a ...interface{}) (n int, err error)",
      "params" : 27,
      "recv" : -1,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 26,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "w",
        "type" : 28
      }, {
        "name" : "format",
        "type" : 2
      }, {
        "name" : "a",
        "type" : 32
      } ],
      "name" : "(w io.Writer, format string, a []interface{})",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "local-name" : "Writer",
      "name" : "io.Writer",
      "package" : 3,
      "type" : "Named",
      "underlying" : 29
    }, {
      "methods" : [ {
        "name" : "Write",
        "type" : 30
      } ],
      "name" : "interface{Write(p []byte) (n int, err error)}",
      "type" : "Interface",
      "underlying" : 29
    }, {
      "name" : "func(p []byte) (n int, err error)",
      "params" : 31,
      "recv" : 13,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 5
      } ],
      "name" : "(p []byte)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "elem" : 3,
      "name" : "[]interface{}",
      "type" : "Slice",
      "underlying" : 32
    }, {
      "elem" : 20,
      "name" : "*bytes.Buffer",
      "type" : "Pointer",
      "underlying" : 33
    }, {
      "name" : "func() []byte",
      "params" : 10,
      "recv" : -1,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 34,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 35
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "je",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "subject",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "falseB",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "trueB",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "nilB",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "arg",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "bytes",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "arg",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "arg",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 28,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 20,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "arg",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "arg",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}