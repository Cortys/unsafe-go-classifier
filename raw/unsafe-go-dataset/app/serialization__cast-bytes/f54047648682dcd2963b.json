{
  "usage" : {
    "file" : "inotify.go",
    "label1" : "cast-bytes",
    "label2" : "serialization",
    "line" : "244",
    "module" : "gopkg.in/fsnotify.v1",
    "pkg" : "gopkg.in/fsnotify.v1",
    "project" : "kubernetes/kubernetes",
    "snippet" : "raw := (*unix.InotifyEvent)(unsafe.Pointer(&buf[offset]))",
    "version" : "v1.4.7"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ 0 ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 2, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 3, 4, 2 ],
      "decl-vars" : [ 5, 6, 3, 4 ],
      "line-start" : 173,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ "// Buffer for a maximum of 4096 raw events" ],
            "declared-type" : {
              "element" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 2,
              "kind" : "type",
              "length" : {
                "go-type" : 4,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "65536"
                }
              },
              "type" : "array"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "buf"
            } ],
            "type" : "var",
            "values" : [ ]
          }, {
            "comments" : [ "// Number of bytes read with read()" ],
            "declared-type" : {
              "go-type" : 17,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "n"
            } ],
            "type" : "var",
            "values" : [ ]
          }, {
            "comments" : [ "// Syscall errno" ],
            "declared-type" : {
              "go-type" : 10,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 10,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "errno"
            } ],
            "type" : "var",
            "values" : [ ]
          }, {
            "comments" : [ "// For poller.wait" ],
            "declared-type" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "ok"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 178,
      "code" : "var (\n\tbuf   [unix.SizeofInotifyEvent * 4096]byte // Buffer for a maximum of 4096 raw events\n\tn     int                                  // Number of bytes read with read()\n\terrno error                                // Syscall errno\n\tok    bool                                 // For poller.wait\n)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1, 4 ],
      "in-vars" : [ 1, 3, 4, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 3, 4, 2 ],
      "decl-vars" : [ ],
      "line-start" : 186,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 294,
      "code" : "for {\n\n\tif w.isClosed() {\n\t\treturn\n\t}\n\n\tok, errno = w.poller.wait()\n\tif errno != nil {\n\t\tselect {\n\t\tcase w.Errors <- errno:\n\t\tcase <-w.done:\n\t\t\treturn\n\t\t}\n\t\tcontinue\n\t}\n\n\tif !ok {\n\t\tcontinue\n\t}\n\n\tn, errno = unix.Read(w.fd, buf[:])\n\n\tif errno == unix.EINTR {\n\t\tcontinue\n\t}\n\n\tif w.isClosed() {\n\t\treturn\n\t}\n\n\tif n < unix.SizeofInotifyEvent {\n\t\tvar err error\n\t\tif n == 0 {\n\n\t\t\terr = io.EOF\n\t\t} else if n < 0 {\n\n\t\t\terr = errno\n\t\t} else {\n\n\t\t\terr = errors.New(\"notify: short read in readEvents()\")\n\t\t}\n\t\tselect {\n\t\tcase w.Errors <- err:\n\t\tcase <-w.done:\n\t\t\treturn\n\t\t}\n\t\tcontinue\n\t}\n\n\tvar offset uint32\n\n\tfor offset <= uint32(n-unix.SizeofInotifyEvent) {\n\n\t\traw := (*unix.InotifyEvent)(unsafe.Pointer(&buf[offset]))\n\n\t\tmask := uint32(raw.Mask)\n\t\tnameLen := uint32(raw.Len)\n\n\t\tif mask&unix.IN_Q_OVERFLOW != 0 {\n\t\t\tselect {\n\t\t\tcase w.Errors <- ErrEventOverflow:\n\t\t\tcase <-w.done:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tw.mu.Lock()\n\t\tname, ok := w.paths[int(raw.Wd)]\n\n\t\tif ok && mask&unix.IN_DELETE_SELF == unix.IN_DELETE_SELF {\n\t\t\tdelete(w.paths, int(raw.Wd))\n\t\t\tdelete(w.watches, name)\n\t\t}\n\t\tw.mu.Unlock()\n\n\t\tif nameLen > 0 {\n\n\t\t\tbytes := (*[unix.PathMax]byte)(unsafe.Pointer(&buf[offset+unix.SizeofInotifyEvent]))\n\n\t\t\tname += \"/\" + strings.TrimRight(string(bytes[0:nameLen]), \"\\000\")\n\t\t}\n\n\t\tevent := newEvent(name, mask)\n\n\t\tif !event.ignoreLinux(mask) {\n\t\t\tselect {\n\t\t\tcase w.Events <- event:\n\t\t\tcase <-w.done:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\toffset += unix.SizeofInotifyEvent + nameLen\n\t}\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 6 ],
      "in-vars" : [ 2, 0, 1, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 3, 4, 2 ],
      "decl-vars" : [ ],
      "line-start" : 188,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "isClosed"
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 190,
      "code" : "if w.isClosed() {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 189,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 189,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 5, 6 ],
      "successors" : [ 7 ],
      "in-vars" : [ 2, 0, 1, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 0, 1, 3, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 192,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 6
          }
        }, {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "errno",
            "variable" : 5
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "wait"
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "poller",
                "variable" : 7
              },
              "go-type" : 18,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "w",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 5, 6 ],
      "line-end" : 192,
      "code" : "ok, errno = w.poller.wait()",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 15 ],
      "in-vars" : [ 4, 6, 2, 5, 0, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 1, 3, 4, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 193,
      "ast" : {
        "condition" : {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "errno",
              "variable" : 5
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 200,
      "code" : "if errno != nil {\n\tselect {\n\tcase w.Errors <- errno:\n\tcase <-w.done:\n\t\treturn\n\t}\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 11, 14 ],
      "in-vars" : [ 4, 2, 5, 0, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 0, 1, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 194,
      "ast" : {
        "kind" : "statement",
        "type" : "select"
      },
      "assign-vars" : [ ],
      "line-end" : 198,
      "code" : "select {\ncase w.Errors <- errno:\ncase <-w.done:\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 2, 5, 0, 1, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 1, 3, 4, 2 ],
      "decl-vars" : [ ],
      "line-start" : 195,
      "ast" : {
        "body" : [ ],
        "kind" : "statement",
        "statement" : {
          "channel" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Errors",
              "variable" : 8
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "kind" : "statement",
          "type" : "send",
          "value" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "errno",
              "variable" : 5
            }
          }
        },
        "type" : "select-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 195,
      "code" : "case w.Errors <- errno:",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 5, 0, 1, 3, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 3, 4, 2 ],
      "decl-vars" : [ ],
      "line-start" : 195,
      "ast" : {
        "channel" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Errors",
            "variable" : 8
          },
          "go-type" : 9,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "w",
              "variable" : 0
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "send",
        "value" : {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "errno",
            "variable" : 5
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 195,
      "code" : "w.Errors <- errno",
      "entry" : false,
      "use-vars" : [ 0, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 196,
      "ast" : {
        "body" : [ {
          "kind" : "statement",
          "type" : "return",
          "values" : [ ]
        } ],
        "kind" : "statement",
        "statement" : {
          "kind" : "statement",
          "type" : "expression",
          "value" : {
            "go-type" : 28,
            "kind" : "expression",
            "operator" : "<-",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "done",
                "variable" : 9
              },
              "go-type" : 27,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "w",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }
        },
        "type" : "select-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 197,
      "code" : "case <-w.done:\n\treturn",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 196,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "go-type" : 28,
          "kind" : "expression",
          "operator" : "<-",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "done",
              "variable" : 9
            },
            "go-type" : 27,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 196,
      "code" : "<-w.done",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 197,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 197,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 0, 1, 3, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 3, 4, 2 ],
      "decl-vars" : [ ],
      "line-start" : 199,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 199,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16, 17 ],
      "in-vars" : [ 6, 2, 0, 1, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 2, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 202,
      "ast" : {
        "condition" : {
          "go-type" : 5,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 6
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 204,
      "code" : "if !ok {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 3, 4, 2, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 3, 4, 2 ],
      "decl-vars" : [ ],
      "line-start" : 203,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 203,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 5, 3 ],
      "successors" : [ 18 ],
      "in-vars" : [ 2, 0, 1, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 2, 5, 0, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 206,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 3
          }
        }, {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "errno",
            "variable" : 5
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fd",
              "variable" : 10
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 15,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buf",
                "variable" : 4
              }
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 13,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unix"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Read"
            }
          },
          "go-type" : 12,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 5, 3 ],
      "line-end" : 206,
      "code" : "n, errno = unix.Read(w.fd, buf[:])",
      "entry" : false,
      "use-vars" : [ 0, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19, 20 ],
      "in-vars" : [ 3, 4, 2, 5, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 1, 3, 4, 2 ],
      "decl-vars" : [ ],
      "line-start" : 210,
      "ast" : {
        "condition" : {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "errno",
              "variable" : 5
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 16,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 212,
      "code" : "if errno == unix.EINTR {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 0, 1, 3, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 4, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 211,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 211,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21, 22 ],
      "in-vars" : [ 5, 0, 1, 3, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 1, 3, 4, 2 ],
      "decl-vars" : [ ],
      "line-start" : 215,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "isClosed"
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 217,
      "code" : "if w.isClosed() {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 216,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 216,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23, 36 ],
      "in-vars" : [ 4, 2, 5, 0, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 2, 5, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 219,
      "ast" : {
        "condition" : {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 3
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 237,
      "code" : "if n < unix.SizeofInotifyEvent {\n\tvar err error\n\tif n == 0 {\n\n\t\terr = io.EOF\n\t} else if n < 0 {\n\n\t\terr = errno\n\t} else {\n\n\t\terr = errors.New(\"notify: short read in readEvents()\")\n\t}\n\tselect {\n\tcase w.Errors <- err:\n\tcase <-w.done:\n\t\treturn\n\t}\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 2, 5, 0, 1, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 2, 5, 0, 1 ],
      "decl-vars" : [ 11 ],
      "line-start" : 220,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 10,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 10,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "err"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 220,
      "code" : "var err error",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25, 26 ],
      "in-vars" : [ 0, 1, 3, 4, 2, 5 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 3, 4, 2, 5 ],
      "decl-vars" : [ ],
      "line-start" : 221,
      "ast" : {
        "condition" : {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 3
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 230,
      "code" : "if n == 0 {\n\n\terr = io.EOF\n} else if n < 0 {\n\n\terr = errno\n} else {\n\n\terr = errors.New(\"notify: short read in readEvents()\")\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 29 ],
      "in-vars" : [ 2, 0, 1, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 4, 2, 0, 11 ],
      "decl-vars" : [ ],
      "line-start" : 223,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 11
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "qualifier" : {
            "ident-kind" : "PkgName",
            "kind" : "ident",
            "package" : 4,
            "value" : "io"
          },
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "EOF",
            "variable" : 12
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 11 ],
      "line-end" : 223,
      "code" : "err = io.EOF",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27, 28 ],
      "in-vars" : [ 5, 0, 1, 3, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 4, 2, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 224,
      "ast" : {
        "condition" : {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 3
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 230,
      "code" : "if n < 0 {\n\n\terr = errno\n} else {\n\n\terr = errors.New(\"notify: short read in readEvents()\")\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 29 ],
      "in-vars" : [ 5, 0, 1, 3, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 11, 1, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 226,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 11
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "errno",
            "variable" : 5
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 11 ],
      "line-end" : 226,
      "code" : "err = errno",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 29 ],
      "in-vars" : [ 0, 1, 3, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 11, 1, 3, 4, 2 ],
      "decl-vars" : [ ],
      "line-start" : 229,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 11
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 6,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "notify: short read in readEvents()"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 18,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 5,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "New"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 11 ],
      "line-end" : 229,
      "code" : "err = errors.New(\"notify: short read in readEvents()\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30, 32, 35 ],
      "in-vars" : [ 4, 2, 0, 11, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 4, 2, 0, 11 ],
      "decl-vars" : [ ],
      "line-start" : 231,
      "ast" : {
        "kind" : "statement",
        "type" : "select"
      },
      "assign-vars" : [ ],
      "line-end" : 235,
      "code" : "select {\ncase w.Errors <- err:\ncase <-w.done:\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 0, 11, 1, 3, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 4, 2, 0, 11 ],
      "decl-vars" : [ ],
      "line-start" : 232,
      "ast" : {
        "body" : [ ],
        "kind" : "statement",
        "statement" : {
          "channel" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Errors",
              "variable" : 8
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "kind" : "statement",
          "type" : "send",
          "value" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 11
            }
          }
        },
        "type" : "select-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 232,
      "code" : "case w.Errors <- err:",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 1, 3, 4, 2, 0, 11 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 1, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 232,
      "ast" : {
        "channel" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Errors",
            "variable" : 8
          },
          "go-type" : 9,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "w",
              "variable" : 0
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "send",
        "value" : {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 11
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 232,
      "code" : "w.Errors <- err",
      "entry" : false,
      "use-vars" : [ 0, 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 233,
      "ast" : {
        "body" : [ {
          "kind" : "statement",
          "type" : "return",
          "values" : [ ]
        } ],
        "kind" : "statement",
        "statement" : {
          "kind" : "statement",
          "type" : "expression",
          "value" : {
            "go-type" : 28,
            "kind" : "expression",
            "operator" : "<-",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "done",
                "variable" : 9
              },
              "go-type" : 27,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "w",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }
        },
        "type" : "select-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 234,
      "code" : "case <-w.done:\n\treturn",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 233,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "go-type" : 28,
          "kind" : "expression",
          "operator" : "<-",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "done",
              "variable" : 9
            },
            "go-type" : 27,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 233,
      "code" : "<-w.done",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 234,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 234,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 0, 1, 3, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 3, 4, 2 ],
      "decl-vars" : [ ],
      "line-start" : 236,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 236,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 0, 3, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 3, 4, 2 ],
      "decl-vars" : [ 1 ],
      "line-start" : 239,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 8,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 8,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "offset"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 239,
      "code" : "var offset uint32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 38 ],
      "in-vars" : [ 0, 1, 3, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 1, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 242,
      "ast" : {
        "condition" : {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "offset",
              "variable" : 1
            }
          },
          "operator" : "<=",
          "right" : {
            "coerced-to" : {
              "go-type" : 8,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 8,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 17,
              "kind" : "expression",
              "left" : {
                "go-type" : 17,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "n",
                  "variable" : 3
                }
              },
              "operator" : "-",
              "right" : {
                "go-type" : 17,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "16"
                }
              },
              "type" : "binary"
            },
            "type" : "cast"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 293,
      "code" : "for offset <= uint32(n-unix.SizeofInotifyEvent) {\n\n\traw := (*unix.InotifyEvent)(unsafe.Pointer(&buf[offset]))\n\n\tmask := uint32(raw.Mask)\n\tnameLen := uint32(raw.Len)\n\n\tif mask&unix.IN_Q_OVERFLOW != 0 {\n\t\tselect {\n\t\tcase w.Errors <- ErrEventOverflow:\n\t\tcase <-w.done:\n\t\t\treturn\n\t\t}\n\t}\n\n\tw.mu.Lock()\n\tname, ok := w.paths[int(raw.Wd)]\n\n\tif ok && mask&unix.IN_DELETE_SELF == unix.IN_DELETE_SELF {\n\t\tdelete(w.paths, int(raw.Wd))\n\t\tdelete(w.watches, name)\n\t}\n\tw.mu.Unlock()\n\n\tif nameLen > 0 {\n\n\t\tbytes := (*[unix.PathMax]byte)(unsafe.Pointer(&buf[offset+unix.SizeofInotifyEvent]))\n\n\t\tname += \"/\" + strings.TrimRight(string(bytes[0:nameLen]), \"\\000\")\n\t}\n\n\tevent := newEvent(name, mask)\n\n\tif !event.ignoreLinux(mask) {\n\t\tselect {\n\t\tcase w.Events <- event:\n\t\tcase <-w.done:\n\t\t\treturn\n\t\t}\n\t}\n\n\toffset += unix.SizeofInotifyEvent + nameLen\n}",
      "entry" : false,
      "use-vars" : [ 3, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 0, 1, 3, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 1, 3, 13, 4 ],
      "decl-vars" : [ 13 ],
      "line-start" : 244,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "raw"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 22,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unix"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 22,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "InotifyEvent"
              }
            },
            "go-type" : 21,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 21,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 24,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 6,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 24,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "go-type" : 25,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 3,
                "index" : {
                  "go-type" : 8,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "offset",
                    "variable" : 1
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "buf",
                    "variable" : 4
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 244,
      "code" : "raw := (*unix.InotifyEvent)(unsafe.Pointer(&buf[offset]))",
      "entry" : false,
      "use-vars" : [ 4, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 4, 2, 0, 1, 3, 13 ],
      "exit" : false,
      "out-vars" : [ 13, 4, 16, 2, 0, 1, 3 ],
      "decl-vars" : [ 16 ],
      "line-start" : 246,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mask"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 8,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 8,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Mask",
              "variable" : 14
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "raw",
                "variable" : 13
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 246,
      "code" : "mask := uint32(raw.Mask)",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 4, 16, 2, 0, 1, 3, 13 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 1, 3, 13, 4, 16, 23 ],
      "decl-vars" : [ 23 ],
      "line-start" : 247,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "nameLen"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 8,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 8,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Len",
              "variable" : 15
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "raw",
                "variable" : 13
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 247,
      "code" : "nameLen := uint32(raw.Len)",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42, 48 ],
      "in-vars" : [ 2, 0, 1, 3, 13, 4, 16, 23 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 13, 4, 16, 23, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 249,
      "ast" : {
        "condition" : {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "left" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mask",
                "variable" : 16
              }
            },
            "operator" : "&",
            "right" : {
              "go-type" : 8,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "16384"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 255,
      "code" : "if mask&unix.IN_Q_OVERFLOW != 0 {\n\tselect {\n\tcase w.Errors <- ErrEventOverflow:\n\tcase <-w.done:\n\t\treturn\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43, 45, 48 ],
      "in-vars" : [ 0, 1, 3, 13, 4, 16, 23, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 13, 4, 16, 23, 2, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 250,
      "ast" : {
        "kind" : "statement",
        "type" : "select"
      },
      "assign-vars" : [ ],
      "line-end" : 254,
      "code" : "select {\ncase w.Errors <- ErrEventOverflow:\ncase <-w.done:\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44 ],
      "in-vars" : [ 2, 0, 1, 3, 13, 4, 16, 23 ],
      "exit" : false,
      "out-vars" : [ 4, 16, 23, 2, 0, 1, 3, 13 ],
      "decl-vars" : [ ],
      "line-start" : 251,
      "ast" : {
        "body" : [ ],
        "kind" : "statement",
        "statement" : {
          "channel" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Errors",
              "variable" : 8
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "kind" : "statement",
          "type" : "send",
          "value" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ErrEventOverflow",
              "variable" : 2
            }
          }
        },
        "type" : "select-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 251,
      "code" : "case w.Errors <- ErrEventOverflow:",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 23, 2, 0, 1, 3, 13, 4, 16 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 3, 13, 4, 16, 23, 2 ],
      "decl-vars" : [ ],
      "line-start" : 251,
      "ast" : {
        "channel" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Errors",
            "variable" : 8
          },
          "go-type" : 9,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "w",
              "variable" : 0
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "send",
        "value" : {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ErrEventOverflow",
            "variable" : 2
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 251,
      "code" : "w.Errors <- ErrEventOverflow",
      "entry" : false,
      "use-vars" : [ 0, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 252,
      "ast" : {
        "body" : [ {
          "kind" : "statement",
          "type" : "return",
          "values" : [ ]
        } ],
        "kind" : "statement",
        "statement" : {
          "kind" : "statement",
          "type" : "expression",
          "value" : {
            "go-type" : 28,
            "kind" : "expression",
            "operator" : "<-",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "done",
                "variable" : 9
              },
              "go-type" : 27,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "w",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }
        },
        "type" : "select-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 253,
      "code" : "case <-w.done:\n\treturn",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 252,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "go-type" : 28,
          "kind" : "expression",
          "operator" : "<-",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "done",
              "variable" : 9
            },
            "go-type" : 27,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 252,
      "code" : "<-w.done",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 253,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 253,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 23, 2, 0, 1, 3, 13, 4, 16 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 1, 3, 13, 4, 16, 23 ],
      "decl-vars" : [ ],
      "line-start" : 261,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Lock"
            },
            "go-type" : 0,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mu",
                "variable" : 17
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "w",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 261,
      "code" : "w.mu.Lock()",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50 ],
      "in-vars" : [ 0, 1, 3, 13, 4, 16, 23, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 13, 4, 16, 22, 20, 1, 23, 2, 0 ],
      "decl-vars" : [ 20, 22 ],
      "line-start" : 262,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "name"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "go-type" : 26,
          "index" : {
            "coerced-to" : {
              "go-type" : 17,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Wd",
                "variable" : 19
              },
              "go-type" : 16,
              "kind" : "expression",
              "target" : {
                "go-type" : 21,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "raw",
                  "variable" : 13
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "paths",
              "variable" : 18
            },
            "go-type" : 26,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 262,
      "code" : "name, ok := w.paths[int(raw.Wd)]",
      "entry" : false,
      "use-vars" : [ 0, 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51, 53 ],
      "in-vars" : [ 0, 1, 22, 20, 23, 2, 3, 13, 4, 16 ],
      "exit" : false,
      "out-vars" : [ 3, 13, 4, 23, 2, 0, 1, 16, 22 ],
      "decl-vars" : [ ],
      "line-start" : 267,
      "ast" : {
        "condition" : {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 20
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 5,
            "kind" : "expression",
            "left" : {
              "go-type" : 8,
              "kind" : "expression",
              "left" : {
                "go-type" : 8,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "mask",
                  "variable" : 16
                }
              },
              "operator" : "&",
              "right" : {
                "go-type" : 8,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1024"
                }
              },
              "type" : "binary"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 8,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1024"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 270,
      "code" : "if ok && mask&unix.IN_DELETE_SELF == unix.IN_DELETE_SELF {\n\tdelete(w.paths, int(raw.Wd))\n\tdelete(w.watches, name)\n}",
      "entry" : false,
      "use-vars" : [ 20, 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52 ],
      "in-vars" : [ 23, 2, 1, 3, 13, 22, 0, 4, 16 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 4, 16, 22, 23, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 268,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "paths",
              "variable" : 18
            },
            "go-type" : 26,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "coerced-to" : {
              "go-type" : 17,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Wd",
                "variable" : 19
              },
              "go-type" : 16,
              "kind" : "expression",
              "target" : {
                "go-type" : 21,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "raw",
                  "variable" : 13
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "delete"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 268,
      "code" : "delete(w.paths, int(raw.Wd))",
      "entry" : false,
      "use-vars" : [ 13, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 3, 4, 16, 22, 23, 2, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 23, 2, 0, 1, 3, 4, 16, 22 ],
      "decl-vars" : [ ],
      "line-start" : 269,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "watches",
              "variable" : 21
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "delete"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 269,
      "code" : "delete(w.watches, name)",
      "entry" : false,
      "use-vars" : [ 0, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54 ],
      "in-vars" : [ 1, 3, 4, 16, 22, 23, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 16, 22, 23, 2, 0, 1, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 271,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Unlock"
            },
            "go-type" : 0,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mu",
                "variable" : 17
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "w",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 271,
      "code" : "w.mu.Unlock()",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55, 57 ],
      "in-vars" : [ 4, 16, 22, 23, 2, 0, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 4, 16, 22, 23, 2, 0, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 273,
      "ast" : {
        "condition" : {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nameLen",
              "variable" : 23
            }
          },
          "operator" : ">",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 278,
      "code" : "if nameLen > 0 {\n\n\tbytes := (*[unix.PathMax]byte)(unsafe.Pointer(&buf[offset+unix.SizeofInotifyEvent]))\n\n\tname += \"/\" + strings.TrimRight(string(bytes[0:nameLen]), \"\\000\")\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56 ],
      "in-vars" : [ 16, 22, 23, 2, 0, 1, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 16, 2, 1, 4, 22, 23, 24 ],
      "decl-vars" : [ 24 ],
      "line-start" : 275,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "bytes"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "element" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 32,
              "kind" : "type",
              "length" : {
                "go-type" : 4,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "4096"
                }
              },
              "type" : "array"
            },
            "go-type" : 31,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 31,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 24,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 6,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 24,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "go-type" : 25,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 3,
                "index" : {
                  "go-type" : 8,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 8,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "offset",
                      "variable" : 1
                    }
                  },
                  "operator" : "+",
                  "right" : {
                    "go-type" : 8,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "16"
                    }
                  },
                  "type" : "binary"
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "buf",
                    "variable" : 4
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 275,
      "code" : "bytes := (*[unix.PathMax]byte)(unsafe.Pointer(&buf[offset+unix.SizeofInotifyEvent]))",
      "entry" : false,
      "use-vars" : [ 4, 1 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 57 ],
      "in-vars" : [ 0, 1, 3, 4, 16, 23, 22, 24, 2 ],
      "exit" : false,
      "out-vars" : [ 23, 2, 0, 1, 3, 4, 16, 22 ],
      "decl-vars" : [ ],
      "line-start" : 277,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "name",
            "variable" : 22
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "/"
            }
          },
          "operator" : "+",
          "right" : {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 6,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 6,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 15,
                "type" : "slice",
                "three" : false,
                "high" : {
                  "go-type" : 8,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "nameLen",
                    "variable" : 23
                  }
                },
                "max" : null,
                "kind" : "expression",
                "low" : {
                  "go-type" : 17,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "target" : {
                  "go-type" : 31,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "bytes",
                    "variable" : 24
                  }
                }
              },
              "type" : "cast"
            }, {
              "go-type" : 6,
              "kind" : "constant",
              "value" : {
                "type" : "STRING",
                "value" : "\u0000"
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 33,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 7,
                "value" : "strings"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "TrimRight"
              }
            },
            "go-type" : 6,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 277,
      "code" : "name += \"/\" + strings.TrimRight(string(bytes[0:nameLen]), \"\\000\")",
      "entry" : false,
      "use-vars" : [ 24, 23, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 58 ],
      "in-vars" : [ 0, 1, 3, 4, 16, 22, 23, 2 ],
      "exit" : false,
      "out-vars" : [ 16, 23, 25, 2, 0, 1, 3, 4 ],
      "decl-vars" : [ 25 ],
      "line-start" : 280,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "event"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 22
            }
          }, {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mask",
              "variable" : 16
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newEvent"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 280,
      "code" : "event := newEvent(name, mask)",
      "entry" : false,
      "use-vars" : [ 16, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59, 65 ],
      "in-vars" : [ 4, 16, 23, 25, 2, 0, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 4, 23, 25, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 283,
      "ast" : {
        "condition" : {
          "go-type" : 5,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mask",
                "variable" : 16
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "ignoreLinux"
              },
              "go-type" : 38,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "event",
                  "variable" : 25
                }
              },
              "type" : "selector"
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 289,
      "code" : "if !event.ignoreLinux(mask) {\n\tselect {\n\tcase w.Events <- event:\n\tcase <-w.done:\n\t\treturn\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 16, 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 60, 62, 65 ],
      "in-vars" : [ 23, 25, 2, 0, 1, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 4, 23, 25, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 284,
      "ast" : {
        "kind" : "statement",
        "type" : "select"
      },
      "assign-vars" : [ ],
      "line-end" : 288,
      "code" : "select {\ncase w.Events <- event:\ncase <-w.done:\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61 ],
      "in-vars" : [ 1, 3, 4, 23, 25, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 3, 4, 23, 25, 2 ],
      "decl-vars" : [ ],
      "line-start" : 285,
      "ast" : {
        "body" : [ ],
        "kind" : "statement",
        "statement" : {
          "channel" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Events",
              "variable" : 26
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "kind" : "statement",
          "type" : "send",
          "value" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "event",
              "variable" : 25
            }
          }
        },
        "type" : "select-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 285,
      "code" : "case w.Events <- event:",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65 ],
      "in-vars" : [ 0, 1, 3, 4, 23, 25, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 3, 4, 23, 2 ],
      "decl-vars" : [ ],
      "line-start" : 285,
      "ast" : {
        "channel" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Events",
            "variable" : 26
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "w",
              "variable" : 0
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "send",
        "value" : {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "event",
            "variable" : 25
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 285,
      "code" : "w.Events <- event",
      "entry" : false,
      "use-vars" : [ 0, 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 286,
      "ast" : {
        "body" : [ {
          "kind" : "statement",
          "type" : "return",
          "values" : [ ]
        } ],
        "kind" : "statement",
        "statement" : {
          "kind" : "statement",
          "type" : "expression",
          "value" : {
            "go-type" : 28,
            "kind" : "expression",
            "operator" : "<-",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "done",
                "variable" : 9
              },
              "go-type" : 27,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "w",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }
        },
        "type" : "select-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 287,
      "code" : "case <-w.done:\n\treturn",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 286,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "go-type" : 28,
          "kind" : "expression",
          "operator" : "<-",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "done",
              "variable" : 9
            },
            "go-type" : 27,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 286,
      "code" : "<-w.done",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 287,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 287,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 37 ],
      "in-vars" : [ 1, 3, 4, 23, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 3, 4, 2 ],
      "decl-vars" : [ ],
      "line-start" : 292,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "offset",
            "variable" : 1
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          },
          "operator" : "+",
          "right" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nameLen",
              "variable" : 23
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 292,
      "code" : "offset += unix.SizeofInotifyEvent + nameLen",
      "entry" : false,
      "use-vars" : [ 23, 1 ]
    } ],
    "code" : "// readEvents reads from the inotify file descriptor, converts the\n// received events into Event objects and sends them via the Events channel\nfunc (w *Watcher) readEvents() {\n\tvar (\n\t\tbuf   [unix.SizeofInotifyEvent * 4096]byte // Buffer for a maximum of 4096 raw events\n\t\tn     int                                  // Number of bytes read with read()\n\t\terrno error                                // Syscall errno\n\t\tok    bool                                 // For poller.wait\n\t)\n\n\tdefer close(w.doneResp)\n\tdefer close(w.Errors)\n\tdefer close(w.Events)\n\tdefer unix.Close(w.fd)\n\tdefer w.poller.close()\n\n\tfor {\n\n\t\tif w.isClosed() {\n\t\t\treturn\n\t\t}\n\n\t\tok, errno = w.poller.wait()\n\t\tif errno != nil {\n\t\t\tselect {\n\t\t\tcase w.Errors <- errno:\n\t\t\tcase <-w.done:\n\t\t\t\treturn\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\n\t\tn, errno = unix.Read(w.fd, buf[:])\n\n\t\tif errno == unix.EINTR {\n\t\t\tcontinue\n\t\t}\n\n\t\tif w.isClosed() {\n\t\t\treturn\n\t\t}\n\n\t\tif n < unix.SizeofInotifyEvent {\n\t\t\tvar err error\n\t\t\tif n == 0 {\n\n\t\t\t\terr = io.EOF\n\t\t\t} else if n < 0 {\n\n\t\t\t\terr = errno\n\t\t\t} else {\n\n\t\t\t\terr = errors.New(\"notify: short read in readEvents()\")\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase w.Errors <- err:\n\t\t\tcase <-w.done:\n\t\t\t\treturn\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tvar offset uint32\n\n\t\tfor offset <= uint32(n-unix.SizeofInotifyEvent) {\n\n\t\t\traw := (*unix.InotifyEvent)(unsafe.Pointer(&buf[offset]))\n\n\t\t\tmask := uint32(raw.Mask)\n\t\t\tnameLen := uint32(raw.Len)\n\n\t\t\tif mask&unix.IN_Q_OVERFLOW != 0 {\n\t\t\t\tselect {\n\t\t\t\tcase w.Errors <- ErrEventOverflow:\n\t\t\t\tcase <-w.done:\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tw.mu.Lock()\n\t\t\tname, ok := w.paths[int(raw.Wd)]\n\n\t\t\tif ok && mask&unix.IN_DELETE_SELF == unix.IN_DELETE_SELF {\n\t\t\t\tdelete(w.paths, int(raw.Wd))\n\t\t\t\tdelete(w.watches, name)\n\t\t\t}\n\t\t\tw.mu.Unlock()\n\n\t\t\tif nameLen > 0 {\n\n\t\t\t\tbytes := (*[unix.PathMax]byte)(unsafe.Pointer(&buf[offset+unix.SizeofInotifyEvent]))\n\n\t\t\t\tname += \"/\" + strings.TrimRight(string(bytes[0:nameLen]), \"\\000\")\n\t\t\t}\n\n\t\t\tevent := newEvent(name, mask)\n\n\t\t\tif !event.ignoreLinux(mask) {\n\t\t\t\tselect {\n\t\t\t\tcase w.Events <- event:\n\t\t\t\tcase <-w.done:\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toffset += unix.SizeofInotifyEvent + nameLen\n\t\t}\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "readEvents",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "isClosed",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "wait",
      "package" : 0,
      "type" : 9,
      "exported" : false
    }, {
      "name" : "Read",
      "package" : 2,
      "type" : 13,
      "exported" : true
    }, {
      "name" : "New",
      "package" : 5,
      "type" : 18,
      "exported" : true
    }, {
      "name" : "Lock",
      "package" : 1,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "Unlock",
      "package" : 1,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "TrimRight",
      "package" : 7,
      "type" : 33,
      "exported" : true
    }, {
      "name" : "newEvent",
      "package" : 0,
      "type" : 35,
      "exported" : false
    }, {
      "name" : "ignoreLinux",
      "package" : 0,
      "type" : 38,
      "exported" : false
    } ],
    "line-end" : 295,
    "line-start" : 172,
    "names" : [ "readEvents" ],
    "package" : 0,
    "packages" : [ {
      "name" : "fsnotify",
      "path" : "gopkg.in/fsnotify.v1"
    }, {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "unix",
      "path" : "golang.org/x/sys/unix"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    }, {
      "name" : "io",
      "path" : "io"
    }, {
      "name" : "errors",
      "path" : "errors"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "strings",
      "path" : "strings"
    } ],
    "params" : [ ],
    "receivers" : [ 0 ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func()",
      "params" : 1,
      "recv" : 0,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "[65536]byte",
      "type" : "Array",
      "underlying" : 2
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "func() bool",
      "params" : 1,
      "recv" : -1,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 6,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(bool, error)",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "name" : "func() (bool, error)",
      "params" : 1,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 17
      }, {
        "name" : "err",
        "type" : 10
      } ],
      "name" : "(n int, err error)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "name" : "func(fd int, p []byte) (n int, err error)",
      "params" : 14,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 13,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 17
      }, {
        "name" : "p",
        "type" : 15
      } ],
      "name" : "(fd int, p []byte)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "elem" : 3,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 15
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 3,
      "type" : "Named",
      "underlying" : 17
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "name" : "func(text string) error",
      "params" : 19,
      "recv" : -1,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "text",
        "type" : 6
      } ],
      "name" : "(text string)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "elem" : 22,
      "name" : "*golang.org/x/sys/unix.InotifyEvent",
      "type" : "Pointer",
      "underlying" : 21
    }, {
      "local-name" : "InotifyEvent",
      "name" : "golang.org/x/sys/unix.InotifyEvent",
      "package" : 2,
      "type" : "Named",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "Wd",
        "type" : 16
      }, {
        "name" : "Mask",
        "type" : 8
      }, {
        "name" : "Cookie",
        "type" : 8
      }, {
        "name" : "Len",
        "type" : 8
      } ],
      "name" : "struct{Wd int32; Mask uint32; Cookie uint32; Len uint32}",
      "type" : "Struct",
      "underlying" : 23
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 6,
      "type" : "Basic",
      "underlying" : 24
    }, {
      "elem" : 3,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      }, {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(string, bool)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "name" : "func(map[int]string, int)",
      "params" : 28,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 26
      }, {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(map[int]string, int)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "name" : "func(map[string]*gopkg.in/fsnotify.v1.watch, string)",
      "params" : 30,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 22
      }, {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(map[string]*gopkg.in/fsnotify.v1.watch, string)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "elem" : 32,
      "name" : "*[4096]byte",
      "type" : "Pointer",
      "underlying" : 31
    }, {
      "elem" : 3,
      "name" : "[4096]byte",
      "type" : "Array",
      "underlying" : 32
    }, {
      "name" : "func(s string, cutset string) string",
      "params" : 34,
      "recv" : -1,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 6
      }, {
        "name" : "cutset",
        "type" : 6
      } ],
      "name" : "(s string, cutset string)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "name" : "func(name string, mask uint32) gopkg.in/fsnotify.v1.Event",
      "params" : 36,
      "recv" : -1,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 6
      }, {
        "name" : "mask",
        "type" : 8
      } ],
      "name" : "(name string, mask uint32)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(gopkg.in/fsnotify.v1.Event)",
      "type" : "Tuple",
      "underlying" : 37
    }, {
      "name" : "func(mask uint32) bool",
      "params" : 39,
      "recv" : -1,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 38,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "mask",
        "type" : 8
      } ],
      "name" : "(mask uint32)",
      "type" : "Tuple",
      "underlying" : 39
    } ],
    "variables" : [ {
      "name" : "w",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "offset",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "ErrEventOverflow",
      "package" : 0,
      "type" : 10,
      "exported" : true
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 17,
      "exported" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "errno",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "poller",
      "package" : 0,
      "type" : 18,
      "exported" : false
    }, {
      "name" : "Errors",
      "package" : 0,
      "type" : 9,
      "exported" : true
    }, {
      "name" : "done",
      "package" : 0,
      "type" : 27,
      "exported" : false
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 17,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "EOF",
      "package" : 4,
      "type" : 10,
      "exported" : true
    }, {
      "name" : "raw",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "Mask",
      "package" : 2,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "Len",
      "package" : 2,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "mask",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "mu",
      "package" : 0,
      "type" : 14,
      "exported" : false
    }, {
      "name" : "paths",
      "package" : 0,
      "type" : 26,
      "exported" : false
    }, {
      "name" : "Wd",
      "package" : 2,
      "type" : 16,
      "exported" : true
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "watches",
      "package" : 0,
      "type" : 22,
      "exported" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "nameLen",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "bytes",
      "package" : 0,
      "type" : 31,
      "exported" : false
    }, {
      "name" : "event",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "Events",
      "package" : 0,
      "type" : 3,
      "exported" : true
    } ]
  },
  "go-version" : "1.14.3"
}