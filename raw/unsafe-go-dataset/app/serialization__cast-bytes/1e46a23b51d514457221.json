{
  "usage" : {
    "file" : "xfrm_state_linux.go",
    "label1" : "cast-bytes",
    "label2" : "serialization",
    "line" : "258",
    "module" : "github.com/vishvananda/netlink",
    "pkg" : "github.com/vishvananda/netlink/nl",
    "project" : "kubernetes/kubernetes",
    "snippet" : "copy(b[64:68], (*(*[4]byte)(unsafe.Pointer(&msg.AlgKeyLen)))[:])",
    "version" : "v1.1.0"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ 2 ],
      "line-start" : 256,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "b"
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 3,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 3,
          "kind" : "expression",
          "rest" : [ {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Len"
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "msg",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "go-type" : 10,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "make"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 256,
      "code" : "b := make([]byte, msg.Len())",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 2, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 257,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "type" : "slice",
            "three" : false,
            "high" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "64"
              }
            },
            "max" : null,
            "kind" : "expression",
            "low" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 2
              }
            }
          }, {
            "go-type" : 3,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "AlgName",
                "variable" : 3
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "msg",
                  "variable" : 0
                }
              },
              "type" : "selector"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 257,
      "code" : "copy(b[0:64], msg.AlgName[:])",
      "entry" : false,
      "use-vars" : [ 0, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 2, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 258,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "type" : "slice",
            "three" : false,
            "high" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "68"
              }
            },
            "max" : null,
            "kind" : "expression",
            "low" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "64"
              }
            },
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 2
              }
            }
          }, {
            "go-type" : 3,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "go-type" : 15,
              "kind" : "expression",
              "target" : {
                "go-type" : 15,
                "kind" : "expression",
                "target" : {
                  "coerced-to" : {
                    "contained" : {
                      "element" : {
                        "go-type" : 4,
                        "kind" : "type",
                        "type" : "identifier",
                        "value" : {
                          "go-type" : 4,
                          "ident-kind" : "TypeName",
                          "kind" : "ident",
                          "value" : "byte"
                        }
                      },
                      "go-type" : 15,
                      "kind" : "type",
                      "length" : {
                        "go-type" : 17,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "4"
                        }
                      },
                      "type" : "array"
                    },
                    "go-type" : 16,
                    "kind" : "type",
                    "type" : "pointer"
                  },
                  "go-type" : 16,
                  "kind" : "expression",
                  "target" : {
                    "coerced-to" : {
                      "go-type" : 18,
                      "kind" : "type",
                      "qualifier" : {
                        "ident-kind" : "PkgName",
                        "kind" : "ident",
                        "package" : 1,
                        "value" : "unsafe"
                      },
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 18,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "Pointer"
                      }
                    },
                    "go-type" : 18,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 19,
                      "kind" : "expression",
                      "operator" : "&",
                      "target" : {
                        "field" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "AlgKeyLen",
                          "variable" : 4
                        },
                        "go-type" : 9,
                        "kind" : "expression",
                        "target" : {
                          "go-type" : 5,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "msg",
                            "variable" : 0
                          }
                        },
                        "type" : "selector"
                      },
                      "type" : "unary"
                    },
                    "type" : "cast"
                  },
                  "type" : "cast"
                },
                "type" : "star"
              },
              "type" : "paren"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 258,
      "code" : "copy(b[64:68], (*(*[4]byte)(unsafe.Pointer(&msg.AlgKeyLen)))[:])",
      "entry" : false,
      "use-vars" : [ 2, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 0, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 259,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "type" : "slice",
            "three" : false,
            "high" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "72"
              }
            },
            "max" : null,
            "kind" : "expression",
            "low" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "68"
              }
            },
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 2
              }
            }
          }, {
            "go-type" : 3,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "go-type" : 15,
              "kind" : "expression",
              "target" : {
                "go-type" : 15,
                "kind" : "expression",
                "target" : {
                  "coerced-to" : {
                    "contained" : {
                      "element" : {
                        "go-type" : 4,
                        "kind" : "type",
                        "type" : "identifier",
                        "value" : {
                          "go-type" : 4,
                          "ident-kind" : "TypeName",
                          "kind" : "ident",
                          "value" : "byte"
                        }
                      },
                      "go-type" : 15,
                      "kind" : "type",
                      "length" : {
                        "go-type" : 17,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "4"
                        }
                      },
                      "type" : "array"
                    },
                    "go-type" : 16,
                    "kind" : "type",
                    "type" : "pointer"
                  },
                  "go-type" : 16,
                  "kind" : "expression",
                  "target" : {
                    "coerced-to" : {
                      "go-type" : 18,
                      "kind" : "type",
                      "qualifier" : {
                        "ident-kind" : "PkgName",
                        "kind" : "ident",
                        "package" : 1,
                        "value" : "unsafe"
                      },
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 18,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "Pointer"
                      }
                    },
                    "go-type" : 18,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 19,
                      "kind" : "expression",
                      "operator" : "&",
                      "target" : {
                        "field" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "AlgICVLen",
                          "variable" : 5
                        },
                        "go-type" : 9,
                        "kind" : "expression",
                        "target" : {
                          "go-type" : 5,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "msg",
                            "variable" : 0
                          }
                        },
                        "type" : "selector"
                      },
                      "type" : "unary"
                    },
                    "type" : "cast"
                  },
                  "type" : "cast"
                },
                "type" : "star"
              },
              "type" : "paren"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 259,
      "code" : "copy(b[68:72], (*(*[4]byte)(unsafe.Pointer(&msg.AlgICVLen)))[:])",
      "entry" : false,
      "use-vars" : [ 2, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 2, 0 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 260,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "type" : "slice",
            "three" : false,
            "high" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Len"
                },
                "go-type" : 11,
                "kind" : "expression",
                "target" : {
                  "go-type" : 5,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "msg",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "go-type" : 10,
              "kind" : "expression",
              "type" : "call"
            },
            "max" : null,
            "kind" : "expression",
            "low" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "72"
              }
            },
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 2
              }
            }
          }, {
            "go-type" : 3,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "AlgKey",
                "variable" : 6
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "msg",
                  "variable" : 0
                }
              },
              "type" : "selector"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 260,
      "code" : "copy(b[72:msg.Len()], msg.AlgKey[:])",
      "entry" : false,
      "use-vars" : [ 2, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 261,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 2
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 261,
      "code" : "return b",
      "entry" : false,
      "use-vars" : [ 2 ]
    } ],
    "code" : "func (msg *XfrmAlgoAEAD) Serialize() []byte {\n\tb := make([]byte, msg.Len())\n\tcopy(b[0:64], msg.AlgName[:])\n\tcopy(b[64:68], (*(*[4]byte)(unsafe.Pointer(&msg.AlgKeyLen)))[:])\n\tcopy(b[68:72], (*(*[4]byte)(unsafe.Pointer(&msg.AlgICVLen)))[:])\n\tcopy(b[72:msg.Len()], msg.AlgKey[:])\n\treturn b\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Serialize",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "Len",
      "package" : 0,
      "type" : 11,
      "exported" : true
    } ],
    "line-end" : 262,
    "line-start" : 255,
    "names" : [ "Serialize" ],
    "package" : 0,
    "packages" : [ {
      "name" : "nl",
      "path" : "github.com/vishvananda/netlink/nl"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ ],
    "receivers" : [ 0 ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func() []byte",
      "params" : 1,
      "recv" : 0,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 3
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "*github.com/vishvananda/netlink/nl.XfrmAlgoAEAD",
      "type" : "Pointer",
      "underlying" : 5
    }, {
      "local-name" : "XfrmAlgoAEAD",
      "name" : "github.com/vishvananda/netlink/nl.XfrmAlgoAEAD",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "AlgName",
        "type" : 8
      }, {
        "name" : "AlgKeyLen",
        "type" : 9
      }, {
        "name" : "AlgICVLen",
        "type" : 9
      }, {
        "name" : "AlgKey",
        "type" : 3
      } ],
      "name" : "struct{AlgName [64]byte; AlgKeyLen uint32; AlgICVLen uint32; AlgKey []byte}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "elem" : 4,
      "name" : "[64]byte",
      "type" : "Array",
      "underlying" : 8
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "func() int",
      "params" : 1,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "name" : "func([]byte, []byte) int",
      "params" : 14,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 13,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      }, {
        "name" : "",
        "type" : 3
      } ],
      "name" : "([]byte, []byte)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "elem" : 4,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 15
    }, {
      "elem" : 15,
      "name" : "*[4]byte",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 18
    }, {
      "elem" : 9,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 19
    } ],
    "variables" : [ {
      "name" : "msg",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "AlgName",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "AlgKeyLen",
      "package" : 0,
      "type" : 9,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "AlgICVLen",
      "package" : 0,
      "type" : 9,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "AlgKey",
      "package" : 0,
      "type" : 3,
      "exported" : true,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}