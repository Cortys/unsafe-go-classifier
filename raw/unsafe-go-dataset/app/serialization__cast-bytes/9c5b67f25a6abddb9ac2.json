{
  "usage" : {
    "file" : "record.go",
    "label1" : "cast-bytes",
    "label2" : "serialization",
    "line" : "114",
    "module" : "github.com/elastic/go-perf",
    "pkg" : "github.com/elastic/go-perf",
    "project" : "elastic/beats",
    "snippet" : "buf := (*[8]byte)(unsafe.Pointer(&val))[:]",
    "version" : "v0.0.0-20191212140718-9c656876f595"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 6, 5, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 6, 5, 10, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 10, 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 73,
      "ast" : {
        "condition" : {
          "go-type" : 49,
          "kind" : "expression",
          "left" : {
            "go-type" : 31,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 10
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 50,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 75,
      "code" : "if err := ev.ok(); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 5, 7, 9, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 10, 7, 9 ],
      "decl-vars" : [ 10 ],
      "line-start" : 73,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ok"
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ev",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "go-type" : 31,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 73,
      "code" : "err := ev.ok()",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 10 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 74,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 31,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 10
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 74,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 7 ],
      "in-vars" : [ 6, 5, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 76,
      "ast" : {
        "condition" : {
          "go-type" : 49,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ring",
              "variable" : 11
            },
            "go-type" : 47,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ev",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 50,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 78,
      "code" : "if ev.ring == nil {\n\treturn errors.New(\"perf: event ring not mapped\")\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 77,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 14,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "perf: event ring not mapped"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 51,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "New"
            }
          },
          "go-type" : 31,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 77,
      "code" : "return errors.New(\"perf: event ring not mapped\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 6, 5, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 82,
      "ast" : {
        "condition" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "raw",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "readRawRecordNonblock"
            },
            "go-type" : 53,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ev",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "go-type" : 19,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 84,
      "code" : "if ev.readRawRecordNonblock(raw) {\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 7, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 83,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 50,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 83,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 9, 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 12, 6, 5, 7, 9 ],
      "decl-vars" : [ 12 ],
      "line-start" : 90,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 28,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "time"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 28,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Duration"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "timeout"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 90,
      "code" : "// If the context has a deadline, and that deadline is in the future,\n// use it to compute a timeout for ppoll(2). If the context is\n// expired, bail out immediately. Otherwise, the timeout is zero,\n// which means no timeout.\nvar timeout time.Duration",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 12, 6, 5, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 12, 13, 6, 5, 7, 9, 14 ],
      "decl-vars" : [ 14, 13 ],
      "line-start" : 91,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "deadline"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Deadline"
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 91,
      "code" : "deadline, ok := ctx.Deadline()",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12, 16 ],
      "in-vars" : [ 12, 13, 6, 5, 7, 9, 14 ],
      "exit" : false,
      "out-vars" : [ 13, 6, 5, 7, 9, 12 ],
      "decl-vars" : [ ],
      "line-start" : 92,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 14
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 98,
      "code" : "if ok {\n\ttimeout = time.Until(deadline)\n\tif timeout <= 0 {\n\t\t<-ctx.Done()\n\t\treturn ctx.Err()\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 13 ],
      "in-vars" : [ 13, 6, 5, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 9, 12, 6 ],
      "decl-vars" : [ ],
      "line-start" : 93,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 28,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "timeout",
            "variable" : 12
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "deadline",
              "variable" : 13
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 56,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "time"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Until"
            }
          },
          "go-type" : 28,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 12 ],
      "line-end" : 93,
      "code" : "timeout = time.Until(deadline)",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14, 16 ],
      "in-vars" : [ 12, 6, 5, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 9, 12, 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 94,
      "ast" : {
        "condition" : {
          "go-type" : 49,
          "kind" : "expression",
          "left" : {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "timeout",
              "variable" : 12
            }
          },
          "operator" : "<=",
          "right" : {
            "go-type" : 28,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 97,
      "code" : "if timeout <= 0 {\n\t<-ctx.Done()\n\treturn ctx.Err()\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ 6 ],
      "decl-vars" : [ ],
      "line-start" : 95,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "go-type" : 28,
          "kind" : "expression",
          "operator" : "<-",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Done"
              },
              "go-type" : 25,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "go-type" : 27,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 95,
      "code" : "<-ctx.Done()",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 96,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Err"
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "go-type" : 31,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 96,
      "code" : "return ctx.Err()",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 12, 6, 5, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 12, 6, 5, 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 103,
      "ast" : {
        "channel" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pollreq",
            "variable" : 15
          },
          "go-type" : 25,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ev",
              "variable" : 5
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "send",
        "value" : {
          "declared" : {
            "go-type" : 26,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 26,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "pollreq"
            }
          },
          "go-type" : 26,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "timeout",
                "variable" : 16
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "go-type" : 28,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "timeout",
                "variable" : 12
              }
            }
          } ]
        }
      },
      "assign-vars" : [ ],
      "line-end" : 104,
      "code" : "again:\n\tev.pollreq <- pollreq{timeout: timeout}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 9, 12, 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 12, 6, 5, 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 104,
      "ast" : {
        "channel" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pollreq",
            "variable" : 15
          },
          "go-type" : 25,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ev",
              "variable" : 5
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "send",
        "value" : {
          "declared" : {
            "go-type" : 26,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 26,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "pollreq"
            }
          },
          "go-type" : 26,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "timeout",
                "variable" : 16
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "go-type" : 28,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "timeout",
                "variable" : 12
              }
            }
          } ]
        }
      },
      "assign-vars" : [ ],
      "line-end" : 104,
      "code" : "ev.pollreq <- pollreq{timeout: timeout}",
      "entry" : false,
      "use-vars" : [ 12, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1, 19, 33 ],
      "in-vars" : [ 12, 6, 5, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 12, 6, 5, 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 105,
      "ast" : {
        "kind" : "statement",
        "type" : "select"
      },
      "assign-vars" : [ ],
      "line-end" : 178,
      "code" : "select {\ncase <-ctx.Done():\n\tactive := false\n\terr := ctx.Err()\n\tif err == context.Canceled {\n\n\t\tval := uint64(1)\n\t\tbuf := (*[8]byte)(unsafe.Pointer(&val))[:]\n\t\tunix.Write(ev.wakeupfd, buf)\n\t\tactive = true\n\t}\n\t<-ev.pollresp\n\n\tif active {\n\t\tvar buf [8]byte\n\t\tunix.Read(ev.wakeupfd, buf[:])\n\t}\n\treturn err\ncase resp := <-ev.pollresp:\n\tif resp.err != nil {\n\n\t\treturn resp.err\n\t}\n\tif resp.perfhup {\n\n\t\treturn ErrDisabled\n\t}\n\tif !resp.perfready {\n\n\t\t<-ctx.Done()\n\t\treturn ctx.Err()\n\t}\n\tif !ev.readRawRecordNonblock(raw) {\n\n\t\tgoto again\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 106,
      "ast" : {
        "body" : [ {
          "kind" : "statement",
          "left" : [ {
            "go-type" : -1,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "active"
            }
          } ],
          "right" : [ {
            "go-type" : 19,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          } ],
          "type" : "define"
        }, {
          "kind" : "statement",
          "left" : [ {
            "go-type" : -1,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "err"
            }
          } ],
          "right" : [ {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Err"
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "go-type" : 31,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "define"
        }, {
          "body" : [ {
            "kind" : "statement",
            "left" : [ {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "val"
              }
            } ],
            "right" : [ {
              "go-type" : 9,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            } ],
            "type" : "define"
          }, {
            "kind" : "statement",
            "left" : [ {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "buf"
              }
            } ],
            "right" : [ {
              "go-type" : 47,
              "type" : "slice",
              "three" : false,
              "high" : null,
              "max" : null,
              "kind" : "expression",
              "low" : null,
              "target" : {
                "coerced-to" : {
                  "contained" : {
                    "element" : {
                      "go-type" : 48,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 48,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "byte"
                      }
                    },
                    "go-type" : 60,
                    "kind" : "type",
                    "length" : {
                      "go-type" : 61,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "8"
                      }
                    },
                    "type" : "array"
                  },
                  "go-type" : 59,
                  "kind" : "type",
                  "type" : "pointer"
                },
                "go-type" : 59,
                "kind" : "expression",
                "target" : {
                  "coerced-to" : {
                    "go-type" : 62,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 5,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 62,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 62,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 63,
                    "kind" : "expression",
                    "operator" : "&",
                    "target" : {
                      "go-type" : 9,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "val",
                        "variable" : 19
                      }
                    },
                    "type" : "unary"
                  },
                  "type" : "cast"
                },
                "type" : "cast"
              }
            } ],
            "type" : "define"
          }, {
            "kind" : "statement",
            "type" : "expression",
            "value" : {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "wakeupfd",
                  "variable" : 20
                },
                "go-type" : 18,
                "kind" : "expression",
                "target" : {
                  "go-type" : 0,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ev",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              }, {
                "go-type" : 47,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "buf",
                  "variable" : 21
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 65,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 3,
                  "value" : "unix"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Write"
                }
              },
              "go-type" : 64,
              "kind" : "expression",
              "type" : "call"
            }
          }, {
            "kind" : "statement",
            "left" : [ {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "active",
                "variable" : 22
              }
            } ],
            "right" : [ {
              "go-type" : 19,
              "kind" : "constant",
              "value" : {
                "type" : "BOOL",
                "value" : "true"
              }
            } ],
            "type" : "assign"
          } ],
          "condition" : {
            "go-type" : 49,
            "kind" : "expression",
            "left" : {
              "go-type" : 31,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "err",
                "variable" : 17
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 31,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "context"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Canceled",
                "variable" : 18
              }
            },
            "type" : "binary"
          },
          "else" : null,
          "init" : null,
          "kind" : "statement",
          "type" : "if"
        }, {
          "kind" : "statement",
          "type" : "expression",
          "value" : {
            "go-type" : 30,
            "kind" : "expression",
            "operator" : "<-",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pollresp",
                "variable" : 23
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ev",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }
        }, {
          "body" : [ {
            "kind" : "statement",
            "target" : {
              "kind" : "decl",
              "specs" : [ {
                "comments" : [ ],
                "declared-type" : {
                  "element" : {
                    "go-type" : 48,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 48,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "byte"
                    }
                  },
                  "go-type" : 60,
                  "kind" : "type",
                  "length" : {
                    "go-type" : 61,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "8"
                    }
                  },
                  "type" : "array"
                },
                "kind" : "spec",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "buf"
                } ],
                "type" : "var",
                "values" : [ ]
              } ],
              "type" : "var"
            },
            "type" : "declaration"
          }, {
            "kind" : "statement",
            "type" : "expression",
            "value" : {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "wakeupfd",
                  "variable" : 20
                },
                "go-type" : 18,
                "kind" : "expression",
                "target" : {
                  "go-type" : 0,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ev",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              }, {
                "go-type" : 47,
                "type" : "slice",
                "three" : false,
                "high" : null,
                "max" : null,
                "kind" : "expression",
                "low" : null,
                "target" : {
                  "go-type" : 60,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "buf",
                    "variable" : 24
                  }
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 65,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 3,
                  "value" : "unix"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Read"
                }
              },
              "go-type" : 64,
              "kind" : "expression",
              "type" : "call"
            }
          } ],
          "condition" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "active",
              "variable" : 22
            }
          },
          "else" : null,
          "init" : null,
          "kind" : "statement",
          "type" : "if"
        }, {
          "kind" : "statement",
          "type" : "return",
          "values" : [ {
            "go-type" : 31,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 17
            }
          } ]
        } ],
        "kind" : "statement",
        "statement" : {
          "kind" : "statement",
          "type" : "expression",
          "value" : {
            "go-type" : 28,
            "kind" : "expression",
            "operator" : "<-",
            "target" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Done"
                },
                "go-type" : 25,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 6
                  }
                },
                "type" : "selector"
              },
              "go-type" : 27,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "unary"
          }
        },
        "type" : "select-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 131,
      "code" : "case <-ctx.Done():\n\tactive := false\n\terr := ctx.Err()\n\tif err == context.Canceled {\n\n\t\tval := uint64(1)\n\t\tbuf := (*[8]byte)(unsafe.Pointer(&val))[:]\n\t\tunix.Write(ev.wakeupfd, buf)\n\t\tactive = true\n\t}\n\t<-ev.pollresp\n\n\tif active {\n\t\tvar buf [8]byte\n\t\tunix.Read(ev.wakeupfd, buf[:])\n\t}\n\treturn err",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 106,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "go-type" : 28,
          "kind" : "expression",
          "operator" : "<-",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Done"
              },
              "go-type" : 25,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "go-type" : 27,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 106,
      "code" : "<-ctx.Done()",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 22 ],
      "decl-vars" : [ 22 ],
      "line-start" : 107,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "active"
          }
        } ],
        "right" : [ {
          "go-type" : 19,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 107,
      "code" : "active := false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 6, 5, 22 ],
      "exit" : false,
      "out-vars" : [ 5, 17, 22 ],
      "decl-vars" : [ 17 ],
      "line-start" : 108,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Err"
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "go-type" : 31,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 108,
      "code" : "err := ctx.Err()",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24, 28 ],
      "in-vars" : [ 5, 17, 22 ],
      "exit" : false,
      "out-vars" : [ 5, 17, 22 ],
      "decl-vars" : [ ],
      "line-start" : 109,
      "ast" : {
        "condition" : {
          "go-type" : 49,
          "kind" : "expression",
          "left" : {
            "go-type" : 31,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 17
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 31,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "context"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Canceled",
              "variable" : 18
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 117,
      "code" : "if err == context.Canceled {\n\n\tval := uint64(1)\n\tbuf := (*[8]byte)(unsafe.Pointer(&val))[:]\n\tunix.Write(ev.wakeupfd, buf)\n\tactive = true\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 5, 17 ],
      "exit" : false,
      "out-vars" : [ 5, 19, 17 ],
      "decl-vars" : [ 19 ],
      "line-start" : 113,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "val"
          }
        } ],
        "right" : [ {
          "go-type" : 9,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 113,
      "code" : "val := uint64(1)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 5, 19, 17 ],
      "exit" : false,
      "out-vars" : [ 5, 21, 17 ],
      "decl-vars" : [ 21 ],
      "line-start" : 114,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "buf"
          }
        } ],
        "right" : [ {
          "go-type" : 47,
          "type" : "slice",
          "three" : false,
          "high" : null,
          "max" : null,
          "kind" : "expression",
          "low" : null,
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 48,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 48,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "byte"
                  }
                },
                "go-type" : 60,
                "kind" : "type",
                "length" : {
                  "go-type" : 61,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "8"
                  }
                },
                "type" : "array"
              },
              "go-type" : 59,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 59,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 62,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 5,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 62,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 62,
              "kind" : "expression",
              "target" : {
                "go-type" : 63,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 9,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "val",
                    "variable" : 19
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 114,
      "code" : "buf := (*[8]byte)(unsafe.Pointer(&val))[:]",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 5, 21, 17 ],
      "exit" : false,
      "out-vars" : [ 5, 17 ],
      "decl-vars" : [ ],
      "line-start" : 115,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "wakeupfd",
              "variable" : 20
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ev",
                "variable" : 5
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 47,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "buf",
              "variable" : 21
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 65,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "unix"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Write"
            }
          },
          "go-type" : 64,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 115,
      "code" : "unix.Write(ev.wakeupfd, buf)",
      "entry" : false,
      "use-vars" : [ 5, 21 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 28 ],
      "in-vars" : [ 5, 17 ],
      "exit" : false,
      "out-vars" : [ 5, 17, 22 ],
      "decl-vars" : [ ],
      "line-start" : 116,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 19,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "active",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "go-type" : 19,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 116,
      "code" : "active = true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 5, 17, 22 ],
      "exit" : false,
      "out-vars" : [ 5, 17, 22 ],
      "decl-vars" : [ ],
      "line-start" : 118,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "go-type" : 30,
          "kind" : "expression",
          "operator" : "<-",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pollresp",
              "variable" : 23
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ev",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 118,
      "code" : "<-ev.pollresp",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30, 32 ],
      "in-vars" : [ 5, 17, 22 ],
      "exit" : false,
      "out-vars" : [ 5, 17 ],
      "decl-vars" : [ ],
      "line-start" : 127,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "active",
            "variable" : 22
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 130,
      "code" : "if active {\n\tvar buf [8]byte\n\tunix.Read(ev.wakeupfd, buf[:])\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 17, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 17, 24 ],
      "decl-vars" : [ 24 ],
      "line-start" : 128,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 48,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 48,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 60,
              "kind" : "type",
              "length" : {
                "go-type" : 61,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "array"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "buf"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 128,
      "code" : "var buf [8]byte",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 5, 17, 24 ],
      "exit" : false,
      "out-vars" : [ 17 ],
      "decl-vars" : [ ],
      "line-start" : 129,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "wakeupfd",
              "variable" : 20
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ev",
                "variable" : 5
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 47,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "go-type" : 60,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buf",
                "variable" : 24
              }
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 65,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "unix"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Read"
            }
          },
          "go-type" : 64,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 129,
      "code" : "unix.Read(ev.wakeupfd, buf[:])",
      "entry" : false,
      "use-vars" : [ 5, 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 131,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 31,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 17
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 131,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 12, 6, 5, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 9, 12, 6 ],
      "decl-vars" : [ ],
      "line-start" : 132,
      "ast" : {
        "body" : [ {
          "body" : [ {
            "kind" : "statement",
            "type" : "return",
            "values" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "err",
                "variable" : 26
              },
              "go-type" : 31,
              "kind" : "expression",
              "target" : {
                "go-type" : 30,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "resp",
                  "variable" : 25
                }
              },
              "type" : "selector"
            } ]
          } ],
          "condition" : {
            "go-type" : 49,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "err",
                "variable" : 26
              },
              "go-type" : 31,
              "kind" : "expression",
              "target" : {
                "go-type" : 30,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "resp",
                  "variable" : 25
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 50,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "else" : null,
          "init" : null,
          "kind" : "statement",
          "type" : "if"
        }, {
          "body" : [ {
            "kind" : "statement",
            "type" : "return",
            "values" : [ {
              "go-type" : 31,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ErrDisabled",
                "variable" : 9
              }
            } ]
          } ],
          "condition" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "perfhup",
              "variable" : 27
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "go-type" : 30,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "resp",
                "variable" : 25
              }
            },
            "type" : "selector"
          },
          "else" : null,
          "init" : null,
          "kind" : "statement",
          "type" : "if"
        }, {
          "body" : [ {
            "kind" : "statement",
            "type" : "expression",
            "value" : {
              "go-type" : 28,
              "kind" : "expression",
              "operator" : "<-",
              "target" : {
                "arguments" : [ ],
                "ellipsis" : false,
                "function" : {
                  "field" : {
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "Done"
                  },
                  "go-type" : 25,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "ctx",
                      "variable" : 6
                    }
                  },
                  "type" : "selector"
                },
                "go-type" : 27,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "unary"
            }
          }, {
            "kind" : "statement",
            "type" : "return",
            "values" : [ {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Err"
                },
                "go-type" : 29,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 6
                  }
                },
                "type" : "selector"
              },
              "go-type" : 31,
              "kind" : "expression",
              "type" : "call"
            } ]
          } ],
          "condition" : {
            "go-type" : 19,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "perfready",
                "variable" : 28
              },
              "go-type" : 19,
              "kind" : "expression",
              "target" : {
                "go-type" : 30,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "resp",
                  "variable" : 25
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          },
          "else" : null,
          "init" : null,
          "kind" : "statement",
          "type" : "if"
        }, {
          "body" : [ {
            "kind" : "statement",
            "label" : {
              "ident-kind" : "Label",
              "kind" : "ident",
              "value" : "again"
            },
            "type" : "goto"
          } ],
          "condition" : {
            "go-type" : 19,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "arguments" : [ {
                "go-type" : 39,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "raw",
                  "variable" : 7
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "readRawRecordNonblock"
                },
                "go-type" : 53,
                "kind" : "expression",
                "target" : {
                  "go-type" : 0,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ev",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "go-type" : 19,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "unary"
          },
          "else" : null,
          "init" : null,
          "kind" : "statement",
          "type" : "if"
        }, {
          "kind" : "statement",
          "type" : "return",
          "values" : [ {
            "go-type" : 50,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ]
        } ],
        "kind" : "statement",
        "statement" : {
          "kind" : "statement",
          "left" : [ {
            "go-type" : -1,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "resp"
            }
          } ],
          "right" : [ {
            "go-type" : 30,
            "kind" : "expression",
            "operator" : "<-",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pollresp",
                "variable" : 23
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ev",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "type" : "define"
        },
        "type" : "select-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 177,
      "code" : "case resp := <-ev.pollresp:\n\tif resp.err != nil {\n\n\t\treturn resp.err\n\t}\n\tif resp.perfhup {\n\n\t\treturn ErrDisabled\n\t}\n\tif !resp.perfready {\n\n\t\t<-ctx.Done()\n\t\treturn ctx.Err()\n\t}\n\tif !ev.readRawRecordNonblock(raw) {\n\n\t\tgoto again\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 12, 6, 5, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 12, 6, 5, 25, 7, 9 ],
      "decl-vars" : [ 25 ],
      "line-start" : 132,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "resp"
          }
        } ],
        "right" : [ {
          "go-type" : 30,
          "kind" : "expression",
          "operator" : "<-",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pollresp",
              "variable" : 23
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ev",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 132,
      "code" : "resp := <-ev.pollresp",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36, 37 ],
      "in-vars" : [ 12, 6, 5, 25, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 25, 7, 9, 12, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 133,
      "ast" : {
        "condition" : {
          "go-type" : 49,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 26
            },
            "go-type" : 31,
            "kind" : "expression",
            "target" : {
              "go-type" : 30,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "resp",
                "variable" : 25
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 50,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 136,
      "code" : "if resp.err != nil {\n\n\treturn resp.err\n}",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 25 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 135,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 26
          },
          "go-type" : 31,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "resp",
              "variable" : 25
            }
          },
          "type" : "selector"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 135,
      "code" : "return resp.err",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38, 39 ],
      "in-vars" : [ 7, 9, 12, 6, 5, 25 ],
      "exit" : false,
      "out-vars" : [ 25, 7, 9, 12, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 137,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "perfhup",
            "variable" : 27
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "resp",
              "variable" : 25
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 141,
      "code" : "if resp.perfhup {\n\n\treturn ErrDisabled\n}",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 9 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 140,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 31,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ErrDisabled",
            "variable" : 9
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 140,
      "code" : "return ErrDisabled",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40, 42 ],
      "in-vars" : [ 5, 25, 7, 9, 12, 6 ],
      "exit" : false,
      "out-vars" : [ 12, 6, 5, 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 142,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "perfready",
              "variable" : 28
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "go-type" : 30,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "resp",
                "variable" : 25
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 154,
      "code" : "if !resp.perfready {\n\n\t<-ctx.Done()\n\treturn ctx.Err()\n}",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ 6 ],
      "decl-vars" : [ ],
      "line-start" : 152,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "go-type" : 28,
          "kind" : "expression",
          "operator" : "<-",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Done"
              },
              "go-type" : 25,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "go-type" : 27,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 152,
      "code" : "<-ctx.Done()",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 153,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Err"
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "go-type" : 31,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 153,
      "code" : "return ctx.Err()",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43, 44 ],
      "in-vars" : [ 9, 12, 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 9, 12, 6 ],
      "decl-vars" : [ ],
      "line-start" : 155,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "go-type" : 39,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "raw",
                "variable" : 7
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "readRawRecordNonblock"
              },
              "go-type" : 53,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ev",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "go-type" : 19,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 176,
      "code" : "if !ev.readRawRecordNonblock(raw) {\n\n\tgoto again\n}",
      "entry" : false,
      "use-vars" : [ 5, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 12, 6, 5, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 9, 12, 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 175,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "again"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 175,
      "code" : "goto again",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 177,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 50,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 177,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// ReadRawRecord reads and decodes a raw record from the ring buffer\n// associated with ev into rec. Callers must not retain rec.Data.\n//\n// ReadRawRecord may be called concurrently with ReadCount or ReadGroupCount,\n// but not concurrently with itself, ReadRecord, Close or any other Event\n// method.\nfunc (ev *Event) ReadRawRecord(ctx context.Context, raw *RawRecord) error {\n\tif err := ev.ok(); err != nil {\n\t\treturn err\n\t}\n\tif ev.ring == nil {\n\t\treturn errors.New(\"perf: event ring not mapped\")\n\t}\n\n\tif ev.readRawRecordNonblock(raw) {\n\t\treturn nil\n\t}\n\n\t// If the context has a deadline, and that deadline is in the future,\n\t// use it to compute a timeout for ppoll(2). If the context is\n\t// expired, bail out immediately. Otherwise, the timeout is zero,\n\t// which means no timeout.\n\tvar timeout time.Duration\n\tdeadline, ok := ctx.Deadline()\n\tif ok {\n\t\ttimeout = time.Until(deadline)\n\t\tif timeout <= 0 {\n\t\t\t<-ctx.Done()\n\t\t\treturn ctx.Err()\n\t\t}\n\t}\n\nagain:\n\tev.pollreq <- pollreq{timeout: timeout}\n\tselect {\n\tcase <-ctx.Done():\n\t\tactive := false\n\t\terr := ctx.Err()\n\t\tif err == context.Canceled {\n\n\t\t\tval := uint64(1)\n\t\t\tbuf := (*[8]byte)(unsafe.Pointer(&val))[:]\n\t\t\tunix.Write(ev.wakeupfd, buf)\n\t\t\tactive = true\n\t\t}\n\t\t<-ev.pollresp\n\n\t\tif active {\n\t\t\tvar buf [8]byte\n\t\t\tunix.Read(ev.wakeupfd, buf[:])\n\t\t}\n\t\treturn err\n\tcase resp := <-ev.pollresp:\n\t\tif resp.err != nil {\n\n\t\t\treturn resp.err\n\t\t}\n\t\tif resp.perfhup {\n\n\t\t\treturn ErrDisabled\n\t\t}\n\t\tif !resp.perfready {\n\n\t\t\t<-ctx.Done()\n\t\t\treturn ctx.Err()\n\t\t}\n\t\tif !ev.readRawRecordNonblock(raw) {\n\n\t\t\tgoto again\n\t\t}\n\t\treturn nil\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "ReadRawRecord",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 29,
      "exported" : false
    }, {
      "name" : "New",
      "package" : 4,
      "type" : 51,
      "exported" : true
    }, {
      "name" : "readRawRecordNonblock",
      "package" : 0,
      "type" : 53,
      "exported" : false
    }, {
      "name" : "Deadline",
      "package" : 1,
      "type" : 4,
      "exported" : true
    }, {
      "name" : "Until",
      "package" : 2,
      "type" : 56,
      "exported" : true
    }, {
      "name" : "Done",
      "package" : 1,
      "type" : 25,
      "exported" : true
    }, {
      "name" : "Err",
      "package" : 1,
      "type" : 29,
      "exported" : true
    }, {
      "name" : "Write",
      "package" : 3,
      "type" : 65,
      "exported" : true
    }, {
      "name" : "Read",
      "package" : 3,
      "type" : 65,
      "exported" : true
    } ],
    "line-end" : 179,
    "line-start" : 72,
    "names" : [ "ReadRawRecord" ],
    "package" : 0,
    "packages" : [ {
      "name" : "perf",
      "path" : "github.com/elastic/go-perf"
    }, {
      "name" : "context",
      "path" : "context"
    }, {
      "name" : "time",
      "path" : "time"
    }, {
      "name" : "unix",
      "path" : "golang.org/x/sys/unix"
    }, {
      "name" : "errors",
      "path" : "errors"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 6, 7 ],
    "receivers" : [ 5 ],
    "results" : [ 8 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(ctx context.Context, raw *github.com/elastic/go-perf.RawRecord) error",
      "params" : 1,
      "recv" : 5,
      "results" : 30,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ctx",
        "type" : 2
      }, {
        "name" : "raw",
        "type" : 39
      } ],
      "name" : "(ctx context.Context, raw *github.com/elastic/go-perf.RawRecord)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Context",
      "name" : "context.Context",
      "package" : 1,
      "type" : "Named",
      "underlying" : 3
    }, {
      "methods" : [ {
        "name" : "Deadline",
        "type" : 4
      }, {
        "name" : "Done",
        "type" : 25
      }, {
        "name" : "Err",
        "type" : 29
      }, {
        "name" : "Value",
        "type" : 35
      } ],
      "name" : "interface{Deadline() (deadline time.Time, ok bool); Done() <-chan struct{}; Err() error; Value(key interface{}) interface{}}",
      "type" : "Interface",
      "underlying" : 3
    }, {
      "name" : "func() (deadline time.Time, ok bool)",
      "params" : 5,
      "recv" : 0,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 4,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "deadline",
        "type" : 7
      }, {
        "name" : "ok",
        "type" : 19
      } ],
      "name" : "(deadline time.Time, ok bool)",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "local-name" : "Time",
      "name" : "time.Time",
      "package" : 2,
      "type" : "Named",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "wall",
        "type" : 9
      }, {
        "name" : "ext",
        "type" : 10
      }, {
        "name" : "loc",
        "type" : 11
      } ],
      "name" : "struct{wall uint64; ext int64; loc *time.Location}",
      "type" : "Struct",
      "underlying" : 8
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "elem" : 12,
      "name" : "*time.Location",
      "type" : "Pointer",
      "underlying" : 11
    }, {
      "local-name" : "Location",
      "name" : "time.Location",
      "package" : 2,
      "type" : "Named",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 14
      }, {
        "name" : "zone",
        "type" : 15
      }, {
        "name" : "tx",
        "type" : 20
      }, {
        "name" : "cacheStart",
        "type" : 10
      }, {
        "name" : "cacheEnd",
        "type" : 10
      }, {
        "name" : "cacheZone",
        "type" : 24
      } ],
      "name" : "struct{name string; zone []time.zone; tx []time.zoneTrans; cacheStart int64; cacheEnd int64; cacheZone *time.zone}",
      "type" : "Struct",
      "underlying" : 13
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "elem" : 16,
      "name" : "[]time.zone",
      "type" : "Slice",
      "underlying" : 15
    }, {
      "local-name" : "zone",
      "name" : "time.zone",
      "package" : 2,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 14
      }, {
        "name" : "offset",
        "type" : 18
      }, {
        "name" : "isDST",
        "type" : 19
      } ],
      "name" : "struct{name string; offset int; isDST bool}",
      "type" : "Struct",
      "underlying" : 17
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "elem" : 21,
      "name" : "[]time.zoneTrans",
      "type" : "Slice",
      "underlying" : 20
    }, {
      "local-name" : "zoneTrans",
      "name" : "time.zoneTrans",
      "package" : 2,
      "type" : "Named",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "when",
        "type" : 10
      }, {
        "name" : "index",
        "type" : 23
      }, {
        "name" : "isstd",
        "type" : 19
      }, {
        "name" : "isutc",
        "type" : 19
      } ],
      "name" : "struct{when int64; index uint8; isstd bool; isutc bool}",
      "type" : "Struct",
      "underlying" : 22
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "elem" : 16,
      "name" : "*time.zone",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "name" : "func() <-chan struct{}",
      "params" : 5,
      "recv" : 1,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 25,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 27
      } ],
      "name" : "(<-chan struct{})",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "dir" : "recv",
      "elem" : 28,
      "name" : "<-chan struct{}",
      "type" : "Chan",
      "underlying" : 27
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 28
    }, {
      "name" : "func() error",
      "params" : 5,
      "recv" : 3,
      "results" : 30,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 31
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 32
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 33
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 32
    }, {
      "name" : "func() string",
      "params" : 5,
      "recv" : 2,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "name" : "func(key interface{}) interface{}",
      "params" : 36,
      "recv" : 4,
      "results" : 38,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 37
      } ],
      "name" : "(key interface{})",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 37
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 37
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "elem" : 40,
      "name" : "*github.com/elastic/go-perf.RawRecord",
      "type" : "Pointer",
      "underlying" : 39
    }, {
      "local-name" : "RawRecord",
      "name" : "github.com/elastic/go-perf.RawRecord",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "Header",
        "type" : 42
      }, {
        "name" : "Data",
        "type" : 47
      } ],
      "name" : "struct{Header github.com/elastic/go-perf.RecordHeader; Data []byte}",
      "type" : "Struct",
      "underlying" : 41
    }, {
      "local-name" : "RecordHeader",
      "name" : "github.com/elastic/go-perf.RecordHeader",
      "package" : 0,
      "type" : "Named",
      "underlying" : 43
    }, {
      "fields" : [ {
        "name" : "Type",
        "type" : 44
      }, {
        "name" : "Misc",
        "type" : 46
      }, {
        "name" : "Size",
        "type" : 46
      } ],
      "name" : "struct{Type github.com/elastic/go-perf.RecordType; Misc uint16; Size uint16}",
      "type" : "Struct",
      "underlying" : 43
    }, {
      "local-name" : "RecordType",
      "name" : "github.com/elastic/go-perf.RecordType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 45
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 45
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 46
    }, {
      "elem" : 48,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 47
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 48
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 49
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 50
    }, {
      "name" : "func(text string) error",
      "params" : 52,
      "recv" : -1,
      "results" : 30,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "text",
        "type" : 14
      } ],
      "name" : "(text string)",
      "type" : "Tuple",
      "underlying" : 52
    }, {
      "name" : "func(raw *github.com/elastic/go-perf.RawRecord) bool",
      "params" : 54,
      "recv" : -1,
      "results" : 55,
      "type" : "Signature",
      "underlying" : 53,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "raw",
        "type" : 39
      } ],
      "name" : "(raw *github.com/elastic/go-perf.RawRecord)",
      "type" : "Tuple",
      "underlying" : 54
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 19
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 55
    }, {
      "name" : "func(t time.Time) time.Duration",
      "params" : 57,
      "recv" : -1,
      "results" : 58,
      "type" : "Signature",
      "underlying" : 56,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 7
      } ],
      "name" : "(t time.Time)",
      "type" : "Tuple",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 28
      } ],
      "name" : "(time.Duration)",
      "type" : "Tuple",
      "underlying" : 58
    }, {
      "elem" : 60,
      "name" : "*[8]byte",
      "type" : "Pointer",
      "underlying" : 59
    }, {
      "elem" : 48,
      "name" : "[8]byte",
      "type" : "Array",
      "underlying" : 60
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 61
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 5,
      "type" : "Basic",
      "underlying" : 62
    }, {
      "elem" : 9,
      "name" : "*uint64",
      "type" : "Pointer",
      "underlying" : 63
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 18
      }, {
        "name" : "err",
        "type" : 31
      } ],
      "name" : "(n int, err error)",
      "type" : "Tuple",
      "underlying" : 64
    }, {
      "name" : "func(fd int, p []byte) (n int, err error)",
      "params" : 66,
      "recv" : -1,
      "results" : 64,
      "type" : "Signature",
      "underlying" : 65,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 18
      }, {
        "name" : "p",
        "type" : 47
      } ],
      "name" : "(fd int, p []byte)",
      "type" : "Tuple",
      "underlying" : 66
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : -1,
      "type" : 31,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "ev",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "ctx",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "raw",
      "package" : 0,
      "type" : 39,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 31,
      "exported" : false
    }, {
      "name" : "ErrDisabled",
      "package" : 0,
      "type" : 31,
      "exported" : true
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 31,
      "exported" : false
    }, {
      "name" : "ring",
      "package" : 0,
      "type" : 47,
      "exported" : false
    }, {
      "name" : "timeout",
      "package" : 0,
      "type" : 28,
      "exported" : false
    }, {
      "name" : "deadline",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 19,
      "exported" : false
    }, {
      "name" : "pollreq",
      "package" : 0,
      "type" : 25,
      "exported" : false
    }, {
      "name" : "timeout",
      "package" : 0,
      "type" : 28,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 31,
      "exported" : false
    }, {
      "name" : "Canceled",
      "package" : 1,
      "type" : 31,
      "exported" : true
    }, {
      "name" : "val",
      "package" : 0,
      "type" : 9,
      "exported" : false
    }, {
      "name" : "wakeupfd",
      "package" : 0,
      "type" : 18,
      "exported" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 47,
      "exported" : false
    }, {
      "name" : "active",
      "package" : 0,
      "type" : 19,
      "exported" : false
    }, {
      "name" : "pollresp",
      "package" : 0,
      "type" : 29,
      "exported" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 60,
      "exported" : false
    }, {
      "name" : "resp",
      "package" : 0,
      "type" : 30,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 31,
      "exported" : false
    }, {
      "name" : "perfhup",
      "package" : 0,
      "type" : 19,
      "exported" : false
    }, {
      "name" : "perfready",
      "package" : 0,
      "type" : 19,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}