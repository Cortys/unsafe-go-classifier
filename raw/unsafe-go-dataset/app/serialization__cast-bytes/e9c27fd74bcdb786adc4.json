{
  "usage" : {
    "file" : "sctp.go",
    "label1" : "cast-bytes",
    "label2" : "serialization",
    "line" : "617",
    "module" : "github.com/ishidawataru/sctp",
    "pkg" : "github.com/ishidawataru/sctp",
    "project" : "cilium/cilium",
    "snippet" : "info := (*SndRcvInfo)(unsafe.Pointer(&b[0]))",
    "version" : "v0.0.0-20180213033435-07191f837fed"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 2, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 5, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 614,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 25,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "<",
          "right" : {
            "coerced-to" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 23,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sndRcvInfoSize",
                "variable" : 5
              }
            },
            "type" : "cast"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 616,
      "code" : "if len(b) < int(sndRcvInfoSize) {\n\treturn 0, syscall.EINVAL\n}",
      "entry" : false,
      "use-vars" : [ 2, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 615,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 27,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 615,
      "code" : "return 0, syscall.EINVAL",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 2, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 6, 1 ],
      "decl-vars" : [ 6 ],
      "line-start" : 617,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "info"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 29,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 29,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SndRcvInfo"
              }
            },
            "go-type" : 28,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 28,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 33,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 33,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "go-type" : 34,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 3,
                "index" : {
                  "go-type" : 5,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "b",
                    "variable" : 2
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 617,
      "code" : "info := (*SndRcvInfo)(unsafe.Pointer(&b[0]))",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 1, 2, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 9, 10, 5 ],
      "decl-vars" : [ 9, 10 ],
      "line-start" : 618,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : {
              "go-type" : 23,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sndRcvInfoSize",
                "variable" : 5
              }
            },
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 2
              }
            }
          }, {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "info",
              "variable" : 6
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SCTPWrite"
            },
            "go-type" : 35,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "conn",
                "variable" : 7
              },
              "go-type" : 15,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 618,
      "code" : "n, err := c.conn.SCTPWrite(b[sndRcvInfoSize:], info)",
      "entry" : false,
      "use-vars" : [ 1, 2, 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5, 9, 10 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 619,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 10
            }
          },
          "operator" : "+",
          "right" : {
            "coerced-to" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 23,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sndRcvInfoSize",
                "variable" : 5
              }
            },
            "type" : "cast"
          },
          "type" : "binary"
        }, {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 9
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 619,
      "code" : "return n + int(sndRcvInfoSize), err",
      "entry" : false,
      "use-vars" : [ 10, 5, 9 ]
    } ],
    "code" : "func (c *SCTPSndRcvInfoWrappedConn) Write(b []byte) (int, error) {\n\tif len(b) < int(sndRcvInfoSize) {\n\t\treturn 0, syscall.EINVAL\n\t}\n\tinfo := (*SndRcvInfo)(unsafe.Pointer(&b[0]))\n\tn, err := c.conn.SCTPWrite(b[sndRcvInfoSize:], info)\n\treturn n + int(sndRcvInfoSize), err\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Write",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "SCTPWrite",
      "package" : 0,
      "type" : 37,
      "exported" : true
    } ],
    "line-end" : 620,
    "line-start" : 613,
    "names" : [ "Write" ],
    "package" : 0,
    "packages" : [ {
      "name" : "sctp",
      "path" : "github.com/ishidawataru/sctp"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 2 ],
    "receivers" : [ 1 ],
    "results" : [ 3, 4 ],
    "type" : "function",
    "types" : [ {
      "name" : "(*github.com/ishidawataru/sctp.SCTPSndRcvInfoWrappedConn) func(b []byte) (int, error)",
      "params" : 1,
      "recv" : 1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 2
      } ],
      "name" : "(b []byte)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 2
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(int, error)",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 8
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 7
    }, {
      "name" : "(error) func() string",
      "params" : 9,
      "recv" : 0,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "*github.com/ishidawataru/sctp.SCTPSndRcvInfoWrappedConn",
      "type" : "Pointer",
      "underlying" : 12
    }, {
      "local-name" : "SCTPSndRcvInfoWrappedConn",
      "name" : "github.com/ishidawataru/sctp.SCTPSndRcvInfoWrappedConn",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "conn",
        "type" : 15
      } ],
      "name" : "struct{conn *github.com/ishidawataru/sctp.SCTPConn}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "elem" : 16,
      "name" : "*github.com/ishidawataru/sctp.SCTPConn",
      "type" : "Pointer",
      "underlying" : 15
    }, {
      "local-name" : "SCTPConn",
      "name" : "github.com/ishidawataru/sctp.SCTPConn",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "_fd",
        "type" : 18
      }, {
        "name" : "notificationHandler",
        "type" : 19
      } ],
      "name" : "struct{_fd int32; notificationHandler github.com/ishidawataru/sctp.NotificationHandler}",
      "type" : "Struct",
      "underlying" : 17
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "local-name" : "NotificationHandler",
      "name" : "github.com/ishidawataru/sctp.NotificationHandler",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "name" : "func([]byte) error",
      "params" : 21,
      "recv" : -1,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 20,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "name" : "func([]byte) int",
      "params" : 21,
      "recv" : -1,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 25,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 1,
      "type" : "Named",
      "underlying" : 23
    }, {
      "elem" : 29,
      "name" : "*github.com/ishidawataru/sctp.SndRcvInfo",
      "type" : "Pointer",
      "underlying" : 28
    }, {
      "local-name" : "SndRcvInfo",
      "name" : "github.com/ishidawataru/sctp.SndRcvInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "Stream",
        "type" : 31
      }, {
        "name" : "SSN",
        "type" : 31
      }, {
        "name" : "Flags",
        "type" : 31
      }, {
        "name" : "_",
        "type" : 31
      }, {
        "name" : "PPID",
        "type" : 32
      }, {
        "name" : "Context",
        "type" : 32
      }, {
        "name" : "TTL",
        "type" : 32
      }, {
        "name" : "TSN",
        "type" : 32
      }, {
        "name" : "CumTSN",
        "type" : 32
      }, {
        "name" : "AssocID",
        "type" : 18
      } ],
      "name" : "struct{Stream uint16; SSN uint16; Flags uint16; _ uint16; PPID uint32; Context uint32; TTL uint32; TSN uint32; CumTSN uint32; AssocID int32}",
      "type" : "Struct",
      "underlying" : 30
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 31
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 32
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 33
    }, {
      "elem" : 3,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 34
    }, {
      "name" : "func(b []byte, info *github.com/ishidawataru/sctp.SndRcvInfo) (int, error)",
      "params" : 36,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 2
      }, {
        "name" : "info",
        "type" : 28
      } ],
      "name" : "(b []byte, info *github.com/ishidawataru/sctp.SndRcvInfo)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "name" : "(*github.com/ishidawataru/sctp.SCTPConn) func(b []byte, info *github.com/ishidawataru/sctp.SndRcvInfo) (int, error)",
      "params" : 36,
      "recv" : 8,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sndRcvInfoSize",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "info",
      "package" : 0,
      "type" : 28,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "conn",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}