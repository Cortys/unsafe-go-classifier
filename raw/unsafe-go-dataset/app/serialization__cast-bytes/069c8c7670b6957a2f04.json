{
  "usage" : {
    "file" : "control_rfc3542_unix.go",
    "label1" : "cast-bytes",
    "label2" : "serialization",
    "line" : "87",
    "module" : "golang.org/x/net",
    "pkg" : "golang.org/x/net/ipv6",
    "project" : "kubernetes/kubernetes",
    "snippet" : "mi := (*ipv6Mtuinfo)(unsafe.Pointer(&b[0]))",
    "version" : "v0.0.0-20200324143707-d3edc9973b7e"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2 ],
      "decl-vars" : [ 2 ],
      "line-start" : 87,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mi"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "ipv6Mtuinfo"
              }
            },
            "go-type" : 10,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 8,
                "index" : {
                  "go-type" : 5,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "b",
                    "variable" : 1
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 87,
      "code" : "mi := (*ipv6Mtuinfo)(unsafe.Pointer(&b[0]))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 0, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 88,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Dst",
                "variable" : 3
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "cm",
                  "variable" : 0
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "<",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 90,
      "code" : "if len(cm.Dst) < net.IPv6len {\n\tcm.Dst = make(net.IP, net.IPv6len)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 5 ],
      "in-vars" : [ 0, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 89,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Dst",
            "variable" : 3
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cm",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 6,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "net"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 6,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "IP"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 89,
      "code" : "cm.Dst = make(net.IP, net.IPv6len)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 0, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 91,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Dst",
              "variable" : 3
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cm",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 7,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Addr",
                "variable" : 5
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Addr",
                  "variable" : 4
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 10,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "mi",
                    "variable" : 2
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 91,
      "code" : "copy(cm.Dst, mi.Addr.Addr[:])",
      "entry" : false,
      "use-vars" : [ 0, 2 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 7 ],
      "in-vars" : [ 0, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 92,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "IfIndex",
            "variable" : 6
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cm",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 5,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 5,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Scope_id",
              "variable" : 7
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Addr",
                "variable" : 4
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 10,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "mi",
                  "variable" : 2
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 92,
      "code" : "cm.IfIndex = int(mi.Addr.Scope_id)",
      "entry" : false,
      "use-vars" : [ 2, 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 1 ],
      "in-vars" : [ 0, 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 93,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "MTU",
            "variable" : 8
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cm",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 5,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 5,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Mtu",
              "variable" : 9
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mi",
                "variable" : 2
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 93,
      "code" : "cm.MTU = int(mi.Mtu)",
      "entry" : false,
      "use-vars" : [ 2, 0 ]
    } ],
    "code" : "func parsePathMTU(cm *ControlMessage, b []byte) {\n\tmi := (*ipv6Mtuinfo)(unsafe.Pointer(&b[0]))\n\tif len(cm.Dst) < net.IPv6len {\n\t\tcm.Dst = make(net.IP, net.IPv6len)\n\t}\n\tcopy(cm.Dst, mi.Addr.Addr[:])\n\tcm.IfIndex = int(mi.Addr.Scope_id)\n\tcm.MTU = int(mi.Mtu)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "parsePathMTU",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ],
    "line-end" : 94,
    "line-start" : 86,
    "names" : [ "parsePathMTU" ],
    "package" : 0,
    "packages" : [ {
      "name" : "ipv6",
      "path" : "golang.org/x/net/ipv6"
    }, {
      "name" : "net",
      "path" : "net"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1 ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(cm *golang.org/x/net/ipv6.ControlMessage, b []byte)",
      "params" : 1,
      "recv" : -1,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "cm",
        "type" : 2
      }, {
        "name" : "b",
        "type" : 7
      } ],
      "name" : "(cm *golang.org/x/net/ipv6.ControlMessage, b []byte)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*golang.org/x/net/ipv6.ControlMessage",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "ControlMessage",
      "name" : "golang.org/x/net/ipv6.ControlMessage",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "TrafficClass",
        "type" : 5
      }, {
        "name" : "HopLimit",
        "type" : 5
      }, {
        "name" : "Src",
        "type" : 6
      }, {
        "name" : "Dst",
        "type" : 6
      }, {
        "name" : "IfIndex",
        "type" : 5
      }, {
        "name" : "NextHop",
        "type" : 6
      }, {
        "name" : "MTU",
        "type" : 5
      } ],
      "name" : "struct{TrafficClass int; HopLimit int; Src net.IP; Dst net.IP; IfIndex int; NextHop net.IP; MTU int}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "local-name" : "IP",
      "name" : "net.IP",
      "package" : 1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "elem" : 8,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 7
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "elem" : 11,
      "name" : "*golang.org/x/net/ipv6.ipv6Mtuinfo",
      "type" : "Pointer",
      "underlying" : 10
    }, {
      "local-name" : "ipv6Mtuinfo",
      "name" : "golang.org/x/net/ipv6.ipv6Mtuinfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "Addr",
        "type" : 13
      }, {
        "name" : "Mtu",
        "type" : 16
      } ],
      "name" : "struct{Addr golang.org/x/net/ipv6.sockaddrInet6; Mtu uint32}",
      "type" : "Struct",
      "underlying" : 12
    }, {
      "local-name" : "sockaddrInet6",
      "name" : "golang.org/x/net/ipv6.sockaddrInet6",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 15
      }, {
        "name" : "Port",
        "type" : 15
      }, {
        "name" : "Flowinfo",
        "type" : 16
      }, {
        "name" : "Addr",
        "type" : 17
      }, {
        "name" : "Scope_id",
        "type" : 16
      } ],
      "name" : "struct{Family uint16; Port uint16; Flowinfo uint32; Addr [16]byte; Scope_id uint32}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "elem" : 8,
      "name" : "[16]byte",
      "type" : "Array",
      "underlying" : 17
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 18
    }, {
      "elem" : 8,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 19
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "func([]byte) int",
      "params" : 22,
      "recv" : -1,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "name" : "func(net.IP, []byte) int",
      "params" : 25,
      "recv" : -1,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      }, {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(net.IP, []byte)",
      "type" : "Tuple",
      "underlying" : 25
    } ],
    "variables" : [ {
      "name" : "cm",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mi",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Dst",
      "package" : 0,
      "type" : 6,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 13,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "IfIndex",
      "package" : 0,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Scope_id",
      "package" : 0,
      "type" : 16,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "MTU",
      "package" : 0,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Mtu",
      "package" : 0,
      "type" : 16,
      "exported" : true,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}