{
  "usage" : {
    "file" : "sockopt_posix.go",
    "label1" : "cast-bytes",
    "label2" : "serialization",
    "line" : "47",
    "module" : "golang.org/x/net",
    "pkg" : "golang.org/x/net/ipv6",
    "project" : "elastic/beats",
    "snippet" : "b := (*[sizeofICMPv6Filter]byte)(unsafe.Pointer(f))[:sizeofICMPv6Filter]",
    "version" : "v0.0.0-20200202094626-16171245cfb2"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 5, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 5, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 7, 3, 4 ],
      "decl-vars" : [ 7 ],
      "line-start" : 47,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "b"
          }
        } ],
        "right" : [ {
          "go-type" : 37,
          "type" : "slice",
          "three" : false,
          "high" : {
            "go-type" : 36,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "32"
            }
          },
          "max" : null,
          "kind" : "expression",
          "low" : null,
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 38,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 38,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "byte"
                  }
                },
                "go-type" : 40,
                "kind" : "type",
                "length" : {
                  "go-type" : 41,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "32"
                  }
                },
                "type" : "array"
              },
              "go-type" : 39,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 39,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 42,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 3,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 42,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 42,
              "kind" : "expression",
              "target" : {
                "go-type" : 24,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 5
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 47,
      "code" : "b := (*[sizeofICMPv6Filter]byte)(unsafe.Pointer(f))[:sizeofICMPv6Filter]",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 7, 3, 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 48,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 4
            }
          }, {
            "go-type" : 37,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Set"
            },
            "go-type" : 43,
            "kind" : "expression",
            "target" : {
              "go-type" : 31,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "so",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 48,
      "code" : "return so.Set(c, b)",
      "entry" : false,
      "use-vars" : [ 3, 4, 7 ]
    } ],
    "code" : "func (so *sockOpt) setICMPFilter(c *socket.Conn, f *ICMPFilter) error {\n\tb := (*[sizeofICMPv6Filter]byte)(unsafe.Pointer(f))[:sizeofICMPv6Filter]\n\treturn so.Set(c, b)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "setICMPFilter",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Set",
      "package" : 1,
      "type" : 43,
      "exported" : true
    } ],
    "line-end" : 49,
    "line-start" : 46,
    "names" : [ "setICMPFilter" ],
    "package" : 0,
    "packages" : [ {
      "name" : "ipv6",
      "path" : "golang.org/x/net/ipv6"
    }, {
      "name" : "socket",
      "path" : "golang.org/x/net/internal/socket"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 4, 5 ],
    "receivers" : [ 3 ],
    "results" : [ 6 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(c *golang.org/x/net/internal/socket.Conn, f *golang.org/x/net/ipv6.ICMPFilter) error",
      "params" : 1,
      "recv" : 3,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "c",
        "type" : 2
      }, {
        "name" : "f",
        "type" : 24
      } ],
      "name" : "(c *golang.org/x/net/internal/socket.Conn, f *golang.org/x/net/ipv6.ICMPFilter)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*golang.org/x/net/internal/socket.Conn",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "Conn",
      "name" : "golang.org/x/net/internal/socket.Conn",
      "package" : 1,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "network",
        "type" : 5
      }, {
        "name" : "c",
        "type" : 6
      } ],
      "name" : "struct{network string; c syscall.RawConn}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "local-name" : "RawConn",
      "name" : "syscall.RawConn",
      "package" : 2,
      "type" : "Named",
      "underlying" : 7
    }, {
      "methods" : [ {
        "name" : "Control",
        "type" : 8
      }, {
        "name" : "Read",
        "type" : 19
      }, {
        "name" : "Write",
        "type" : 19
      } ],
      "name" : "interface{Control(f func(fd uintptr)) error; Read(f func(fd uintptr) (done bool)) error; Write(f func(fd uintptr) (done bool)) error}",
      "type" : "Interface",
      "underlying" : 7
    }, {
      "name" : "func(f func(fd uintptr)) error",
      "params" : 9,
      "recv" : 1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 10
      } ],
      "name" : "(f func(fd uintptr))",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "name" : "func(fd uintptr)",
      "params" : 11,
      "recv" : -1,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 10,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 12
      } ],
      "name" : "(fd uintptr)",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 16
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 17
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 16
    }, {
      "name" : "func() string",
      "params" : 13,
      "recv" : 0,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 17,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "name" : "func(f func(fd uintptr) (done bool)) error",
      "params" : 20,
      "recv" : 2,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 19,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 21
      } ],
      "name" : "(f func(fd uintptr) (done bool))",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "name" : "func(fd uintptr) (done bool)",
      "params" : 11,
      "recv" : -1,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "done",
        "type" : 23
      } ],
      "name" : "(done bool)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "elem" : 25,
      "name" : "*golang.org/x/net/ipv6.ICMPFilter",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "local-name" : "ICMPFilter",
      "name" : "golang.org/x/net/ipv6.ICMPFilter",
      "package" : 0,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "icmpv6Filter",
        "type" : 27
      } ],
      "name" : "struct{golang.org/x/net/ipv6.icmpv6Filter}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "local-name" : "icmpv6Filter",
      "name" : "golang.org/x/net/ipv6.icmpv6Filter",
      "package" : 0,
      "type" : "Named",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 29
      } ],
      "name" : "struct{Data [8]uint32}",
      "type" : "Struct",
      "underlying" : 28
    }, {
      "elem" : 30,
      "name" : "[8]uint32",
      "type" : "Array",
      "underlying" : 29
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 30
    }, {
      "elem" : 32,
      "name" : "*golang.org/x/net/ipv6.sockOpt",
      "type" : "Pointer",
      "underlying" : 31
    }, {
      "local-name" : "sockOpt",
      "name" : "golang.org/x/net/ipv6.sockOpt",
      "package" : 0,
      "type" : "Named",
      "underlying" : 33
    }, {
      "fields" : [ {
        "name" : "Option",
        "type" : 34
      }, {
        "name" : "typ",
        "type" : 36
      } ],
      "name" : "struct{golang.org/x/net/internal/socket.Option; typ int}",
      "type" : "Struct",
      "underlying" : 33
    }, {
      "local-name" : "Option",
      "name" : "golang.org/x/net/internal/socket.Option",
      "package" : 1,
      "type" : "Named",
      "underlying" : 35
    }, {
      "fields" : [ {
        "name" : "Level",
        "type" : 36
      }, {
        "name" : "Name",
        "type" : 36
      }, {
        "name" : "Len",
        "type" : 36
      } ],
      "name" : "struct{Level int; Name int; Len int}",
      "type" : "Struct",
      "underlying" : 35
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 36
    }, {
      "elem" : 38,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 37
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 38
    }, {
      "elem" : 40,
      "name" : "*[32]byte",
      "type" : "Pointer",
      "underlying" : 39
    }, {
      "elem" : 38,
      "name" : "[32]byte",
      "type" : "Array",
      "underlying" : 40
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 41
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 3,
      "type" : "Basic",
      "underlying" : 42
    }, {
      "name" : "func(c *golang.org/x/net/internal/socket.Conn, b []byte) error",
      "params" : 44,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "c",
        "type" : 2
      }, {
        "name" : "b",
        "type" : 37
      } ],
      "name" : "(c *golang.org/x/net/internal/socket.Conn, b []byte)",
      "type" : "Tuple",
      "underlying" : 44
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "so",
      "package" : 0,
      "type" : 31,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 37,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}