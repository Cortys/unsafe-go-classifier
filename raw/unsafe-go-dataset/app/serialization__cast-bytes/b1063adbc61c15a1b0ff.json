{
  "usage" : {
    "file" : "tc_linux.go",
    "label1" : "cast-bytes",
    "label2" : "serialization",
    "line" : "558",
    "module" : "github.com/vishvananda/netlink",
    "pkg" : "github.com/vishvananda/netlink/nl",
    "project" : "weaveworks/scope",
    "snippet" : "copy((*(*[SizeofTcU32Sel]byte)(unsafe.Pointer(x)))[:], b)",
    "version" : "v1.0.1-0.20190913165827-36d367fd76f9"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ 2 ],
      "line-start" : 557,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "x"
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 6,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 6,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "TcU32Sel"
              }
            },
            "go-type" : 6,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ ]
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 557,
      "code" : "x := &TcU32Sel{}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 2, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 558,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "go-type" : 20,
              "kind" : "expression",
              "target" : {
                "go-type" : 20,
                "kind" : "expression",
                "target" : {
                  "coerced-to" : {
                    "contained" : {
                      "element" : {
                        "go-type" : 3,
                        "kind" : "type",
                        "type" : "identifier",
                        "value" : {
                          "go-type" : 3,
                          "ident-kind" : "TypeName",
                          "kind" : "ident",
                          "value" : "byte"
                        }
                      },
                      "go-type" : 20,
                      "kind" : "type",
                      "length" : {
                        "go-type" : 22,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "16"
                        }
                      },
                      "type" : "array"
                    },
                    "go-type" : 21,
                    "kind" : "type",
                    "type" : "pointer"
                  },
                  "go-type" : 21,
                  "kind" : "expression",
                  "target" : {
                    "coerced-to" : {
                      "go-type" : 23,
                      "kind" : "type",
                      "qualifier" : {
                        "ident-kind" : "PkgName",
                        "kind" : "ident",
                        "package" : 1,
                        "value" : "unsafe"
                      },
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 23,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "Pointer"
                      }
                    },
                    "go-type" : 23,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 5,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "x",
                        "variable" : 2
                      }
                    },
                    "type" : "cast"
                  },
                  "type" : "cast"
                },
                "type" : "star"
              },
              "type" : "paren"
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 16,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 558,
      "code" : "copy((*(*[SizeofTcU32Sel]byte)(unsafe.Pointer(x)))[:], b)",
      "entry" : false,
      "use-vars" : [ 0, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 0, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 2 ],
      "decl-vars" : [ 3 ],
      "line-start" : 559,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "next"
          }
        } ],
        "right" : [ {
          "go-type" : 16,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "16"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 559,
      "code" : "next := SizeofTcU32Sel",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 3, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 3 ],
      "decl-vars" : [ 4 ],
      "line-start" : 560,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 8,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 8,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint8"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "i"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 560,
      "code" : "var i uint8",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 11 ],
      "in-vars" : [ 3, 2, 0, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 0, 4 ],
      "decl-vars" : [ ],
      "line-start" : 561,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 4
            }
          },
          "operator" : "<",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Nkeys",
              "variable" : 5
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "x",
                "variable" : 2
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 564,
      "code" : "for i = 0; i < x.Nkeys; i++ {\n\tx.Keys = append(x.Keys, *DeserializeTcU32Key(b[next:]))\n\tnext += SizeofTcU32Key\n}",
      "entry" : false,
      "use-vars" : [ 4, 2 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 6 ],
      "in-vars" : [ 3, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 0, 4 ],
      "decl-vars" : [ ],
      "line-start" : 561,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 4
          }
        } ],
        "right" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 561,
      "code" : "i = 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 6 ],
      "in-vars" : [ 2, 0, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 4, 3, 2 ],
      "decl-vars" : [ ],
      "line-start" : 561,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 8,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 4
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 561,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 10 ],
      "in-vars" : [ 3, 2, 0, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 0, 4 ],
      "decl-vars" : [ ],
      "line-start" : 562,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Keys",
            "variable" : 6
          },
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Keys",
              "variable" : 6
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "x",
                "variable" : 2
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "go-type" : 2,
                "type" : "slice",
                "three" : false,
                "high" : null,
                "max" : null,
                "kind" : "expression",
                "low" : {
                  "go-type" : 16,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "next",
                    "variable" : 3
                  }
                },
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "b",
                    "variable" : 0
                  }
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 29,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "function" : 1,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "DeserializeTcU32Key"
                }
              },
              "go-type" : 28,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "star"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 12,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 562,
      "code" : "x.Keys = append(x.Keys, *DeserializeTcU32Key(b[next:]))",
      "entry" : false,
      "use-vars" : [ 0, 3, 2 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 8 ],
      "in-vars" : [ 2, 0, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 0, 4 ],
      "decl-vars" : [ ],
      "line-start" : 563,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 16,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 3
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 16,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "16"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 563,
      "code" : "next += SizeofTcU32Key",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 565,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "x",
            "variable" : 2
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 565,
      "code" : "return x",
      "entry" : false,
      "use-vars" : [ 2 ]
    } ],
    "code" : "func DeserializeTcU32Sel(b []byte) *TcU32Sel {\n\tx := &TcU32Sel{}\n\tcopy((*(*[SizeofTcU32Sel]byte)(unsafe.Pointer(x)))[:], b)\n\tnext := SizeofTcU32Sel\n\tvar i uint8\n\tfor i = 0; i < x.Nkeys; i++ {\n\t\tx.Keys = append(x.Keys, *DeserializeTcU32Key(b[next:]))\n\t\tnext += SizeofTcU32Key\n\t}\n\treturn x\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "DeserializeTcU32Sel",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "DeserializeTcU32Key",
      "package" : 0,
      "type" : 29,
      "exported" : true
    } ],
    "line-end" : 566,
    "line-start" : 556,
    "names" : [ "DeserializeTcU32Sel" ],
    "package" : 0,
    "packages" : [ {
      "name" : "nl",
      "path" : "github.com/vishvananda/netlink/nl"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0 ],
    "receivers" : [ ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(b []byte) *github.com/vishvananda/netlink/nl.TcU32Sel",
      "params" : 1,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 2
      } ],
      "name" : "(b []byte)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 2
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(*github.com/vishvananda/netlink/nl.TcU32Sel)",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "*github.com/vishvananda/netlink/nl.TcU32Sel",
      "type" : "Pointer",
      "underlying" : 5
    }, {
      "local-name" : "TcU32Sel",
      "name" : "github.com/vishvananda/netlink/nl.TcU32Sel",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "Flags",
        "type" : 8
      }, {
        "name" : "Offshift",
        "type" : 8
      }, {
        "name" : "Nkeys",
        "type" : 8
      }, {
        "name" : "Pad",
        "type" : 8
      }, {
        "name" : "Offmask",
        "type" : 9
      }, {
        "name" : "Off",
        "type" : 9
      }, {
        "name" : "Offoff",
        "type" : 10
      }, {
        "name" : "Hoff",
        "type" : 10
      }, {
        "name" : "Hmask",
        "type" : 11
      }, {
        "name" : "Keys",
        "type" : 12
      } ],
      "name" : "struct{Flags uint8; Offshift uint8; Nkeys uint8; Pad uint8; Offmask uint16; Off uint16; Offoff int16; Hoff int16; Hmask uint32; Keys []github.com/vishvananda/netlink/nl.TcU32Key}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "int16",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "[]github.com/vishvananda/netlink/nl.TcU32Key",
      "type" : "Slice",
      "underlying" : 12
    }, {
      "local-name" : "TcU32Key",
      "name" : "github.com/vishvananda/netlink/nl.TcU32Key",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "Mask",
        "type" : 11
      }, {
        "name" : "Val",
        "type" : 11
      }, {
        "name" : "Off",
        "type" : 15
      }, {
        "name" : "OffMask",
        "type" : 15
      } ],
      "name" : "struct{Mask uint32; Val uint32; Off int32; OffMask int32}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "name" : "func([]byte, []byte) int",
      "params" : 18,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 17,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 2
      } ],
      "name" : "([]byte, []byte)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "elem" : 3,
      "name" : "[16]byte",
      "type" : "Array",
      "underlying" : 20
    }, {
      "elem" : 20,
      "name" : "*[16]byte",
      "type" : "Pointer",
      "underlying" : 21
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 23
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "name" : "func([]github.com/vishvananda/netlink/nl.TcU32Key, ...github.com/vishvananda/netlink/nl.TcU32Key) []github.com/vishvananda/netlink/nl.TcU32Key",
      "params" : 26,
      "recv" : -1,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 25,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 12
      }, {
        "name" : "",
        "type" : 12
      } ],
      "name" : "([]github.com/vishvananda/netlink/nl.TcU32Key, []github.com/vishvananda/netlink/nl.TcU32Key)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 12
      } ],
      "name" : "([]github.com/vishvananda/netlink/nl.TcU32Key)",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "elem" : 13,
      "name" : "*github.com/vishvananda/netlink/nl.TcU32Key",
      "type" : "Pointer",
      "underlying" : 28
    }, {
      "name" : "func(b []byte) *github.com/vishvananda/netlink/nl.TcU32Key",
      "params" : 1,
      "recv" : -1,
      "results" : 30,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 28
      } ],
      "name" : "(*github.com/vishvananda/netlink/nl.TcU32Key)",
      "type" : "Tuple",
      "underlying" : 30
    } ],
    "variables" : [ {
      "name" : "b",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "x",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "next",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Nkeys",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Keys",
      "package" : 0,
      "type" : 12,
      "exported" : true,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}