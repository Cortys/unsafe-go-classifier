{
  "usage" : {
    "file" : "segment.go",
    "label1" : "cast-bytes",
    "label2" : "efficiency",
    "line" : "274",
    "module" : "github.com/coocood/freecache",
    "pkg" : "github.com/coocood/freecache",
    "project" : "weaveworks/scope",
    "snippet" : "entryHdr := (*entryHdr)(unsafe.Pointer(&entryHdrBuf[0]))",
    "version" : "v0.0.0-20150903053832-a27035d5537f"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 3, 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 1, 0, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 2, 3, 1 ],
      "decl-vars" : [ 5 ],
      "line-start" : 266,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "slotOff"
          }
        } ],
        "right" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 15,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 15,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int32"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "slotId",
                "variable" : 1
              }
            },
            "type" : "cast"
          },
          "operator" : "*",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "slotCap",
              "variable" : 4
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "go-type" : 6,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "seg",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 266,
      "code" : "slotOff := int32(slotId) * seg.slotCap",
      "entry" : false,
      "use-vars" : [ 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 5, 0, 2, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 1, 0, 8 ],
      "decl-vars" : [ 8 ],
      "line-start" : 267,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "slot"
          }
        } ],
        "right" : [ {
          "go-type" : 16,
          "type" : "slice",
          "three" : true,
          "high" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "go-type" : 15,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "slotOff",
                "variable" : 5
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 15,
              "index" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "slotId",
                  "variable" : 1
                }
              },
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "slotLens",
                  "variable" : 7
                },
                "go-type" : 14,
                "kind" : "expression",
                "target" : {
                  "go-type" : 6,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "seg",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "index"
            },
            "type" : "binary"
          },
          "max" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "go-type" : 15,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "slotOff",
                "variable" : 5
              }
            },
            "operator" : "+",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "slotCap",
                "variable" : 4
              },
              "go-type" : 15,
              "kind" : "expression",
              "target" : {
                "go-type" : 6,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "seg",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "kind" : "expression",
          "low" : {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "slotOff",
              "variable" : 5
            }
          },
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "slotsData",
              "variable" : 6
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "go-type" : 6,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "seg",
                "variable" : 0
              }
            },
            "type" : "selector"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 267,
      "code" : "slot := seg.slotsData[slotOff : slotOff+seg.slotLens[slotId] : slotOff+seg.slotCap]",
      "entry" : false,
      "use-vars" : [ 5, 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 0, 8, 2, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 10, 11, 0, 8, 3, 1 ],
      "decl-vars" : [ 10, 11 ],
      "line-start" : 268,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "match"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "slot",
              "variable" : 8
            }
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hash16",
              "variable" : 2
            }
          }, {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "offset",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "lookupByOff"
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 6,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "seg",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 268,
      "code" : "idx, match := seg.lookupByOff(slot, hash16, offset)",
      "entry" : false,
      "use-vars" : [ 3, 0, 8, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 7 ],
      "in-vars" : [ 8, 3, 1, 10, 11, 0 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 11, 0, 8 ],
      "decl-vars" : [ ],
      "line-start" : 269,
      "ast" : {
        "condition" : {
          "go-type" : 21,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "match",
              "variable" : 10
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 271,
      "code" : "if !match {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 270,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 270,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 11, 0, 8, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 3, 1, 12, 11 ],
      "decl-vars" : [ 12 ],
      "line-start" : 272,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 12,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 12,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 25,
              "kind" : "type",
              "length" : {
                "go-type" : 26,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "24"
                }
              },
              "type" : "array"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "entryHdrBuf"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 272,
      "code" : "var entryHdrBuf [ENTRY_HDR_SIZE]byte",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 1, 12, 11, 0, 8, 3 ],
      "exit" : false,
      "out-vars" : [ 8, 3, 1, 12, 11, 0 ],
      "decl-vars" : [ ],
      "line-start" : 273,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 11,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "go-type" : 25,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "entryHdrBuf",
                "variable" : 12
              }
            }
          }, {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "offset",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ReadAt"
            },
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rb",
                "variable" : 14
              },
              "go-type" : 9,
              "kind" : "expression",
              "target" : {
                "go-type" : 6,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "seg",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 27,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 273,
      "code" : "seg.rb.ReadAt(entryHdrBuf[:], offset)",
      "entry" : false,
      "use-vars" : [ 12, 3, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 11, 0, 8, 3, 1, 12 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 3, 1, 12, 16, 11 ],
      "decl-vars" : [ 16 ],
      "line-start" : 274,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "entryHdr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 38,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 38,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "entryHdr"
              }
            },
            "go-type" : 37,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 37,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 40,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 40,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 40,
            "kind" : "expression",
            "target" : {
              "go-type" : 41,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 12,
                "index" : {
                  "go-type" : 13,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 25,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "entryHdrBuf",
                    "variable" : 12
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 274,
      "code" : "entryHdr := (*entryHdr)(unsafe.Pointer(&entryHdrBuf[0]))",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 11 ],
      "in-vars" : [ 11, 0, 8, 3, 1, 12, 16 ],
      "exit" : false,
      "out-vars" : [ 12, 11, 0, 8, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 275,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "deleted",
            "variable" : 17
          },
          "go-type" : 21,
          "kind" : "expression",
          "target" : {
            "go-type" : 37,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "entryHdr",
              "variable" : 16
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 21,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 275,
      "code" : "entryHdr.deleted = true",
      "entry" : false,
      "use-vars" : [ 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 1, 12, 11, 0, 8, 3 ],
      "exit" : false,
      "out-vars" : [ 11, 0, 8, 1 ],
      "decl-vars" : [ ],
      "line-start" : 276,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 11,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "go-type" : 25,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "entryHdrBuf",
                "variable" : 12
              }
            }
          }, {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "offset",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "WriteAt"
            },
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rb",
                "variable" : 14
              },
              "go-type" : 9,
              "kind" : "expression",
              "target" : {
                "go-type" : 6,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "seg",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 27,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 276,
      "code" : "seg.rb.WriteAt(entryHdrBuf[:], offset)",
      "entry" : false,
      "use-vars" : [ 12, 3, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 11, 0, 8, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 277,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 16,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 11
              }
            },
            "target" : {
              "go-type" : 16,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "slot",
                "variable" : 8
              }
            }
          }, {
            "go-type" : 16,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : {
              "go-type" : 13,
              "kind" : "expression",
              "left" : {
                "go-type" : 13,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "idx",
                  "variable" : 11
                }
              },
              "operator" : "+",
              "right" : {
                "go-type" : 13,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "type" : "binary"
            },
            "target" : {
              "go-type" : 16,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "slot",
                "variable" : 8
              }
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 42,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 277,
      "code" : "copy(slot[idx:], slot[idx+1:])",
      "entry" : false,
      "use-vars" : [ 8, 11 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 14 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 278,
      "ast" : {
        "kind" : "statement",
        "operation" : "--",
        "target" : {
          "go-type" : 15,
          "index" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "slotId",
              "variable" : 1
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "slotLens",
              "variable" : 7
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 6,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "seg",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 278,
      "code" : "seg.slotLens[slotId]--",
      "entry" : false,
      "use-vars" : [ 1, 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 279,
      "ast" : {
        "kind" : "statement",
        "operation" : "--",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "entryCount",
            "variable" : 18
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "seg",
              "variable" : 0
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 279,
      "code" : "seg.entryCount--",
      "entry" : false,
      "use-vars" : [ 0 ]
    } ],
    "code" : "func (seg *segment) delEntryPtr(slotId uint8, hash16 uint16, offset int64) {\n\tslotOff := int32(slotId) * seg.slotCap\n\tslot := seg.slotsData[slotOff : slotOff+seg.slotLens[slotId] : slotOff+seg.slotCap]\n\tidx, match := seg.lookupByOff(slot, hash16, offset)\n\tif !match {\n\t\treturn\n\t}\n\tvar entryHdrBuf [ENTRY_HDR_SIZE]byte\n\tseg.rb.ReadAt(entryHdrBuf[:], offset)\n\tentryHdr := (*entryHdr)(unsafe.Pointer(&entryHdrBuf[0]))\n\tentryHdr.deleted = true\n\tseg.rb.WriteAt(entryHdrBuf[:], offset)\n\tcopy(slot[idx:], slot[idx+1:])\n\tseg.slotLens[slotId]--\n\tseg.entryCount--\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "delEntryPtr",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "lookupByOff",
      "package" : 0,
      "type" : 24,
      "exported" : false
    }, {
      "name" : "ReadAt",
      "package" : 0,
      "type" : 35,
      "exported" : true
    }, {
      "name" : "WriteAt",
      "package" : 0,
      "type" : 35,
      "exported" : true
    } ],
    "line-end" : 280,
    "line-start" : 265,
    "names" : [ "delEntryPtr" ],
    "package" : 0,
    "packages" : [ {
      "name" : "freecache",
      "path" : "github.com/coocood/freecache"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 1, 2, 3 ],
    "receivers" : [ 0 ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "(*github.com/coocood/freecache.segment) func(slotId uint8, hash16 uint16, offset int64)",
      "params" : 1,
      "recv" : 0,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "slotId",
        "type" : 2
      }, {
        "name" : "hash16",
        "type" : 3
      }, {
        "name" : "offset",
        "type" : 4
      } ],
      "name" : "(slotId uint8, hash16 uint16, offset int64)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 5
    }, {
      "elem" : 7,
      "name" : "*github.com/coocood/freecache.segment",
      "type" : "Pointer",
      "underlying" : 6
    }, {
      "local-name" : "segment",
      "name" : "github.com/coocood/freecache.segment",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "rb",
        "type" : 9
      }, {
        "name" : "segId",
        "type" : 13
      }, {
        "name" : "entryCount",
        "type" : 4
      }, {
        "name" : "totalCount",
        "type" : 4
      }, {
        "name" : "totalTime",
        "type" : 4
      }, {
        "name" : "totalEvacuate",
        "type" : 4
      }, {
        "name" : "overwrites",
        "type" : 4
      }, {
        "name" : "vacuumLen",
        "type" : 4
      }, {
        "name" : "slotLens",
        "type" : 14
      }, {
        "name" : "slotCap",
        "type" : 15
      }, {
        "name" : "slotsData",
        "type" : 16
      } ],
      "name" : "struct{rb github.com/coocood/freecache.RingBuf; segId int; entryCount int64; totalCount int64; totalTime int64; totalEvacuate int64; overwrites int64; vacuumLen int64; slotLens [256]int32; slotCap int32; slotsData []github.com/coocood/freecache.entryPtr}",
      "type" : "Struct",
      "underlying" : 8
    }, {
      "local-name" : "RingBuf",
      "name" : "github.com/coocood/freecache.RingBuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "fields" : [ {
        "name" : "begin",
        "type" : 4
      }, {
        "name" : "end",
        "type" : 4
      }, {
        "name" : "data",
        "type" : 11
      }, {
        "name" : "index",
        "type" : 13
      } ],
      "name" : "struct{begin int64; end int64; data []byte; index int}",
      "type" : "Struct",
      "underlying" : 10
    }, {
      "elem" : 12,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 11
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "[256]int32",
      "type" : "Array",
      "underlying" : 14
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "[]github.com/coocood/freecache.entryPtr",
      "type" : "Slice",
      "underlying" : 16
    }, {
      "local-name" : "entryPtr",
      "name" : "github.com/coocood/freecache.entryPtr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 18
    }, {
      "fields" : [ {
        "name" : "offset",
        "type" : 4
      }, {
        "name" : "hash16",
        "type" : 3
      }, {
        "name" : "keyLen",
        "type" : 3
      }, {
        "name" : "reserved",
        "type" : 19
      } ],
      "name" : "struct{offset int64; hash16 uint16; keyLen uint16; reserved uint32}",
      "type" : "Struct",
      "underlying" : 18
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "idx",
        "type" : 13
      }, {
        "name" : "match",
        "type" : 21
      } ],
      "name" : "(idx int, match bool)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "name" : "func(slot []github.com/coocood/freecache.entryPtr, hash16 uint16, offset int64) (idx int, match bool)",
      "params" : 23,
      "recv" : -1,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "slot",
        "type" : 16
      }, {
        "name" : "hash16",
        "type" : 3
      }, {
        "name" : "offset",
        "type" : 4
      } ],
      "name" : "(slot []github.com/coocood/freecache.entryPtr, hash16 uint16, offset int64)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "name" : "(*github.com/coocood/freecache.segment) func(slot []github.com/coocood/freecache.entryPtr, hash16 uint16, offset int64) (idx int, match bool)",
      "params" : 23,
      "recv" : 9,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "elem" : 12,
      "name" : "[24]byte",
      "type" : "Array",
      "underlying" : 25
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 13
      }, {
        "name" : "err",
        "type" : 28
      } ],
      "name" : "(n int, err error)",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 29
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 30
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 29
    }, {
      "name" : "(error) func() string",
      "params" : 5,
      "recv" : 13,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 32
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 32
    }, {
      "name" : "func(p []byte, off int64) (n int, err error)",
      "params" : 34,
      "recv" : -1,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 11
      }, {
        "name" : "off",
        "type" : 4
      } ],
      "name" : "(p []byte, off int64)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "name" : "(*github.com/coocood/freecache.RingBuf) func(p []byte, off int64) (n int, err error)",
      "params" : 34,
      "recv" : 15,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "elem" : 9,
      "name" : "*github.com/coocood/freecache.RingBuf",
      "type" : "Pointer",
      "underlying" : 36
    }, {
      "elem" : 38,
      "name" : "*github.com/coocood/freecache.entryHdr",
      "type" : "Pointer",
      "underlying" : 37
    }, {
      "local-name" : "entryHdr",
      "name" : "github.com/coocood/freecache.entryHdr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "accessTime",
        "type" : 19
      }, {
        "name" : "expireAt",
        "type" : 19
      }, {
        "name" : "keyLen",
        "type" : 3
      }, {
        "name" : "hash16",
        "type" : 3
      }, {
        "name" : "valLen",
        "type" : 19
      }, {
        "name" : "valCap",
        "type" : 19
      }, {
        "name" : "deleted",
        "type" : 21
      }, {
        "name" : "slotId",
        "type" : 2
      }, {
        "name" : "reserved",
        "type" : 3
      } ],
      "name" : "struct{accessTime uint32; expireAt uint32; keyLen uint16; hash16 uint16; valLen uint32; valCap uint32; deleted bool; slotId uint8; reserved uint16}",
      "type" : "Struct",
      "underlying" : 39
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 40
    }, {
      "elem" : 12,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 41
    }, {
      "name" : "func([]github.com/coocood/freecache.entryPtr, []github.com/coocood/freecache.entryPtr) int",
      "params" : 43,
      "recv" : -1,
      "results" : 44,
      "type" : "Signature",
      "underlying" : 42,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      }, {
        "name" : "",
        "type" : 16
      } ],
      "name" : "([]github.com/coocood/freecache.entryPtr, []github.com/coocood/freecache.entryPtr)",
      "type" : "Tuple",
      "underlying" : 43
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 44
    } ],
    "variables" : [ {
      "name" : "seg",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "slotId",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "hash16",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "offset",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "slotCap",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "slotOff",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "slotsData",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "slotLens",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "slot",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "seg",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "match",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "entryHdrBuf",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : -1,
      "type" : 28,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rb",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "rb",
      "package" : 0,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "entryHdr",
      "package" : 0,
      "type" : 37,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "deleted",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "entryCount",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}