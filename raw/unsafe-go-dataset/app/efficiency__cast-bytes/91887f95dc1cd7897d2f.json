{
  "usage" : {
    "file" : "fastwalk_dirent_namlen_linux.go",
    "label1" : "cast-bytes",
    "label2" : "efficiency",
    "line" : "18",
    "module" : "golang.org/x/tools",
    "pkg" : "golang.org/x/tools/internal/fastwalk",
    "project" : "rancher/rancher",
    "snippet" : "nameBuf := (*[unsafe.Sizeof(dirent.Name)]byte)(unsafe.Pointer(&dirent.Name[0]))",
    "version" : "v0.0.0-20191115202509-3a792d9c32b2"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 17,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : null,
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "fixedHdr"
            } ],
            "type" : "const",
            "values" : [ {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "19"
              }
            } ]
          } ],
          "type" : "const"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 17,
      "code" : "const fixedHdr = uint16(unsafe.Offsetof(syscall.Dirent{}.Name))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ 3 ],
      "line-start" : 18,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "nameBuf"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "element" : {
                "go-type" : 12,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 12,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 15,
              "kind" : "type",
              "length" : {
                "go-type" : 16,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "256"
                }
              },
              "type" : "array"
            },
            "go-type" : 14,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 17,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 18,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 10,
                "index" : {
                  "go-type" : 19,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Name",
                    "variable" : 2
                  },
                  "go-type" : 9,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "dirent",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 18,
      "code" : "nameBuf := (*[unsafe.Sizeof(dirent.Name)]byte)(unsafe.Pointer(&dirent.Name[0]))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 3, 0 ],
      "decl-vars" : [ 3 ],
      "line-start" : 19,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : null,
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "nameBufLen"
            } ],
            "type" : "const",
            "values" : [ {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "256"
              }
            } ]
          } ],
          "type" : "const"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 19,
      "code" : "const nameBufLen = uint16(len(nameBuf))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 3, 0 ],
      "exit" : false,
      "out-vars" : [ 3, 5 ],
      "decl-vars" : [ 5 ],
      "line-start" : 20,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "limit"
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Reclen",
              "variable" : 4
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dirent",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "-",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "19"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 20,
      "code" : "limit := dirent.Reclen - fixedHdr",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 8 ],
      "in-vars" : [ 3, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 21,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "limit",
              "variable" : 5
            }
          },
          "operator" : ">",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "256"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 23,
      "code" : "if limit > nameBufLen {\n\tlimit = nameBufLen\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 8 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 3, 5 ],
      "decl-vars" : [ ],
      "line-start" : 22,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "limit",
            "variable" : 5
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "256"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 22,
      "code" : "limit = nameBufLen",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 3, 5 ],
      "exit" : false,
      "out-vars" : [ 6 ],
      "decl-vars" : [ 6 ],
      "line-start" : 24,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "nameLen"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "type" : "slice",
            "three" : false,
            "high" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "limit",
                "variable" : 5
              }
            },
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nameBuf",
                "variable" : 3
              }
            }
          }, {
            "go-type" : 12,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 21,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "bytes"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "IndexByte"
            }
          },
          "go-type" : 19,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 24,
      "code" : "nameLen := bytes.IndexByte(nameBuf[:limit], 0)",
      "entry" : false,
      "use-vars" : [ 3, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 11 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ 6 ],
      "decl-vars" : [ ],
      "line-start" : 25,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nameLen",
              "variable" : 6
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 19,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 27,
      "code" : "if nameLen < 0 {\n\tpanic(\"failed to find terminating 0 byte in dirent\")\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ 6 ],
      "decl-vars" : [ ],
      "line-start" : 26,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 29,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "failed to find terminating 0 byte in dirent"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 25,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 26,
      "code" : "panic(\"failed to find terminating 0 byte in dirent\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 28,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 5,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 5,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nameLen",
              "variable" : 6
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 28,
      "code" : "return uint64(nameLen)",
      "entry" : false,
      "use-vars" : [ 6 ]
    } ],
    "code" : "func direntNamlen(dirent *syscall.Dirent) uint64 {\n\tconst fixedHdr = uint16(unsafe.Offsetof(syscall.Dirent{}.Name))\n\tnameBuf := (*[unsafe.Sizeof(dirent.Name)]byte)(unsafe.Pointer(&dirent.Name[0]))\n\tconst nameBufLen = uint16(len(nameBuf))\n\tlimit := dirent.Reclen - fixedHdr\n\tif limit > nameBufLen {\n\t\tlimit = nameBufLen\n\t}\n\tnameLen := bytes.IndexByte(nameBuf[:limit], 0)\n\tif nameLen < 0 {\n\t\tpanic(\"failed to find terminating 0 byte in dirent\")\n\t}\n\treturn uint64(nameLen)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "direntNamlen",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "IndexByte",
      "package" : 3,
      "type" : 21,
      "exported" : true
    } ],
    "line-end" : 29,
    "line-start" : 16,
    "names" : [ "direntNamlen" ],
    "package" : 0,
    "packages" : [ {
      "name" : "fastwalk",
      "path" : "golang.org/x/tools/internal/fastwalk"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "bytes",
      "path" : "bytes"
    } ],
    "params" : [ 0 ],
    "receivers" : [ ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(dirent *syscall.Dirent) uint64",
      "params" : 1,
      "recv" : -1,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dirent",
        "type" : 2
      } ],
      "name" : "(dirent *syscall.Dirent)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*syscall.Dirent",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "Dirent",
      "name" : "syscall.Dirent",
      "package" : 1,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "Ino",
        "type" : 5
      }, {
        "name" : "Off",
        "type" : 6
      }, {
        "name" : "Reclen",
        "type" : 7
      }, {
        "name" : "Type",
        "type" : 8
      }, {
        "name" : "Name",
        "type" : 9
      }, {
        "name" : "Pad_cgo_0",
        "type" : 11
      } ],
      "name" : "struct{Ino uint64; Off int64; Reclen uint16; Type uint8; Name [256]int8; Pad_cgo_0 [5]byte}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "elem" : 10,
      "name" : "[256]int8",
      "type" : "Array",
      "underlying" : 9
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "elem" : 12,
      "name" : "[5]byte",
      "type" : "Array",
      "underlying" : 11
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(uint64)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "*[256]byte",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "elem" : 12,
      "name" : "[256]byte",
      "type" : "Array",
      "underlying" : 15
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 17
    }, {
      "elem" : 10,
      "name" : "*int8",
      "type" : "Pointer",
      "underlying" : 18
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "func(b []byte, c byte) int",
      "params" : 22,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 23
      }, {
        "name" : "c",
        "type" : 12
      } ],
      "name" : "(b []byte, c byte)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "elem" : 12,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 19
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "name" : "func(interface{})",
      "params" : 27,
      "recv" : -1,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 26,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 28
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 28
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 29
    } ],
    "variables" : [ {
      "name" : "dirent",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Name",
      "package" : 1,
      "type" : 9,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "nameBuf",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Reclen",
      "package" : 1,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "limit",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "nameLen",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}