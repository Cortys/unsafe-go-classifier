{
  "usage" : {
    "file" : "fastwalk_unix.go",
    "label1" : "cast-bytes",
    "label2" : "efficiency",
    "line" : "116",
    "module" : "golang.org/x/tools",
    "pkg" : "golang.org/x/tools/internal/fastwalk",
    "project" : "mattermost/mattermost-server",
    "snippet" : "nameBuf := (*[unsafe.Sizeof(dirent.Name)]byte)(unsafe.Pointer(&dirent.Name[0]))",
    "version" : "v0.0.0-20200428021058-7ae4988eb4d9"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 4, 0 ],
      "decl-vars" : [ 4 ],
      "line-start" : 80,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dirent"
          }
        } ],
        "right" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 10,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "syscall"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 10,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Dirent"
              }
            },
            "go-type" : 10,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ ]
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 80,
      "code" : "dirent := &syscall.Dirent{}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 4, 0 ],
      "exit" : false,
      "out-vars" : [ 4, 0 ],
      "decl-vars" : [ ],
      "line-start" : 81,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "element" : {
                    "go-type" : 3,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 3,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "byte"
                    }
                  },
                  "go-type" : 23,
                  "kind" : "type",
                  "length" : {
                    "go-type" : 24,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "280"
                    }
                  },
                  "type" : "array"
                },
                "go-type" : 22,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 22,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 25,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 25,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 25,
                "kind" : "expression",
                "target" : {
                  "go-type" : 9,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "dirent",
                    "variable" : 4
                  }
                },
                "type" : "cast"
              },
              "type" : "cast"
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "buf",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 81,
      "code" : "copy((*[unsafe.Sizeof(syscall.Dirent{})]byte)(unsafe.Pointer(dirent))[:], buf)",
      "entry" : false,
      "use-vars" : [ 4, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 7 ],
      "in-vars" : [ 4, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 82,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 24,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 24,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "buf",
                  "variable" : 0
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 27,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 5,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          },
          "operator" : "<",
          "right" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 5
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 84,
      "code" : "if v := unsafe.Offsetof(dirent.Reclen) + unsafe.Sizeof(dirent.Reclen); uintptr(len(buf)) < v {\n\tpanic(fmt.Sprintf(\"buf size of %d smaller than dirent header size %d\", len(buf), v))\n}",
      "entry" : false,
      "use-vars" : [ 0, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 4, 0 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 4 ],
      "decl-vars" : [ 5 ],
      "line-start" : 82,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "v"
          }
        } ],
        "right" : [ {
          "go-type" : 24,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "18"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 82,
      "code" : "v := unsafe.Offsetof(dirent.Reclen) + unsafe.Sizeof(dirent.Reclen)",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 4, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 4, 0 ],
      "decl-vars" : [ ],
      "line-start" : 83,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 6,
              "kind" : "constant",
              "value" : {
                "type" : "STRING",
                "value" : "buf size of %d smaller than dirent header size %d"
              }
            }, {
              "arguments" : [ {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "buf",
                  "variable" : 0
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 27,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 5,
              "kind" : "expression",
              "type" : "call"
            }, {
              "go-type" : 24,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 5
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 33,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "fmt"
              },
              "type" : "identifier",
              "value" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Sprintf"
              }
            },
            "go-type" : 6,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 29,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 83,
      "code" : "panic(fmt.Sprintf(\"buf size of %d smaller than dirent header size %d\", len(buf), v))",
      "entry" : false,
      "use-vars" : [ 5, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 4, 0 ],
      "exit" : false,
      "out-vars" : [ 4, 0 ],
      "decl-vars" : [ ],
      "line-start" : 85,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buf",
                "variable" : 0
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 27,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "<",
          "right" : {
            "coerced-to" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Reclen",
                "variable" : 6
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dirent",
                  "variable" : 4
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 87,
      "code" : "if len(buf) < int(dirent.Reclen) {\n\tpanic(fmt.Sprintf(\"buf size %d < record length %d\", len(buf), dirent.Reclen))\n}",
      "entry" : false,
      "use-vars" : [ 0, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 4, 0 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 86,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 6,
              "kind" : "constant",
              "value" : {
                "type" : "STRING",
                "value" : "buf size %d < record length %d"
              }
            }, {
              "arguments" : [ {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "buf",
                  "variable" : 0
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 27,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 5,
              "kind" : "expression",
              "type" : "call"
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Reclen",
                "variable" : 6
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dirent",
                  "variable" : 4
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 33,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "fmt"
              },
              "type" : "identifier",
              "value" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Sprintf"
              }
            },
            "go-type" : 6,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 29,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 86,
      "code" : "panic(fmt.Sprintf(\"buf size %d < record length %d\", len(buf), dirent.Reclen))",
      "entry" : false,
      "use-vars" : [ 0, 4 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 10 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 88,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "consumed",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 5,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 5,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Reclen",
              "variable" : 6
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dirent",
                "variable" : 4
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 88,
      "code" : "consumed = int(dirent.Reclen)",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 89,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dirent",
                "variable" : 4
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 37,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 2,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "direntInode"
              }
            },
            "go-type" : 12,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 12,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 91,
      "code" : "if direntInode(dirent) == 0 {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 90,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 90,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 15, 17, 19, 21, 23, 25, 27 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 92,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Type",
            "variable" : 7
          },
          "go-type" : 15,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dirent",
              "variable" : 4
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 114,
      "code" : "switch dirent.Type {\ncase syscall.DT_REG:\n\ttyp = 0\ncase syscall.DT_DIR:\n\ttyp = os.ModeDir\ncase syscall.DT_LNK:\n\ttyp = os.ModeSymlink\ncase syscall.DT_BLK:\n\ttyp = os.ModeDevice\ncase syscall.DT_FIFO:\n\ttyp = os.ModeNamedPipe\ncase syscall.DT_SOCK:\n\ttyp = os.ModeSocket\ncase syscall.DT_UNKNOWN:\n\ttyp = unknownFileMode\ndefault:\n\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 93,
      "ast" : {
        "expressions" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 94,
      "code" : "case syscall.DT_REG:\n\ttyp = 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 29 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 94,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "typ",
            "variable" : 3
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 94,
      "code" : "typ = 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 95,
      "ast" : {
        "expressions" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "4"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 96,
      "code" : "case syscall.DT_DIR:\n\ttyp = os.ModeDir",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 29 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 96,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "typ",
            "variable" : 3
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "2147483648"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 96,
      "code" : "typ = os.ModeDir",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 97,
      "ast" : {
        "expressions" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "10"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 98,
      "code" : "case syscall.DT_LNK:\n\ttyp = os.ModeSymlink",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 29 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 98,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "typ",
            "variable" : 3
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "134217728"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 98,
      "code" : "typ = os.ModeSymlink",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 99,
      "ast" : {
        "expressions" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "6"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 100,
      "code" : "case syscall.DT_BLK:\n\ttyp = os.ModeDevice",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 29 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 100,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "typ",
            "variable" : 3
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "67108864"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 100,
      "code" : "typ = os.ModeDevice",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 101,
      "ast" : {
        "expressions" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 102,
      "code" : "case syscall.DT_FIFO:\n\ttyp = os.ModeNamedPipe",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 29 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 102,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "typ",
            "variable" : 3
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "33554432"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 102,
      "code" : "typ = os.ModeNamedPipe",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 103,
      "ast" : {
        "expressions" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "12"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 104,
      "code" : "case syscall.DT_SOCK:\n\ttyp = os.ModeSocket",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 29 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 104,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "typ",
            "variable" : 3
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "16777216"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 104,
      "code" : "typ = os.ModeSocket",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 105,
      "ast" : {
        "expressions" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 106,
      "code" : "case syscall.DT_UNKNOWN:\n\ttyp = unknownFileMode",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 29 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 106,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "typ",
            "variable" : 3
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "117440512"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 106,
      "code" : "typ = unknownFileMode",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 107,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 113,
      "code" : "default:\n\n\treturn",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 113,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 113,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 9, 4 ],
      "decl-vars" : [ 9 ],
      "line-start" : 116,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "nameBuf"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "element" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 41,
              "kind" : "type",
              "length" : {
                "go-type" : 24,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "256"
                }
              },
              "type" : "array"
            },
            "go-type" : 40,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 40,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 25,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 25,
            "kind" : "expression",
            "target" : {
              "go-type" : 42,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 17,
                "index" : {
                  "go-type" : 5,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Name",
                    "variable" : 8
                  },
                  "go-type" : 16,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 9,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "dirent",
                      "variable" : 4
                    }
                  },
                  "type" : "selector"
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 116,
      "code" : "nameBuf := (*[unsafe.Sizeof(dirent.Name)]byte)(unsafe.Pointer(&dirent.Name[0]))",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 9, 4 ],
      "exit" : false,
      "out-vars" : [ 9, 10 ],
      "decl-vars" : [ 10 ],
      "line-start" : 117,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "nameLen"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dirent",
              "variable" : 4
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 37,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "direntNamlen"
            }
          },
          "go-type" : 12,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 117,
      "code" : "nameLen := direntNamlen(dirent)",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32, 33 ],
      "in-vars" : [ 9, 10 ],
      "exit" : false,
      "out-vars" : [ 9, 10 ],
      "decl-vars" : [ ],
      "line-start" : 120,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "left" : {
            "go-type" : 26,
            "kind" : "expression",
            "left" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nameLen",
                "variable" : 10
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 12,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 26,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "index" : {
                "go-type" : 5,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 40,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "nameBuf",
                  "variable" : 9
                }
              },
              "type" : "index"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 3,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "46"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 126,
      "code" : "if nameLen == 1 && nameBuf[0] == '.' {\n\tname = \".\"\n} else if nameLen == 2 && nameBuf[0] == '.' && nameBuf[1] == '.' {\n\tname = \"..\"\n} else {\n\tname = string(nameBuf[:nameLen])\n}",
      "entry" : false,
      "use-vars" : [ 10, 9 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 36 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 121,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "name",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : "."
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 121,
      "code" : "name = \".\"",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34, 35 ],
      "in-vars" : [ 9, 10 ],
      "exit" : false,
      "out-vars" : [ 9, 10 ],
      "decl-vars" : [ ],
      "line-start" : 122,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "left" : {
            "go-type" : 26,
            "kind" : "expression",
            "left" : {
              "go-type" : 26,
              "kind" : "expression",
              "left" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "nameLen",
                  "variable" : 10
                }
              },
              "operator" : "==",
              "right" : {
                "go-type" : 12,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "2"
                }
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 26,
              "kind" : "expression",
              "left" : {
                "go-type" : 3,
                "index" : {
                  "go-type" : 5,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 40,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "nameBuf",
                    "variable" : 9
                  }
                },
                "type" : "index"
              },
              "operator" : "==",
              "right" : {
                "go-type" : 3,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "46"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 26,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "index" : {
                "go-type" : 5,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 40,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "nameBuf",
                  "variable" : 9
                }
              },
              "type" : "index"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 3,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "46"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 126,
      "code" : "if nameLen == 2 && nameBuf[0] == '.' && nameBuf[1] == '.' {\n\tname = \"..\"\n} else {\n\tname = string(nameBuf[:nameLen])\n}",
      "entry" : false,
      "use-vars" : [ 10, 9 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 36 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 123,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "name",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : ".."
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 123,
      "code" : "name = \"..\"",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 36 ],
      "in-vars" : [ 9, 10 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 125,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "name",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 6,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 6,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "string"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "type" : "slice",
            "three" : false,
            "high" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nameLen",
                "variable" : 10
              }
            },
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "go-type" : 40,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nameBuf",
                "variable" : 9
              }
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 125,
      "code" : "name = string(nameBuf[:nameLen])",
      "entry" : false,
      "use-vars" : [ 9, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 127,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 127,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func parseDirEnt(buf []byte) (consumed int, name string, typ os.FileMode) {\n\n\tdirent := &syscall.Dirent{}\n\tcopy((*[unsafe.Sizeof(syscall.Dirent{})]byte)(unsafe.Pointer(dirent))[:], buf)\n\tif v := unsafe.Offsetof(dirent.Reclen) + unsafe.Sizeof(dirent.Reclen); uintptr(len(buf)) < v {\n\t\tpanic(fmt.Sprintf(\"buf size of %d smaller than dirent header size %d\", len(buf), v))\n\t}\n\tif len(buf) < int(dirent.Reclen) {\n\t\tpanic(fmt.Sprintf(\"buf size %d < record length %d\", len(buf), dirent.Reclen))\n\t}\n\tconsumed = int(dirent.Reclen)\n\tif direntInode(dirent) == 0 {\n\t\treturn\n\t}\n\tswitch dirent.Type {\n\tcase syscall.DT_REG:\n\t\ttyp = 0\n\tcase syscall.DT_DIR:\n\t\ttyp = os.ModeDir\n\tcase syscall.DT_LNK:\n\t\ttyp = os.ModeSymlink\n\tcase syscall.DT_BLK:\n\t\ttyp = os.ModeDevice\n\tcase syscall.DT_FIFO:\n\t\ttyp = os.ModeNamedPipe\n\tcase syscall.DT_SOCK:\n\t\ttyp = os.ModeSocket\n\tcase syscall.DT_UNKNOWN:\n\t\ttyp = unknownFileMode\n\tdefault:\n\n\t\treturn\n\t}\n\n\tnameBuf := (*[unsafe.Sizeof(dirent.Name)]byte)(unsafe.Pointer(&dirent.Name[0]))\n\tnameLen := direntNamlen(dirent)\n\n\tif nameLen == 1 && nameBuf[0] == '.' {\n\t\tname = \".\"\n\t} else if nameLen == 2 && nameBuf[0] == '.' && nameBuf[1] == '.' {\n\t\tname = \"..\"\n\t} else {\n\t\tname = string(nameBuf[:nameLen])\n\t}\n\treturn\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "parseDirEnt",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Sprintf",
      "package" : 4,
      "type" : 33,
      "exported" : true
    }, {
      "name" : "direntInode",
      "package" : 0,
      "type" : 37,
      "exported" : false
    }, {
      "name" : "direntNamlen",
      "package" : 0,
      "type" : 37,
      "exported" : false
    } ],
    "line-end" : 128,
    "line-start" : 78,
    "names" : [ "parseDirEnt" ],
    "package" : 0,
    "packages" : [ {
      "name" : "fastwalk",
      "path" : "golang.org/x/tools/internal/fastwalk"
    }, {
      "name" : "os",
      "path" : "os"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "fmt",
      "path" : "fmt"
    } ],
    "params" : [ 0 ],
    "receivers" : [ ],
    "results" : [ 1, 2, 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(buf []byte) (consumed int, name string, typ os.FileMode)",
      "params" : 1,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "buf",
        "type" : 2
      } ],
      "name" : "(buf []byte)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 2
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "consumed",
        "type" : 5
      }, {
        "name" : "name",
        "type" : 6
      }, {
        "name" : "typ",
        "type" : 7
      } ],
      "name" : "(consumed int, name string, typ os.FileMode)",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "local-name" : "FileMode",
      "name" : "os.FileMode",
      "package" : 1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "elem" : 10,
      "name" : "*syscall.Dirent",
      "type" : "Pointer",
      "underlying" : 9
    }, {
      "local-name" : "Dirent",
      "name" : "syscall.Dirent",
      "package" : 2,
      "type" : "Named",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "Ino",
        "type" : 12
      }, {
        "name" : "Off",
        "type" : 13
      }, {
        "name" : "Reclen",
        "type" : 14
      }, {
        "name" : "Type",
        "type" : 15
      }, {
        "name" : "Name",
        "type" : 16
      }, {
        "name" : "Pad_cgo_0",
        "type" : 18
      } ],
      "name" : "struct{Ino uint64; Off int64; Reclen uint16; Type uint8; Name [256]int8; Pad_cgo_0 [5]byte}",
      "type" : "Struct",
      "underlying" : 11
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "[256]int8",
      "type" : "Array",
      "underlying" : 16
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "elem" : 3,
      "name" : "[5]byte",
      "type" : "Array",
      "underlying" : 18
    }, {
      "name" : "func([]byte, []byte) int",
      "params" : 20,
      "recv" : -1,
      "results" : 21,
      "type" : "Signature",
      "underlying" : 19,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 2
      } ],
      "name" : "([]byte, []byte)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 21
    }, {
      "elem" : 23,
      "name" : "*[280]byte",
      "type" : "Pointer",
      "underlying" : 22
    }, {
      "elem" : 3,
      "name" : "[280]byte",
      "type" : "Array",
      "underlying" : 23
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 3,
      "type" : "Basic",
      "underlying" : 25
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "name" : "func([]byte) int",
      "params" : 28,
      "recv" : -1,
      "results" : 21,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "name" : "func(interface{})",
      "params" : 31,
      "recv" : -1,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 32
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 32
    }, {
      "name" : "func(format string, a ...interface{}) string",
      "params" : 34,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "format",
        "type" : 6
      }, {
        "name" : "a",
        "type" : 35
      } ],
      "name" : "(format string, a []interface{})",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "elem" : 32,
      "name" : "[]interface{}",
      "type" : "Slice",
      "underlying" : 35
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "name" : "func(dirent *syscall.Dirent) uint64",
      "params" : 38,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dirent",
        "type" : 9
      } ],
      "name" : "(dirent *syscall.Dirent)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 12
      } ],
      "name" : "(uint64)",
      "type" : "Tuple",
      "underlying" : 39
    }, {
      "elem" : 41,
      "name" : "*[256]byte",
      "type" : "Pointer",
      "underlying" : 40
    }, {
      "elem" : 3,
      "name" : "[256]byte",
      "type" : "Array",
      "underlying" : 41
    }, {
      "elem" : 17,
      "name" : "*int8",
      "type" : "Pointer",
      "underlying" : 42
    } ],
    "variables" : [ {
      "name" : "buf",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "consumed",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dirent",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Reclen",
      "package" : 2,
      "type" : 14,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Type",
      "package" : 2,
      "type" : 15,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Name",
      "package" : 2,
      "type" : 16,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "nameBuf",
      "package" : 0,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "nameLen",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}