{
  "usage" : {
    "file" : "sys_ssmreq.go",
    "label1" : "cast-bytes",
    "label2" : "efficiency",
    "line" : "46",
    "module" : "golang.org/x/net",
    "pkg" : "golang.org/x/net/ipv6",
    "project" : "mattermost/mattermost-server",
    "snippet" : "s := (*[sizeofGroupSourceReq]byte)(unsafe.Pointer(&gsr))",
    "version" : "v0.0.0-20200501053045-e0ff5e5a1de5"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 3, 4, 5, 6, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 9, 3, 4, 5, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 9, 3, 4, 5, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 10, 3, 4, 5, 6, 7 ],
      "decl-vars" : [ 10 ],
      "line-start" : 38,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 34,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 34,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "groupSourceReq"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "gsr"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 38,
      "code" : "var gsr groupSourceReq",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 7, 9, 10, 3, 4, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 9, 10, 3, 4, 5 ],
      "decl-vars" : [ ],
      "line-start" : 39,
      "ast" : {
        "condition" : {
          "go-type" : 43,
          "kind" : "expression",
          "left" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ifi",
              "variable" : 5
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 44,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 41,
      "code" : "if ifi != nil {\n\tgsr.Interface = uint32(ifi.Index)\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 10 ],
      "successors" : [ 5 ],
      "in-vars" : [ 4, 5, 6, 7, 9, 10, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 6, 7, 9, 10 ],
      "decl-vars" : [ ],
      "line-start" : 40,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Interface",
            "variable" : 11
          },
          "go-type" : 36,
          "kind" : "expression",
          "target" : {
            "go-type" : 34,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gsr",
              "variable" : 10
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 36,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 36,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Index",
              "variable" : 12
            },
            "go-type" : 27,
            "kind" : "expression",
            "target" : {
              "go-type" : 24,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ifi",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 40,
      "code" : "gsr.Interface = uint32(ifi.Index)",
      "entry" : false,
      "use-vars" : [ 10, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 9, 10, 3, 4, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 10, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 42,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "grp",
              "variable" : 6
            }
          }, {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "src",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "setSourceGroup"
            },
            "go-type" : 45,
            "kind" : "expression",
            "target" : {
              "go-type" : 34,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gsr",
                "variable" : 10
              }
            },
            "type" : "selector"
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 42,
      "code" : "gsr.setSourceGroup(grp, src)",
      "entry" : false,
      "use-vars" : [ 6, 7, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 4, 9, 10, 3 ],
      "exit" : false,
      "out-vars" : [ 9, 10, 3, 4 ],
      "decl-vars" : [ 13 ],
      "line-start" : 43,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 30,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 30,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 29,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "b"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 43,
      "code" : "var b []byte",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 13 ],
      "in-vars" : [ 9, 10, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 10, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 44,
      "ast" : {
        "condition" : {
          "go-type" : 23,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "compatFreeBSD32",
            "variable" : 9
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 52,
      "code" : "if compatFreeBSD32 {\n\tvar d [sizeofGroupSourceReq + 4]byte\n\ts := (*[sizeofGroupSourceReq]byte)(unsafe.Pointer(&gsr))\n\tcopy(d[:4], s[:4])\n\tcopy(d[8:], s[4:])\n\tb = d[:]\n} else {\n\tb = (*[sizeofGroupSourceReq]byte)(unsafe.Pointer(&gsr))[:sizeofGroupSourceReq]\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 10, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 14, 10, 3, 4 ],
      "decl-vars" : [ 14 ],
      "line-start" : 45,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 30,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 30,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 47,
              "kind" : "type",
              "length" : {
                "go-type" : 48,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "268"
                }
              },
              "type" : "array"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "d"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 45,
      "code" : "var d [sizeofGroupSourceReq + 4]byte",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 4, 14, 10, 3 ],
      "exit" : false,
      "out-vars" : [ 14, 15, 3, 4 ],
      "decl-vars" : [ 15 ],
      "line-start" : 46,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "s"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "element" : {
                "go-type" : 30,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 30,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 50,
              "kind" : "type",
              "length" : {
                "go-type" : 48,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "264"
                }
              },
              "type" : "array"
            },
            "go-type" : 49,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 49,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 51,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 51,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 51,
            "kind" : "expression",
            "target" : {
              "go-type" : 52,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 34,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gsr",
                  "variable" : 10
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 46,
      "code" : "s := (*[sizeofGroupSourceReq]byte)(unsafe.Pointer(&gsr))",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 14, 15, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 14, 15, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 47,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 29,
            "type" : "slice",
            "three" : false,
            "high" : {
              "go-type" : 27,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "4"
              }
            },
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "go-type" : 47,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "d",
                "variable" : 14
              }
            }
          }, {
            "go-type" : 29,
            "type" : "slice",
            "three" : false,
            "high" : {
              "go-type" : 27,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "4"
              }
            },
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "go-type" : 49,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 15
              }
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 53,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 27,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 47,
      "code" : "copy(d[:4], s[:4])",
      "entry" : false,
      "use-vars" : [ 14, 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 14, 15, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 14, 3 ],
      "decl-vars" : [ ],
      "line-start" : 48,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 29,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : {
              "go-type" : 27,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "target" : {
              "go-type" : 47,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "d",
                "variable" : 14
              }
            }
          }, {
            "go-type" : 29,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : {
              "go-type" : 27,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "4"
              }
            },
            "target" : {
              "go-type" : 49,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 15
              }
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 53,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 27,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 48,
      "code" : "copy(d[8:], s[4:])",
      "entry" : false,
      "use-vars" : [ 15, 14 ]
    }, {
      "update-vars" : [ 13 ],
      "successors" : [ 14 ],
      "in-vars" : [ 14, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 13, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 49,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 29,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 13
          }
        } ],
        "right" : [ {
          "go-type" : 29,
          "type" : "slice",
          "three" : false,
          "high" : null,
          "max" : null,
          "kind" : "expression",
          "low" : null,
          "target" : {
            "go-type" : 47,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 14
            }
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 13 ],
      "line-end" : 49,
      "code" : "b = d[:]",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ 13 ],
      "successors" : [ 14 ],
      "in-vars" : [ 10, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 13, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 51,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 29,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 13
          }
        } ],
        "right" : [ {
          "go-type" : 29,
          "type" : "slice",
          "three" : false,
          "high" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "264"
            }
          },
          "max" : null,
          "kind" : "expression",
          "low" : null,
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 30,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 30,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "byte"
                  }
                },
                "go-type" : 50,
                "kind" : "type",
                "length" : {
                  "go-type" : 48,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "264"
                  }
                },
                "type" : "array"
              },
              "go-type" : 49,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 49,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 51,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 4,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 51,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 51,
              "kind" : "expression",
              "target" : {
                "go-type" : 52,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 34,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gsr",
                    "variable" : 10
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 13 ],
      "line-end" : 51,
      "code" : "b = (*[sizeofGroupSourceReq]byte)(unsafe.Pointer(&gsr))[:sizeofGroupSourceReq]",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 13, 3, 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 53,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 4
            }
          }, {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 13
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Set"
            },
            "go-type" : 56,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "so",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 53,
      "code" : "return so.Set(c, b)",
      "entry" : false,
      "use-vars" : [ 4, 13, 3 ]
    } ],
    "code" : "func (so *sockOpt) setGroupSourceReq(c *socket.Conn, ifi *net.Interface, grp, src net.IP) error {\n\tvar gsr groupSourceReq\n\tif ifi != nil {\n\t\tgsr.Interface = uint32(ifi.Index)\n\t}\n\tgsr.setSourceGroup(grp, src)\n\tvar b []byte\n\tif compatFreeBSD32 {\n\t\tvar d [sizeofGroupSourceReq + 4]byte\n\t\ts := (*[sizeofGroupSourceReq]byte)(unsafe.Pointer(&gsr))\n\t\tcopy(d[:4], s[:4])\n\t\tcopy(d[8:], s[4:])\n\t\tb = d[:]\n\t} else {\n\t\tb = (*[sizeofGroupSourceReq]byte)(unsafe.Pointer(&gsr))[:sizeofGroupSourceReq]\n\t}\n\treturn so.Set(c, b)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "setGroupSourceReq",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "setSourceGroup",
      "package" : 0,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "Set",
      "package" : 1,
      "type" : 56,
      "exported" : true
    } ],
    "line-end" : 54,
    "line-start" : 37,
    "names" : [ "setGroupSourceReq" ],
    "package" : 0,
    "packages" : [ {
      "name" : "ipv6",
      "path" : "golang.org/x/net/ipv6"
    }, {
      "name" : "socket",
      "path" : "golang.org/x/net/internal/socket"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    }, {
      "name" : "net",
      "path" : "net"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 4, 5, 6, 7 ],
    "receivers" : [ 3 ],
    "results" : [ 8 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(c *golang.org/x/net/internal/socket.Conn, ifi *net.Interface, grp net.IP, src net.IP) error",
      "params" : 1,
      "recv" : 3,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "c",
        "type" : 2
      }, {
        "name" : "ifi",
        "type" : 24
      }, {
        "name" : "grp",
        "type" : 33
      }, {
        "name" : "src",
        "type" : 33
      } ],
      "name" : "(c *golang.org/x/net/internal/socket.Conn, ifi *net.Interface, grp net.IP, src net.IP)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*golang.org/x/net/internal/socket.Conn",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "Conn",
      "name" : "golang.org/x/net/internal/socket.Conn",
      "package" : 1,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "network",
        "type" : 5
      }, {
        "name" : "c",
        "type" : 6
      } ],
      "name" : "struct{network string; c syscall.RawConn}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "local-name" : "RawConn",
      "name" : "syscall.RawConn",
      "package" : 2,
      "type" : "Named",
      "underlying" : 7
    }, {
      "methods" : [ {
        "name" : "Control",
        "type" : 8
      }, {
        "name" : "Read",
        "type" : 19
      }, {
        "name" : "Write",
        "type" : 19
      } ],
      "name" : "interface{Control(f func(fd uintptr)) error; Read(f func(fd uintptr) (done bool)) error; Write(f func(fd uintptr) (done bool)) error}",
      "type" : "Interface",
      "underlying" : 7
    }, {
      "name" : "func(f func(fd uintptr)) error",
      "params" : 9,
      "recv" : 1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 10
      } ],
      "name" : "(f func(fd uintptr))",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "name" : "func(fd uintptr)",
      "params" : 11,
      "recv" : -1,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 10,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 12
      } ],
      "name" : "(fd uintptr)",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 16
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 17
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 16
    }, {
      "name" : "func() string",
      "params" : 13,
      "recv" : 0,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 17,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "name" : "func(f func(fd uintptr) (done bool)) error",
      "params" : 20,
      "recv" : 2,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 19,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 21
      } ],
      "name" : "(f func(fd uintptr) (done bool))",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "name" : "func(fd uintptr) (done bool)",
      "params" : 11,
      "recv" : -1,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "done",
        "type" : 23
      } ],
      "name" : "(done bool)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "elem" : 25,
      "name" : "*net.Interface",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "local-name" : "Interface",
      "name" : "net.Interface",
      "package" : 3,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "Index",
        "type" : 27
      }, {
        "name" : "MTU",
        "type" : 27
      }, {
        "name" : "Name",
        "type" : 5
      }, {
        "name" : "HardwareAddr",
        "type" : 28
      }, {
        "name" : "Flags",
        "type" : 31
      } ],
      "name" : "struct{Index int; MTU int; Name string; HardwareAddr net.HardwareAddr; Flags net.Flags}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "local-name" : "HardwareAddr",
      "name" : "net.HardwareAddr",
      "package" : 3,
      "type" : "Named",
      "underlying" : 29
    }, {
      "elem" : 30,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 29
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 30
    }, {
      "local-name" : "Flags",
      "name" : "net.Flags",
      "package" : 3,
      "type" : "Named",
      "underlying" : 32
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 32
    }, {
      "local-name" : "IP",
      "name" : "net.IP",
      "package" : 3,
      "type" : "Named",
      "underlying" : 29
    }, {
      "local-name" : "groupSourceReq",
      "name" : "golang.org/x/net/ipv6.groupSourceReq",
      "package" : 0,
      "type" : "Named",
      "underlying" : 35
    }, {
      "fields" : [ {
        "name" : "Interface",
        "type" : 36
      }, {
        "name" : "Pad_cgo_0",
        "type" : 37
      }, {
        "name" : "Group",
        "type" : 38
      }, {
        "name" : "Source",
        "type" : 38
      } ],
      "name" : "struct{Interface uint32; Pad_cgo_0 [4]byte; Group golang.org/x/net/ipv6.kernelSockaddrStorage; Source golang.org/x/net/ipv6.kernelSockaddrStorage}",
      "type" : "Struct",
      "underlying" : 35
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 36
    }, {
      "elem" : 30,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 37
    }, {
      "local-name" : "kernelSockaddrStorage",
      "name" : "golang.org/x/net/ipv6.kernelSockaddrStorage",
      "package" : 0,
      "type" : "Named",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 40
      }, {
        "name" : "X__data",
        "type" : 41
      } ],
      "name" : "struct{Family uint16; X__data [126]int8}",
      "type" : "Struct",
      "underlying" : 39
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "elem" : 42,
      "name" : "[126]int8",
      "type" : "Array",
      "underlying" : 41
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 42
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 43
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 44
    }, {
      "name" : "func(grp net.IP, src net.IP)",
      "params" : 46,
      "recv" : -1,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 45,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "grp",
        "type" : 33
      }, {
        "name" : "src",
        "type" : 33
      } ],
      "name" : "(grp net.IP, src net.IP)",
      "type" : "Tuple",
      "underlying" : 46
    }, {
      "elem" : 30,
      "name" : "[268]byte",
      "type" : "Array",
      "underlying" : 47
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 48
    }, {
      "elem" : 50,
      "name" : "*[264]byte",
      "type" : "Pointer",
      "underlying" : 49
    }, {
      "elem" : 30,
      "name" : "[264]byte",
      "type" : "Array",
      "underlying" : 50
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 4,
      "type" : "Basic",
      "underlying" : 51
    }, {
      "elem" : 34,
      "name" : "*golang.org/x/net/ipv6.groupSourceReq",
      "type" : "Pointer",
      "underlying" : 52
    }, {
      "name" : "func([]byte, []byte) int",
      "params" : 54,
      "recv" : -1,
      "results" : 55,
      "type" : "Signature",
      "underlying" : 53,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 29
      }, {
        "name" : "",
        "type" : 29
      } ],
      "name" : "([]byte, []byte)",
      "type" : "Tuple",
      "underlying" : 54
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 27
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 55
    }, {
      "name" : "func(c *golang.org/x/net/internal/socket.Conn, b []byte) error",
      "params" : 57,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 56,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "c",
        "type" : 2
      }, {
        "name" : "b",
        "type" : 29
      } ],
      "name" : "(c *golang.org/x/net/internal/socket.Conn, b []byte)",
      "type" : "Tuple",
      "underlying" : 57
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 15,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "so",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "ifi",
      "package" : 0,
      "type" : 24,
      "exported" : false
    }, {
      "name" : "grp",
      "package" : 0,
      "type" : 33,
      "exported" : false
    }, {
      "name" : "src",
      "package" : 0,
      "type" : 33,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 15,
      "exported" : false
    }, {
      "name" : "compatFreeBSD32",
      "package" : 0,
      "type" : 23,
      "exported" : false
    }, {
      "name" : "gsr",
      "package" : 0,
      "type" : 34,
      "exported" : false
    }, {
      "name" : "Interface",
      "package" : 0,
      "type" : 36,
      "exported" : true
    }, {
      "name" : "Index",
      "package" : 3,
      "type" : 27,
      "exported" : true
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 29,
      "exported" : false
    }, {
      "name" : "d",
      "package" : 0,
      "type" : 47,
      "exported" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 49,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}