{
  "usage" : {
    "file" : "array_getset.go",
    "label1" : "pointer-arithmetic",
    "label2" : "efficiency",
    "line" : "296",
    "module" : "gorgonia.org/tensor",
    "pkg" : "gorgonia.org/tensor",
    "project" : "gorgonia/gorgonia",
    "snippet" : "val := reflect.NewAt(a.t.Type, unsafe.Pointer(want))",
    "version" : "v0.9.6"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 18, 33, 34, 35, 36, 37 ],
      "exit" : false,
      "out-vars" : [ 25, 26, 24, 27, 18, 17, 22, 28, 23, 30, 37, 31, 29, 32, 33, 36, 21, 34, 20, 35 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 10, 17, 24, 31, 38, 45, 52, 59, 66, 73, 80, 87, 94, 101, 108, 115, 122, 129 ],
      "in-vars" : [ 24, 32, 28, 33, 34, 23, 36, 27, 22, 31, 29, 26, 21, 37, 25, 30, 18, 17, 20, 35 ],
      "exit" : false,
      "out-vars" : [ 18, 33, 35, 22, 17, 21, 37, 23, 26, 28, 36, 30, 27, 32, 34, 20, 31, 29, 25, 24 ],
      "decl-vars" : [ ],
      "line-start" : 127,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "t",
            "variable" : 38
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "a",
              "variable" : 17
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 290,
      "code" : "switch a.t {\ncase Bool:\n\tif xv, ok := x.(bool); ok {\n\t\tdata := a.Bools()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\ncase Int:\n\tif xv, ok := x.(int); ok {\n\t\tdata := a.Ints()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\ncase Int8:\n\tif xv, ok := x.(int8); ok {\n\t\tdata := a.Int8s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\ncase Int16:\n\tif xv, ok := x.(int16); ok {\n\t\tdata := a.Int16s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\ncase Int32:\n\tif xv, ok := x.(int32); ok {\n\t\tdata := a.Int32s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\ncase Int64:\n\tif xv, ok := x.(int64); ok {\n\t\tdata := a.Int64s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\ncase Uint:\n\tif xv, ok := x.(uint); ok {\n\t\tdata := a.Uints()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\ncase Uint8:\n\tif xv, ok := x.(uint8); ok {\n\t\tdata := a.Uint8s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\ncase Uint16:\n\tif xv, ok := x.(uint16); ok {\n\t\tdata := a.Uint16s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\ncase Uint32:\n\tif xv, ok := x.(uint32); ok {\n\t\tdata := a.Uint32s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\ncase Uint64:\n\tif xv, ok := x.(uint64); ok {\n\t\tdata := a.Uint64s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\ncase Uintptr:\n\tif xv, ok := x.(uintptr); ok {\n\t\tdata := a.Uintptrs()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\ncase Float32:\n\tif xv, ok := x.(float32); ok {\n\t\tdata := a.Float32s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\ncase Float64:\n\tif xv, ok := x.(float64); ok {\n\t\tdata := a.Float64s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\ncase Complex64:\n\tif xv, ok := x.(complex64); ok {\n\t\tdata := a.Complex64s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\ncase Complex128:\n\tif xv, ok := x.(complex128); ok {\n\t\tdata := a.Complex128s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\ncase String:\n\tif xv, ok := x.(string); ok {\n\t\tdata := a.Strings()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\ncase UnsafePointer:\n\tif xv, ok := x.(unsafe.Pointer); ok {\n\t\tdata := a.UnsafePointers()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}\n\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 18, 17, 29 ],
      "exit" : false,
      "out-vars" : [ 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 128,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Bool",
            "variable" : 29
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 135,
      "code" : "case Bool:\n\tif xv, ok := x.(bool); ok {\n\t\tdata := a.Bools()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 129 ],
      "in-vars" : [ 42, 18, 17, 39 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 42 ],
      "decl-vars" : [ ],
      "line-start" : 129,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 39
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 135,
      "code" : "if xv, ok := x.(bool); ok {\n\tdata := a.Bools()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 39, 42, 18, 17 ],
      "decl-vars" : [ 42, 39 ],
      "line-start" : 129,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 26,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 26,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "bool"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 129,
      "code" : "xv, ok := x.(bool)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 17, 42 ],
      "exit" : false,
      "out-vars" : [ 42, 40 ],
      "decl-vars" : [ 40 ],
      "line-start" : 130,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Bools"
            },
            "go-type" : 88,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 87,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 130,
      "code" : "data := a.Bools()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 42, 40 ],
      "exit" : false,
      "out-vars" : [ 42, 40, 41 ],
      "decl-vars" : [ 41 ],
      "line-start" : 131,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 87,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 40
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 133,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ 40 ],
      "successors" : [ 7 ],
      "in-vars" : [ 42, 40, 41 ],
      "exit" : false,
      "out-vars" : [ 42, 40 ],
      "decl-vars" : [ ],
      "line-start" : 132,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 26,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 41
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 87,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 40
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 42
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 132,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 42, 40, 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 134,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 134,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 18, 17, 26 ],
      "exit" : false,
      "out-vars" : [ 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 137,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int",
            "variable" : 26
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 144,
      "code" : "case Int:\n\tif xv, ok := x.(int); ok {\n\t\tdata := a.Ints()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 129 ],
      "in-vars" : [ 18, 17, 43, 46 ],
      "exit" : false,
      "out-vars" : [ 46, 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 138,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 144,
      "code" : "if xv, ok := x.(int); ok {\n\tdata := a.Ints()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 43, 46, 18, 17 ],
      "decl-vars" : [ 43, 46 ],
      "line-start" : 138,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 16,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 16,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 91,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 138,
      "code" : "xv, ok := x.(int)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 46, 17 ],
      "exit" : false,
      "out-vars" : [ 46, 44 ],
      "decl-vars" : [ 44 ],
      "line-start" : 139,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Ints"
            },
            "go-type" : 92,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 40,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 139,
      "code" : "data := a.Ints()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 16 ],
      "in-vars" : [ 46, 44 ],
      "exit" : false,
      "out-vars" : [ 45, 46, 44 ],
      "decl-vars" : [ 45 ],
      "line-start" : 140,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 40,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 44
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 142,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 44 ]
    }, {
      "update-vars" : [ 44 ],
      "successors" : [ 14 ],
      "in-vars" : [ 44, 45, 46 ],
      "exit" : false,
      "out-vars" : [ 44, 46 ],
      "decl-vars" : [ ],
      "line-start" : 141,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 16,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 45
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 44
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 16,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 46
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 141,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 46, 44, 45 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 143,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 143,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 18, 17, 22 ],
      "exit" : false,
      "out-vars" : [ 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 146,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int8",
            "variable" : 22
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 153,
      "code" : "case Int8:\n\tif xv, ok := x.(int8); ok {\n\t\tdata := a.Int8s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20, 129 ],
      "in-vars" : [ 50, 47, 18, 17 ],
      "exit" : false,
      "out-vars" : [ 17, 50, 18 ],
      "decl-vars" : [ ],
      "line-start" : 147,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 47
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 153,
      "code" : "if xv, ok := x.(int8); ok {\n\tdata := a.Int8s()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 47 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 50, 47 ],
      "decl-vars" : [ 47, 50 ],
      "line-start" : 147,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 95,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 95,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int8"
            }
          },
          "go-type" : 94,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 147,
      "code" : "xv, ok := x.(int8)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 17, 50 ],
      "exit" : false,
      "out-vars" : [ 48, 50 ],
      "decl-vars" : [ 48 ],
      "line-start" : 148,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int8s"
            },
            "go-type" : 97,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 96,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 148,
      "code" : "data := a.Int8s()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22, 23 ],
      "in-vars" : [ 48, 50 ],
      "exit" : false,
      "out-vars" : [ 49, 48, 50 ],
      "decl-vars" : [ 49 ],
      "line-start" : 149,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 96,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 48
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 151,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 48 ]
    }, {
      "update-vars" : [ 48 ],
      "successors" : [ 21 ],
      "in-vars" : [ 49, 48, 50 ],
      "exit" : false,
      "out-vars" : [ 48, 50 ],
      "decl-vars" : [ ],
      "line-start" : 150,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 95,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 49
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 48
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 95,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 50
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 150,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 50, 49, 48 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 152,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 152,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 17, 21, 18 ],
      "exit" : false,
      "out-vars" : [ 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 155,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int16",
            "variable" : 21
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 162,
      "code" : "case Int16:\n\tif xv, ok := x.(int16); ok {\n\t\tdata := a.Int16s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27, 129 ],
      "in-vars" : [ 17, 54, 51, 18 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 54 ],
      "decl-vars" : [ ],
      "line-start" : 156,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 51
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 162,
      "code" : "if xv, ok := x.(int16); ok {\n\tdata := a.Int16s()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 51 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 54, 51 ],
      "decl-vars" : [ 54, 51 ],
      "line-start" : 156,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 100,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 100,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int16"
            }
          },
          "go-type" : 99,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 156,
      "code" : "xv, ok := x.(int16)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 17, 54 ],
      "exit" : false,
      "out-vars" : [ 52, 54 ],
      "decl-vars" : [ 52 ],
      "line-start" : 157,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int16s"
            },
            "go-type" : 102,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 101,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 157,
      "code" : "data := a.Int16s()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29, 30 ],
      "in-vars" : [ 52, 54 ],
      "exit" : false,
      "out-vars" : [ 54, 53, 52 ],
      "decl-vars" : [ 53 ],
      "line-start" : 158,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 101,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 52
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 160,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 52 ]
    }, {
      "update-vars" : [ 52 ],
      "successors" : [ 28 ],
      "in-vars" : [ 53, 52, 54 ],
      "exit" : false,
      "out-vars" : [ 52, 54 ],
      "decl-vars" : [ ],
      "line-start" : 159,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 100,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 53
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 101,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 52
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 54
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 159,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 52, 53, 54 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 161,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 161,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 18, 17, 37 ],
      "exit" : false,
      "out-vars" : [ 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 164,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int32",
            "variable" : 37
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 171,
      "code" : "case Int32:\n\tif xv, ok := x.(int32); ok {\n\t\tdata := a.Int32s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34, 129 ],
      "in-vars" : [ 18, 58, 55, 17 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 58 ],
      "decl-vars" : [ ],
      "line-start" : 165,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 55
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 171,
      "code" : "if xv, ok := x.(int32); ok {\n\tdata := a.Int32s()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 55 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 18, 58, 55, 17 ],
      "decl-vars" : [ 55, 58 ],
      "line-start" : 165,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 71,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 71,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int32"
            }
          },
          "go-type" : 104,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 165,
      "code" : "xv, ok := x.(int32)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 58, 17 ],
      "exit" : false,
      "out-vars" : [ 58, 56 ],
      "decl-vars" : [ 56 ],
      "line-start" : 166,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int32s"
            },
            "go-type" : 106,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 105,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 166,
      "code" : "data := a.Int32s()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36, 37 ],
      "in-vars" : [ 58, 56 ],
      "exit" : false,
      "out-vars" : [ 58, 56, 57 ],
      "decl-vars" : [ 57 ],
      "line-start" : 167,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 105,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 56
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 169,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 56 ]
    }, {
      "update-vars" : [ 56 ],
      "successors" : [ 35 ],
      "in-vars" : [ 57, 58, 56 ],
      "exit" : false,
      "out-vars" : [ 58, 56 ],
      "decl-vars" : [ ],
      "line-start" : 168,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 71,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 57
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 105,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 56
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 71,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 58
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 168,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 58, 56, 57 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 170,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 170,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 18, 17, 25 ],
      "exit" : false,
      "out-vars" : [ 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 173,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int64",
            "variable" : 25
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 180,
      "code" : "case Int64:\n\tif xv, ok := x.(int64); ok {\n\t\tdata := a.Int64s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41, 129 ],
      "in-vars" : [ 18, 17, 59, 62 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 62 ],
      "decl-vars" : [ ],
      "line-start" : 174,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 59
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 180,
      "code" : "if xv, ok := x.(int64); ok {\n\tdata := a.Int64s()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 59 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 59, 62, 18, 17 ],
      "decl-vars" : [ 59, 62 ],
      "line-start" : 174,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 109,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 109,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int64"
            }
          },
          "go-type" : 108,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 174,
      "code" : "xv, ok := x.(int64)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42 ],
      "in-vars" : [ 17, 62 ],
      "exit" : false,
      "out-vars" : [ 60, 62 ],
      "decl-vars" : [ 60 ],
      "line-start" : 175,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int64s"
            },
            "go-type" : 111,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 110,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 175,
      "code" : "data := a.Int64s()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43, 44 ],
      "in-vars" : [ 60, 62 ],
      "exit" : false,
      "out-vars" : [ 60, 61, 62 ],
      "decl-vars" : [ 61 ],
      "line-start" : 176,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 110,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 60
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 178,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 60 ]
    }, {
      "update-vars" : [ 60 ],
      "successors" : [ 42 ],
      "in-vars" : [ 60, 61, 62 ],
      "exit" : false,
      "out-vars" : [ 60, 62 ],
      "decl-vars" : [ ],
      "line-start" : 177,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 109,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 61
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 110,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 60
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 109,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 62
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 177,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 62, 60, 61 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 179,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 179,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 17, 18, 33 ],
      "exit" : false,
      "out-vars" : [ 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 182,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint",
            "variable" : 33
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 189,
      "code" : "case Uint:\n\tif xv, ok := x.(uint); ok {\n\t\tdata := a.Uints()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48, 129 ],
      "in-vars" : [ 18, 17, 63, 66 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 66 ],
      "decl-vars" : [ ],
      "line-start" : 183,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 63
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 189,
      "code" : "if xv, ok := x.(uint); ok {\n\tdata := a.Uints()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 63 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 63, 66 ],
      "decl-vars" : [ 66, 63 ],
      "line-start" : 183,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 53,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 53,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint"
            }
          },
          "go-type" : 113,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 183,
      "code" : "xv, ok := x.(uint)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 17, 66 ],
      "exit" : false,
      "out-vars" : [ 64, 66 ],
      "decl-vars" : [ 64 ],
      "line-start" : 184,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uints"
            },
            "go-type" : 115,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 114,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 184,
      "code" : "data := a.Uints()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50, 51 ],
      "in-vars" : [ 66, 64 ],
      "exit" : false,
      "out-vars" : [ 65, 64, 66 ],
      "decl-vars" : [ 65 ],
      "line-start" : 185,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 114,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 64
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 187,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 64 ]
    }, {
      "update-vars" : [ 64 ],
      "successors" : [ 49 ],
      "in-vars" : [ 65, 64, 66 ],
      "exit" : false,
      "out-vars" : [ 64, 66 ],
      "decl-vars" : [ ],
      "line-start" : 186,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 53,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 65
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 114,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 64
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 53,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 66
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 186,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 64, 66, 65 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 188,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 188,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54 ],
      "in-vars" : [ 18, 17, 30 ],
      "exit" : false,
      "out-vars" : [ 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 191,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint8",
            "variable" : 30
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 198,
      "code" : "case Uint8:\n\tif xv, ok := x.(uint8); ok {\n\t\tdata := a.Uint8s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55, 129 ],
      "in-vars" : [ 18, 67, 17, 70 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 70 ],
      "decl-vars" : [ ],
      "line-start" : 192,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 67
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 198,
      "code" : "if xv, ok := x.(uint8); ok {\n\tdata := a.Uint8s()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 67 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 70, 18, 67, 17 ],
      "decl-vars" : [ 67, 70 ],
      "line-start" : 192,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 65,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 65,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint8"
            }
          },
          "go-type" : 117,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 192,
      "code" : "xv, ok := x.(uint8)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56 ],
      "in-vars" : [ 17, 70 ],
      "exit" : false,
      "out-vars" : [ 68, 70 ],
      "decl-vars" : [ 68 ],
      "line-start" : 193,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint8s"
            },
            "go-type" : 119,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 118,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 193,
      "code" : "data := a.Uint8s()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57, 58 ],
      "in-vars" : [ 68, 70 ],
      "exit" : false,
      "out-vars" : [ 68, 70, 69 ],
      "decl-vars" : [ 69 ],
      "line-start" : 194,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 118,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 68
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 196,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 68 ]
    }, {
      "update-vars" : [ 68 ],
      "successors" : [ 56 ],
      "in-vars" : [ 68, 70, 69 ],
      "exit" : false,
      "out-vars" : [ 68, 70 ],
      "decl-vars" : [ ],
      "line-start" : 195,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 65,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 69
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 68
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 65,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 70
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 195,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 68, 69, 70 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 197,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 197,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61 ],
      "in-vars" : [ 18, 17, 31 ],
      "exit" : false,
      "out-vars" : [ 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 200,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint16",
            "variable" : 31
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 207,
      "code" : "case Uint16:\n\tif xv, ok := x.(uint16); ok {\n\t\tdata := a.Uint16s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 62, 129 ],
      "in-vars" : [ 18, 17, 71, 74 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 74 ],
      "decl-vars" : [ ],
      "line-start" : 201,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 71
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 207,
      "code" : "if xv, ok := x.(uint16); ok {\n\tdata := a.Uint16s()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 71 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 60 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 71, 74 ],
      "decl-vars" : [ 71, 74 ],
      "line-start" : 201,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 85,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 85,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint16"
            }
          },
          "go-type" : 121,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 201,
      "code" : "xv, ok := x.(uint16)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63 ],
      "in-vars" : [ 74, 17 ],
      "exit" : false,
      "out-vars" : [ 72, 74 ],
      "decl-vars" : [ 72 ],
      "line-start" : 202,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint16s"
            },
            "go-type" : 123,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 122,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 202,
      "code" : "data := a.Uint16s()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64, 65 ],
      "in-vars" : [ 72, 74 ],
      "exit" : false,
      "out-vars" : [ 72, 74, 73 ],
      "decl-vars" : [ 73 ],
      "line-start" : 203,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 122,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 72
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 205,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ 72 ],
      "successors" : [ 63 ],
      "in-vars" : [ 72, 74, 73 ],
      "exit" : false,
      "out-vars" : [ 72, 74 ],
      "decl-vars" : [ ],
      "line-start" : 204,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 85,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 73
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 122,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 72
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 85,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 74
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 204,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 74, 72, 73 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 206,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 206,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 68 ],
      "in-vars" : [ 18, 17, 27 ],
      "exit" : false,
      "out-vars" : [ 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 209,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint32",
            "variable" : 27
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 216,
      "code" : "case Uint32:\n\tif xv, ok := x.(uint32); ok {\n\t\tdata := a.Uint32s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 69, 129 ],
      "in-vars" : [ 18, 78, 17, 75 ],
      "exit" : false,
      "out-vars" : [ 78, 17, 18 ],
      "decl-vars" : [ ],
      "line-start" : 210,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 75
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 216,
      "code" : "if xv, ok := x.(uint32); ok {\n\tdata := a.Uint32s()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 75 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 67 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 18, 78, 17, 75 ],
      "decl-vars" : [ 75, 78 ],
      "line-start" : 210,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 63,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 63,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : 125,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 210,
      "code" : "xv, ok := x.(uint32)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 70 ],
      "in-vars" : [ 78, 17 ],
      "exit" : false,
      "out-vars" : [ 76, 78 ],
      "decl-vars" : [ 76 ],
      "line-start" : 211,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint32s"
            },
            "go-type" : 127,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 126,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 211,
      "code" : "data := a.Uint32s()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 71, 72 ],
      "in-vars" : [ 76, 78 ],
      "exit" : false,
      "out-vars" : [ 76, 77, 78 ],
      "decl-vars" : [ 77 ],
      "line-start" : 212,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 126,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 76
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 214,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 76 ]
    }, {
      "update-vars" : [ 76 ],
      "successors" : [ 70 ],
      "in-vars" : [ 76, 77, 78 ],
      "exit" : false,
      "out-vars" : [ 76, 78 ],
      "decl-vars" : [ ],
      "line-start" : 213,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 63,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 77
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 126,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 76
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 63,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 78
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 213,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 78, 76, 77 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 215,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 215,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 75 ],
      "in-vars" : [ 18, 17, 23 ],
      "exit" : false,
      "out-vars" : [ 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 218,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint64",
            "variable" : 23
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 225,
      "code" : "case Uint64:\n\tif xv, ok := x.(uint64); ok {\n\t\tdata := a.Uint64s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 76, 129 ],
      "in-vars" : [ 79, 82, 18, 17 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 82 ],
      "decl-vars" : [ ],
      "line-start" : 219,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 79
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 225,
      "code" : "if xv, ok := x.(uint64); ok {\n\tdata := a.Uint64s()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 79 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 74 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 79, 82, 18, 17 ],
      "decl-vars" : [ 79, 82 ],
      "line-start" : 219,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 130,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 130,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint64"
            }
          },
          "go-type" : 129,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 219,
      "code" : "xv, ok := x.(uint64)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 77 ],
      "in-vars" : [ 17, 82 ],
      "exit" : false,
      "out-vars" : [ 80, 82 ],
      "decl-vars" : [ 80 ],
      "line-start" : 220,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint64s"
            },
            "go-type" : 132,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 131,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 220,
      "code" : "data := a.Uint64s()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 78, 79 ],
      "in-vars" : [ 80, 82 ],
      "exit" : false,
      "out-vars" : [ 81, 80, 82 ],
      "decl-vars" : [ 81 ],
      "line-start" : 221,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 131,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 80
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 223,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 80 ]
    }, {
      "update-vars" : [ 80 ],
      "successors" : [ 77 ],
      "in-vars" : [ 81, 80, 82 ],
      "exit" : false,
      "out-vars" : [ 80, 82 ],
      "decl-vars" : [ ],
      "line-start" : 222,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 130,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 81
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 131,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 80
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 130,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 82
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 222,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 82, 80, 81 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 224,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 224,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 82 ],
      "in-vars" : [ 18, 17, 20 ],
      "exit" : false,
      "out-vars" : [ 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 227,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uintptr",
            "variable" : 20
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 234,
      "code" : "case Uintptr:\n\tif xv, ok := x.(uintptr); ok {\n\t\tdata := a.Uintptrs()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 83, 129 ],
      "in-vars" : [ 86, 18, 17, 83 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 86 ],
      "decl-vars" : [ ],
      "line-start" : 228,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 83
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 234,
      "code" : "if xv, ok := x.(uintptr); ok {\n\tdata := a.Uintptrs()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 83 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 81 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 83, 86 ],
      "decl-vars" : [ 86, 83 ],
      "line-start" : 228,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 39,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 39,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 134,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 228,
      "code" : "xv, ok := x.(uintptr)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 84 ],
      "in-vars" : [ 17, 86 ],
      "exit" : false,
      "out-vars" : [ 84, 86 ],
      "decl-vars" : [ 84 ],
      "line-start" : 229,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uintptrs"
            },
            "go-type" : 136,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 135,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 229,
      "code" : "data := a.Uintptrs()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 85, 86 ],
      "in-vars" : [ 84, 86 ],
      "exit" : false,
      "out-vars" : [ 84, 85, 86 ],
      "decl-vars" : [ 85 ],
      "line-start" : 230,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 135,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 84
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 232,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 84 ]
    }, {
      "update-vars" : [ 84 ],
      "successors" : [ 84 ],
      "in-vars" : [ 86, 84, 85 ],
      "exit" : false,
      "out-vars" : [ 84, 86 ],
      "decl-vars" : [ ],
      "line-start" : 231,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 39,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 85
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 135,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 84
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 39,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 86
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 231,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 84, 85, 86 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 233,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 233,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 89 ],
      "in-vars" : [ 34, 18, 17 ],
      "exit" : false,
      "out-vars" : [ 17, 18 ],
      "decl-vars" : [ ],
      "line-start" : 236,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Float32",
            "variable" : 34
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 243,
      "code" : "case Float32:\n\tif xv, ok := x.(float32); ok {\n\t\tdata := a.Float32s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 90, 129 ],
      "in-vars" : [ 87, 18, 17, 90 ],
      "exit" : false,
      "out-vars" : [ 90, 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 237,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 87
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 243,
      "code" : "if xv, ok := x.(float32); ok {\n\tdata := a.Float32s()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 87 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 88 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 90, 87, 18, 17 ],
      "decl-vars" : [ 87, 90 ],
      "line-start" : 237,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 139,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 139,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "float32"
            }
          },
          "go-type" : 138,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 237,
      "code" : "xv, ok := x.(float32)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 91 ],
      "in-vars" : [ 17, 90 ],
      "exit" : false,
      "out-vars" : [ 90, 88 ],
      "decl-vars" : [ 88 ],
      "line-start" : 238,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Float32s"
            },
            "go-type" : 141,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 140,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 238,
      "code" : "data := a.Float32s()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 92, 93 ],
      "in-vars" : [ 88, 90 ],
      "exit" : false,
      "out-vars" : [ 88, 90, 89 ],
      "decl-vars" : [ 89 ],
      "line-start" : 239,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 140,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 88
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 241,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 88 ]
    }, {
      "update-vars" : [ 88 ],
      "successors" : [ 91 ],
      "in-vars" : [ 88, 90, 89 ],
      "exit" : false,
      "out-vars" : [ 90, 88 ],
      "decl-vars" : [ ],
      "line-start" : 240,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 139,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 89
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 140,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 88
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 139,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 90
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 240,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 88, 89, 90 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 242,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 242,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 96 ],
      "in-vars" : [ 17, 35, 18 ],
      "exit" : false,
      "out-vars" : [ 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 245,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Float64",
            "variable" : 35
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 252,
      "code" : "case Float64:\n\tif xv, ok := x.(float64); ok {\n\t\tdata := a.Float64s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 97, 129 ],
      "in-vars" : [ 91, 18, 17, 94 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 94 ],
      "decl-vars" : [ ],
      "line-start" : 246,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 91
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 252,
      "code" : "if xv, ok := x.(float64); ok {\n\tdata := a.Float64s()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 91 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 95 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 91, 18, 17, 94 ],
      "decl-vars" : [ 91, 94 ],
      "line-start" : 246,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 144,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 144,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "float64"
            }
          },
          "go-type" : 143,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 246,
      "code" : "xv, ok := x.(float64)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 98 ],
      "in-vars" : [ 17, 94 ],
      "exit" : false,
      "out-vars" : [ 92, 94 ],
      "decl-vars" : [ 92 ],
      "line-start" : 247,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Float64s"
            },
            "go-type" : 146,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 145,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 247,
      "code" : "data := a.Float64s()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 99, 100 ],
      "in-vars" : [ 92, 94 ],
      "exit" : false,
      "out-vars" : [ 92, 94, 93 ],
      "decl-vars" : [ 93 ],
      "line-start" : 248,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 145,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 92
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 250,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 92 ]
    }, {
      "update-vars" : [ 92 ],
      "successors" : [ 98 ],
      "in-vars" : [ 92, 94, 93 ],
      "exit" : false,
      "out-vars" : [ 92, 94 ],
      "decl-vars" : [ ],
      "line-start" : 249,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 144,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 93
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 145,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 92
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 144,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 94
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 249,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 94, 92, 93 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 251,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 251,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 103 ],
      "in-vars" : [ 18, 17, 28 ],
      "exit" : false,
      "out-vars" : [ 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 254,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Complex64",
            "variable" : 28
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 261,
      "code" : "case Complex64:\n\tif xv, ok := x.(complex64); ok {\n\t\tdata := a.Complex64s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 104, 129 ],
      "in-vars" : [ 18, 17, 98, 95 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 98 ],
      "decl-vars" : [ ],
      "line-start" : 255,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 95
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 261,
      "code" : "if xv, ok := x.(complex64); ok {\n\tdata := a.Complex64s()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 95 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 102 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 98, 95 ],
      "decl-vars" : [ 95, 98 ],
      "line-start" : 255,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 149,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 149,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "complex64"
            }
          },
          "go-type" : 148,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 255,
      "code" : "xv, ok := x.(complex64)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 105 ],
      "in-vars" : [ 17, 98 ],
      "exit" : false,
      "out-vars" : [ 96, 98 ],
      "decl-vars" : [ 96 ],
      "line-start" : 256,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Complex64s"
            },
            "go-type" : 151,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 150,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 256,
      "code" : "data := a.Complex64s()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 106, 107 ],
      "in-vars" : [ 96, 98 ],
      "exit" : false,
      "out-vars" : [ 96, 97, 98 ],
      "decl-vars" : [ 97 ],
      "line-start" : 257,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 150,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 96
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 259,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 96 ]
    }, {
      "update-vars" : [ 96 ],
      "successors" : [ 105 ],
      "in-vars" : [ 96, 97, 98 ],
      "exit" : false,
      "out-vars" : [ 96, 98 ],
      "decl-vars" : [ ],
      "line-start" : 258,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 149,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 97
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 150,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 96
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 149,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 98
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 258,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 97, 98, 96 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 260,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 260,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 110 ],
      "in-vars" : [ 18, 17, 36 ],
      "exit" : false,
      "out-vars" : [ 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 263,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Complex128",
            "variable" : 36
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 270,
      "code" : "case Complex128:\n\tif xv, ok := x.(complex128); ok {\n\t\tdata := a.Complex128s()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 111, 129 ],
      "in-vars" : [ 18, 17, 99, 102 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 102 ],
      "decl-vars" : [ ],
      "line-start" : 264,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 99
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 270,
      "code" : "if xv, ok := x.(complex128); ok {\n\tdata := a.Complex128s()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 99 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 109 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 99, 102, 18, 17 ],
      "decl-vars" : [ 99, 102 ],
      "line-start" : 264,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 154,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 154,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "complex128"
            }
          },
          "go-type" : 153,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 264,
      "code" : "xv, ok := x.(complex128)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 112 ],
      "in-vars" : [ 17, 102 ],
      "exit" : false,
      "out-vars" : [ 100, 102 ],
      "decl-vars" : [ 100 ],
      "line-start" : 265,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Complex128s"
            },
            "go-type" : 156,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 155,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 265,
      "code" : "data := a.Complex128s()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 113, 114 ],
      "in-vars" : [ 100, 102 ],
      "exit" : false,
      "out-vars" : [ 101, 100, 102 ],
      "decl-vars" : [ 101 ],
      "line-start" : 266,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 155,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 100
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 268,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 100 ]
    }, {
      "update-vars" : [ 100 ],
      "successors" : [ 112 ],
      "in-vars" : [ 101, 100, 102 ],
      "exit" : false,
      "out-vars" : [ 100, 102 ],
      "decl-vars" : [ ],
      "line-start" : 267,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 154,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 101
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 155,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 100
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 154,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 102
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 267,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 102, 100, 101 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 269,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 269,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 117 ],
      "in-vars" : [ 18, 17, 32 ],
      "exit" : false,
      "out-vars" : [ 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 272,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "String",
            "variable" : 32
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 279,
      "code" : "case String:\n\tif xv, ok := x.(string); ok {\n\t\tdata := a.Strings()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 118, 129 ],
      "in-vars" : [ 18, 17, 106, 103 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 106 ],
      "decl-vars" : [ ],
      "line-start" : 273,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 103
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 279,
      "code" : "if xv, ok := x.(string); ok {\n\tdata := a.Strings()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 103 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 116 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 106, 103, 18, 17 ],
      "decl-vars" : [ 103, 106 ],
      "line-start" : 273,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 9,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 9,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "string"
            }
          },
          "go-type" : 158,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 273,
      "code" : "xv, ok := x.(string)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 119 ],
      "in-vars" : [ 106, 17 ],
      "exit" : false,
      "out-vars" : [ 106, 104 ],
      "decl-vars" : [ 104 ],
      "line-start" : 274,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Strings"
            },
            "go-type" : 160,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 159,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 274,
      "code" : "data := a.Strings()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 120, 121 ],
      "in-vars" : [ 104, 106 ],
      "exit" : false,
      "out-vars" : [ 106, 104, 105 ],
      "decl-vars" : [ 105 ],
      "line-start" : 275,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 159,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 104
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 277,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 104 ]
    }, {
      "update-vars" : [ 104 ],
      "successors" : [ 119 ],
      "in-vars" : [ 106, 104, 105 ],
      "exit" : false,
      "out-vars" : [ 104, 106 ],
      "decl-vars" : [ ],
      "line-start" : 276,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 9,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 105
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 159,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 104
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 106
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 276,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 106, 104, 105 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 278,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 278,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 124 ],
      "in-vars" : [ 18, 17, 24 ],
      "exit" : false,
      "out-vars" : [ 18, 17 ],
      "decl-vars" : [ ],
      "line-start" : 281,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "UnsafePointer",
            "variable" : 24
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 288,
      "code" : "case UnsafePointer:\n\tif xv, ok := x.(unsafe.Pointer); ok {\n\t\tdata := a.UnsafePointers()\n\t\tfor i := range data {\n\t\t\tdata[i] = xv\n\t\t}\n\t\treturn nil\n\t}",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 125, 129 ],
      "in-vars" : [ 18, 17, 110, 107 ],
      "exit" : false,
      "out-vars" : [ 17, 110, 18 ],
      "decl-vars" : [ ],
      "line-start" : 282,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 107
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 288,
      "code" : "if xv, ok := x.(unsafe.Pointer); ok {\n\tdata := a.UnsafePointers()\n\tfor i := range data {\n\t\tdata[i] = xv\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 107 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 123 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 110, 107 ],
      "decl-vars" : [ 107, 110 ],
      "line-start" : 282,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 15,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 15,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 162,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 282,
      "code" : "xv, ok := x.(unsafe.Pointer)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 126 ],
      "in-vars" : [ 110, 17 ],
      "exit" : false,
      "out-vars" : [ 108, 110 ],
      "decl-vars" : [ 108 ],
      "line-start" : 283,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "UnsafePointers"
            },
            "go-type" : 164,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 163,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 283,
      "code" : "data := a.UnsafePointers()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 127, 128 ],
      "in-vars" : [ 108, 110 ],
      "exit" : false,
      "out-vars" : [ 108, 110, 109 ],
      "decl-vars" : [ 109 ],
      "line-start" : 284,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 163,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 108
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 286,
      "code" : "for i := range data {\n\tdata[i] = xv\n}",
      "entry" : false,
      "use-vars" : [ 108 ]
    }, {
      "update-vars" : [ 108 ],
      "successors" : [ 126 ],
      "in-vars" : [ 108, 110, 109 ],
      "exit" : false,
      "out-vars" : [ 108, 110 ],
      "decl-vars" : [ ],
      "line-start" : 285,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 15,
          "index" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 109
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 163,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 108
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "xv",
            "variable" : 110
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 285,
      "code" : "data[i] = xv",
      "entry" : false,
      "use-vars" : [ 110, 108, 109 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 287,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 287,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 130 ],
      "in-vars" : [ 18, 17 ],
      "exit" : false,
      "out-vars" : [ 111, 17 ],
      "decl-vars" : [ 111 ],
      "line-start" : 292,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 18
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 166,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "reflect"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ValueOf"
            }
          },
          "go-type" : 58,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 292,
      "code" : "xv := reflect.ValueOf(x)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 132 ],
      "in-vars" : [ 17, 111 ],
      "exit" : false,
      "out-vars" : [ 17, 111, 113 ],
      "decl-vars" : [ 113 ],
      "line-start" : 293,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 39,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 39,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Ptr",
              "variable" : 112
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 293,
      "code" : "ptr := uintptr(a.Ptr)",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 134, 138 ],
      "in-vars" : [ 111, 113, 17, 114 ],
      "exit" : false,
      "out-vars" : [ 111, 113, 17, 114 ],
      "decl-vars" : [ ],
      "line-start" : 294,
      "ast" : {
        "condition" : {
          "go-type" : 169,
          "kind" : "expression",
          "left" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 114
            }
          },
          "operator" : "<",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "L",
              "variable" : 115
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 299,
      "code" : "for i := 0; i < a.L; i++ {\n\twant := ptr + uintptr(i)*a.t.Size()\n\tval := reflect.NewAt(a.t.Type, unsafe.Pointer(want))\n\tval = reflect.Indirect(val)\n\tval.Set(xv)\n}",
      "entry" : false,
      "use-vars" : [ 114, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 131 ],
      "in-vars" : [ 17, 111, 113 ],
      "exit" : false,
      "out-vars" : [ 113, 17, 114, 111 ],
      "decl-vars" : [ 114 ],
      "line-start" : 294,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 16,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 294,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 114 ],
      "successors" : [ 131 ],
      "in-vars" : [ 114, 111, 113, 17 ],
      "exit" : false,
      "out-vars" : [ 111, 113, 17, 114 ],
      "decl-vars" : [ ],
      "line-start" : 294,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 16,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 114
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 114 ],
      "line-end" : 294,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 114 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 135 ],
      "in-vars" : [ 17, 114, 111, 113 ],
      "exit" : false,
      "out-vars" : [ 113, 117, 17, 114, 111 ],
      "decl-vars" : [ 117 ],
      "line-start" : 295,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "want"
          }
        } ],
        "right" : [ {
          "go-type" : 39,
          "kind" : "expression",
          "left" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 113
            }
          },
          "operator" : "+",
          "right" : {
            "go-type" : 39,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 39,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 39,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 39,
              "kind" : "expression",
              "target" : {
                "go-type" : 16,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 114
                }
              },
              "type" : "cast"
            },
            "operator" : "*",
            "right" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Size"
                },
                "go-type" : 76,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 38
                  },
                  "go-type" : 17,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 10,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "a",
                      "variable" : 17
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "go-type" : 39,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 295,
      "code" : "want := ptr + uintptr(i)*a.t.Size()",
      "entry" : false,
      "use-vars" : [ 114, 17, 113 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 136 ],
      "in-vars" : [ 17, 114, 111, 113, 117 ],
      "exit" : false,
      "out-vars" : [ 113, 17, 114, 118, 111 ],
      "decl-vars" : [ 118 ],
      "line-start" : 296,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "val"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Type",
              "variable" : 116
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 38
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "go-type" : 10,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "a",
                  "variable" : 17
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "coerced-to" : {
              "go-type" : 15,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 15,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "go-type" : 39,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "want",
                "variable" : 117
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 170,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "reflect"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewAt"
            }
          },
          "go-type" : 58,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 296,
      "code" : "val := reflect.NewAt(a.t.Type, unsafe.Pointer(want))",
      "entry" : false,
      "use-vars" : [ 117, 17 ]
    }, {
      "update-vars" : [ 118 ],
      "successors" : [ 137 ],
      "in-vars" : [ 17, 114, 118, 111, 113 ],
      "exit" : false,
      "out-vars" : [ 17, 114, 118, 111, 113 ],
      "decl-vars" : [ ],
      "line-start" : 297,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 58,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "val",
            "variable" : 118
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 58,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "val",
              "variable" : 118
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 172,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "reflect"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Indirect"
            }
          },
          "go-type" : 58,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 118 ],
      "line-end" : 297,
      "code" : "val = reflect.Indirect(val)",
      "entry" : false,
      "use-vars" : [ 118 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 133 ],
      "in-vars" : [ 111, 113, 17, 114, 118 ],
      "exit" : false,
      "out-vars" : [ 113, 17, 114, 111 ],
      "decl-vars" : [ ],
      "line-start" : 298,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 58,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 111
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Set"
            },
            "go-type" : 174,
            "kind" : "expression",
            "target" : {
              "go-type" : 58,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "val",
                "variable" : 118
              }
            },
            "type" : "selector"
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 298,
      "code" : "val.Set(xv)",
      "entry" : false,
      "use-vars" : [ 111, 118 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 300,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 300,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// Memset sets all values in the array.\nfunc (a *array) Memset(x interface{}) error {\n\tswitch a.t {\n\tcase Bool:\n\t\tif xv, ok := x.(bool); ok {\n\t\t\tdata := a.Bools()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\tcase Int:\n\t\tif xv, ok := x.(int); ok {\n\t\t\tdata := a.Ints()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\tcase Int8:\n\t\tif xv, ok := x.(int8); ok {\n\t\t\tdata := a.Int8s()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\tcase Int16:\n\t\tif xv, ok := x.(int16); ok {\n\t\t\tdata := a.Int16s()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\tcase Int32:\n\t\tif xv, ok := x.(int32); ok {\n\t\t\tdata := a.Int32s()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\tcase Int64:\n\t\tif xv, ok := x.(int64); ok {\n\t\t\tdata := a.Int64s()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\tcase Uint:\n\t\tif xv, ok := x.(uint); ok {\n\t\t\tdata := a.Uints()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\tcase Uint8:\n\t\tif xv, ok := x.(uint8); ok {\n\t\t\tdata := a.Uint8s()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\tcase Uint16:\n\t\tif xv, ok := x.(uint16); ok {\n\t\t\tdata := a.Uint16s()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\tcase Uint32:\n\t\tif xv, ok := x.(uint32); ok {\n\t\t\tdata := a.Uint32s()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\tcase Uint64:\n\t\tif xv, ok := x.(uint64); ok {\n\t\t\tdata := a.Uint64s()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\tcase Uintptr:\n\t\tif xv, ok := x.(uintptr); ok {\n\t\t\tdata := a.Uintptrs()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\tcase Float32:\n\t\tif xv, ok := x.(float32); ok {\n\t\t\tdata := a.Float32s()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\tcase Float64:\n\t\tif xv, ok := x.(float64); ok {\n\t\t\tdata := a.Float64s()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\tcase Complex64:\n\t\tif xv, ok := x.(complex64); ok {\n\t\t\tdata := a.Complex64s()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\tcase Complex128:\n\t\tif xv, ok := x.(complex128); ok {\n\t\t\tdata := a.Complex128s()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\tcase String:\n\t\tif xv, ok := x.(string); ok {\n\t\t\tdata := a.Strings()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\tcase UnsafePointer:\n\t\tif xv, ok := x.(unsafe.Pointer); ok {\n\t\t\tdata := a.UnsafePointers()\n\t\t\tfor i := range data {\n\t\t\t\tdata[i] = xv\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\t}\n\n\txv := reflect.ValueOf(x)\n\tptr := uintptr(a.Ptr)\n\tfor i := 0; i < a.L; i++ {\n\t\twant := ptr + uintptr(i)*a.t.Size()\n\t\tval := reflect.NewAt(a.t.Type, unsafe.Pointer(want))\n\t\tval = reflect.Indirect(val)\n\t\tval.Set(xv)\n\t}\n\treturn nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Memset",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "Bools",
      "package" : 1,
      "type" : 88,
      "exported" : true
    }, {
      "name" : "Ints",
      "package" : 1,
      "type" : 92,
      "exported" : true
    }, {
      "name" : "Int8s",
      "package" : 1,
      "type" : 97,
      "exported" : true
    }, {
      "name" : "Int16s",
      "package" : 1,
      "type" : 102,
      "exported" : true
    }, {
      "name" : "Int32s",
      "package" : 1,
      "type" : 106,
      "exported" : true
    }, {
      "name" : "Int64s",
      "package" : 1,
      "type" : 111,
      "exported" : true
    }, {
      "name" : "Uints",
      "package" : 1,
      "type" : 115,
      "exported" : true
    }, {
      "name" : "Uint8s",
      "package" : 1,
      "type" : 119,
      "exported" : true
    }, {
      "name" : "Uint16s",
      "package" : 1,
      "type" : 123,
      "exported" : true
    }, {
      "name" : "Uint32s",
      "package" : 1,
      "type" : 127,
      "exported" : true
    }, {
      "name" : "Uint64s",
      "package" : 1,
      "type" : 132,
      "exported" : true
    }, {
      "name" : "Uintptrs",
      "package" : 1,
      "type" : 136,
      "exported" : true
    }, {
      "name" : "Float32s",
      "package" : 1,
      "type" : 141,
      "exported" : true
    }, {
      "name" : "Float64s",
      "package" : 1,
      "type" : 146,
      "exported" : true
    }, {
      "name" : "Complex64s",
      "package" : 1,
      "type" : 151,
      "exported" : true
    }, {
      "name" : "Complex128s",
      "package" : 1,
      "type" : 156,
      "exported" : true
    }, {
      "name" : "Strings",
      "package" : 1,
      "type" : 160,
      "exported" : true
    }, {
      "name" : "UnsafePointers",
      "package" : 1,
      "type" : 164,
      "exported" : true
    }, {
      "name" : "ValueOf",
      "package" : 3,
      "type" : 166,
      "exported" : true
    }, {
      "name" : "Size",
      "package" : 3,
      "type" : 76,
      "exported" : true
    }, {
      "name" : "NewAt",
      "package" : 3,
      "type" : 170,
      "exported" : true
    }, {
      "name" : "Indirect",
      "package" : 3,
      "type" : 172,
      "exported" : true
    }, {
      "name" : "Set",
      "package" : 3,
      "type" : 174,
      "exported" : true
    } ],
    "line-end" : 301,
    "line-start" : 126,
    "names" : [ "Memset" ],
    "package" : 0,
    "packages" : [ {
      "name" : "tensor",
      "path" : "gorgonia.org/tensor"
    }, {
      "name" : "storage",
      "path" : "gorgonia.org/tensor/internal/storage"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    } ],
    "params" : [ 18 ],
    "receivers" : [ 17 ],
    "results" : [ 19 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(x interface{}) error",
      "params" : 1,
      "recv" : 17,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 2
      } ],
      "name" : "(x interface{})",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 5
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 6
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 5
    }, {
      "name" : "func() string",
      "params" : 7,
      "recv" : 0,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 6,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "elem" : 11,
      "name" : "*gorgonia.org/tensor.array",
      "type" : "Pointer",
      "underlying" : 10
    }, {
      "local-name" : "array",
      "name" : "gorgonia.org/tensor.array",
      "package" : 0,
      "type" : "Named",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "Header",
        "type" : 13
      }, {
        "name" : "t",
        "type" : 17
      }, {
        "name" : "v",
        "type" : 2
      } ],
      "name" : "struct{gorgonia.org/tensor/internal/storage.Header; t gorgonia.org/tensor.Dtype; v interface{}}",
      "type" : "Struct",
      "underlying" : 12
    }, {
      "local-name" : "Header",
      "name" : "gorgonia.org/tensor/internal/storage.Header",
      "package" : 1,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "Ptr",
        "type" : 15
      }, {
        "name" : "L",
        "type" : 16
      }, {
        "name" : "C",
        "type" : 16
      } ],
      "name" : "struct{Ptr unsafe.Pointer; L int; C int}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 15
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "local-name" : "Dtype",
      "name" : "gorgonia.org/tensor.Dtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 18
    }, {
      "fields" : [ {
        "name" : "Type",
        "type" : 19
      } ],
      "name" : "struct{reflect.Type}",
      "type" : "Struct",
      "underlying" : 18
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 3,
      "type" : "Named",
      "underlying" : 20
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 21
      }, {
        "name" : "AssignableTo",
        "type" : 23
      }, {
        "name" : "Bits",
        "type" : 21
      }, {
        "name" : "ChanDir",
        "type" : 27
      }, {
        "name" : "Comparable",
        "type" : 30
      }, {
        "name" : "ConvertibleTo",
        "type" : 23
      }, {
        "name" : "Elem",
        "type" : 31
      }, {
        "name" : "Field",
        "type" : 33
      }, {
        "name" : "FieldAlign",
        "type" : 21
      }, {
        "name" : "FieldByIndex",
        "type" : 41
      }, {
        "name" : "FieldByName",
        "type" : 43
      }, {
        "name" : "FieldByNameFunc",
        "type" : 46
      }, {
        "name" : "Implements",
        "type" : 23
      }, {
        "name" : "In",
        "type" : 49
      }, {
        "name" : "IsVariadic",
        "type" : 30
      }, {
        "name" : "Key",
        "type" : 31
      }, {
        "name" : "Kind",
        "type" : 50
      }, {
        "name" : "Len",
        "type" : 21
      }, {
        "name" : "Method",
        "type" : 54
      }, {
        "name" : "MethodByName",
        "type" : 74
      }, {
        "name" : "Name",
        "type" : 6
      }, {
        "name" : "NumField",
        "type" : 21
      }, {
        "name" : "NumIn",
        "type" : 21
      }, {
        "name" : "NumMethod",
        "type" : 21
      }, {
        "name" : "NumOut",
        "type" : 21
      }, {
        "name" : "Out",
        "type" : 49
      }, {
        "name" : "PkgPath",
        "type" : 6
      }, {
        "name" : "Size",
        "type" : 76
      }, {
        "name" : "String",
        "type" : 6
      }, {
        "name" : "common",
        "type" : 78
      }, {
        "name" : "uncommon",
        "type" : 80
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 20
    }, {
      "name" : "func() int",
      "params" : 7,
      "recv" : 1,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "name" : "func(u reflect.Type) bool",
      "params" : 24,
      "recv" : 2,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 23,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 19
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "name" : "func() reflect.ChanDir",
      "params" : 7,
      "recv" : 3,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 29
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 3,
      "type" : "Named",
      "underlying" : 16
    }, {
      "name" : "func() bool",
      "params" : 7,
      "recv" : 4,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "name" : "func() reflect.Type",
      "params" : 7,
      "recv" : 5,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 31,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 19
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 32
    }, {
      "name" : "func(i int) reflect.StructField",
      "params" : 34,
      "recv" : 6,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 16
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 36
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 3,
      "type" : "Named",
      "underlying" : 37
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 9
      }, {
        "name" : "PkgPath",
        "type" : 9
      }, {
        "name" : "Type",
        "type" : 19
      }, {
        "name" : "Tag",
        "type" : 38
      }, {
        "name" : "Offset",
        "type" : 39
      }, {
        "name" : "Index",
        "type" : 40
      }, {
        "name" : "Anonymous",
        "type" : 26
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 37
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 3,
      "type" : "Named",
      "underlying" : 9
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 39
    }, {
      "elem" : 16,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 40
    }, {
      "name" : "func(index []int) reflect.StructField",
      "params" : 42,
      "recv" : 7,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 41,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 40
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "name" : "func(name string) (reflect.StructField, bool)",
      "params" : 44,
      "recv" : 8,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 9
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 36
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 45
    }, {
      "name" : "func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 47,
      "recv" : 9,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 48
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 47
    }, {
      "name" : "func(string) bool",
      "params" : 8,
      "recv" : -1,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 48,
      "variadic" : false
    }, {
      "name" : "func(i int) reflect.Type",
      "params" : 34,
      "recv" : 10,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 49,
      "variadic" : false
    }, {
      "name" : "func() reflect.Kind",
      "params" : 7,
      "recv" : 11,
      "results" : 51,
      "type" : "Signature",
      "underlying" : 50,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 52
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 51
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 3,
      "type" : "Named",
      "underlying" : 53
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 53
    }, {
      "name" : "func(int) reflect.Method",
      "params" : 22,
      "recv" : 12,
      "results" : 55,
      "type" : "Signature",
      "underlying" : 54,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 56
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 55
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 3,
      "type" : "Named",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 9
      }, {
        "name" : "PkgPath",
        "type" : 9
      }, {
        "name" : "Type",
        "type" : 19
      }, {
        "name" : "Func",
        "type" : 58
      }, {
        "name" : "Index",
        "type" : 16
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 57
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 3,
      "type" : "Named",
      "underlying" : 59
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 60
      }, {
        "name" : "ptr",
        "type" : 15
      }, {
        "name" : "flag",
        "type" : 73
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 59
    }, {
      "elem" : 61,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 60
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 3,
      "type" : "Named",
      "underlying" : 62
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 39
      }, {
        "name" : "ptrdata",
        "type" : 39
      }, {
        "name" : "hash",
        "type" : 63
      }, {
        "name" : "tflag",
        "type" : 64
      }, {
        "name" : "align",
        "type" : 65
      }, {
        "name" : "fieldAlign",
        "type" : 65
      }, {
        "name" : "kind",
        "type" : 65
      }, {
        "name" : "equal",
        "type" : 66
      }, {
        "name" : "gcdata",
        "type" : 68
      }, {
        "name" : "str",
        "type" : 70
      }, {
        "name" : "ptrToThis",
        "type" : 72
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 62
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 63
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 3,
      "type" : "Named",
      "underlying" : 65
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 65
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 67,
      "recv" : -1,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 66,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      }, {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 67
    }, {
      "elem" : 69,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 68
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 69
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 3,
      "type" : "Named",
      "underlying" : 71
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 71
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 3,
      "type" : "Named",
      "underlying" : 71
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 3,
      "type" : "Named",
      "underlying" : 39
    }, {
      "name" : "func(string) (reflect.Method, bool)",
      "params" : 8,
      "recv" : 13,
      "results" : 75,
      "type" : "Signature",
      "underlying" : 74,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 56
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 75
    }, {
      "name" : "func() uintptr",
      "params" : 7,
      "recv" : 14,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 76,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 77
    }, {
      "name" : "func() *reflect.rtype",
      "params" : 7,
      "recv" : 15,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 78,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 60
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 79
    }, {
      "name" : "func() *reflect.uncommonType",
      "params" : 7,
      "recv" : 16,
      "results" : 81,
      "type" : "Signature",
      "underlying" : 80,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 82
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 81
    }, {
      "elem" : 83,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 82
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 3,
      "type" : "Named",
      "underlying" : 84
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 70
      }, {
        "name" : "mcount",
        "type" : 85
      }, {
        "name" : "xcount",
        "type" : 85
      }, {
        "name" : "moff",
        "type" : 63
      }, {
        "name" : "_",
        "type" : 63
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 84
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 85
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 26
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(bool, bool)",
      "type" : "Tuple",
      "underlying" : 86
    }, {
      "elem" : 26,
      "name" : "[]bool",
      "type" : "Slice",
      "underlying" : 87
    }, {
      "name" : "func() []bool",
      "params" : 7,
      "recv" : -1,
      "results" : 89,
      "type" : "Signature",
      "underlying" : 88,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 87
      } ],
      "name" : "([]bool)",
      "type" : "Tuple",
      "underlying" : 89
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 90
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(int, bool)",
      "type" : "Tuple",
      "underlying" : 91
    }, {
      "name" : "func() []int",
      "params" : 7,
      "recv" : -1,
      "results" : 93,
      "type" : "Signature",
      "underlying" : 92,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      } ],
      "name" : "([]int)",
      "type" : "Tuple",
      "underlying" : 93
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 95
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(int8, bool)",
      "type" : "Tuple",
      "underlying" : 94
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 95
    }, {
      "elem" : 95,
      "name" : "[]int8",
      "type" : "Slice",
      "underlying" : 96
    }, {
      "name" : "func() []int8",
      "params" : 7,
      "recv" : -1,
      "results" : 98,
      "type" : "Signature",
      "underlying" : 97,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 96
      } ],
      "name" : "([]int8)",
      "type" : "Tuple",
      "underlying" : 98
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 100
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(int16, bool)",
      "type" : "Tuple",
      "underlying" : 99
    }, {
      "name" : "int16",
      "type" : "Basic",
      "underlying" : 100
    }, {
      "elem" : 100,
      "name" : "[]int16",
      "type" : "Slice",
      "underlying" : 101
    }, {
      "name" : "func() []int16",
      "params" : 7,
      "recv" : -1,
      "results" : 103,
      "type" : "Signature",
      "underlying" : 102,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 101
      } ],
      "name" : "([]int16)",
      "type" : "Tuple",
      "underlying" : 103
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 71
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(int32, bool)",
      "type" : "Tuple",
      "underlying" : 104
    }, {
      "elem" : 71,
      "name" : "[]int32",
      "type" : "Slice",
      "underlying" : 105
    }, {
      "name" : "func() []int32",
      "params" : 7,
      "recv" : -1,
      "results" : 107,
      "type" : "Signature",
      "underlying" : 106,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 105
      } ],
      "name" : "([]int32)",
      "type" : "Tuple",
      "underlying" : 107
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 109
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(int64, bool)",
      "type" : "Tuple",
      "underlying" : 108
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 109
    }, {
      "elem" : 109,
      "name" : "[]int64",
      "type" : "Slice",
      "underlying" : 110
    }, {
      "name" : "func() []int64",
      "params" : 7,
      "recv" : -1,
      "results" : 112,
      "type" : "Signature",
      "underlying" : 111,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 110
      } ],
      "name" : "([]int64)",
      "type" : "Tuple",
      "underlying" : 112
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 53
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(uint, bool)",
      "type" : "Tuple",
      "underlying" : 113
    }, {
      "elem" : 53,
      "name" : "[]uint",
      "type" : "Slice",
      "underlying" : 114
    }, {
      "name" : "func() []uint",
      "params" : 7,
      "recv" : -1,
      "results" : 116,
      "type" : "Signature",
      "underlying" : 115,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 114
      } ],
      "name" : "([]uint)",
      "type" : "Tuple",
      "underlying" : 116
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 65
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(uint8, bool)",
      "type" : "Tuple",
      "underlying" : 117
    }, {
      "elem" : 65,
      "name" : "[]uint8",
      "type" : "Slice",
      "underlying" : 118
    }, {
      "name" : "func() []uint8",
      "params" : 7,
      "recv" : -1,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 119,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 118
      } ],
      "name" : "([]uint8)",
      "type" : "Tuple",
      "underlying" : 120
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 85
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(uint16, bool)",
      "type" : "Tuple",
      "underlying" : 121
    }, {
      "elem" : 85,
      "name" : "[]uint16",
      "type" : "Slice",
      "underlying" : 122
    }, {
      "name" : "func() []uint16",
      "params" : 7,
      "recv" : -1,
      "results" : 124,
      "type" : "Signature",
      "underlying" : 123,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 122
      } ],
      "name" : "([]uint16)",
      "type" : "Tuple",
      "underlying" : 124
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 63
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(uint32, bool)",
      "type" : "Tuple",
      "underlying" : 125
    }, {
      "elem" : 63,
      "name" : "[]uint32",
      "type" : "Slice",
      "underlying" : 126
    }, {
      "name" : "func() []uint32",
      "params" : 7,
      "recv" : -1,
      "results" : 128,
      "type" : "Signature",
      "underlying" : 127,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 126
      } ],
      "name" : "([]uint32)",
      "type" : "Tuple",
      "underlying" : 128
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 130
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(uint64, bool)",
      "type" : "Tuple",
      "underlying" : 129
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 130
    }, {
      "elem" : 130,
      "name" : "[]uint64",
      "type" : "Slice",
      "underlying" : 131
    }, {
      "name" : "func() []uint64",
      "params" : 7,
      "recv" : -1,
      "results" : 133,
      "type" : "Signature",
      "underlying" : 132,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 131
      } ],
      "name" : "([]uint64)",
      "type" : "Tuple",
      "underlying" : 133
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(uintptr, bool)",
      "type" : "Tuple",
      "underlying" : 134
    }, {
      "elem" : 39,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 135
    }, {
      "name" : "func() []uintptr",
      "params" : 7,
      "recv" : -1,
      "results" : 137,
      "type" : "Signature",
      "underlying" : 136,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 135
      } ],
      "name" : "([]uintptr)",
      "type" : "Tuple",
      "underlying" : 137
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 139
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(float32, bool)",
      "type" : "Tuple",
      "underlying" : 138
    }, {
      "name" : "float32",
      "type" : "Basic",
      "underlying" : 139
    }, {
      "elem" : 139,
      "name" : "[]float32",
      "type" : "Slice",
      "underlying" : 140
    }, {
      "name" : "func() []float32",
      "params" : 7,
      "recv" : -1,
      "results" : 142,
      "type" : "Signature",
      "underlying" : 141,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 140
      } ],
      "name" : "([]float32)",
      "type" : "Tuple",
      "underlying" : 142
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 144
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(float64, bool)",
      "type" : "Tuple",
      "underlying" : 143
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 144
    }, {
      "elem" : 144,
      "name" : "[]float64",
      "type" : "Slice",
      "underlying" : 145
    }, {
      "name" : "func() []float64",
      "params" : 7,
      "recv" : -1,
      "results" : 147,
      "type" : "Signature",
      "underlying" : 146,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 145
      } ],
      "name" : "([]float64)",
      "type" : "Tuple",
      "underlying" : 147
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 149
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(complex64, bool)",
      "type" : "Tuple",
      "underlying" : 148
    }, {
      "name" : "complex64",
      "type" : "Basic",
      "underlying" : 149
    }, {
      "elem" : 149,
      "name" : "[]complex64",
      "type" : "Slice",
      "underlying" : 150
    }, {
      "name" : "func() []complex64",
      "params" : 7,
      "recv" : -1,
      "results" : 152,
      "type" : "Signature",
      "underlying" : 151,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 150
      } ],
      "name" : "([]complex64)",
      "type" : "Tuple",
      "underlying" : 152
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 154
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(complex128, bool)",
      "type" : "Tuple",
      "underlying" : 153
    }, {
      "name" : "complex128",
      "type" : "Basic",
      "underlying" : 154
    }, {
      "elem" : 154,
      "name" : "[]complex128",
      "type" : "Slice",
      "underlying" : 155
    }, {
      "name" : "func() []complex128",
      "params" : 7,
      "recv" : -1,
      "results" : 157,
      "type" : "Signature",
      "underlying" : 156,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 155
      } ],
      "name" : "([]complex128)",
      "type" : "Tuple",
      "underlying" : 157
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(string, bool)",
      "type" : "Tuple",
      "underlying" : 158
    }, {
      "elem" : 9,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 159
    }, {
      "name" : "func() []string",
      "params" : 7,
      "recv" : -1,
      "results" : 161,
      "type" : "Signature",
      "underlying" : 160,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 159
      } ],
      "name" : "([]string)",
      "type" : "Tuple",
      "underlying" : 161
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(unsafe.Pointer, bool)",
      "type" : "Tuple",
      "underlying" : 162
    }, {
      "elem" : 15,
      "name" : "[]unsafe.Pointer",
      "type" : "Slice",
      "underlying" : 163
    }, {
      "name" : "func() []unsafe.Pointer",
      "params" : 7,
      "recv" : -1,
      "results" : 165,
      "type" : "Signature",
      "underlying" : 164,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 163
      } ],
      "name" : "([]unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 165
    }, {
      "name" : "func(i interface{}) reflect.Value",
      "params" : 167,
      "recv" : -1,
      "results" : 168,
      "type" : "Signature",
      "underlying" : 166,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      } ],
      "name" : "(i interface{})",
      "type" : "Tuple",
      "underlying" : 167
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 58
      } ],
      "name" : "(reflect.Value)",
      "type" : "Tuple",
      "underlying" : 168
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 169
    }, {
      "name" : "func(typ reflect.Type, p unsafe.Pointer) reflect.Value",
      "params" : 171,
      "recv" : -1,
      "results" : 168,
      "type" : "Signature",
      "underlying" : 170,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 19
      }, {
        "name" : "p",
        "type" : 15
      } ],
      "name" : "(typ reflect.Type, p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 171
    }, {
      "name" : "func(v reflect.Value) reflect.Value",
      "params" : 173,
      "recv" : -1,
      "results" : 168,
      "type" : "Signature",
      "underlying" : 172,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 58
      } ],
      "name" : "(v reflect.Value)",
      "type" : "Tuple",
      "underlying" : 173
    }, {
      "name" : "func(x reflect.Value)",
      "params" : 175,
      "recv" : -1,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 174,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 58
      } ],
      "name" : "(x reflect.Value)",
      "type" : "Tuple",
      "underlying" : 175
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "a",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "x",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uintptr",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Int16",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Int8",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uint64",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "UnsafePointer",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Int64",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Int",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uint32",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Complex64",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Bool",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uint8",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uint16",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "String",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uint",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Float32",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Float64",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Complex128",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Int32",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 95,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 101,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 100,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 105,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 71,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 110,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 114,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 53,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 118,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 65,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 122,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 85,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 126,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 63,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 131,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 130,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 135,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 39,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 140,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 139,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 145,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 144,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 150,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 149,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 155,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 154,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 159,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 163,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 58,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Ptr",
      "package" : 1,
      "type" : 15,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 39,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "L",
      "package" : 1,
      "type" : 16,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Type",
      "package" : 0,
      "type" : 19,
      "exported" : true,
      "embedded" : true,
      "field" : true
    }, {
      "name" : "want",
      "package" : 0,
      "type" : 39,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "val",
      "package" : 0,
      "type" : 58,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}