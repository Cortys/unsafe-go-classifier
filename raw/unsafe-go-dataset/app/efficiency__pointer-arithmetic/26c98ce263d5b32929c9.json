{
  "usage" : {
    "file" : "freelist.go",
    "label1" : "pointer-arithmetic",
    "label2" : "efficiency",
    "line" : "342",
    "module" : "go.etcd.io/bbolt",
    "pkg" : "go.etcd.io/bbolt",
    "project" : "mattermost/mattermost-server",
    "snippet" : "*(*pgid)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + unsafe.Sizeof(*p))) = pgid(lenids)",
    "version" : "v1.3.4"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 3 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 330,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "flags",
            "variable" : 4
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "operator" : "|",
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "16"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 330,
      "code" : "p.flags |= freelistPageFlag",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 5 ],
      "decl-vars" : [ 5 ],
      "line-start" : 334,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "lenids"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "count"
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 21,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 334,
      "code" : "lenids := f.count()",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 6 ],
      "in-vars" : [ 2, 1, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 5 ],
      "decl-vars" : [ ],
      "line-start" : 335,
      "ast" : {
        "condition" : {
          "go-type" : 16,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "lenids",
              "variable" : 5
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 344,
      "code" : "if lenids == 0 {\n\tp.count = uint16(lenids)\n} else if lenids < 0xFFFF {\n\tp.count = uint16(lenids)\n\tf.copyallunsafe(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + unsafe.Sizeof(*p)))\n} else {\n\tp.count = 0xFFFF\n\t*(*pgid)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + unsafe.Sizeof(*p))) = pgid(lenids)\n\tf.copyallunsafe(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + unsafe.Sizeof(*p) + unsafe.Sizeof(pgid(0))))\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 12 ],
      "in-vars" : [ 5, 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 336,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "count",
            "variable" : 6
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 7,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 7,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint16"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "lenids",
              "variable" : 5
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 336,
      "code" : "p.count = uint16(lenids)",
      "entry" : false,
      "use-vars" : [ 5, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 9 ],
      "in-vars" : [ 2, 1, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 5 ],
      "decl-vars" : [ ],
      "line-start" : 337,
      "ast" : {
        "condition" : {
          "go-type" : 16,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "lenids",
              "variable" : 5
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "65535"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 344,
      "code" : "if lenids < 0xFFFF {\n\tp.count = uint16(lenids)\n\tf.copyallunsafe(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + unsafe.Sizeof(*p)))\n} else {\n\tp.count = 0xFFFF\n\t*(*pgid)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + unsafe.Sizeof(*p))) = pgid(lenids)\n\tf.copyallunsafe(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + unsafe.Sizeof(*p) + unsafe.Sizeof(pgid(0))))\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 8 ],
      "in-vars" : [ 2, 1, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 338,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "count",
            "variable" : 6
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 7,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 7,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint16"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "lenids",
              "variable" : 5
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 338,
      "code" : "p.count = uint16(lenids)",
      "entry" : false,
      "use-vars" : [ 2, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 339,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 19,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 19,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "go-type" : 20,
              "kind" : "expression",
              "left" : {
                "coerced-to" : {
                  "go-type" : 20,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 20,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 20,
                "kind" : "expression",
                "target" : {
                  "coerced-to" : {
                    "go-type" : 19,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 1,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 19,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 19,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "p",
                      "variable" : 2
                    }
                  },
                  "type" : "cast"
                },
                "type" : "cast"
              },
              "operator" : "+",
              "right" : {
                "go-type" : 20,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "16"
                }
              },
              "type" : "binary"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "copyallunsafe"
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 339,
      "code" : "f.copyallunsafe(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + unsafe.Sizeof(*p)))",
      "entry" : false,
      "use-vars" : [ 2, 1 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 10 ],
      "in-vars" : [ 5, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 5 ],
      "decl-vars" : [ ],
      "line-start" : 341,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "count",
            "variable" : 6
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "65535"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 341,
      "code" : "p.count = 0xFFFF",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 2, 1, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 342,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 5,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 5,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "pgid"
                }
              },
              "go-type" : 21,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 19,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 19,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 19,
              "kind" : "expression",
              "target" : {
                "go-type" : 20,
                "kind" : "expression",
                "left" : {
                  "coerced-to" : {
                    "go-type" : 20,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 20,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uintptr"
                    }
                  },
                  "go-type" : 20,
                  "kind" : "expression",
                  "target" : {
                    "coerced-to" : {
                      "go-type" : 19,
                      "kind" : "type",
                      "qualifier" : {
                        "ident-kind" : "PkgName",
                        "kind" : "ident",
                        "package" : 1,
                        "value" : "unsafe"
                      },
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 19,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "Pointer"
                      }
                    },
                    "go-type" : 19,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 2,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "p",
                        "variable" : 2
                      }
                    },
                    "type" : "cast"
                  },
                  "type" : "cast"
                },
                "operator" : "+",
                "right" : {
                  "go-type" : 20,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "16"
                  }
                },
                "type" : "binary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 5,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 5,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "pgid"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "lenids",
              "variable" : 5
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 342,
      "code" : "*(*pgid)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + unsafe.Sizeof(*p))) = pgid(lenids)",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 343,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 19,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 19,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "go-type" : 20,
              "kind" : "expression",
              "left" : {
                "go-type" : 20,
                "kind" : "expression",
                "left" : {
                  "coerced-to" : {
                    "go-type" : 20,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 20,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uintptr"
                    }
                  },
                  "go-type" : 20,
                  "kind" : "expression",
                  "target" : {
                    "coerced-to" : {
                      "go-type" : 19,
                      "kind" : "type",
                      "qualifier" : {
                        "ident-kind" : "PkgName",
                        "kind" : "ident",
                        "package" : 1,
                        "value" : "unsafe"
                      },
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 19,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "Pointer"
                      }
                    },
                    "go-type" : 19,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 2,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "p",
                        "variable" : 2
                      }
                    },
                    "type" : "cast"
                  },
                  "type" : "cast"
                },
                "operator" : "+",
                "right" : {
                  "go-type" : 20,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "16"
                  }
                },
                "type" : "binary"
              },
              "operator" : "+",
              "right" : {
                "go-type" : 20,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "binary"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "copyallunsafe"
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 343,
      "code" : "f.copyallunsafe(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + unsafe.Sizeof(*p) + unsafe.Sizeof(pgid(0))))",
      "entry" : false,
      "use-vars" : [ 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 346,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 22,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 346,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// write writes the page ids onto a freelist page. All free and pending ids are\n// saved to disk since in the event of a program crash, all pending ids will\n// become free.\nfunc (f *freelist) write(p *page) error {\n\n\tp.flags |= freelistPageFlag\n\n\tlenids := f.count()\n\tif lenids == 0 {\n\t\tp.count = uint16(lenids)\n\t} else if lenids < 0xFFFF {\n\t\tp.count = uint16(lenids)\n\t\tf.copyallunsafe(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + unsafe.Sizeof(*p)))\n\t} else {\n\t\tp.count = 0xFFFF\n\t\t*(*pgid)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + unsafe.Sizeof(*p))) = pgid(lenids)\n\t\tf.copyallunsafe(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + unsafe.Sizeof(*p) + unsafe.Sizeof(pgid(0))))\n\t}\n\n\treturn nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "write",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "count",
      "package" : 0,
      "type" : 23,
      "exported" : false
    }, {
      "name" : "copyallunsafe",
      "package" : 0,
      "type" : 17,
      "exported" : false
    } ],
    "line-end" : 347,
    "line-start" : 326,
    "names" : [ "write" ],
    "package" : 0,
    "packages" : [ {
      "name" : "bbolt",
      "path" : "go.etcd.io/bbolt"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 2 ],
    "receivers" : [ 1 ],
    "results" : [ 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(p *go.etcd.io/bbolt.page) error",
      "params" : 1,
      "recv" : 1,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 2
      } ],
      "name" : "(p *go.etcd.io/bbolt.page)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*go.etcd.io/bbolt.page",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "page",
      "name" : "go.etcd.io/bbolt.page",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "id",
        "type" : 5
      }, {
        "name" : "flags",
        "type" : 7
      }, {
        "name" : "count",
        "type" : 7
      }, {
        "name" : "overflow",
        "type" : 8
      } ],
      "name" : "struct{id go.etcd.io/bbolt.pgid; flags uint16; count uint16; overflow uint32}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "pgid",
      "name" : "go.etcd.io/bbolt.pgid",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 11
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 12
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 11
    }, {
      "name" : "func() string",
      "params" : 13,
      "recv" : 0,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "name" : "func(dstptr unsafe.Pointer)",
      "params" : 18,
      "recv" : -1,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 17,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstptr",
        "type" : 19
      } ],
      "name" : "(dstptr unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 19
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "elem" : 5,
      "name" : "*go.etcd.io/bbolt.pgid",
      "type" : "Pointer",
      "underlying" : 21
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 22
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "flags",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "lenids",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "count",
      "package" : 0,
      "type" : 7,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}