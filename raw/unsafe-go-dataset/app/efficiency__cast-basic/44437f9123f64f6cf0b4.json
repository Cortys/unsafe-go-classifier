{
  "usage" : {
    "file" : "map_linux.go",
    "label1" : "cast-basic",
    "label2" : "efficiency",
    "line" : "680",
    "module" : "github.com/cilium/cilium",
    "pkg" : "github.com/cilium/cilium/pkg/bpf",
    "project" : "cilium/cilium",
    "snippet" : "key:   uint64(uintptr(unsafe.Pointer(&currentKey[0]))),",
    "version" : "project"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 8, 9, 11 ],
      "exit" : false,
      "out-vars" : [ 8, 9, 11 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ 9 ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 8, 9, 11 ],
      "exit" : false,
      "out-vars" : [ 14, 8, 7, 15, 16, 17, 9, 18, 11 ],
      "decl-vars" : [ 7, 18, 15, 14, 17, 16 ],
      "line-start" : 642,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : null,
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "prevKey"
            } ],
            "type" : "var",
            "values" : [ {
              "argument" : {
                "element" : {
                  "go-type" : 73,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 73,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "byte"
                  }
                },
                "go-type" : 72,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 72,
              "kind" : "expression",
              "rest" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "KeySize",
                  "variable" : 12
                },
                "go-type" : 44,
                "kind" : "expression",
                "target" : {
                  "go-type" : 49,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 7
                  }
                },
                "type" : "selector"
              } ],
              "type" : "make"
            } ]
          }, {
            "comments" : [ ],
            "declared-type" : null,
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "currentKey"
            } ],
            "type" : "var",
            "values" : [ {
              "argument" : {
                "element" : {
                  "go-type" : 73,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 73,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "byte"
                  }
                },
                "go-type" : 72,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 72,
              "kind" : "expression",
              "rest" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "KeySize",
                  "variable" : 12
                },
                "go-type" : 44,
                "kind" : "expression",
                "target" : {
                  "go-type" : 49,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 7
                  }
                },
                "type" : "selector"
              } ],
              "type" : "make"
            } ]
          }, {
            "comments" : [ ],
            "declared-type" : null,
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "nextKey"
            } ],
            "type" : "var",
            "values" : [ {
              "argument" : {
                "element" : {
                  "go-type" : 73,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 73,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "byte"
                  }
                },
                "go-type" : 72,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 72,
              "kind" : "expression",
              "rest" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "KeySize",
                  "variable" : 12
                },
                "go-type" : 44,
                "kind" : "expression",
                "target" : {
                  "go-type" : 49,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 7
                  }
                },
                "type" : "selector"
              } ],
              "type" : "make"
            } ]
          }, {
            "comments" : [ ],
            "declared-type" : null,
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "value"
            } ],
            "type" : "var",
            "values" : [ {
              "argument" : {
                "element" : {
                  "go-type" : 73,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 73,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "byte"
                  }
                },
                "go-type" : 72,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 72,
              "kind" : "expression",
              "rest" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ReadValueSize",
                  "variable" : 13
                },
                "go-type" : 44,
                "kind" : "expression",
                "target" : {
                  "go-type" : 49,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 7
                  }
                },
                "type" : "selector"
              } ],
              "type" : "make"
            } ]
          }, {
            "comments" : [ ],
            "declared-type" : null,
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "prevKeyValid"
            } ],
            "type" : "var",
            "values" : [ {
              "go-type" : 38,
              "kind" : "constant",
              "value" : {
                "type" : "BOOL",
                "value" : "false"
              }
            } ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 649,
      "code" : "var (\n\tprevKey    = make([]byte, m.KeySize)\n\tcurrentKey = make([]byte, m.KeySize)\n\tnextKey    = make([]byte, m.KeySize)\n\tvalue      = make([]byte, m.ReadValueSize)\n\n\tprevKeyValid = false\n)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 15, 11, 8, 9, 18, 7, 16, 17, 14 ],
      "exit" : false,
      "out-vars" : [ 15, 11, 7, 16, 17, 14, 8, 9, 18 ],
      "decl-vars" : [ ],
      "line-start" : 650,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "start"
            },
            "go-type" : 80,
            "kind" : "expression",
            "target" : {
              "go-type" : 24,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "stats",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 650,
      "code" : "stats.start()",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 8 ],
      "in-vars" : [ 21, 11, 8, 9, 18, 7, 15, 17, 14, 16 ],
      "exit" : false,
      "out-vars" : [ 7, 16, 9, 18, 15, 21, 11, 17, 14, 8 ],
      "decl-vars" : [ ],
      "line-start" : 653,
      "ast" : {
        "condition" : {
          "go-type" : 84,
          "kind" : "expression",
          "left" : {
            "go-type" : 46,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 21
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 85,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 655,
      "code" : "if err := m.Open(); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 7, 15, 14, 18, 9, 16, 11, 17, 8 ],
      "exit" : false,
      "out-vars" : [ 14, 8, 18, 21, 16, 17, 9, 7, 15, 11 ],
      "decl-vars" : [ 21 ],
      "line-start" : 653,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Open"
            },
            "go-type" : 82,
            "kind" : "expression",
            "target" : {
              "go-type" : 49,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 7
              }
            },
            "type" : "selector"
          },
          "go-type" : 46,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 653,
      "code" : "err := m.Open()",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 9, 21 ],
      "exit" : false,
      "out-vars" : [ 9 ],
      "decl-vars" : [ ],
      "line-start" : 654,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 46,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 21
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 654,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 14 ],
      "in-vars" : [ 15, 16, 11, 14, 8, 9, 7, 17, 23, 18 ],
      "exit" : false,
      "out-vars" : [ 17, 8, 23, 9, 15, 16, 11, 14, 18, 7 ],
      "decl-vars" : [ ],
      "line-start" : 657,
      "ast" : {
        "condition" : {
          "go-type" : 84,
          "kind" : "expression",
          "left" : {
            "go-type" : 46,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 23
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 85,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 665,
      "code" : "if err := GetFirstKey(m.fd, unsafe.Pointer(&currentKey[0])); err != nil {\n\tstats.Lookup = 1\n\tif err == io.EOF {\n\n\t\tstats.Completed = true\n\t\treturn nil\n\t}\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 14, 9, 18, 7, 15, 16, 11, 17, 8 ],
      "exit" : false,
      "out-vars" : [ 11, 14, 8, 23, 9, 18, 7, 15, 17, 16 ],
      "decl-vars" : [ 23 ],
      "line-start" : 657,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fd",
              "variable" : 22
            },
            "go-type" : 37,
            "kind" : "expression",
            "target" : {
              "go-type" : 49,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 7
              }
            },
            "type" : "selector"
          }, {
            "coerced-to" : {
              "go-type" : 12,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 12,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "go-type" : 88,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 73,
                "index" : {
                  "go-type" : 37,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 72,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "currentKey",
                    "variable" : 17
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 86,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "GetFirstKey"
            }
          },
          "go-type" : 46,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 657,
      "code" : "err := GetFirstKey(m.fd, unsafe.Pointer(&currentKey[0]))",
      "entry" : false,
      "use-vars" : [ 7, 17 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 10 ],
      "in-vars" : [ 23, 9 ],
      "exit" : false,
      "out-vars" : [ 23, 9 ],
      "decl-vars" : [ ],
      "line-start" : 658,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Lookup",
            "variable" : 24
          },
          "go-type" : 44,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stats",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 44,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 658,
      "code" : "stats.Lookup = 1",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 13 ],
      "in-vars" : [ 23, 9 ],
      "exit" : false,
      "out-vars" : [ 23, 9 ],
      "decl-vars" : [ ],
      "line-start" : 659,
      "ast" : {
        "condition" : {
          "go-type" : 84,
          "kind" : "expression",
          "left" : {
            "go-type" : 46,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 23
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 46,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 6,
              "value" : "io"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "EOF",
              "variable" : 25
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 663,
      "code" : "if err == io.EOF {\n\n\tstats.Completed = true\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 12 ],
      "in-vars" : [ 9 ],
      "exit" : false,
      "out-vars" : [ 9 ],
      "decl-vars" : [ ],
      "line-start" : 661,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Completed",
            "variable" : 26
          },
          "go-type" : 38,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stats",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 661,
      "code" : "stats.Completed = true",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 9 ],
      "exit" : false,
      "out-vars" : [ 9 ],
      "decl-vars" : [ ],
      "line-start" : 662,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 85,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 662,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23, 9 ],
      "exit" : false,
      "out-vars" : [ 9 ],
      "decl-vars" : [ ],
      "line-start" : 664,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 46,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 23
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 664,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 9, 18, 16, 17, 8, 15, 11, 14, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 18, 28, 15, 11, 17, 14, 8, 7, 16 ],
      "decl-vars" : [ 28 ],
      "line-start" : 667,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mk"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "DeepCopyMapKey"
            },
            "go-type" : 89,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "MapKey",
                "variable" : 27
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 49,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 7
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 667,
      "code" : "mk := m.MapKey.DeepCopyMapKey()",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 18, 7, 28, 15, 16, 17, 14, 8, 9, 11 ],
      "exit" : false,
      "out-vars" : [ 8, 7, 30, 15, 11, 17, 9, 18, 28, 16, 14 ],
      "decl-vars" : [ 30 ],
      "line-start" : 668,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mv"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "DeepCopyMapValue"
            },
            "go-type" : 90,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "MapValue",
                "variable" : 29
              },
              "go-type" : 15,
              "kind" : "expression",
              "target" : {
                "go-type" : 49,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 7
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 668,
      "code" : "mv := m.MapValue.DeepCopyMapValue()",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 28, 15, 11, 30, 14, 8, 9, 18, 7, 16, 17 ],
      "exit" : false,
      "out-vars" : [ 30, 28, 17, 14, 8, 9, 7, 34, 11, 18, 15, 16 ],
      "decl-vars" : [ 34 ],
      "line-start" : 670,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "bpfCurrentKey"
          }
        } ],
        "right" : [ {
          "declared" : {
            "go-type" : 91,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 91,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "bpfAttrMapOpElem"
            }
          },
          "go-type" : 91,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapFd",
                "variable" : 31
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "coerced-to" : {
                "go-type" : 44,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 44,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "go-type" : 44,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fd",
                  "variable" : 22
                },
                "go-type" : 37,
                "kind" : "expression",
                "target" : {
                  "go-type" : 49,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 7
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            }
          }, {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "key",
                "variable" : 32
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "coerced-to" : {
                "go-type" : 29,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 29,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint64"
                }
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 94,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 94,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 94,
                "kind" : "expression",
                "target" : {
                  "coerced-to" : {
                    "go-type" : 12,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 1,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 12,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 12,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 88,
                    "kind" : "expression",
                    "operator" : "&",
                    "target" : {
                      "go-type" : 73,
                      "index" : {
                        "go-type" : 37,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "0"
                        }
                      },
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 72,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "currentKey",
                          "variable" : 17
                        }
                      },
                      "type" : "index"
                    },
                    "type" : "unary"
                  },
                  "type" : "cast"
                },
                "type" : "cast"
              },
              "type" : "cast"
            }
          }, {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "value",
                "variable" : 33
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "coerced-to" : {
                "go-type" : 29,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 29,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint64"
                }
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 94,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 94,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 94,
                "kind" : "expression",
                "target" : {
                  "coerced-to" : {
                    "go-type" : 12,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 1,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 12,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 12,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 88,
                    "kind" : "expression",
                    "operator" : "&",
                    "target" : {
                      "go-type" : 73,
                      "index" : {
                        "go-type" : 37,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "0"
                        }
                      },
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 72,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "value",
                          "variable" : 15
                        }
                      },
                      "type" : "index"
                    },
                    "type" : "unary"
                  },
                  "type" : "cast"
                },
                "type" : "cast"
              },
              "type" : "cast"
            }
          } ]
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 674,
      "code" : "bpfCurrentKey := bpfAttrMapOpElem{\n\tmapFd: uint32(m.fd),\n\tkey:   uint64(uintptr(unsafe.Pointer(&currentKey[0]))),\n\tvalue: uint64(uintptr(unsafe.Pointer(&value[0]))),\n}",
      "entry" : false,
      "use-vars" : [ 7, 15, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 17, 14, 28, 15, 11, 8, 9, 18, 7, 34, 30, 16 ],
      "exit" : false,
      "out-vars" : [ 17, 14, 8, 7, 30, 16, 9, 18, 35, 34, 28, 15, 11 ],
      "decl-vars" : [ 35 ],
      "line-start" : 675,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "bpfCurrentKeyPtr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 12,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 12,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "go-type" : 95,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 91,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "bpfCurrentKey",
                "variable" : 34
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 675,
      "code" : "bpfCurrentKeyPtr := unsafe.Pointer(&bpfCurrentKey)",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 8, 18, 7, 34, 30, 28, 15, 17, 14, 9, 35, 16, 11 ],
      "exit" : false,
      "out-vars" : [ 18, 7, 17, 14, 8, 9, 36, 16, 11, 35, 30, 28, 15 ],
      "decl-vars" : [ 36 ],
      "line-start" : 676,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "bpfCurrentKeySize"
          }
        } ],
        "right" : [ {
          "go-type" : 94,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "32"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 676,
      "code" : "bpfCurrentKeySize := unsafe.Sizeof(bpfCurrentKey)",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 17, 9, 18, 7, 16, 11, 36, 14, 8, 35, 30, 28, 15 ],
      "exit" : false,
      "out-vars" : [ 11, 17, 37, 35, 28, 14, 8, 9, 18, 30, 15, 7, 36, 16 ],
      "decl-vars" : [ 37 ],
      "line-start" : 678,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "bpfNextKey"
          }
        } ],
        "right" : [ {
          "declared" : {
            "go-type" : 91,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 91,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "bpfAttrMapOpElem"
            }
          },
          "go-type" : 91,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapFd",
                "variable" : 31
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "coerced-to" : {
                "go-type" : 44,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 44,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "go-type" : 44,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fd",
                  "variable" : 22
                },
                "go-type" : 37,
                "kind" : "expression",
                "target" : {
                  "go-type" : 49,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 7
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            }
          }, {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "key",
                "variable" : 32
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "coerced-to" : {
                "go-type" : 29,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 29,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint64"
                }
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 94,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 94,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 94,
                "kind" : "expression",
                "target" : {
                  "coerced-to" : {
                    "go-type" : 12,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 1,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 12,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 12,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 88,
                    "kind" : "expression",
                    "operator" : "&",
                    "target" : {
                      "go-type" : 73,
                      "index" : {
                        "go-type" : 37,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "0"
                        }
                      },
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 72,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "currentKey",
                          "variable" : 17
                        }
                      },
                      "type" : "index"
                    },
                    "type" : "unary"
                  },
                  "type" : "cast"
                },
                "type" : "cast"
              },
              "type" : "cast"
            }
          }, {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "value",
                "variable" : 33
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "coerced-to" : {
                "go-type" : 29,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 29,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint64"
                }
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 94,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 94,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 94,
                "kind" : "expression",
                "target" : {
                  "coerced-to" : {
                    "go-type" : 12,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 1,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 12,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 12,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 88,
                    "kind" : "expression",
                    "operator" : "&",
                    "target" : {
                      "go-type" : 73,
                      "index" : {
                        "go-type" : 37,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "0"
                        }
                      },
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 72,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "nextKey",
                          "variable" : 14
                        }
                      },
                      "type" : "index"
                    },
                    "type" : "unary"
                  },
                  "type" : "cast"
                },
                "type" : "cast"
              },
              "type" : "cast"
            }
          } ]
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 682,
      "code" : "bpfNextKey := bpfAttrMapOpElem{\n\tmapFd: uint32(m.fd),\n\tkey:   uint64(uintptr(unsafe.Pointer(&currentKey[0]))),\n\tvalue: uint64(uintptr(unsafe.Pointer(&nextKey[0]))),\n}",
      "entry" : false,
      "use-vars" : [ 17, 14, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 11, 7, 30, 16, 8, 35, 28, 17, 9, 15, 36, 14, 18, 37 ],
      "exit" : false,
      "out-vars" : [ 37, 15, 14, 9, 38, 30, 28, 18, 7, 35, 11, 17, 8, 36, 16 ],
      "decl-vars" : [ 38 ],
      "line-start" : 684,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "bpfNextKeyPtr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 12,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 12,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "go-type" : 95,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 91,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "bpfNextKey",
                "variable" : 37
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 684,
      "code" : "bpfNextKeyPtr := unsafe.Pointer(&bpfNextKey)",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 16, 17, 14, 8, 30, 28, 7, 36, 9, 18, 35, 38, 37, 15, 11 ],
      "exit" : false,
      "out-vars" : [ 17, 14, 8, 18, 7, 39, 38, 36, 16, 9, 30, 15, 28, 35, 11 ],
      "decl-vars" : [ 39 ],
      "line-start" : 685,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "bpfNextKeySize"
          }
        } ],
        "right" : [ {
          "go-type" : 94,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "32"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 685,
      "code" : "bpfNextKeySize := unsafe.Sizeof(bpfNextKey)",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 14, 38, 8, 18, 7, 36, 16, 30, 15, 11, 17, 9, 35, 28, 39 ],
      "exit" : false,
      "out-vars" : [ 16, 7, 35, 30, 28, 15, 41, 38, 39, 36, 8, 9, 18, 11, 17, 14 ],
      "decl-vars" : [ 41 ],
      "line-start" : 690,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "maxLookup"
          }
        } ],
        "right" : [ {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "MaxEntries",
              "variable" : 40
            },
            "go-type" : 44,
            "kind" : "expression",
            "target" : {
              "go-type" : 24,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "stats",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "operator" : "*",
          "right" : {
            "go-type" : 44,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 690,
      "code" : "maxLookup := stats.MaxEntries * 4",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26, 51 ],
      "in-vars" : [ 15, 11, 14, 35, 30, 39, 38, 17, 8, 28, 41, 36, 9, 7, 18, 16 ],
      "exit" : false,
      "out-vars" : [ 9, 18, 28, 11, 8, 35, 15, 36, 16, 17, 14, 30, 41, 38, 7, 39 ],
      "decl-vars" : [ ],
      "line-start" : 695,
      "ast" : {
        "condition" : {
          "go-type" : 84,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Lookup",
              "variable" : 24
            },
            "go-type" : 44,
            "kind" : "expression",
            "target" : {
              "go-type" : 24,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "stats",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "operator" : "<=",
          "right" : {
            "go-type" : 44,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "maxLookup",
              "variable" : 41
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 748,
      "code" : "for stats.Lookup = 1; stats.Lookup <= maxLookup; stats.Lookup++ {\n\n\tnextKeyErr := GetNextKeyFromPointers(m.fd, bpfNextKeyPtr, bpfNextKeySize)\n\terr := LookupElementFromPointers(m.fd, bpfCurrentKeyPtr, bpfCurrentKeySize)\n\tif err != nil {\n\t\tstats.LookupFailed++\n\n\t\tif prevKeyValid {\n\t\t\tcopy(currentKey, prevKey)\n\n\t\t\tprevKeyValid = false\n\t\t\tstats.KeyFallback++\n\t\t} else {\n\n\t\t\tcopy(currentKey, nextKey)\n\t\t\tstats.Interrupted++\n\t\t}\n\t\tcontinue\n\t}\n\n\tmk, mv, err = m.dumpParser(currentKey, value, mk, mv)\n\tif err != nil {\n\t\tstats.Interrupted++\n\t\treturn err\n\t}\n\n\tif cb != nil {\n\t\tcb(mk, mv)\n\t}\n\n\tif nextKeyErr != nil {\n\t\tif nextKeyErr == io.EOF {\n\t\t\tstats.Completed = true\n\t\t\treturn nil\n\t\t}\n\t\treturn nextKeyErr\n\t}\n\n\tcopy(prevKey, currentKey)\n\tprevKeyValid = true\n\n\tcopy(currentKey, nextKey)\n}",
      "entry" : false,
      "use-vars" : [ 9, 41 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 23 ],
      "in-vars" : [ 17, 14, 11, 8, 39, 38, 9, 18, 7, 35, 28, 15, 36, 16, 30, 41 ],
      "exit" : false,
      "out-vars" : [ 7, 38, 36, 18, 9, 15, 39, 11, 14, 8, 35, 30, 41, 17, 16, 28 ],
      "decl-vars" : [ ],
      "line-start" : 695,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Lookup",
            "variable" : 24
          },
          "go-type" : 44,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stats",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 44,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 695,
      "code" : "stats.Lookup = 1",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 23 ],
      "in-vars" : [ 9, 18, 38, 11, 35, 36, 17, 14, 8, 30, 28, 15, 7, 39, 41, 16 ],
      "exit" : false,
      "out-vars" : [ 18, 7, 28, 38, 16, 14, 35, 15, 41, 8, 9, 39, 11, 17, 30, 36 ],
      "decl-vars" : [ ],
      "line-start" : 695,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Lookup",
            "variable" : 24
          },
          "go-type" : 44,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stats",
              "variable" : 9
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 695,
      "code" : "stats.Lookup++",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 9, 15, 36, 11, 41, 16, 18, 7, 30, 28, 38, 17, 14, 8, 35, 39 ],
      "exit" : false,
      "out-vars" : [ 7, 38, 36, 11, 17, 16, 8, 9, 47, 35, 30, 15, 14, 18, 28, 39, 41 ],
      "decl-vars" : [ 47 ],
      "line-start" : 703,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "nextKeyErr"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fd",
              "variable" : 22
            },
            "go-type" : 37,
            "kind" : "expression",
            "target" : {
              "go-type" : 49,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 7
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "bpfNextKeyPtr",
              "variable" : 38
            }
          }, {
            "go-type" : 94,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "bpfNextKeySize",
              "variable" : 39
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "GetNextKeyFromPointers"
            }
          },
          "go-type" : 46,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 703,
      "code" : "nextKeyErr := GetNextKeyFromPointers(m.fd, bpfNextKeyPtr, bpfNextKeySize)",
      "entry" : false,
      "use-vars" : [ 7, 38, 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 30, 38, 36, 16, 18, 35, 41, 17, 7, 28, 15, 11, 14, 8, 9, 47, 39 ],
      "exit" : false,
      "out-vars" : [ 17, 8, 18, 35, 15, 7, 47, 38, 11, 42, 28, 41, 16, 14, 9, 30, 39, 36 ],
      "decl-vars" : [ 42 ],
      "line-start" : 704,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fd",
              "variable" : 22
            },
            "go-type" : 37,
            "kind" : "expression",
            "target" : {
              "go-type" : 49,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 7
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "bpfCurrentKeyPtr",
              "variable" : 35
            }
          }, {
            "go-type" : 94,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "bpfCurrentKeySize",
              "variable" : 36
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "LookupElementFromPointers"
            }
          },
          "go-type" : 46,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 704,
      "code" : "err := LookupElementFromPointers(m.fd, bpfCurrentKeyPtr, bpfCurrentKeySize)",
      "entry" : false,
      "use-vars" : [ 7, 35, 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29, 37 ],
      "in-vars" : [ 47, 35, 30, 15, 36, 16, 14, 9, 18, 39, 11, 42, 28, 38, 17, 8, 7, 41 ],
      "exit" : false,
      "out-vars" : [ 28, 47, 9, 18, 7, 14, 35, 30, 15, 38, 16, 8, 39, 41, 36, 11, 17 ],
      "decl-vars" : [ ],
      "line-start" : 705,
      "ast" : {
        "condition" : {
          "go-type" : 84,
          "kind" : "expression",
          "left" : {
            "go-type" : 46,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 42
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 85,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 723,
      "code" : "if err != nil {\n\tstats.LookupFailed++\n\n\tif prevKeyValid {\n\t\tcopy(currentKey, prevKey)\n\n\t\tprevKeyValid = false\n\t\tstats.KeyFallback++\n\t} else {\n\n\t\tcopy(currentKey, nextKey)\n\t\tstats.Interrupted++\n\t}\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 42 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 30 ],
      "in-vars" : [ 18, 28, 38, 36, 11, 9, 8, 39, 17, 30, 15, 16, 35, 7, 41, 14 ],
      "exit" : false,
      "out-vars" : [ 9, 18, 36, 35, 28, 41, 16, 17, 15, 39, 38, 14, 8, 7, 30, 11 ],
      "decl-vars" : [ ],
      "line-start" : 706,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "LookupFailed",
            "variable" : 43
          },
          "go-type" : 44,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stats",
              "variable" : 9
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 706,
      "code" : "stats.LookupFailed++",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31, 34 ],
      "in-vars" : [ 38, 18, 28, 41, 14, 8, 17, 30, 15, 39, 36, 16, 11, 9, 7, 35 ],
      "exit" : false,
      "out-vars" : [ 8, 18, 28, 16, 11, 35, 30, 41, 39, 36, 17, 14, 9, 7, 15, 38 ],
      "decl-vars" : [ ],
      "line-start" : 709,
      "ast" : {
        "condition" : {
          "go-type" : 38,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "prevKeyValid",
            "variable" : 18
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 721,
      "code" : "if prevKeyValid {\n\tcopy(currentKey, prevKey)\n\n\tprevKeyValid = false\n\tstats.KeyFallback++\n} else {\n\n\tcopy(currentKey, nextKey)\n\tstats.Interrupted++\n}",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 9, 7, 30, 39, 36, 14, 8, 35, 11, 17, 28, 15, 41, 38, 16 ],
      "exit" : false,
      "out-vars" : [ 8, 36, 11, 17, 9, 35, 30, 39, 7, 28, 41, 38, 14, 15, 16 ],
      "decl-vars" : [ ],
      "line-start" : 710,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 72,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "currentKey",
              "variable" : 17
            }
          }, {
            "go-type" : 72,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "prevKey",
              "variable" : 16
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 98,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 37,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 710,
      "code" : "copy(currentKey, prevKey)",
      "entry" : false,
      "use-vars" : [ 17, 16 ]
    }, {
      "update-vars" : [ 18 ],
      "successors" : [ 33 ],
      "in-vars" : [ 9, 39, 36, 14, 8, 7, 30, 28, 15, 38, 16, 17, 35, 41, 11 ],
      "exit" : false,
      "out-vars" : [ 15, 41, 9, 38, 28, 35, 36, 17, 8, 18, 7, 30, 39, 16, 11, 14 ],
      "decl-vars" : [ ],
      "line-start" : 713,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 38,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "prevKeyValid",
            "variable" : 18
          }
        } ],
        "right" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 18 ],
      "line-end" : 713,
      "code" : "prevKeyValid = false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 36 ],
      "in-vars" : [ 18, 15, 41, 16, 8, 7, 39, 11, 17, 14, 35, 38, 9, 30, 28, 36 ],
      "exit" : false,
      "out-vars" : [ 18, 15, 39, 38, 36, 8, 35, 41, 11, 14, 7, 30, 16, 17, 9, 28 ],
      "decl-vars" : [ ],
      "line-start" : 714,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "KeyFallback",
            "variable" : 44
          },
          "go-type" : 44,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stats",
              "variable" : 9
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 714,
      "code" : "stats.KeyFallback++",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 17, 16, 8, 35, 28, 15, 38, 14, 7, 30, 39, 11, 9, 18, 41, 36 ],
      "exit" : false,
      "out-vars" : [ 9, 18, 39, 38, 14, 8, 30, 28, 15, 41, 36, 16, 17, 35, 7, 11 ],
      "decl-vars" : [ ],
      "line-start" : 719,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 72,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "currentKey",
              "variable" : 17
            }
          }, {
            "go-type" : 72,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nextKey",
              "variable" : 14
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 98,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 37,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 719,
      "code" : "copy(currentKey, nextKey)",
      "entry" : false,
      "use-vars" : [ 17, 14 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 36 ],
      "in-vars" : [ 7, 15, 41, 38, 9, 14, 8, 28, 39, 16, 11, 17, 18, 35, 30, 36 ],
      "exit" : false,
      "out-vars" : [ 8, 9, 15, 41, 11, 7, 38, 36, 14, 18, 35, 30, 39, 17, 28, 16 ],
      "decl-vars" : [ ],
      "line-start" : 720,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Interrupted",
            "variable" : 45
          },
          "go-type" : 44,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stats",
              "variable" : 9
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 720,
      "code" : "stats.Interrupted++",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 9, 36, 14, 35, 39, 38, 8, 18, 7, 30, 16, 11, 17, 28, 15, 41 ],
      "exit" : false,
      "out-vars" : [ 16, 7, 35, 38, 36, 11, 17, 14, 30, 15, 39, 8, 9, 18, 28, 41 ],
      "decl-vars" : [ ],
      "line-start" : 722,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 722,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 28, 42, 30 ],
      "successors" : [ 38 ],
      "in-vars" : [ 17, 8, 15, 11, 9, 7, 41, 38, 16, 14, 35, 36, 47, 30, 28, 39 ],
      "exit" : false,
      "out-vars" : [ 30, 28, 15, 38, 17, 9, 47, 35, 36, 16, 8, 42, 11, 14, 7, 39, 41 ],
      "decl-vars" : [ ],
      "line-start" : 725,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mk",
            "variable" : 28
          }
        }, {
          "go-type" : 15,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mv",
            "variable" : 30
          }
        }, {
          "go-type" : 46,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 42
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 72,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "currentKey",
              "variable" : 17
            }
          }, {
            "go-type" : 72,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "value",
              "variable" : 15
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mk",
              "variable" : 28
            }
          }, {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mv",
              "variable" : 30
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dumpParser",
              "variable" : 46
            },
            "go-type" : 69,
            "kind" : "expression",
            "target" : {
              "go-type" : 49,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 7
              }
            },
            "type" : "selector"
          },
          "go-type" : 74,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 28, 42, 30 ],
      "line-end" : 725,
      "code" : "mk, mv, err = m.dumpParser(currentKey, value, mk, mv)",
      "entry" : false,
      "use-vars" : [ 7, 17, 15, 28, 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39, 41 ],
      "in-vars" : [ 7, 47, 35, 30, 39, 14, 9, 28, 36, 15, 41, 11, 17, 8, 42, 38, 16 ],
      "exit" : false,
      "out-vars" : [ 17, 9, 36, 16, 11, 38, 14, 8, 7, 28, 41, 30, 15, 39, 42, 47, 35 ],
      "decl-vars" : [ ],
      "line-start" : 726,
      "ast" : {
        "condition" : {
          "go-type" : 84,
          "kind" : "expression",
          "left" : {
            "go-type" : 46,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 42
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 85,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 729,
      "code" : "if err != nil {\n\tstats.Interrupted++\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 42 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 40 ],
      "in-vars" : [ 9, 42 ],
      "exit" : false,
      "out-vars" : [ 9, 42 ],
      "decl-vars" : [ ],
      "line-start" : 727,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Interrupted",
            "variable" : 45
          },
          "go-type" : 44,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stats",
              "variable" : 9
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 727,
      "code" : "stats.Interrupted++",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 9, 42 ],
      "exit" : false,
      "out-vars" : [ 9 ],
      "decl-vars" : [ ],
      "line-start" : 728,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 46,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 42
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 728,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 42 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42, 43 ],
      "in-vars" : [ 14, 7, 15, 38, 16, 47, 28, 39, 11, 17, 8, 36, 9, 35, 30, 41 ],
      "exit" : false,
      "out-vars" : [ 47, 28, 36, 14, 8, 30, 15, 39, 41, 9, 16, 17, 7, 35, 38, 11 ],
      "decl-vars" : [ ],
      "line-start" : 731,
      "ast" : {
        "condition" : {
          "go-type" : 84,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cb",
              "variable" : 8
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 85,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 733,
      "code" : "if cb != nil {\n\tcb(mk, mv)\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 36, 47, 28, 41, 38, 11, 9, 7, 16, 14, 35, 30, 15, 39, 17, 8 ],
      "exit" : false,
      "out-vars" : [ 17, 30, 28, 36, 14, 9, 11, 39, 8, 7, 47, 15, 35, 41, 38, 16 ],
      "decl-vars" : [ ],
      "line-start" : 732,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mk",
              "variable" : 28
            }
          }, {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mv",
              "variable" : 30
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cb",
              "variable" : 8
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 732,
      "code" : "cb(mk, mv)",
      "entry" : false,
      "use-vars" : [ 8, 28, 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44, 48 ],
      "in-vars" : [ 8, 7, 28, 14, 30, 39, 16, 17, 47, 35, 15, 41, 9, 38, 36, 11 ],
      "exit" : false,
      "out-vars" : [ 17, 8, 35, 28, 16, 47, 15, 38, 36, 14, 30, 39, 41, 11, 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 735,
      "ast" : {
        "condition" : {
          "go-type" : 84,
          "kind" : "expression",
          "left" : {
            "go-type" : 46,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nextKeyErr",
              "variable" : 47
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 85,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 741,
      "code" : "if nextKeyErr != nil {\n\tif nextKeyErr == io.EOF {\n\t\tstats.Completed = true\n\t\treturn nil\n\t}\n\treturn nextKeyErr\n}",
      "entry" : false,
      "use-vars" : [ 47 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45, 47 ],
      "in-vars" : [ 9, 47 ],
      "exit" : false,
      "out-vars" : [ 9, 47 ],
      "decl-vars" : [ ],
      "line-start" : 736,
      "ast" : {
        "condition" : {
          "go-type" : 84,
          "kind" : "expression",
          "left" : {
            "go-type" : 46,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nextKeyErr",
              "variable" : 47
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 46,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 6,
              "value" : "io"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "EOF",
              "variable" : 25
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 739,
      "code" : "if nextKeyErr == io.EOF {\n\tstats.Completed = true\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 47 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 46 ],
      "in-vars" : [ 9 ],
      "exit" : false,
      "out-vars" : [ 9 ],
      "decl-vars" : [ ],
      "line-start" : 737,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Completed",
            "variable" : 26
          },
          "go-type" : 38,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stats",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 737,
      "code" : "stats.Completed = true",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 9 ],
      "exit" : false,
      "out-vars" : [ 9 ],
      "decl-vars" : [ ],
      "line-start" : 738,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 85,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 738,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 9, 47 ],
      "exit" : false,
      "out-vars" : [ 9 ],
      "decl-vars" : [ ],
      "line-start" : 740,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 46,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nextKeyErr",
            "variable" : 47
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 740,
      "code" : "return nextKeyErr",
      "entry" : false,
      "use-vars" : [ 47 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 17, 8, 7, 39, 28, 9, 41, 38, 16, 11, 14, 35, 30, 15, 36 ],
      "exit" : false,
      "out-vars" : [ 16, 11, 17, 28, 41, 36, 38, 14, 7, 35, 15, 8, 9, 30, 39 ],
      "decl-vars" : [ ],
      "line-start" : 744,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 72,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "prevKey",
              "variable" : 16
            }
          }, {
            "go-type" : 72,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "currentKey",
              "variable" : 17
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 98,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 37,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 744,
      "code" : "copy(prevKey, currentKey)",
      "entry" : false,
      "use-vars" : [ 16, 17 ]
    }, {
      "update-vars" : [ 18 ],
      "successors" : [ 50 ],
      "in-vars" : [ 30, 28, 15, 41, 17, 14, 38, 16, 35, 39, 36, 8, 9, 7, 11 ],
      "exit" : false,
      "out-vars" : [ 41, 11, 17, 35, 30, 28, 15, 39, 38, 16, 9, 8, 18, 36, 14, 7 ],
      "decl-vars" : [ ],
      "line-start" : 745,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 38,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "prevKeyValid",
            "variable" : 18
          }
        } ],
        "right" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 18 ],
      "line-end" : 745,
      "code" : "prevKeyValid = true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 7, 39, 38, 36, 17, 8, 18, 30, 14, 28, 41, 16, 35, 15, 11, 9 ],
      "exit" : false,
      "out-vars" : [ 30, 15, 11, 39, 41, 14, 8, 28, 17, 9, 36, 38, 16, 18, 7, 35 ],
      "decl-vars" : [ ],
      "line-start" : 747,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 72,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "currentKey",
              "variable" : 17
            }
          }, {
            "go-type" : 72,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nextKey",
              "variable" : 14
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 98,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 37,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 747,
      "code" : "copy(currentKey, nextKey)",
      "entry" : false,
      "use-vars" : [ 17, 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 9, 11 ],
      "exit" : false,
      "out-vars" : [ 9 ],
      "decl-vars" : [ ],
      "line-start" : 750,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 46,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ErrMaxLookup",
            "variable" : 11
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 750,
      "code" : "return ErrMaxLookup",
      "entry" : false,
      "use-vars" : [ 11 ]
    } ],
    "code" : "// DumpReliablyWithCallback is similar to DumpWithCallback, but performs\n// additional tracking of the current and recently seen keys, so that if an\n// element is removed from the underlying kernel map during the dump, the dump\n// can continue from a recently seen key rather than restarting from scratch.\n// In addition, it caps the maximum number of map entry iterations at 4 times\n// the maximum map size. If this limit is reached, ErrMaxLookup is returned.\n//\n// The caller must provide a callback for handling each entry, and a stats\n// object initialized via a call to NewDumpStats().\nfunc (m *Map) DumpReliablyWithCallback(cb DumpCallback, stats *DumpStats) error {\n\tvar (\n\t\tprevKey    = make([]byte, m.KeySize)\n\t\tcurrentKey = make([]byte, m.KeySize)\n\t\tnextKey    = make([]byte, m.KeySize)\n\t\tvalue      = make([]byte, m.ReadValueSize)\n\n\t\tprevKeyValid = false\n\t)\n\tstats.start()\n\tdefer stats.finish()\n\n\tif err := m.Open(); err != nil {\n\t\treturn err\n\t}\n\n\tif err := GetFirstKey(m.fd, unsafe.Pointer(&currentKey[0])); err != nil {\n\t\tstats.Lookup = 1\n\t\tif err == io.EOF {\n\n\t\t\tstats.Completed = true\n\t\t\treturn nil\n\t\t}\n\t\treturn err\n\t}\n\n\tmk := m.MapKey.DeepCopyMapKey()\n\tmv := m.MapValue.DeepCopyMapValue()\n\n\tbpfCurrentKey := bpfAttrMapOpElem{\n\t\tmapFd: uint32(m.fd),\n\t\tkey:   uint64(uintptr(unsafe.Pointer(&currentKey[0]))),\n\t\tvalue: uint64(uintptr(unsafe.Pointer(&value[0]))),\n\t}\n\tbpfCurrentKeyPtr := unsafe.Pointer(&bpfCurrentKey)\n\tbpfCurrentKeySize := unsafe.Sizeof(bpfCurrentKey)\n\n\tbpfNextKey := bpfAttrMapOpElem{\n\t\tmapFd: uint32(m.fd),\n\t\tkey:   uint64(uintptr(unsafe.Pointer(&currentKey[0]))),\n\t\tvalue: uint64(uintptr(unsafe.Pointer(&nextKey[0]))),\n\t}\n\n\tbpfNextKeyPtr := unsafe.Pointer(&bpfNextKey)\n\tbpfNextKeySize := unsafe.Sizeof(bpfNextKey)\n\n\tmaxLookup := stats.MaxEntries * 4\n\n\tfor stats.Lookup = 1; stats.Lookup <= maxLookup; stats.Lookup++ {\n\n\t\tnextKeyErr := GetNextKeyFromPointers(m.fd, bpfNextKeyPtr, bpfNextKeySize)\n\t\terr := LookupElementFromPointers(m.fd, bpfCurrentKeyPtr, bpfCurrentKeySize)\n\t\tif err != nil {\n\t\t\tstats.LookupFailed++\n\n\t\t\tif prevKeyValid {\n\t\t\t\tcopy(currentKey, prevKey)\n\n\t\t\t\tprevKeyValid = false\n\t\t\t\tstats.KeyFallback++\n\t\t\t} else {\n\n\t\t\t\tcopy(currentKey, nextKey)\n\t\t\t\tstats.Interrupted++\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tmk, mv, err = m.dumpParser(currentKey, value, mk, mv)\n\t\tif err != nil {\n\t\t\tstats.Interrupted++\n\t\t\treturn err\n\t\t}\n\n\t\tif cb != nil {\n\t\t\tcb(mk, mv)\n\t\t}\n\n\t\tif nextKeyErr != nil {\n\t\t\tif nextKeyErr == io.EOF {\n\t\t\t\tstats.Completed = true\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\treturn nextKeyErr\n\t\t}\n\n\t\tcopy(prevKey, currentKey)\n\t\tprevKeyValid = true\n\n\t\tcopy(currentKey, nextKey)\n\t}\n\n\treturn ErrMaxLookup\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "DumpReliablyWithCallback",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "start",
      "package" : 0,
      "type" : 81,
      "exported" : false
    }, {
      "name" : "Open",
      "package" : 0,
      "type" : 83,
      "exported" : true
    }, {
      "name" : "GetFirstKey",
      "package" : 0,
      "type" : 86,
      "exported" : true
    }, {
      "name" : "DeepCopyMapKey",
      "package" : 0,
      "type" : 7,
      "exported" : true
    }, {
      "name" : "DeepCopyMapValue",
      "package" : 0,
      "type" : 17,
      "exported" : true
    }, {
      "name" : "GetNextKeyFromPointers",
      "package" : 0,
      "type" : 96,
      "exported" : true
    }, {
      "name" : "LookupElementFromPointers",
      "package" : 0,
      "type" : 96,
      "exported" : true
    } ],
    "line-end" : 751,
    "line-start" : 641,
    "names" : [ "DumpReliablyWithCallback" ],
    "package" : 0,
    "packages" : [ {
      "name" : "bpf",
      "path" : "github.com/cilium/cilium/pkg/bpf"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "fmt",
      "path" : "fmt"
    }, {
      "name" : "time",
      "path" : "time"
    }, {
      "name" : "lock",
      "path" : "github.com/cilium/cilium/pkg/lock"
    }, {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "io",
      "path" : "io"
    } ],
    "params" : [ 8, 9 ],
    "receivers" : [ 7 ],
    "results" : [ 10 ],
    "type" : "function",
    "types" : [ {
      "name" : "(*github.com/cilium/cilium/pkg/bpf.Map) func(cb github.com/cilium/cilium/pkg/bpf.DumpCallback, stats *github.com/cilium/cilium/pkg/bpf.DumpStats) error",
      "params" : 1,
      "recv" : 7,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "cb",
        "type" : 2
      }, {
        "name" : "stats",
        "type" : 24
      } ],
      "name" : "(cb github.com/cilium/cilium/pkg/bpf.DumpCallback, stats *github.com/cilium/cilium/pkg/bpf.DumpStats)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "DumpCallback",
      "name" : "github.com/cilium/cilium/pkg/bpf.DumpCallback",
      "package" : 0,
      "type" : "Named",
      "underlying" : 3
    }, {
      "name" : "func(key github.com/cilium/cilium/pkg/bpf.MapKey, value github.com/cilium/cilium/pkg/bpf.MapValue)",
      "params" : 4,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 3,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 5
      }, {
        "name" : "value",
        "type" : 15
      } ],
      "name" : "(key github.com/cilium/cilium/pkg/bpf.MapKey, value github.com/cilium/cilium/pkg/bpf.MapValue)",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "local-name" : "MapKey",
      "name" : "github.com/cilium/cilium/pkg/bpf.MapKey",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "methods" : [ {
        "name" : "DeepCopyMapKey",
        "type" : 7
      }, {
        "name" : "GetKeyPtr",
        "type" : 10
      }, {
        "name" : "NewValue",
        "type" : 13
      }, {
        "name" : "String",
        "type" : 19
      } ],
      "name" : "interface{DeepCopyMapKey() github.com/cilium/cilium/pkg/bpf.MapKey; GetKeyPtr() unsafe.Pointer; NewValue() github.com/cilium/cilium/pkg/bpf.MapValue; fmt.Stringer}",
      "type" : "Interface",
      "underlying" : 6
    }, {
      "name" : "(github.com/cilium/cilium/pkg/bpf.MapKey) func() github.com/cilium/cilium/pkg/bpf.MapKey",
      "params" : 8,
      "recv" : 0,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 7,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(github.com/cilium/cilium/pkg/bpf.MapKey)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "name" : "(github.com/cilium/cilium/pkg/bpf.MapKey) func() unsafe.Pointer",
      "params" : 8,
      "recv" : 1,
      "results" : 11,
      "type" : "Signature",
      "underlying" : 10,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 12
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 12
    }, {
      "name" : "(github.com/cilium/cilium/pkg/bpf.MapKey) func() github.com/cilium/cilium/pkg/bpf.MapValue",
      "params" : 8,
      "recv" : 5,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 13,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(github.com/cilium/cilium/pkg/bpf.MapValue)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "local-name" : "MapValue",
      "name" : "github.com/cilium/cilium/pkg/bpf.MapValue",
      "package" : 0,
      "type" : "Named",
      "underlying" : 16
    }, {
      "methods" : [ {
        "name" : "DeepCopyMapValue",
        "type" : 17
      }, {
        "name" : "GetValuePtr",
        "type" : 18
      }, {
        "name" : "String",
        "type" : 19
      } ],
      "name" : "interface{DeepCopyMapValue() github.com/cilium/cilium/pkg/bpf.MapValue; GetValuePtr() unsafe.Pointer; fmt.Stringer}",
      "type" : "Interface",
      "underlying" : 16
    }, {
      "name" : "(github.com/cilium/cilium/pkg/bpf.MapValue) func() github.com/cilium/cilium/pkg/bpf.MapValue",
      "params" : 8,
      "recv" : 2,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 17,
      "variadic" : false
    }, {
      "name" : "(github.com/cilium/cilium/pkg/bpf.MapValue) func() unsafe.Pointer",
      "params" : 8,
      "recv" : 3,
      "results" : 11,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "name" : "(fmt.Stringer) func() string",
      "params" : 8,
      "recv" : 4,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 19,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "local-name" : "Stringer",
      "name" : "fmt.Stringer",
      "package" : 2,
      "type" : "Named",
      "underlying" : 23
    }, {
      "methods" : [ {
        "name" : "String",
        "type" : 19
      } ],
      "name" : "interface{String() string}",
      "type" : "Interface",
      "underlying" : 23
    }, {
      "elem" : 25,
      "name" : "*github.com/cilium/cilium/pkg/bpf.DumpStats",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "local-name" : "DumpStats",
      "name" : "github.com/cilium/cilium/pkg/bpf.DumpStats",
      "package" : 0,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "Started",
        "type" : 27
      }, {
        "name" : "Finished",
        "type" : 27
      }, {
        "name" : "Lookup",
        "type" : 44
      }, {
        "name" : "LookupFailed",
        "type" : 44
      }, {
        "name" : "PrevKeyUnavailable",
        "type" : 44
      }, {
        "name" : "KeyFallback",
        "type" : 44
      }, {
        "name" : "MaxEntries",
        "type" : 44
      }, {
        "name" : "Interrupted",
        "type" : 44
      }, {
        "name" : "Completed",
        "type" : 38
      } ],
      "name" : "struct{Started time.Time; Finished time.Time; Lookup uint32; LookupFailed uint32; PrevKeyUnavailable uint32; KeyFallback uint32; MaxEntries uint32; Interrupted uint32; Completed bool}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "local-name" : "Time",
      "name" : "time.Time",
      "package" : 3,
      "type" : "Named",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "wall",
        "type" : 29
      }, {
        "name" : "ext",
        "type" : 30
      }, {
        "name" : "loc",
        "type" : 31
      } ],
      "name" : "struct{wall uint64; ext int64; loc *time.Location}",
      "type" : "Struct",
      "underlying" : 28
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 29
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 30
    }, {
      "elem" : 32,
      "name" : "*time.Location",
      "type" : "Pointer",
      "underlying" : 31
    }, {
      "local-name" : "Location",
      "name" : "time.Location",
      "package" : 3,
      "type" : "Named",
      "underlying" : 33
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 21
      }, {
        "name" : "zone",
        "type" : 34
      }, {
        "name" : "tx",
        "type" : 39
      }, {
        "name" : "cacheStart",
        "type" : 30
      }, {
        "name" : "cacheEnd",
        "type" : 30
      }, {
        "name" : "cacheZone",
        "type" : 43
      } ],
      "name" : "struct{name string; zone []time.zone; tx []time.zoneTrans; cacheStart int64; cacheEnd int64; cacheZone *time.zone}",
      "type" : "Struct",
      "underlying" : 33
    }, {
      "elem" : 35,
      "name" : "[]time.zone",
      "type" : "Slice",
      "underlying" : 34
    }, {
      "local-name" : "zone",
      "name" : "time.zone",
      "package" : 3,
      "type" : "Named",
      "underlying" : 36
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 21
      }, {
        "name" : "offset",
        "type" : 37
      }, {
        "name" : "isDST",
        "type" : 38
      } ],
      "name" : "struct{name string; offset int; isDST bool}",
      "type" : "Struct",
      "underlying" : 36
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 37
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 38
    }, {
      "elem" : 40,
      "name" : "[]time.zoneTrans",
      "type" : "Slice",
      "underlying" : 39
    }, {
      "local-name" : "zoneTrans",
      "name" : "time.zoneTrans",
      "package" : 3,
      "type" : "Named",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "when",
        "type" : 30
      }, {
        "name" : "index",
        "type" : 42
      }, {
        "name" : "isstd",
        "type" : 38
      }, {
        "name" : "isutc",
        "type" : 38
      } ],
      "name" : "struct{when int64; index uint8; isstd bool; isutc bool}",
      "type" : "Struct",
      "underlying" : 41
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 42
    }, {
      "elem" : 35,
      "name" : "*time.zone",
      "type" : "Pointer",
      "underlying" : 43
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 46
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 45
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 47
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 48
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 47
    }, {
      "name" : "(error) func() string",
      "params" : 8,
      "recv" : 6,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 48,
      "variadic" : false
    }, {
      "elem" : 50,
      "name" : "*github.com/cilium/cilium/pkg/bpf.Map",
      "type" : "Pointer",
      "underlying" : 49
    }, {
      "local-name" : "Map",
      "name" : "github.com/cilium/cilium/pkg/bpf.Map",
      "package" : 0,
      "type" : "Named",
      "underlying" : 51
    }, {
      "fields" : [ {
        "name" : "MapInfo",
        "type" : 52
      }, {
        "name" : "fd",
        "type" : 37
      }, {
        "name" : "name",
        "type" : 21
      }, {
        "name" : "path",
        "type" : 21
      }, {
        "name" : "lock",
        "type" : 56
      }, {
        "name" : "inParallelMode",
        "type" : 38
      }, {
        "name" : "cachedCommonName",
        "type" : 21
      }, {
        "name" : "enableSync",
        "type" : 38
      }, {
        "name" : "openLock",
        "type" : 65
      }, {
        "name" : "NonPersistent",
        "type" : 38
      }, {
        "name" : "dumpParser",
        "type" : 69
      }, {
        "name" : "cache",
        "type" : 75
      }, {
        "name" : "errorResolverLastScheduled",
        "type" : 27
      }, {
        "name" : "outstandingErrors",
        "type" : 37
      } ],
      "name" : "struct{github.com/cilium/cilium/pkg/bpf.MapInfo; fd int; name string; path string; lock github.com/cilium/cilium/pkg/lock.RWMutex; inParallelMode bool; cachedCommonName string; enableSync bool; openLock github.com/cilium/cilium/pkg/lock.Mutex; NonPersistent bool; dumpParser github.com/cilium/cilium/pkg/bpf.DumpParser; cache map[string]*github.com/cilium/cilium/pkg/bpf.cacheEntry; errorResolverLastScheduled time.Time; outstandingErrors int}",
      "type" : "Struct",
      "underlying" : 51
    }, {
      "local-name" : "MapInfo",
      "name" : "github.com/cilium/cilium/pkg/bpf.MapInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 53
    }, {
      "fields" : [ {
        "name" : "MapType",
        "type" : 54
      }, {
        "name" : "MapKey",
        "type" : 5
      }, {
        "name" : "KeySize",
        "type" : 44
      }, {
        "name" : "MapValue",
        "type" : 15
      }, {
        "name" : "ReadValueSize",
        "type" : 44
      }, {
        "name" : "ValueSize",
        "type" : 44
      }, {
        "name" : "MaxEntries",
        "type" : 44
      }, {
        "name" : "Flags",
        "type" : 44
      }, {
        "name" : "InnerID",
        "type" : 44
      }, {
        "name" : "OwnerProgType",
        "type" : 55
      } ],
      "name" : "struct{MapType github.com/cilium/cilium/pkg/bpf.MapType; MapKey github.com/cilium/cilium/pkg/bpf.MapKey; KeySize uint32; MapValue github.com/cilium/cilium/pkg/bpf.MapValue; ReadValueSize uint32; ValueSize uint32; MaxEntries uint32; Flags uint32; InnerID uint32; OwnerProgType github.com/cilium/cilium/pkg/bpf.ProgType}",
      "type" : "Struct",
      "underlying" : 53
    }, {
      "local-name" : "MapType",
      "name" : "github.com/cilium/cilium/pkg/bpf.MapType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 37
    }, {
      "local-name" : "ProgType",
      "name" : "github.com/cilium/cilium/pkg/bpf.ProgType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 37
    }, {
      "local-name" : "RWMutex",
      "name" : "github.com/cilium/cilium/pkg/lock.RWMutex",
      "package" : 4,
      "type" : "Named",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "internalRWMutex",
        "type" : 58
      } ],
      "name" : "struct{github.com/cilium/cilium/pkg/lock.internalRWMutex}",
      "type" : "Struct",
      "underlying" : 57
    }, {
      "local-name" : "internalRWMutex",
      "name" : "github.com/cilium/cilium/pkg/lock.internalRWMutex",
      "package" : 4,
      "type" : "Named",
      "underlying" : 59
    }, {
      "fields" : [ {
        "name" : "RWMutex",
        "type" : 60
      } ],
      "name" : "struct{sync.RWMutex}",
      "type" : "Struct",
      "underlying" : 59
    }, {
      "local-name" : "RWMutex",
      "name" : "sync.RWMutex",
      "package" : 5,
      "type" : "Named",
      "underlying" : 61
    }, {
      "fields" : [ {
        "name" : "w",
        "type" : 62
      }, {
        "name" : "writerSem",
        "type" : 44
      }, {
        "name" : "readerSem",
        "type" : 44
      }, {
        "name" : "readerCount",
        "type" : 64
      }, {
        "name" : "readerWait",
        "type" : 64
      } ],
      "name" : "struct{w sync.Mutex; writerSem uint32; readerSem uint32; readerCount int32; readerWait int32}",
      "type" : "Struct",
      "underlying" : 61
    }, {
      "local-name" : "Mutex",
      "name" : "sync.Mutex",
      "package" : 5,
      "type" : "Named",
      "underlying" : 63
    }, {
      "fields" : [ {
        "name" : "state",
        "type" : 64
      }, {
        "name" : "sema",
        "type" : 44
      } ],
      "name" : "struct{state int32; sema uint32}",
      "type" : "Struct",
      "underlying" : 63
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 64
    }, {
      "local-name" : "Mutex",
      "name" : "github.com/cilium/cilium/pkg/lock.Mutex",
      "package" : 4,
      "type" : "Named",
      "underlying" : 66
    }, {
      "fields" : [ {
        "name" : "internalMutex",
        "type" : 67
      } ],
      "name" : "struct{github.com/cilium/cilium/pkg/lock.internalMutex}",
      "type" : "Struct",
      "underlying" : 66
    }, {
      "local-name" : "internalMutex",
      "name" : "github.com/cilium/cilium/pkg/lock.internalMutex",
      "package" : 4,
      "type" : "Named",
      "underlying" : 68
    }, {
      "fields" : [ {
        "name" : "Mutex",
        "type" : 62
      } ],
      "name" : "struct{sync.Mutex}",
      "type" : "Struct",
      "underlying" : 68
    }, {
      "local-name" : "DumpParser",
      "name" : "github.com/cilium/cilium/pkg/bpf.DumpParser",
      "package" : 0,
      "type" : "Named",
      "underlying" : 70
    }, {
      "name" : "func(key []byte, value []byte, mapKey github.com/cilium/cilium/pkg/bpf.MapKey, mapValue github.com/cilium/cilium/pkg/bpf.MapValue) (github.com/cilium/cilium/pkg/bpf.MapKey, github.com/cilium/cilium/pkg/bpf.MapValue, error)",
      "params" : 71,
      "recv" : -1,
      "results" : 74,
      "type" : "Signature",
      "underlying" : 70,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 72
      }, {
        "name" : "value",
        "type" : 72
      }, {
        "name" : "mapKey",
        "type" : 5
      }, {
        "name" : "mapValue",
        "type" : 15
      } ],
      "name" : "(key []byte, value []byte, mapKey github.com/cilium/cilium/pkg/bpf.MapKey, mapValue github.com/cilium/cilium/pkg/bpf.MapValue)",
      "type" : "Tuple",
      "underlying" : 71
    }, {
      "elem" : 73,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 72
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 15
      }, {
        "name" : "",
        "type" : 46
      } ],
      "name" : "(github.com/cilium/cilium/pkg/bpf.MapKey, github.com/cilium/cilium/pkg/bpf.MapValue, error)",
      "type" : "Tuple",
      "underlying" : 74
    }, {
      "elem" : 76,
      "key" : 21,
      "name" : "map[string]*github.com/cilium/cilium/pkg/bpf.cacheEntry",
      "type" : "Map",
      "underlying" : 75
    }, {
      "elem" : 77,
      "name" : "*github.com/cilium/cilium/pkg/bpf.cacheEntry",
      "type" : "Pointer",
      "underlying" : 76
    }, {
      "local-name" : "cacheEntry",
      "name" : "github.com/cilium/cilium/pkg/bpf.cacheEntry",
      "package" : 0,
      "type" : "Named",
      "underlying" : 78
    }, {
      "fields" : [ {
        "name" : "Key",
        "type" : 5
      }, {
        "name" : "Value",
        "type" : 15
      }, {
        "name" : "DesiredAction",
        "type" : 79
      }, {
        "name" : "LastError",
        "type" : 46
      } ],
      "name" : "struct{Key github.com/cilium/cilium/pkg/bpf.MapKey; Value github.com/cilium/cilium/pkg/bpf.MapValue; DesiredAction github.com/cilium/cilium/pkg/bpf.DesiredAction; LastError error}",
      "type" : "Struct",
      "underlying" : 78
    }, {
      "local-name" : "DesiredAction",
      "name" : "github.com/cilium/cilium/pkg/bpf.DesiredAction",
      "package" : 0,
      "type" : "Named",
      "underlying" : 37
    }, {
      "name" : "func()",
      "params" : 8,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 80,
      "variadic" : false
    }, {
      "name" : "(*github.com/cilium/cilium/pkg/bpf.DumpStats) func()",
      "params" : 8,
      "recv" : 19,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 81,
      "variadic" : false
    }, {
      "name" : "func() error",
      "params" : 8,
      "recv" : -1,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 82,
      "variadic" : false
    }, {
      "name" : "(*github.com/cilium/cilium/pkg/bpf.Map) func() error",
      "params" : 8,
      "recv" : 20,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 83,
      "variadic" : false
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 84
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 85
    }, {
      "name" : "func(fd int, nextKey unsafe.Pointer) error",
      "params" : 87,
      "recv" : -1,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 86,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 37
      }, {
        "name" : "nextKey",
        "type" : 12
      } ],
      "name" : "(fd int, nextKey unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 87
    }, {
      "elem" : 73,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 88
    }, {
      "name" : "func() github.com/cilium/cilium/pkg/bpf.MapKey",
      "params" : 8,
      "recv" : -1,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 89,
      "variadic" : false
    }, {
      "name" : "func() github.com/cilium/cilium/pkg/bpf.MapValue",
      "params" : 8,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 90,
      "variadic" : false
    }, {
      "local-name" : "bpfAttrMapOpElem",
      "name" : "github.com/cilium/cilium/pkg/bpf.bpfAttrMapOpElem",
      "package" : 0,
      "type" : "Named",
      "underlying" : 92
    }, {
      "fields" : [ {
        "name" : "mapFd",
        "type" : 44
      }, {
        "name" : "pad0",
        "type" : 93
      }, {
        "name" : "key",
        "type" : 29
      }, {
        "name" : "value",
        "type" : 29
      }, {
        "name" : "flags",
        "type" : 29
      } ],
      "name" : "struct{mapFd uint32; pad0 [4]byte; key uint64; value uint64; flags uint64}",
      "type" : "Struct",
      "underlying" : 92
    }, {
      "elem" : 73,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 93
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 94
    }, {
      "elem" : 91,
      "name" : "*github.com/cilium/cilium/pkg/bpf.bpfAttrMapOpElem",
      "type" : "Pointer",
      "underlying" : 95
    }, {
      "name" : "func(fd int, structPtr unsafe.Pointer, sizeOfStruct uintptr) error",
      "params" : 97,
      "recv" : -1,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 96,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 37
      }, {
        "name" : "structPtr",
        "type" : 12
      }, {
        "name" : "sizeOfStruct",
        "type" : 94
      } ],
      "name" : "(fd int, structPtr unsafe.Pointer, sizeOfStruct uintptr)",
      "type" : "Tuple",
      "underlying" : 97
    }, {
      "name" : "func([]byte, []byte) int",
      "params" : 99,
      "recv" : -1,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 98,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 72
      }, {
        "name" : "",
        "type" : 72
      } ],
      "name" : "([]byte, []byte)",
      "type" : "Tuple",
      "underlying" : 99
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 37
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 100
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : -1,
      "type" : 46,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "cb",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "stats",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 46,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ErrMaxLookup",
      "package" : 0,
      "type" : 46,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "KeySize",
      "package" : 0,
      "type" : 44,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ReadValueSize",
      "package" : 0,
      "type" : 44,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "nextKey",
      "package" : 0,
      "type" : 72,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "value",
      "package" : 0,
      "type" : 72,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "prevKey",
      "package" : 0,
      "type" : 72,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "currentKey",
      "package" : 0,
      "type" : 72,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "prevKeyValid",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "d",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 46,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 37,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 46,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Lookup",
      "package" : 0,
      "type" : 44,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "EOF",
      "package" : 6,
      "type" : 46,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Completed",
      "package" : 0,
      "type" : 38,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "MapKey",
      "package" : 0,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "mk",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "MapValue",
      "package" : 0,
      "type" : 15,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "mv",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mapFd",
      "package" : 0,
      "type" : 44,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "key",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "value",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "bpfCurrentKey",
      "package" : 0,
      "type" : 91,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "bpfCurrentKeyPtr",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "bpfCurrentKeySize",
      "package" : 0,
      "type" : 94,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "bpfNextKey",
      "package" : 0,
      "type" : 91,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "bpfNextKeyPtr",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "bpfNextKeySize",
      "package" : 0,
      "type" : 94,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "MaxEntries",
      "package" : 0,
      "type" : 44,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "maxLookup",
      "package" : 0,
      "type" : 44,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 46,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "LookupFailed",
      "package" : 0,
      "type" : 44,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "KeyFallback",
      "package" : 0,
      "type" : 44,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Interrupted",
      "package" : 0,
      "type" : 44,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "dumpParser",
      "package" : 0,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "nextKeyErr",
      "package" : 0,
      "type" : 46,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}