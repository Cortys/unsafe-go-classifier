{
  "usage" : {
    "file" : "decode_object.go",
    "label1" : "cast-basic",
    "label2" : "efficiency",
    "line" : "275",
    "module" : "github.com/francoispqt/gojay",
    "pkg" : "github.com/francoispqt/gojay",
    "project" : "mattermost/mattermost-server",
    "snippet" : "return *(*string)(unsafe.Pointer(&d)), false, nil",
    "version" : "v1.2.13"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 6, 7, 2, 8 ],
      "exit" : false,
      "out-vars" : [ 2, 8, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 28 ],
      "in-vars" : [ 2, 8, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 8, 6 ],
      "decl-vars" : [ ],
      "line-start" : 255,
      "ast" : {
        "condition" : {
          "go-type" : 4,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cursor",
                "variable" : 9
              },
              "go-type" : 19,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dec",
                  "variable" : 2
                }
              },
              "type" : "selector"
            },
            "operator" : "<",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "length",
                "variable" : 10
              },
              "go-type" : 19,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dec",
                  "variable" : 2
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "read"
              },
              "go-type" : 20,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dec",
                  "variable" : 2
                }
              },
              "type" : "selector"
            },
            "go-type" : 4,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 285,
      "code" : "for ; dec.cursor < dec.length || dec.read(); dec.cursor++ {\n\tswitch dec.data[dec.cursor] {\n\tcase ' ', '\\n', '\\t', '\\r', ',':\n\t\tcontinue\n\tcase '\"':\n\t\tdec.cursor = dec.cursor + 1\n\t\tstart, end, err := dec.getString()\n\t\tif err != nil {\n\t\t\treturn \"\", false, err\n\t\t}\n\t\tvar found byte\n\t\tfor ; dec.cursor < dec.length || dec.read(); dec.cursor++ {\n\t\t\tif dec.data[dec.cursor] == ':' {\n\t\t\t\tfound |= 1\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif found&1 != 0 {\n\t\t\tdec.cursor++\n\t\t\td := dec.data[start : end-1]\n\t\t\treturn *(*string)(unsafe.Pointer(&d)), false, nil\n\t\t}\n\t\treturn \"\", false, dec.raiseInvalidJSONErr(dec.cursor)\n\tcase '}':\n\t\tdec.cursor = dec.cursor + 1\n\t\treturn \"\", true, nil\n\tdefault:\n\n\t\treturn \"\", false, dec.raiseInvalidJSONErr(dec.cursor)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 2 ],
      "in-vars" : [ 2, 8, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 8, 6 ],
      "decl-vars" : [ ],
      "line-start" : 255,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cursor",
            "variable" : 9
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dec",
              "variable" : 2
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 255,
      "code" : "dec.cursor++",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 7, 23, 26 ],
      "in-vars" : [ 2, 8, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 2, 8, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 256,
      "ast" : {
        "condition" : {
          "go-type" : 17,
          "index" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cursor",
              "variable" : 9
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 2
              }
            },
            "type" : "selector"
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 11
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 2
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 284,
      "code" : "switch dec.data[dec.cursor] {\ncase ' ', '\\n', '\\t', '\\r', ',':\n\tcontinue\ncase '\"':\n\tdec.cursor = dec.cursor + 1\n\tstart, end, err := dec.getString()\n\tif err != nil {\n\t\treturn \"\", false, err\n\t}\n\tvar found byte\n\tfor ; dec.cursor < dec.length || dec.read(); dec.cursor++ {\n\t\tif dec.data[dec.cursor] == ':' {\n\t\t\tfound |= 1\n\t\t\tbreak\n\t\t}\n\t}\n\tif found&1 != 0 {\n\t\tdec.cursor++\n\t\td := dec.data[start : end-1]\n\t\treturn *(*string)(unsafe.Pointer(&d)), false, nil\n\t}\n\treturn \"\", false, dec.raiseInvalidJSONErr(dec.cursor)\ncase '}':\n\tdec.cursor = dec.cursor + 1\n\treturn \"\", true, nil\ndefault:\n\n\treturn \"\", false, dec.raiseInvalidJSONErr(dec.cursor)\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 2, 8, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 2, 8, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 257,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "32"
          }
        }, {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "10"
          }
        }, {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "9"
          }
        }, {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "13"
          }
        }, {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "44"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 258,
      "code" : "case ' ', '\\n', '\\t', '\\r', ',':\n\tcontinue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 2, 8, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 2, 8 ],
      "decl-vars" : [ ],
      "line-start" : 258,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 258,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 259,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "34"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 277,
      "code" : "case '\"':\n\tdec.cursor = dec.cursor + 1\n\tstart, end, err := dec.getString()\n\tif err != nil {\n\t\treturn \"\", false, err\n\t}\n\tvar found byte\n\tfor ; dec.cursor < dec.length || dec.read(); dec.cursor++ {\n\t\tif dec.data[dec.cursor] == ':' {\n\t\t\tfound |= 1\n\t\t\tbreak\n\t\t}\n\t}\n\tif found&1 != 0 {\n\t\tdec.cursor++\n\t\td := dec.data[start : end-1]\n\t\treturn *(*string)(unsafe.Pointer(&d)), false, nil\n\t}\n\treturn \"\", false, dec.raiseInvalidJSONErr(dec.cursor)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 9 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 260,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cursor",
            "variable" : 9
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dec",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cursor",
              "variable" : 9
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 2
              }
            },
            "type" : "selector"
          },
          "operator" : "+",
          "right" : {
            "go-type" : 19,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 260,
      "code" : "dec.cursor = dec.cursor + 1",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 2, 12, 8, 6 ],
      "decl-vars" : [ 6, 12, 8 ],
      "line-start" : 261,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "start"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "end"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getString"
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 2
              }
            },
            "type" : "selector"
          },
          "go-type" : 22,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 261,
      "code" : "start, end, err := dec.getString()",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 8, 6, 2, 12 ],
      "exit" : false,
      "out-vars" : [ 2, 12, 8, 6 ],
      "decl-vars" : [ ],
      "line-start" : 262,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 12
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 264,
      "code" : "if err != nil {\n\treturn \"\", false, err\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 12 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 263,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : ""
          }
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        }, {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 12
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 263,
      "code" : "return \"\", false, err",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 2, 8, 6 ],
      "exit" : false,
      "out-vars" : [ 2, 8, 6, 7 ],
      "decl-vars" : [ 7 ],
      "line-start" : 265,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 17,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "found"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 265,
      "code" : "var found byte",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 18 ],
      "in-vars" : [ 7, 2, 8, 6 ],
      "exit" : false,
      "out-vars" : [ 2, 8, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 266,
      "ast" : {
        "condition" : {
          "go-type" : 4,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cursor",
                "variable" : 9
              },
              "go-type" : 19,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dec",
                  "variable" : 2
                }
              },
              "type" : "selector"
            },
            "operator" : "<",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "length",
                "variable" : 10
              },
              "go-type" : 19,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dec",
                  "variable" : 2
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "read"
              },
              "go-type" : 20,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dec",
                  "variable" : 2
                }
              },
              "type" : "selector"
            },
            "go-type" : 4,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 271,
      "code" : "for ; dec.cursor < dec.length || dec.read(); dec.cursor++ {\n\tif dec.data[dec.cursor] == ':' {\n\t\tfound |= 1\n\t\tbreak\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 13 ],
      "in-vars" : [ 2, 8, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 8, 6, 7, 2 ],
      "decl-vars" : [ ],
      "line-start" : 266,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cursor",
            "variable" : 9
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dec",
              "variable" : 2
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 266,
      "code" : "dec.cursor++",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14, 16 ],
      "in-vars" : [ 2, 8, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 2, 8, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 267,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 17,
            "index" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cursor",
                "variable" : 9
              },
              "go-type" : 19,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dec",
                  "variable" : 2
                }
              },
              "type" : "selector"
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 11
              },
              "go-type" : 16,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dec",
                  "variable" : 2
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "58"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 270,
      "code" : "if dec.data[dec.cursor] == ':' {\n\tfound |= 1\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 17 ],
      "in-vars" : [ 8, 6, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 2, 8 ],
      "decl-vars" : [ ],
      "line-start" : 268,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "found",
            "variable" : 7
          }
        } ],
        "operator" : "|",
        "right" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 7 ],
      "line-end" : 268,
      "code" : "found |= 1",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 6, 7, 2, 8 ],
      "exit" : false,
      "out-vars" : [ 2, 8, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 269,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 269,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19, 22 ],
      "in-vars" : [ 7, 2, 8, 6 ],
      "exit" : false,
      "out-vars" : [ 2, 8, 6 ],
      "decl-vars" : [ ],
      "line-start" : 272,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 17,
            "kind" : "expression",
            "left" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "found",
                "variable" : 7
              }
            },
            "operator" : "&",
            "right" : {
              "go-type" : 17,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 276,
      "code" : "if found&1 != 0 {\n\tdec.cursor++\n\td := dec.data[start : end-1]\n\treturn *(*string)(unsafe.Pointer(&d)), false, nil\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 20 ],
      "in-vars" : [ 2, 8, 6 ],
      "exit" : false,
      "out-vars" : [ 2, 8, 6 ],
      "decl-vars" : [ ],
      "line-start" : 273,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cursor",
            "variable" : 9
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dec",
              "variable" : 2
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 273,
      "code" : "dec.cursor++",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 2, 8, 6 ],
      "exit" : false,
      "out-vars" : [ 13 ],
      "decl-vars" : [ 13 ],
      "line-start" : 274,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "d"
          }
        } ],
        "right" : [ {
          "go-type" : 16,
          "type" : "slice",
          "three" : false,
          "high" : {
            "go-type" : 19,
            "kind" : "expression",
            "left" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "end",
                "variable" : 8
              }
            },
            "operator" : "-",
            "right" : {
              "go-type" : 19,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "max" : null,
          "kind" : "expression",
          "low" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "start",
              "variable" : 6
            }
          },
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 11
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 2
              }
            },
            "type" : "selector"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 274,
      "code" : "d := dec.data[start : end-1]",
      "entry" : false,
      "use-vars" : [ 2, 6, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 13 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 275,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "go-type" : 26,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 26,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 27,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 27,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 27,
              "kind" : "expression",
              "target" : {
                "go-type" : 28,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 16,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "d",
                    "variable" : 13
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        }, {
          "go-type" : 25,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 275,
      "code" : "return *(*string)(unsafe.Pointer(&d)), false, nil",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 277,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : ""
          }
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        }, {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cursor",
              "variable" : 9
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 2
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "raiseInvalidJSONErr"
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 2
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 277,
      "code" : "return \"\", false, dec.raiseInvalidJSONErr(dec.cursor)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 278,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "125"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 280,
      "code" : "case '}':\n\tdec.cursor = dec.cursor + 1\n\treturn \"\", true, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 25 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 279,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cursor",
            "variable" : 9
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dec",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cursor",
              "variable" : 9
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 2
              }
            },
            "type" : "selector"
          },
          "operator" : "+",
          "right" : {
            "go-type" : 19,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 279,
      "code" : "dec.cursor = dec.cursor + 1",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 280,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : ""
          }
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        }, {
          "go-type" : 25,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 280,
      "code" : "return \"\", true, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 281,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 283,
      "code" : "default:\n\n\treturn \"\", false, dec.raiseInvalidJSONErr(dec.cursor)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 283,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : ""
          }
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        }, {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cursor",
              "variable" : 9
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 2
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "raiseInvalidJSONErr"
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 2
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 283,
      "code" : "return \"\", false, dec.raiseInvalidJSONErr(dec.cursor)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 286,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : ""
          }
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        }, {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cursor",
              "variable" : 9
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 2
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "raiseInvalidJSONErr"
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 2
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 286,
      "code" : "return \"\", false, dec.raiseInvalidJSONErr(dec.cursor)",
      "entry" : false,
      "use-vars" : [ 2 ]
    } ],
    "code" : "func (dec *Decoder) nextKey() (string, bool, error) {\n\tfor ; dec.cursor < dec.length || dec.read(); dec.cursor++ {\n\t\tswitch dec.data[dec.cursor] {\n\t\tcase ' ', '\\n', '\\t', '\\r', ',':\n\t\t\tcontinue\n\t\tcase '\"':\n\t\t\tdec.cursor = dec.cursor + 1\n\t\t\tstart, end, err := dec.getString()\n\t\t\tif err != nil {\n\t\t\t\treturn \"\", false, err\n\t\t\t}\n\t\t\tvar found byte\n\t\t\tfor ; dec.cursor < dec.length || dec.read(); dec.cursor++ {\n\t\t\t\tif dec.data[dec.cursor] == ':' {\n\t\t\t\t\tfound |= 1\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif found&1 != 0 {\n\t\t\t\tdec.cursor++\n\t\t\t\td := dec.data[start : end-1]\n\t\t\t\treturn *(*string)(unsafe.Pointer(&d)), false, nil\n\t\t\t}\n\t\t\treturn \"\", false, dec.raiseInvalidJSONErr(dec.cursor)\n\t\tcase '}':\n\t\t\tdec.cursor = dec.cursor + 1\n\t\t\treturn \"\", true, nil\n\t\tdefault:\n\n\t\t\treturn \"\", false, dec.raiseInvalidJSONErr(dec.cursor)\n\t\t}\n\t}\n\treturn \"\", false, dec.raiseInvalidJSONErr(dec.cursor)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "nextKey",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "read",
      "package" : 0,
      "type" : 20,
      "exported" : false
    }, {
      "name" : "getString",
      "package" : 0,
      "type" : 23,
      "exported" : false
    }, {
      "name" : "raiseInvalidJSONErr",
      "package" : 0,
      "type" : 29,
      "exported" : false
    } ],
    "line-end" : 287,
    "line-start" : 254,
    "names" : [ "nextKey" ],
    "package" : 0,
    "packages" : [ {
      "name" : "gojay",
      "path" : "github.com/francoispqt/gojay"
    }, {
      "name" : "io",
      "path" : "io"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ ],
    "receivers" : [ 2 ],
    "results" : [ 3, 4, 5 ],
    "type" : "function",
    "types" : [ {
      "name" : "func() (string, bool, error)",
      "params" : 1,
      "recv" : 2,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      }, {
        "name" : "",
        "type" : 4
      }, {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(string, bool, error)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 6
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 7
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 6
    }, {
      "name" : "func() string",
      "params" : 1,
      "recv" : 0,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 7,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "elem" : 10,
      "name" : "*github.com/francoispqt/gojay.Decoder",
      "type" : "Pointer",
      "underlying" : 9
    }, {
      "local-name" : "Decoder",
      "name" : "github.com/francoispqt/gojay.Decoder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "r",
        "type" : 12
      }, {
        "name" : "data",
        "type" : 16
      }, {
        "name" : "err",
        "type" : 5
      }, {
        "name" : "isPooled",
        "type" : 17
      }, {
        "name" : "called",
        "type" : 17
      }, {
        "name" : "child",
        "type" : 17
      }, {
        "name" : "cursor",
        "type" : 19
      }, {
        "name" : "length",
        "type" : 19
      }, {
        "name" : "keysDone",
        "type" : 19
      }, {
        "name" : "arrayIndex",
        "type" : 19
      } ],
      "name" : "struct{r io.Reader; data []byte; err error; isPooled byte; called byte; child byte; cursor int; length int; keysDone int; arrayIndex int}",
      "type" : "Struct",
      "underlying" : 11
    }, {
      "local-name" : "Reader",
      "name" : "io.Reader",
      "package" : 1,
      "type" : "Named",
      "underlying" : 13
    }, {
      "methods" : [ {
        "name" : "Read",
        "type" : 14
      } ],
      "name" : "interface{Read(p []byte) (n int, err error)}",
      "type" : "Interface",
      "underlying" : 13
    }, {
      "name" : "func(p []byte) (n int, err error)",
      "params" : 15,
      "recv" : 1,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 14,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 16
      } ],
      "name" : "(p []byte)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 16
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 19
      }, {
        "name" : "err",
        "type" : 5
      } ],
      "name" : "(n int, err error)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "name" : "func() bool",
      "params" : 1,
      "recv" : -1,
      "results" : 21,
      "type" : "Signature",
      "underlying" : 20,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 19
      }, {
        "name" : "",
        "type" : 19
      }, {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(int, int, error)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "name" : "func() (int, int, error)",
      "params" : 1,
      "recv" : -1,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 23,
      "variadic" : false
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "elem" : 3,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 26
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 27
    }, {
      "elem" : 16,
      "name" : "*[]byte",
      "type" : "Pointer",
      "underlying" : 28
    }, {
      "name" : "func(pos int) error",
      "params" : 30,
      "recv" : -1,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pos",
        "type" : 19
      } ],
      "name" : "(pos int)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 31
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dec",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res2]",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "start",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "found",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "end",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "cursor",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "length",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "d",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}