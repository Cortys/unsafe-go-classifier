{
  "usage" : {
    "file" : "zz_generated.conversion.go",
    "label1" : "cast-basic",
    "label2" : "efficiency",
    "line" : "115",
    "module" : "k8s.io/kubernetes",
    "pkg" : "k8s.io/kubernetes/pkg/apis/discovery/v1beta1",
    "project" : "kubernetes/kubernetes",
    "snippet" : "out.Hostname = (*string)(unsafe.Pointer(in.Hostname))",
    "version" : "project"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 4 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 111,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Addresses",
            "variable" : 9
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 6,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 6,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "go-type" : 5,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 52,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 52,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 53,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 8,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 53,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 53,
              "kind" : "expression",
              "target" : {
                "go-type" : 52,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Addresses",
                    "variable" : 10
                  },
                  "go-type" : 5,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 111,
      "code" : "out.Addresses = *(*[]string)(unsafe.Pointer(&in.Addresses))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 6 ],
      "in-vars" : [ 6, 5, 13 ],
      "exit" : false,
      "out-vars" : [ 5, 13, 6 ],
      "decl-vars" : [ ],
      "line-start" : 112,
      "ast" : {
        "condition" : {
          "go-type" : 58,
          "kind" : "expression",
          "left" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 13
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 59,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 114,
      "code" : "if err := Convert_discovery_EndpointConditions_To_v1beta1_EndpointConditions(&in.Conditions, &out.Conditions, s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 5, 7, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 13 ],
      "decl-vars" : [ 13 ],
      "line-start" : 112,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 56,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Conditions",
                "variable" : 11
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 57,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Conditions",
                "variable" : 12
              },
              "go-type" : 20,
              "kind" : "expression",
              "target" : {
                "go-type" : 17,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "out",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 54,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_discovery_EndpointConditions_To_v1beta1_EndpointConditions"
            }
          },
          "go-type" : 33,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 112,
      "code" : "err := Convert_discovery_EndpointConditions_To_v1beta1_EndpointConditions(&in.Conditions, &out.Conditions, s)",
      "entry" : false,
      "use-vars" : [ 5, 6, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 13 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 113,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 33,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 13
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 113,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 7 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 115,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Hostname",
            "variable" : 14
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 6,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 6,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "go-type" : 11,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 53,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 8,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 53,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 53,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Hostname",
                "variable" : 15
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 115,
      "code" : "out.Hostname = (*string)(unsafe.Pointer(in.Hostname))",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 8 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 116,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "TargetRef",
            "variable" : 16
          },
          "go-type" : 22,
          "kind" : "expression",
          "target" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 23,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 5,
                "value" : "v1"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "ObjectReference"
              }
            },
            "go-type" : 22,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 22,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 53,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 8,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 53,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 53,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "TargetRef",
                "variable" : 17
              },
              "go-type" : 12,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 116,
      "code" : "out.TargetRef = (*v1.ObjectReference)(unsafe.Pointer(in.TargetRef))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 9 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 117,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Topology",
            "variable" : 18
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 16,
                "key" : {
                  "go-type" : 6,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 6,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "kind" : "type",
                "type" : "map",
                "value" : {
                  "go-type" : 6,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 6,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                }
              },
              "go-type" : 60,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 60,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 53,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 8,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 53,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 53,
              "kind" : "expression",
              "target" : {
                "go-type" : 60,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Topology",
                    "variable" : 19
                  },
                  "go-type" : 16,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 117,
      "code" : "out.Topology = *(*map[string]string)(unsafe.Pointer(&in.Topology))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 118,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 59,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 118,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func autoConvert_discovery_Endpoint_To_v1beta1_Endpoint(in *discovery.Endpoint, out *v1beta1.Endpoint, s conversion.Scope) error {\n\tout.Addresses = *(*[]string)(unsafe.Pointer(&in.Addresses))\n\tif err := Convert_discovery_EndpointConditions_To_v1beta1_EndpointConditions(&in.Conditions, &out.Conditions, s); err != nil {\n\t\treturn err\n\t}\n\tout.Hostname = (*string)(unsafe.Pointer(in.Hostname))\n\tout.TargetRef = (*v1.ObjectReference)(unsafe.Pointer(in.TargetRef))\n\tout.Topology = *(*map[string]string)(unsafe.Pointer(&in.Topology))\n\treturn nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "autoConvert_discovery_Endpoint_To_v1beta1_Endpoint",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Convert_discovery_EndpointConditions_To_v1beta1_EndpointConditions",
      "package" : 0,
      "type" : 54,
      "exported" : true
    } ],
    "line-end" : 119,
    "line-start" : 110,
    "names" : [ "autoConvert_discovery_Endpoint_To_v1beta1_Endpoint" ],
    "package" : 0,
    "packages" : [ {
      "name" : "v1beta1",
      "path" : "k8s.io/kubernetes/pkg/apis/discovery/v1beta1"
    }, {
      "name" : "discovery",
      "path" : "k8s.io/kubernetes/pkg/apis/discovery"
    }, {
      "name" : "core",
      "path" : "k8s.io/kubernetes/pkg/apis/core"
    }, {
      "name" : "types",
      "path" : "k8s.io/apimachinery/pkg/types"
    }, {
      "name" : "v1beta1",
      "path" : "k8s.io/api/discovery/v1beta1"
    }, {
      "name" : "v1",
      "path" : "k8s.io/api/core/v1"
    }, {
      "name" : "conversion",
      "path" : "k8s.io/apimachinery/pkg/conversion"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 5, 6, 7 ],
    "receivers" : [ ],
    "results" : [ 8 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(in *k8s.io/kubernetes/pkg/apis/discovery.Endpoint, out *k8s.io/api/discovery/v1beta1.Endpoint, s k8s.io/apimachinery/pkg/conversion.Scope) error",
      "params" : 1,
      "recv" : -1,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 2
      }, {
        "name" : "out",
        "type" : 17
      }, {
        "name" : "s",
        "type" : 25
      } ],
      "name" : "(in *k8s.io/kubernetes/pkg/apis/discovery.Endpoint, out *k8s.io/api/discovery/v1beta1.Endpoint, s k8s.io/apimachinery/pkg/conversion.Scope)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*k8s.io/kubernetes/pkg/apis/discovery.Endpoint",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "Endpoint",
      "name" : "k8s.io/kubernetes/pkg/apis/discovery.Endpoint",
      "package" : 1,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "Addresses",
        "type" : 5
      }, {
        "name" : "Conditions",
        "type" : 7
      }, {
        "name" : "Hostname",
        "type" : 11
      }, {
        "name" : "TargetRef",
        "type" : 12
      }, {
        "name" : "Topology",
        "type" : 16
      } ],
      "name" : "struct{Addresses []string; Conditions k8s.io/kubernetes/pkg/apis/discovery.EndpointConditions; Hostname *string; TargetRef *k8s.io/kubernetes/pkg/apis/core.ObjectReference; Topology map[string]string}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 5
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "local-name" : "EndpointConditions",
      "name" : "k8s.io/kubernetes/pkg/apis/discovery.EndpointConditions",
      "package" : 1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "Ready",
        "type" : 9
      } ],
      "name" : "struct{Ready *bool}",
      "type" : "Struct",
      "underlying" : 8
    }, {
      "elem" : 10,
      "name" : "*bool",
      "type" : "Pointer",
      "underlying" : 9
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "elem" : 6,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "*k8s.io/kubernetes/pkg/apis/core.ObjectReference",
      "type" : "Pointer",
      "underlying" : 12
    }, {
      "local-name" : "ObjectReference",
      "name" : "k8s.io/kubernetes/pkg/apis/core.ObjectReference",
      "package" : 2,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "Kind",
        "type" : 6
      }, {
        "name" : "Namespace",
        "type" : 6
      }, {
        "name" : "Name",
        "type" : 6
      }, {
        "name" : "UID",
        "type" : 15
      }, {
        "name" : "APIVersion",
        "type" : 6
      }, {
        "name" : "ResourceVersion",
        "type" : 6
      }, {
        "name" : "FieldPath",
        "type" : 6
      } ],
      "name" : "struct{Kind string; Namespace string; Name string; UID k8s.io/apimachinery/pkg/types.UID; APIVersion string; ResourceVersion string; FieldPath string}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "local-name" : "UID",
      "name" : "k8s.io/apimachinery/pkg/types.UID",
      "package" : 3,
      "type" : "Named",
      "underlying" : 6
    }, {
      "elem" : 6,
      "key" : 6,
      "name" : "map[string]string",
      "type" : "Map",
      "underlying" : 16
    }, {
      "elem" : 18,
      "name" : "*k8s.io/api/discovery/v1beta1.Endpoint",
      "type" : "Pointer",
      "underlying" : 17
    }, {
      "local-name" : "Endpoint",
      "name" : "k8s.io/api/discovery/v1beta1.Endpoint",
      "package" : 4,
      "type" : "Named",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "Addresses",
        "type" : 5
      }, {
        "name" : "Conditions",
        "type" : 20
      }, {
        "name" : "Hostname",
        "type" : 11
      }, {
        "name" : "TargetRef",
        "type" : 22
      }, {
        "name" : "Topology",
        "type" : 16
      } ],
      "name" : "struct{Addresses []string \"json:\\\"addresses\\\" protobuf:\\\"bytes,1,rep,name=addresses\\\"\"; Conditions k8s.io/api/discovery/v1beta1.EndpointConditions \"json:\\\"conditions,omitempty\\\" protobuf:\\\"bytes,2,opt,name=conditions\\\"\"; Hostname *string \"json:\\\"hostname,omitempty\\\" protobuf:\\\"bytes,3,opt,name=hostname\\\"\"; TargetRef *k8s.io/api/core/v1.ObjectReference \"json:\\\"targetRef,omitempty\\\" protobuf:\\\"bytes,4,opt,name=targetRef\\\"\"; Topology map[string]string \"json:\\\"topology,omitempty\\\" protobuf:\\\"bytes,5,opt,name=topology\\\"\"}",
      "type" : "Struct",
      "underlying" : 19
    }, {
      "local-name" : "EndpointConditions",
      "name" : "k8s.io/api/discovery/v1beta1.EndpointConditions",
      "package" : 4,
      "type" : "Named",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "Ready",
        "type" : 9
      } ],
      "name" : "struct{Ready *bool \"json:\\\"ready,omitempty\\\" protobuf:\\\"bytes,1,name=ready\\\"\"}",
      "type" : "Struct",
      "underlying" : 21
    }, {
      "elem" : 23,
      "name" : "*k8s.io/api/core/v1.ObjectReference",
      "type" : "Pointer",
      "underlying" : 22
    }, {
      "local-name" : "ObjectReference",
      "name" : "k8s.io/api/core/v1.ObjectReference",
      "package" : 5,
      "type" : "Named",
      "underlying" : 24
    }, {
      "fields" : [ {
        "name" : "Kind",
        "type" : 6
      }, {
        "name" : "Namespace",
        "type" : 6
      }, {
        "name" : "Name",
        "type" : 6
      }, {
        "name" : "UID",
        "type" : 15
      }, {
        "name" : "APIVersion",
        "type" : 6
      }, {
        "name" : "ResourceVersion",
        "type" : 6
      }, {
        "name" : "FieldPath",
        "type" : 6
      } ],
      "name" : "struct{Kind string \"json:\\\"kind,omitempty\\\" protobuf:\\\"bytes,1,opt,name=kind\\\"\"; Namespace string \"json:\\\"namespace,omitempty\\\" protobuf:\\\"bytes,2,opt,name=namespace\\\"\"; Name string \"json:\\\"name,omitempty\\\" protobuf:\\\"bytes,3,opt,name=name\\\"\"; UID k8s.io/apimachinery/pkg/types.UID \"json:\\\"uid,omitempty\\\" protobuf:\\\"bytes,4,opt,name=uid,casttype=k8s.io/apimachinery/pkg/types.UID\\\"\"; APIVersion string \"json:\\\"apiVersion,omitempty\\\" protobuf:\\\"bytes,5,opt,name=apiVersion\\\"\"; ResourceVersion string \"json:\\\"resourceVersion,omitempty\\\" protobuf:\\\"bytes,6,opt,name=resourceVersion\\\"\"; FieldPath string \"json:\\\"fieldPath,omitempty\\\" protobuf:\\\"bytes,7,opt,name=fieldPath\\\"\"}",
      "type" : "Struct",
      "underlying" : 24
    }, {
      "local-name" : "Scope",
      "name" : "k8s.io/apimachinery/pkg/conversion.Scope",
      "package" : 6,
      "type" : "Named",
      "underlying" : 26
    }, {
      "methods" : [ {
        "name" : "Convert",
        "type" : 27
      }, {
        "name" : "DestTag",
        "type" : 38
      }, {
        "name" : "Flags",
        "type" : 41
      }, {
        "name" : "Meta",
        "type" : 43
      }, {
        "name" : "SrcTag",
        "type" : 38
      } ],
      "name" : "interface{Convert(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags) error; DestTag() reflect.StructTag; Flags() k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags; Meta() *k8s.io/apimachinery/pkg/conversion.Meta; SrcTag() reflect.StructTag}",
      "type" : "Interface",
      "underlying" : 26
    }, {
      "name" : "func(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags) error",
      "params" : 28,
      "recv" : 1,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "src",
        "type" : 29
      }, {
        "name" : "dest",
        "type" : 29
      }, {
        "name" : "flags",
        "type" : 30
      } ],
      "name" : "(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 29
    }, {
      "local-name" : "FieldMatchingFlags",
      "name" : "k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags",
      "package" : 6,
      "type" : "Named",
      "underlying" : 31
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 33
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 32
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 34
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 35
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 34
    }, {
      "name" : "func() string",
      "params" : 36,
      "recv" : 0,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 37
    }, {
      "name" : "func() reflect.StructTag",
      "params" : 36,
      "recv" : 2,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 38,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      } ],
      "name" : "(reflect.StructTag)",
      "type" : "Tuple",
      "underlying" : 39
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 7,
      "type" : "Named",
      "underlying" : 6
    }, {
      "name" : "func() k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags",
      "params" : 36,
      "recv" : 3,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 41,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 30
      } ],
      "name" : "(k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "name" : "func() *k8s.io/apimachinery/pkg/conversion.Meta",
      "params" : 36,
      "recv" : 4,
      "results" : 44,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 45
      } ],
      "name" : "(*k8s.io/apimachinery/pkg/conversion.Meta)",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "elem" : 46,
      "name" : "*k8s.io/apimachinery/pkg/conversion.Meta",
      "type" : "Pointer",
      "underlying" : 45
    }, {
      "local-name" : "Meta",
      "name" : "k8s.io/apimachinery/pkg/conversion.Meta",
      "package" : 6,
      "type" : "Named",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "KeyNameMapping",
        "type" : 48
      }, {
        "name" : "Context",
        "type" : 29
      } ],
      "name" : "struct{KeyNameMapping k8s.io/apimachinery/pkg/conversion.FieldMappingFunc; Context interface{}}",
      "type" : "Struct",
      "underlying" : 47
    }, {
      "local-name" : "FieldMappingFunc",
      "name" : "k8s.io/apimachinery/pkg/conversion.FieldMappingFunc",
      "package" : 6,
      "type" : "Named",
      "underlying" : 49
    }, {
      "name" : "func(key string, sourceTag reflect.StructTag, destTag reflect.StructTag) (source string, dest string)",
      "params" : 50,
      "recv" : -1,
      "results" : 51,
      "type" : "Signature",
      "underlying" : 49,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 6
      }, {
        "name" : "sourceTag",
        "type" : 40
      }, {
        "name" : "destTag",
        "type" : 40
      } ],
      "name" : "(key string, sourceTag reflect.StructTag, destTag reflect.StructTag)",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "fields" : [ {
        "name" : "source",
        "type" : 6
      }, {
        "name" : "dest",
        "type" : 6
      } ],
      "name" : "(source string, dest string)",
      "type" : "Tuple",
      "underlying" : 51
    }, {
      "elem" : 5,
      "name" : "*[]string",
      "type" : "Pointer",
      "underlying" : 52
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 8,
      "type" : "Basic",
      "underlying" : 53
    }, {
      "name" : "func(in *k8s.io/kubernetes/pkg/apis/discovery.EndpointConditions, out *k8s.io/api/discovery/v1beta1.EndpointConditions, s k8s.io/apimachinery/pkg/conversion.Scope) error",
      "params" : 55,
      "recv" : -1,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 54,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 56
      }, {
        "name" : "out",
        "type" : 57
      }, {
        "name" : "s",
        "type" : 25
      } ],
      "name" : "(in *k8s.io/kubernetes/pkg/apis/discovery.EndpointConditions, out *k8s.io/api/discovery/v1beta1.EndpointConditions, s k8s.io/apimachinery/pkg/conversion.Scope)",
      "type" : "Tuple",
      "underlying" : 55
    }, {
      "elem" : 7,
      "name" : "*k8s.io/kubernetes/pkg/apis/discovery.EndpointConditions",
      "type" : "Pointer",
      "underlying" : 56
    }, {
      "elem" : 20,
      "name" : "*k8s.io/api/discovery/v1beta1.EndpointConditions",
      "type" : "Pointer",
      "underlying" : 57
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 58
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 59
    }, {
      "elem" : 16,
      "name" : "*map[string]string",
      "type" : "Pointer",
      "underlying" : 60
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 33,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 33,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Addresses",
      "package" : 4,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Addresses",
      "package" : 1,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Conditions",
      "package" : 1,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Conditions",
      "package" : 4,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 33,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Hostname",
      "package" : 4,
      "type" : 11,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Hostname",
      "package" : 1,
      "type" : 11,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "TargetRef",
      "package" : 4,
      "type" : 22,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "TargetRef",
      "package" : 1,
      "type" : 12,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Topology",
      "package" : 4,
      "type" : 16,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Topology",
      "package" : 1,
      "type" : 16,
      "exported" : true,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}