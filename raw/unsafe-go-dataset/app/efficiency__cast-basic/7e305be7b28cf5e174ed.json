{
  "usage" : {
    "file" : "decode_string.go",
    "label1" : "cast-basic",
    "label2" : "efficiency",
    "line" : "71",
    "module" : "github.com/francoispqt/gojay",
    "pkg" : "github.com/francoispqt/gojay",
    "project" : "mattermost/mattermost-server",
    "snippet" : "**v = *(*string)(unsafe.Pointer(&d))",
    "version" : "v1.2.13"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 30 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 54,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cursor",
                "variable" : 4
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dec",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "operator" : "<",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "length",
                "variable" : 5
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dec",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "read"
              },
              "go-type" : 12,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dec",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "go-type" : 11,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 90,
      "code" : "for ; dec.cursor < dec.length || dec.read(); dec.cursor++ {\n\tswitch dec.data[dec.cursor] {\n\tcase ' ', '\\n', '\\t', '\\r', ',':\n\n\t\tcontinue\n\tcase '\"':\n\t\tdec.cursor++\n\t\tstart, end, err := dec.getString()\n\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif *v == nil {\n\t\t\t*v = new(string)\n\t\t}\n\n\t\td := dec.data[start : end-1]\n\t\t**v = *(*string)(unsafe.Pointer(&d))\n\t\tdec.cursor = end\n\t\treturn nil\n\n\tcase 'n':\n\t\tdec.cursor++\n\t\terr := dec.assertNull()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\tdefault:\n\t\tdec.err = dec.makeInvalidUnmarshalErr(v)\n\t\terr := dec.skipData()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 54,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cursor",
            "variable" : 4
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dec",
              "variable" : 1
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 54,
      "code" : "dec.cursor++",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 7, 18, 24 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 55,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "index" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cursor",
              "variable" : 4
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 6
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 89,
      "code" : "switch dec.data[dec.cursor] {\ncase ' ', '\\n', '\\t', '\\r', ',':\n\n\tcontinue\ncase '\"':\n\tdec.cursor++\n\tstart, end, err := dec.getString()\n\n\tif err != nil {\n\t\treturn err\n\t}\n\tif *v == nil {\n\t\t*v = new(string)\n\t}\n\n\td := dec.data[start : end-1]\n\t**v = *(*string)(unsafe.Pointer(&d))\n\tdec.cursor = end\n\treturn nil\n\ncase 'n':\n\tdec.cursor++\n\terr := dec.assertNull()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\ndefault:\n\tdec.err = dec.makeInvalidUnmarshalErr(v)\n\terr := dec.skipData()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 56,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "32"
          }
        }, {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "10"
          }
        }, {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "9"
          }
        }, {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "13"
          }
        }, {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "44"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 58,
      "code" : "case ' ', '\\n', '\\t', '\\r', ',':\n\n\tcontinue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 58,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 58,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 59,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "34"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 73,
      "code" : "case '\"':\n\tdec.cursor++\n\tstart, end, err := dec.getString()\n\n\tif err != nil {\n\t\treturn err\n\t}\n\tif *v == nil {\n\t\t*v = new(string)\n\t}\n\n\td := dec.data[start : end-1]\n\t**v = *(*string)(unsafe.Pointer(&d))\n\tdec.cursor = end\n\treturn nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 9 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 60,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cursor",
            "variable" : 4
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dec",
              "variable" : 1
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 60,
      "code" : "dec.cursor++",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 7, 1, 9, 8, 2 ],
      "decl-vars" : [ 7, 9, 8 ],
      "line-start" : 61,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "start"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "end"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getString"
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 14,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 61,
      "code" : "start, end, err := dec.getString()",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 1, 9, 8, 2, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 1, 9, 8, 2 ],
      "decl-vars" : [ ],
      "line-start" : 63,
      "ast" : {
        "condition" : {
          "go-type" : 16,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 7
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 65,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 64,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 7
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 64,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 14 ],
      "in-vars" : [ 1, 9, 8, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 9, 8 ],
      "decl-vars" : [ ],
      "line-start" : 66,
      "ast" : {
        "condition" : {
          "go-type" : 16,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 2
              }
            },
            "type" : "star"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 68,
      "code" : "if *v == nil {\n\t*v = new(string)\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 1, 9, 8 ],
      "exit" : false,
      "out-vars" : [ 9, 8, 1 ],
      "decl-vars" : [ ],
      "line-start" : 67,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 2
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 4,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "string"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 67,
      "code" : "*v = new(string)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 1, 9, 8 ],
      "exit" : false,
      "out-vars" : [ 1, 9, 10 ],
      "decl-vars" : [ 10 ],
      "line-start" : 70,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "d"
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "type" : "slice",
          "three" : false,
          "high" : {
            "go-type" : 10,
            "kind" : "expression",
            "left" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "end",
                "variable" : 9
              }
            },
            "operator" : "-",
            "right" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "max" : null,
          "kind" : "expression",
          "low" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "start",
              "variable" : 8
            }
          },
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 6
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 1
              }
            },
            "type" : "selector"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 70,
      "code" : "d := dec.data[start : end-1]",
      "entry" : false,
      "use-vars" : [ 1, 8, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 1, 9, 10 ],
      "exit" : false,
      "out-vars" : [ 9, 1 ],
      "decl-vars" : [ ],
      "line-start" : 71,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 2
              }
            },
            "type" : "star"
          },
          "type" : "star"
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 4,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 4,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "go-type" : 3,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 18,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 18,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 18,
              "kind" : "expression",
              "target" : {
                "go-type" : 19,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "d",
                    "variable" : 10
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 71,
      "code" : "**v = *(*string)(unsafe.Pointer(&d))",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 17 ],
      "in-vars" : [ 1, 9 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 72,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cursor",
            "variable" : 4
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dec",
              "variable" : 1
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "end",
            "variable" : 9
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 72,
      "code" : "dec.cursor = end",
      "entry" : false,
      "use-vars" : [ 9, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 73,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 73,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : 75,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "110"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 81,
      "code" : "case 'n':\n\tdec.cursor++\n\terr := dec.assertNull()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 20 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : 76,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cursor",
            "variable" : 4
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dec",
              "variable" : 1
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 76,
      "code" : "dec.cursor++",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 11 ],
      "decl-vars" : [ 11 ],
      "line-start" : 77,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "assertNull"
            },
            "go-type" : 20,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 77,
      "code" : "err := dec.assertNull()",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22, 23 ],
      "in-vars" : [ 11 ],
      "exit" : false,
      "out-vars" : [ 11 ],
      "decl-vars" : [ ],
      "line-start" : 78,
      "ast" : {
        "condition" : {
          "go-type" : 16,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 11
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 80,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 11 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 79,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 11
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 79,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 81,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 81,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 82,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 88,
      "code" : "default:\n\tdec.err = dec.makeInvalidUnmarshalErr(v)\n\terr := dec.skipData()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 26 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : 83,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 12
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dec",
              "variable" : 1
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "makeInvalidUnmarshalErr"
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 83,
      "code" : "dec.err = dec.makeInvalidUnmarshalErr(v)",
      "entry" : false,
      "use-vars" : [ 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 13 ],
      "decl-vars" : [ 13 ],
      "line-start" : 84,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "skipData"
            },
            "go-type" : 20,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dec",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 84,
      "code" : "err := dec.skipData()",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28, 29 ],
      "in-vars" : [ 13 ],
      "exit" : false,
      "out-vars" : [ 13 ],
      "decl-vars" : [ ],
      "line-start" : 85,
      "ast" : {
        "condition" : {
          "go-type" : 16,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 13
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 87,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 13 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 86,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 13
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 86,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 88,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 88,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 91,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 91,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func (dec *Decoder) decodeStringNull(v **string) error {\n\tfor ; dec.cursor < dec.length || dec.read(); dec.cursor++ {\n\t\tswitch dec.data[dec.cursor] {\n\t\tcase ' ', '\\n', '\\t', '\\r', ',':\n\n\t\t\tcontinue\n\t\tcase '\"':\n\t\t\tdec.cursor++\n\t\t\tstart, end, err := dec.getString()\n\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif *v == nil {\n\t\t\t\t*v = new(string)\n\t\t\t}\n\n\t\t\td := dec.data[start : end-1]\n\t\t\t**v = *(*string)(unsafe.Pointer(&d))\n\t\t\tdec.cursor = end\n\t\t\treturn nil\n\n\t\tcase 'n':\n\t\t\tdec.cursor++\n\t\t\terr := dec.assertNull()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\tdefault:\n\t\t\tdec.err = dec.makeInvalidUnmarshalErr(v)\n\t\t\terr := dec.skipData()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "decodeStringNull",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "read",
      "package" : 0,
      "type" : 12,
      "exported" : false
    }, {
      "name" : "getString",
      "package" : 0,
      "type" : 15,
      "exported" : false
    }, {
      "name" : "assertNull",
      "package" : 0,
      "type" : 20,
      "exported" : false
    }, {
      "name" : "makeInvalidUnmarshalErr",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "skipData",
      "package" : 0,
      "type" : 20,
      "exported" : false
    } ],
    "line-end" : 92,
    "line-start" : 53,
    "names" : [ "decodeStringNull" ],
    "package" : 0,
    "packages" : [ {
      "name" : "gojay",
      "path" : "github.com/francoispqt/gojay"
    }, {
      "name" : "io",
      "path" : "io"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 2 ],
    "receivers" : [ 1 ],
    "results" : [ 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(v **string) error",
      "params" : 1,
      "recv" : 1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 2
      } ],
      "name" : "(v **string)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "**string",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 3
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 5
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 8
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 7
    }, {
      "name" : "func() string",
      "params" : 9,
      "recv" : 0,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "func() bool",
      "params" : 9,
      "recv" : -1,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      }, {
        "name" : "",
        "type" : 10
      }, {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(int, int, error)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "name" : "func() (int, int, error)",
      "params" : 9,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 15,
      "variadic" : false
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 18
    }, {
      "elem" : 7,
      "name" : "*[]byte",
      "type" : "Pointer",
      "underlying" : 19
    }, {
      "name" : "func() error",
      "params" : 9,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 20,
      "variadic" : false
    }, {
      "name" : "func(v interface{}) error",
      "params" : 22,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 23
      } ],
      "name" : "(v interface{})",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 23
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "dec",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "cursor",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "length",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "start",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "end",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "d",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 6,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}