{
  "usage" : {
    "file" : "zz_generated.conversion.go",
    "label1" : "cast-basic",
    "label2" : "efficiency",
    "line" : "962",
    "module" : "k8s.io/apiextensions-apiserver",
    "pkg" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1",
    "project" : "rancher/rancher",
    "snippet" : "out.Minimum = (*float64)(unsafe.Pointer(in.Minimum))",
    "version" : "v0.18.0"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 3 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 943,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ID",
            "variable" : 9
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ID",
            "variable" : 10
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 943,
      "code" : "out.ID = in.ID",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 4 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 944,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Schema",
            "variable" : 11
          },
          "go-type" : 38,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 38,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 38,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "JSONSchemaURL"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Schema",
              "variable" : 12
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 944,
      "code" : "out.Schema = JSONSchemaURL(in.Schema)",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 5 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 945,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Ref",
            "variable" : 13
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "go-type" : 7,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 87,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 87,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 87,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Ref",
                "variable" : 14
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 945,
      "code" : "out.Ref = (*string)(unsafe.Pointer(in.Ref))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 6 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 946,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Description",
            "variable" : 15
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Description",
            "variable" : 16
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 946,
      "code" : "out.Description = in.Description",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 7 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 947,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Type",
            "variable" : 17
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Type",
            "variable" : 18
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 947,
      "code" : "out.Type = in.Type",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 8 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 948,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Nullable",
            "variable" : 19
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Nullable",
            "variable" : 20
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 948,
      "code" : "out.Nullable = in.Nullable",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 9 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 949,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Format",
            "variable" : 21
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Format",
            "variable" : 22
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 949,
      "code" : "out.Format = in.Format",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 10 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 950,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Title",
            "variable" : 23
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Title",
            "variable" : 24
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 950,
      "code" : "out.Title = in.Title",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 16 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 951,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Default",
              "variable" : 25
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 959,
      "code" : "if in.Default != nil {\n\tin, out := &in.Default, &out.Default\n\t*out = new(JSON)\n\tif err := Convert_apiextensions_JSON_To_v1beta1_JSON(*in, *out, s); err != nil {\n\t\treturn err\n\t}\n} else {\n\tout.Default = nil\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 28, 27, 6, 5 ],
      "decl-vars" : [ 27, 28 ],
      "line-start" : 952,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "in"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        } ],
        "right" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Default",
              "variable" : 25
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }, {
          "go-type" : 91,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Default",
              "variable" : 26
            },
            "go-type" : 39,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 952,
      "code" : "in, out := &in.Default, &out.Default",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 28, 27, 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 28, 27, 6 ],
      "decl-vars" : [ ],
      "line-start" : 953,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 39,
          "kind" : "expression",
          "target" : {
            "go-type" : 91,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 27
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 40,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 40,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "JSON"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 953,
      "code" : "*out = new(JSON)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 17 ],
      "in-vars" : [ 29, 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 29 ],
      "decl-vars" : [ ],
      "line-start" : 954,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 29
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 956,
      "code" : "if err := Convert_apiextensions_JSON_To_v1beta1_JSON(*in, *out, s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 5, 7, 28, 27, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 29 ],
      "decl-vars" : [ 29 ],
      "line-start" : 954,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "go-type" : 90,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 28
              }
            },
            "type" : "star"
          }, {
            "go-type" : 39,
            "kind" : "expression",
            "target" : {
              "go-type" : 91,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 27
              }
            },
            "type" : "star"
          }, {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 92,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_apiextensions_JSON_To_v1beta1_JSON"
            }
          },
          "go-type" : 68,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 954,
      "code" : "err := Convert_apiextensions_JSON_To_v1beta1_JSON(*in, *out, s)",
      "entry" : false,
      "use-vars" : [ 7, 28, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 29 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 955,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 68,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 29
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 955,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 17 ],
      "in-vars" : [ 7, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 6 ],
      "decl-vars" : [ ],
      "line-start" : 958,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Default",
            "variable" : 26
          },
          "go-type" : 39,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 89,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 958,
      "code" : "out.Default = nil",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 18 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 960,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Maximum",
            "variable" : 30
          },
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 13,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float64"
              }
            },
            "go-type" : 12,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 87,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 87,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 87,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Maximum",
                "variable" : 31
              },
              "go-type" : 12,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 960,
      "code" : "out.Maximum = (*float64)(unsafe.Pointer(in.Maximum))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 19 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 961,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ExclusiveMaximum",
            "variable" : 32
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ExclusiveMaximum",
            "variable" : 33
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 961,
      "code" : "out.ExclusiveMaximum = in.ExclusiveMaximum",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 20 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 962,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Minimum",
            "variable" : 34
          },
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 13,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float64"
              }
            },
            "go-type" : 12,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 87,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 87,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 87,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Minimum",
                "variable" : 35
              },
              "go-type" : 12,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 962,
      "code" : "out.Minimum = (*float64)(unsafe.Pointer(in.Minimum))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 21 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 963,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ExclusiveMinimum",
            "variable" : 36
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ExclusiveMinimum",
            "variable" : 37
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 963,
      "code" : "out.ExclusiveMinimum = in.ExclusiveMinimum",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 22 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 964,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "MaxLength",
            "variable" : 38
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 15,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 15,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "go-type" : 14,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 87,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 87,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 87,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "MaxLength",
                "variable" : 39
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 964,
      "code" : "out.MaxLength = (*int64)(unsafe.Pointer(in.MaxLength))",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 23 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 6 ],
      "decl-vars" : [ ],
      "line-start" : 965,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "MinLength",
            "variable" : 40
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 15,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 15,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "go-type" : 14,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 87,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 87,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 87,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "MinLength",
                "variable" : 41
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 965,
      "code" : "out.MinLength = (*int64)(unsafe.Pointer(in.MinLength))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 24 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 966,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Pattern",
            "variable" : 42
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Pattern",
            "variable" : 43
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 966,
      "code" : "out.Pattern = in.Pattern",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 25 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 967,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "MaxItems",
            "variable" : 44
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 15,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 15,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "go-type" : 14,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 87,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 87,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 87,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "MaxItems",
                "variable" : 45
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 967,
      "code" : "out.MaxItems = (*int64)(unsafe.Pointer(in.MaxItems))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 26 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 968,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "MinItems",
            "variable" : 46
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 15,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 15,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "go-type" : 14,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 87,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 87,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 87,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "MinItems",
                "variable" : 47
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 968,
      "code" : "out.MinItems = (*int64)(unsafe.Pointer(in.MinItems))",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 27 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 969,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "UniqueItems",
            "variable" : 48
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "UniqueItems",
            "variable" : 49
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 969,
      "code" : "out.UniqueItems = in.UniqueItems",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 28 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 970,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "MultipleOf",
            "variable" : 50
          },
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 13,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float64"
              }
            },
            "go-type" : 12,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 87,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 87,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 87,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "MultipleOf",
                "variable" : 51
              },
              "go-type" : 12,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 970,
      "code" : "out.MultipleOf = (*float64)(unsafe.Pointer(in.MultipleOf))",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29, 35 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 971,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Enum",
              "variable" : 52
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 981,
      "code" : "if in.Enum != nil {\n\tin, out := &in.Enum, &out.Enum\n\t*out = make([]JSON, len(*in))\n\tfor i := range *in {\n\t\tif err := Convert_apiextensions_JSON_To_v1beta1_JSON(&(*in)[i], &(*out)[i], s); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n} else {\n\tout.Enum = nil\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 55, 54 ],
      "decl-vars" : [ 54, 55 ],
      "line-start" : 972,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "in"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        } ],
        "right" : [ {
          "go-type" : 94,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Enum",
              "variable" : 52
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }, {
          "go-type" : 95,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Enum",
              "variable" : 53
            },
            "go-type" : 44,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 972,
      "code" : "in, out := &in.Enum, &out.Enum",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 6, 5, 7, 55, 54 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 55, 54 ],
      "decl-vars" : [ ],
      "line-start" : 973,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 44,
          "kind" : "expression",
          "target" : {
            "go-type" : 95,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 54
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 40,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 40,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "JSON"
              }
            },
            "go-type" : 44,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 44,
          "kind" : "expression",
          "rest" : [ {
            "arguments" : [ {
              "go-type" : 16,
              "kind" : "expression",
              "target" : {
                "go-type" : 94,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 55
                }
              },
              "type" : "star"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 66,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 973,
      "code" : "*out = make([]JSON, len(*in))",
      "entry" : false,
      "use-vars" : [ 55 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33, 36 ],
      "in-vars" : [ 5, 7, 55, 54, 6 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 55, 56, 54, 6 ],
      "decl-vars" : [ 56 ],
      "line-start" : 974,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "go-type" : 94,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 55
            }
          },
          "type" : "star"
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 978,
      "code" : "for i := range *in {\n\tif err := Convert_apiextensions_JSON_To_v1beta1_JSON(&(*in)[i], &(*out)[i], s); err != nil {\n\t\treturn err\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 55 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31, 34 ],
      "in-vars" : [ 54, 6, 5, 7, 57, 55 ],
      "exit" : false,
      "out-vars" : [ 54, 6, 5, 7, 57, 55 ],
      "decl-vars" : [ ],
      "line-start" : 975,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 57
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 977,
      "code" : "if err := Convert_apiextensions_JSON_To_v1beta1_JSON(&(*in)[i], &(*out)[i], s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 57 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 54, 6, 5, 7, 55, 56 ],
      "exit" : false,
      "out-vars" : [ 55, 54, 6, 5, 7, 57 ],
      "decl-vars" : [ 57 ],
      "line-start" : 975,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 9,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 10,
              "index" : {
                "go-type" : 66,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 56
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 16,
                "kind" : "expression",
                "target" : {
                  "go-type" : 16,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 94,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 55
                    }
                  },
                  "type" : "star"
                },
                "type" : "paren"
              },
              "type" : "index"
            },
            "type" : "unary"
          }, {
            "go-type" : 39,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 40,
              "index" : {
                "go-type" : 66,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 56
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 44,
                "kind" : "expression",
                "target" : {
                  "go-type" : 44,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 95,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "out",
                      "variable" : 54
                    }
                  },
                  "type" : "star"
                },
                "type" : "paren"
              },
              "type" : "index"
            },
            "type" : "unary"
          }, {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 92,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_apiextensions_JSON_To_v1beta1_JSON"
            }
          },
          "go-type" : 68,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 975,
      "code" : "err := Convert_apiextensions_JSON_To_v1beta1_JSON(&(*in)[i], &(*out)[i], s)",
      "entry" : false,
      "use-vars" : [ 55, 56, 54, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 57 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 976,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 68,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 57
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 976,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 57 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 36 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 6 ],
      "decl-vars" : [ ],
      "line-start" : 980,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Enum",
            "variable" : 53
          },
          "go-type" : 44,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 89,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 980,
      "code" : "out.Enum = nil",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 37 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 982,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "MaxProperties",
            "variable" : 58
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 15,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 15,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "go-type" : 14,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 87,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 87,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 87,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "MaxProperties",
                "variable" : 59
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 982,
      "code" : "out.MaxProperties = (*int64)(unsafe.Pointer(in.MaxProperties))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 38 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 6 ],
      "decl-vars" : [ ],
      "line-start" : 983,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "MinProperties",
            "variable" : 60
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 15,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 15,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "go-type" : 14,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 87,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 87,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 87,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "MinProperties",
                "variable" : 61
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 983,
      "code" : "out.MinProperties = (*int64)(unsafe.Pointer(in.MinProperties))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 39 ],
      "in-vars" : [ 7, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 984,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Required",
            "variable" : 62
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 5,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 5,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "go-type" : 17,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 99,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 99,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 87,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 4,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 87,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 87,
              "kind" : "expression",
              "target" : {
                "go-type" : 99,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Required",
                    "variable" : 63
                  },
                  "go-type" : 17,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 984,
      "code" : "out.Required = *(*[]string)(unsafe.Pointer(&in.Required))",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40, 45 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 6 ],
      "decl-vars" : [ ],
      "line-start" : 985,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Items",
              "variable" : 64
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 993,
      "code" : "if in.Items != nil {\n\tin, out := &in.Items, &out.Items\n\t*out = new(JSONSchemaPropsOrArray)\n\tif err := Convert_apiextensions_JSONSchemaPropsOrArray_To_v1beta1_JSONSchemaPropsOrArray(*in, *out, s); err != nil {\n\t\treturn err\n\t}\n} else {\n\tout.Items = nil\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 66, 67, 6 ],
      "decl-vars" : [ 66, 67 ],
      "line-start" : 986,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "in"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        } ],
        "right" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Items",
              "variable" : 64
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }, {
          "go-type" : 101,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Items",
              "variable" : 65
            },
            "go-type" : 45,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 986,
      "code" : "in, out := &in.Items, &out.Items",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 66, 67, 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 66, 67, 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 987,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 45,
          "kind" : "expression",
          "target" : {
            "go-type" : 101,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 66
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 46,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 46,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "JSONSchemaPropsOrArray"
            }
          },
          "go-type" : 45,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 987,
      "code" : "*out = new(JSONSchemaPropsOrArray)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44, 46 ],
      "in-vars" : [ 6, 5, 7, 68 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 68 ],
      "decl-vars" : [ ],
      "line-start" : 988,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 68
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 990,
      "code" : "if err := Convert_apiextensions_JSONSchemaPropsOrArray_To_v1beta1_JSONSchemaPropsOrArray(*in, *out, s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 68 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42 ],
      "in-vars" : [ 7, 66, 67, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 7, 68, 6, 5 ],
      "decl-vars" : [ 68 ],
      "line-start" : 988,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 100,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 67
              }
            },
            "type" : "star"
          }, {
            "go-type" : 45,
            "kind" : "expression",
            "target" : {
              "go-type" : 101,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 66
              }
            },
            "type" : "star"
          }, {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 102,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_apiextensions_JSONSchemaPropsOrArray_To_v1beta1_JSONSchemaPropsOrArray"
            }
          },
          "go-type" : 68,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 988,
      "code" : "err := Convert_apiextensions_JSONSchemaPropsOrArray_To_v1beta1_JSONSchemaPropsOrArray(*in, *out, s)",
      "entry" : false,
      "use-vars" : [ 67, 66, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 68 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 989,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 68,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 68
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 989,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 68 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 46 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 992,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Items",
            "variable" : 65
          },
          "go-type" : 45,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 89,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 992,
      "code" : "out.Items = nil",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47, 53 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 994,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "AllOf",
              "variable" : 69
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1004,
      "code" : "if in.AllOf != nil {\n\tin, out := &in.AllOf, &out.AllOf\n\t*out = make([]JSONSchemaProps, len(*in))\n\tfor i := range *in {\n\t\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&(*in)[i], &(*out)[i], s); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n} else {\n\tout.AllOf = nil\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 72, 71, 7 ],
      "decl-vars" : [ 72, 71 ],
      "line-start" : 995,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "in"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        } ],
        "right" : [ {
          "go-type" : 104,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "AllOf",
              "variable" : 69
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }, {
          "go-type" : 105,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "AllOf",
              "variable" : 70
            },
            "go-type" : 48,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 995,
      "code" : "in, out := &in.AllOf, &out.AllOf",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 6, 5, 72, 71, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 72, 71, 7, 6 ],
      "decl-vars" : [ ],
      "line-start" : 996,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 48,
          "kind" : "expression",
          "target" : {
            "go-type" : 105,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 71
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 36,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "JSONSchemaProps"
              }
            },
            "go-type" : 48,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 48,
          "kind" : "expression",
          "rest" : [ {
            "arguments" : [ {
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 104,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 72
                }
              },
              "type" : "star"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 106,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 66,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 996,
      "code" : "*out = make([]JSONSchemaProps, len(*in))",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51, 54 ],
      "in-vars" : [ 6, 5, 72, 71, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 72, 73, 71, 7 ],
      "decl-vars" : [ 73 ],
      "line-start" : 997,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 21,
          "kind" : "expression",
          "target" : {
            "go-type" : 104,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 72
            }
          },
          "type" : "star"
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 1001,
      "code" : "for i := range *in {\n\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&(*in)[i], &(*out)[i], s); err != nil {\n\t\treturn err\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49, 52 ],
      "in-vars" : [ 72, 71, 7, 6, 5, 74 ],
      "exit" : false,
      "out-vars" : [ 7, 6, 5, 74, 72, 71 ],
      "decl-vars" : [ ],
      "line-start" : 998,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 74
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1000,
      "code" : "if err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&(*in)[i], &(*out)[i], s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 74 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50 ],
      "in-vars" : [ 6, 5, 72, 73, 71, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 74, 72, 71, 7 ],
      "decl-vars" : [ 74 ],
      "line-start" : 998,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 3,
              "index" : {
                "go-type" : 66,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 73
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 21,
                "kind" : "expression",
                "target" : {
                  "go-type" : 21,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 104,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 72
                    }
                  },
                  "type" : "star"
                },
                "type" : "paren"
              },
              "type" : "index"
            },
            "type" : "unary"
          }, {
            "go-type" : 35,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 36,
              "index" : {
                "go-type" : 66,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 73
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 48,
                "kind" : "expression",
                "target" : {
                  "go-type" : 48,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 105,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "out",
                      "variable" : 71
                    }
                  },
                  "type" : "star"
                },
                "type" : "paren"
              },
              "type" : "index"
            },
            "type" : "unary"
          }, {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps"
            }
          },
          "go-type" : 68,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 998,
      "code" : "err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&(*in)[i], &(*out)[i], s)",
      "entry" : false,
      "use-vars" : [ 72, 71, 73, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 74 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 999,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 68,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 74
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 999,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 74 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 54 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1003,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "AllOf",
            "variable" : 70
          },
          "go-type" : 48,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 89,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1003,
      "code" : "out.AllOf = nil",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55, 61 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1005,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "OneOf",
              "variable" : 75
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1015,
      "code" : "if in.OneOf != nil {\n\tin, out := &in.OneOf, &out.OneOf\n\t*out = make([]JSONSchemaProps, len(*in))\n\tfor i := range *in {\n\t\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&(*in)[i], &(*out)[i], s); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n} else {\n\tout.OneOf = nil\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 78, 77, 6 ],
      "decl-vars" : [ 78, 77 ],
      "line-start" : 1006,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "in"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        } ],
        "right" : [ {
          "go-type" : 104,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "OneOf",
              "variable" : 75
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }, {
          "go-type" : 105,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "OneOf",
              "variable" : 76
            },
            "go-type" : 48,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1006,
      "code" : "in, out := &in.OneOf, &out.OneOf",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57 ],
      "in-vars" : [ 6, 5, 7, 78, 77 ],
      "exit" : false,
      "out-vars" : [ 77, 6, 5, 7, 78 ],
      "decl-vars" : [ ],
      "line-start" : 1007,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 48,
          "kind" : "expression",
          "target" : {
            "go-type" : 105,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 77
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 36,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "JSONSchemaProps"
              }
            },
            "go-type" : 48,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 48,
          "kind" : "expression",
          "rest" : [ {
            "arguments" : [ {
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 104,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 78
                }
              },
              "type" : "star"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 106,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 66,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1007,
      "code" : "*out = make([]JSONSchemaProps, len(*in))",
      "entry" : false,
      "use-vars" : [ 78 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59, 62 ],
      "in-vars" : [ 6, 5, 7, 78, 77 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 78, 79, 77 ],
      "decl-vars" : [ 79 ],
      "line-start" : 1008,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 21,
          "kind" : "expression",
          "target" : {
            "go-type" : 104,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 78
            }
          },
          "type" : "star"
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 1012,
      "code" : "for i := range *in {\n\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&(*in)[i], &(*out)[i], s); err != nil {\n\t\treturn err\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 78 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57, 60 ],
      "in-vars" : [ 80, 77, 6, 5, 7, 78 ],
      "exit" : false,
      "out-vars" : [ 78, 80, 77, 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1009,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 80
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1011,
      "code" : "if err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&(*in)[i], &(*out)[i], s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 80 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 58 ],
      "in-vars" : [ 78, 79, 77, 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 78, 80, 77, 6 ],
      "decl-vars" : [ 80 ],
      "line-start" : 1009,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 3,
              "index" : {
                "go-type" : 66,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 79
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 21,
                "kind" : "expression",
                "target" : {
                  "go-type" : 21,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 104,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 78
                    }
                  },
                  "type" : "star"
                },
                "type" : "paren"
              },
              "type" : "index"
            },
            "type" : "unary"
          }, {
            "go-type" : 35,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 36,
              "index" : {
                "go-type" : 66,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 79
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 48,
                "kind" : "expression",
                "target" : {
                  "go-type" : 48,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 105,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "out",
                      "variable" : 77
                    }
                  },
                  "type" : "star"
                },
                "type" : "paren"
              },
              "type" : "index"
            },
            "type" : "unary"
          }, {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps"
            }
          },
          "go-type" : 68,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1009,
      "code" : "err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&(*in)[i], &(*out)[i], s)",
      "entry" : false,
      "use-vars" : [ 77, 79, 7, 78 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 80 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1010,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 68,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 80
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1010,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 80 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 62 ],
      "in-vars" : [ 7, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1014,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "OneOf",
            "variable" : 76
          },
          "go-type" : 48,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 89,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1014,
      "code" : "out.OneOf = nil",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63, 69 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1016,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "AnyOf",
              "variable" : 81
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1026,
      "code" : "if in.AnyOf != nil {\n\tin, out := &in.AnyOf, &out.AnyOf\n\t*out = make([]JSONSchemaProps, len(*in))\n\tfor i := range *in {\n\t\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&(*in)[i], &(*out)[i], s); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n} else {\n\tout.AnyOf = nil\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 83, 84 ],
      "decl-vars" : [ 83, 84 ],
      "line-start" : 1017,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "in"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        } ],
        "right" : [ {
          "go-type" : 104,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "AnyOf",
              "variable" : 81
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }, {
          "go-type" : 105,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "AnyOf",
              "variable" : 82
            },
            "go-type" : 48,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1017,
      "code" : "in, out := &in.AnyOf, &out.AnyOf",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65 ],
      "in-vars" : [ 6, 5, 7, 83, 84 ],
      "exit" : false,
      "out-vars" : [ 83, 84, 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1018,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 48,
          "kind" : "expression",
          "target" : {
            "go-type" : 105,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 83
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 36,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "JSONSchemaProps"
              }
            },
            "go-type" : 48,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 48,
          "kind" : "expression",
          "rest" : [ {
            "arguments" : [ {
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 104,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 84
                }
              },
              "type" : "star"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 106,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 66,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1018,
      "code" : "*out = make([]JSONSchemaProps, len(*in))",
      "entry" : false,
      "use-vars" : [ 84 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 67, 70 ],
      "in-vars" : [ 7, 83, 84, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 7, 83, 84, 85, 6, 5 ],
      "decl-vars" : [ 85 ],
      "line-start" : 1019,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 21,
          "kind" : "expression",
          "target" : {
            "go-type" : 104,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 84
            }
          },
          "type" : "star"
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 1023,
      "code" : "for i := range *in {\n\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&(*in)[i], &(*out)[i], s); err != nil {\n\t\treturn err\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 84 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65, 68 ],
      "in-vars" : [ 5, 86, 7, 83, 84, 6 ],
      "exit" : false,
      "out-vars" : [ 86, 7, 83, 84, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1020,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 86
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1022,
      "code" : "if err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&(*in)[i], &(*out)[i], s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 86 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 66 ],
      "in-vars" : [ 6, 5, 7, 83, 84, 85 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 86, 7, 83, 84 ],
      "decl-vars" : [ 86 ],
      "line-start" : 1020,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 3,
              "index" : {
                "go-type" : 66,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 85
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 21,
                "kind" : "expression",
                "target" : {
                  "go-type" : 21,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 104,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 84
                    }
                  },
                  "type" : "star"
                },
                "type" : "paren"
              },
              "type" : "index"
            },
            "type" : "unary"
          }, {
            "go-type" : 35,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 36,
              "index" : {
                "go-type" : 66,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 85
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 48,
                "kind" : "expression",
                "target" : {
                  "go-type" : 48,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 105,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "out",
                      "variable" : 83
                    }
                  },
                  "type" : "star"
                },
                "type" : "paren"
              },
              "type" : "index"
            },
            "type" : "unary"
          }, {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps"
            }
          },
          "go-type" : 68,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1020,
      "code" : "err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&(*in)[i], &(*out)[i], s)",
      "entry" : false,
      "use-vars" : [ 83, 7, 84, 85 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 86 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1021,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 68,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 86
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1021,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 86 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 70 ],
      "in-vars" : [ 5, 7, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1025,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "AnyOf",
            "variable" : 82
          },
          "go-type" : 48,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 89,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1025,
      "code" : "out.AnyOf = nil",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 71, 76 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1027,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Not",
              "variable" : 87
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1035,
      "code" : "if in.Not != nil {\n\tin, out := &in.Not, &out.Not\n\t*out = new(JSONSchemaProps)\n\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(*in, *out, s); err != nil {\n\t\treturn err\n\t}\n} else {\n\tout.Not = nil\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 72 ],
      "in-vars" : [ 7, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 7, 90, 89, 6, 5 ],
      "decl-vars" : [ 89, 90 ],
      "line-start" : 1028,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "in"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        } ],
        "right" : [ {
          "go-type" : 108,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Not",
              "variable" : 87
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }, {
          "go-type" : 109,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Not",
              "variable" : 88
            },
            "go-type" : 35,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1028,
      "code" : "in, out := &in.Not, &out.Not",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 74 ],
      "in-vars" : [ 6, 5, 7, 90, 89 ],
      "exit" : false,
      "out-vars" : [ 89, 6, 5, 7, 90 ],
      "decl-vars" : [ ],
      "line-start" : 1029,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 35,
          "kind" : "expression",
          "target" : {
            "go-type" : 109,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 89
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 36,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 36,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "JSONSchemaProps"
            }
          },
          "go-type" : 35,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1029,
      "code" : "*out = new(JSONSchemaProps)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 75, 77 ],
      "in-vars" : [ 6, 5, 7, 91 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 91, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1030,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 91
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1032,
      "code" : "if err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(*in, *out, s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 91 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 73 ],
      "in-vars" : [ 7, 90, 89, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 91 ],
      "decl-vars" : [ 91 ],
      "line-start" : 1030,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 108,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 90
              }
            },
            "type" : "star"
          }, {
            "go-type" : 35,
            "kind" : "expression",
            "target" : {
              "go-type" : 109,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 89
              }
            },
            "type" : "star"
          }, {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps"
            }
          },
          "go-type" : 68,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1030,
      "code" : "err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(*in, *out, s)",
      "entry" : false,
      "use-vars" : [ 7, 90, 89 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 91 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1031,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 68,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 91
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1031,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 91 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 77 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1034,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Not",
            "variable" : 88
          },
          "go-type" : 35,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 89,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1034,
      "code" : "out.Not = nil",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 78, 86 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1036,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Properties",
              "variable" : 92
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1048,
      "code" : "if in.Properties != nil {\n\tin, out := &in.Properties, &out.Properties\n\t*out = make(map[string]JSONSchemaProps, len(*in))\n\tfor key, val := range *in {\n\t\tnewVal := new(JSONSchemaProps)\n\t\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&val, newVal, s); err != nil {\n\t\t\treturn err\n\t\t}\n\t\t(*out)[key] = *newVal\n\t}\n} else {\n\tout.Properties = nil\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 79 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 95, 7, 94 ],
      "decl-vars" : [ 94, 95 ],
      "line-start" : 1037,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "in"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        } ],
        "right" : [ {
          "go-type" : 110,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Properties",
              "variable" : 92
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }, {
          "go-type" : 111,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Properties",
              "variable" : 93
            },
            "go-type" : 49,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1037,
      "code" : "in, out := &in.Properties, &out.Properties",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 80 ],
      "in-vars" : [ 6, 5, 95, 7, 94 ],
      "exit" : false,
      "out-vars" : [ 5, 95, 7, 94, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1038,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 49,
          "kind" : "expression",
          "target" : {
            "go-type" : 111,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 94
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 49,
            "key" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 36,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "JSONSchemaProps"
              }
            }
          },
          "go-type" : 49,
          "kind" : "expression",
          "rest" : [ {
            "arguments" : [ {
              "go-type" : 22,
              "kind" : "expression",
              "target" : {
                "go-type" : 110,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 95
                }
              },
              "type" : "star"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 112,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 66,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1038,
      "code" : "*out = make(map[string]JSONSchemaProps, len(*in))",
      "entry" : false,
      "use-vars" : [ 95 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 81, 87 ],
      "in-vars" : [ 95, 7, 94, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 99, 96, 95, 7, 94, 6, 5 ],
      "decl-vars" : [ 99, 96 ],
      "line-start" : 1039,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "key"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 22,
          "kind" : "expression",
          "target" : {
            "go-type" : 110,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 95
            }
          },
          "type" : "star"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "val"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1045,
      "code" : "for key, val := range *in {\n\tnewVal := new(JSONSchemaProps)\n\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&val, newVal, s); err != nil {\n\t\treturn err\n\t}\n\t(*out)[key] = *newVal\n}",
      "entry" : false,
      "use-vars" : [ 95 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 83 ],
      "in-vars" : [ 95, 7, 94, 6, 5, 99, 96 ],
      "exit" : false,
      "out-vars" : [ 97, 94, 6, 5, 99, 96, 95, 7 ],
      "decl-vars" : [ 97 ],
      "line-start" : 1040,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "newVal"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 36,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 36,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "JSONSchemaProps"
            }
          },
          "go-type" : 35,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1040,
      "code" : "newVal := new(JSONSchemaProps)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 84, 85 ],
      "in-vars" : [ 5, 99, 95, 7, 98, 97, 94, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 99, 95, 7, 98, 97, 94 ],
      "decl-vars" : [ ],
      "line-start" : 1041,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 98
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1043,
      "code" : "if err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&val, newVal, s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 98 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 82 ],
      "in-vars" : [ 6, 5, 99, 96, 95, 7, 97, 94 ],
      "exit" : false,
      "out-vars" : [ 5, 99, 95, 7, 98, 97, 94, 6 ],
      "decl-vars" : [ 98 ],
      "line-start" : 1041,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "val",
                "variable" : 96
              }
            },
            "type" : "unary"
          }, {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "newVal",
              "variable" : 97
            }
          }, {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps"
            }
          },
          "go-type" : 68,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1041,
      "code" : "err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&val, newVal, s)",
      "entry" : false,
      "use-vars" : [ 96, 97, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 98 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1042,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 68,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 98
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1042,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 98 ]
    }, {
      "update-vars" : [ 94 ],
      "successors" : [ 80 ],
      "in-vars" : [ 7, 97, 94, 6, 5, 99, 95 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 95, 7, 94 ],
      "decl-vars" : [ ],
      "line-start" : 1044,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 36,
          "index" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 99
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 49,
            "kind" : "expression",
            "target" : {
              "go-type" : 49,
              "kind" : "expression",
              "target" : {
                "go-type" : 111,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "out",
                  "variable" : 94
                }
              },
              "type" : "star"
            },
            "type" : "paren"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 36,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "newVal",
              "variable" : 97
            }
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1044,
      "code" : "(*out)[key] = *newVal",
      "entry" : false,
      "use-vars" : [ 97, 94, 99 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 87 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1047,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Properties",
            "variable" : 93
          },
          "go-type" : 49,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 89,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1047,
      "code" : "out.Properties = nil",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 88, 93 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1049,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "AdditionalProperties",
              "variable" : 100
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1057,
      "code" : "if in.AdditionalProperties != nil {\n\tin, out := &in.AdditionalProperties, &out.AdditionalProperties\n\t*out = new(JSONSchemaPropsOrBool)\n\tif err := Convert_apiextensions_JSONSchemaPropsOrBool_To_v1beta1_JSONSchemaPropsOrBool(*in, *out, s); err != nil {\n\t\treturn err\n\t}\n} else {\n\tout.AdditionalProperties = nil\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 89 ],
      "in-vars" : [ 7, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 103, 102, 6, 5, 7 ],
      "decl-vars" : [ 102, 103 ],
      "line-start" : 1050,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "in"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        } ],
        "right" : [ {
          "go-type" : 114,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "AdditionalProperties",
              "variable" : 100
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }, {
          "go-type" : 115,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "AdditionalProperties",
              "variable" : 101
            },
            "go-type" : 50,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1050,
      "code" : "in, out := &in.AdditionalProperties, &out.AdditionalProperties",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 91 ],
      "in-vars" : [ 6, 5, 7, 103, 102 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 103, 102 ],
      "decl-vars" : [ ],
      "line-start" : 1051,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 50,
          "kind" : "expression",
          "target" : {
            "go-type" : 115,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 102
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 51,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 51,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "JSONSchemaPropsOrBool"
            }
          },
          "go-type" : 50,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1051,
      "code" : "*out = new(JSONSchemaPropsOrBool)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 92, 94 ],
      "in-vars" : [ 6, 5, 7, 104 ],
      "exit" : false,
      "out-vars" : [ 104, 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1052,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 104
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1054,
      "code" : "if err := Convert_apiextensions_JSONSchemaPropsOrBool_To_v1beta1_JSONSchemaPropsOrBool(*in, *out, s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 104 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 90 ],
      "in-vars" : [ 103, 102, 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 104 ],
      "decl-vars" : [ 104 ],
      "line-start" : 1052,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "go-type" : 114,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 103
              }
            },
            "type" : "star"
          }, {
            "go-type" : 50,
            "kind" : "expression",
            "target" : {
              "go-type" : 115,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 102
              }
            },
            "type" : "star"
          }, {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 116,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_apiextensions_JSONSchemaPropsOrBool_To_v1beta1_JSONSchemaPropsOrBool"
            }
          },
          "go-type" : 68,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1052,
      "code" : "err := Convert_apiextensions_JSONSchemaPropsOrBool_To_v1beta1_JSONSchemaPropsOrBool(*in, *out, s)",
      "entry" : false,
      "use-vars" : [ 103, 102, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 104 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1053,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 68,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 104
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1053,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 104 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 94 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1056,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "AdditionalProperties",
            "variable" : 101
          },
          "go-type" : 50,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 89,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1056,
      "code" : "out.AdditionalProperties = nil",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 95, 103 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1058,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "PatternProperties",
              "variable" : 105
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1070,
      "code" : "if in.PatternProperties != nil {\n\tin, out := &in.PatternProperties, &out.PatternProperties\n\t*out = make(map[string]JSONSchemaProps, len(*in))\n\tfor key, val := range *in {\n\t\tnewVal := new(JSONSchemaProps)\n\t\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&val, newVal, s); err != nil {\n\t\t\treturn err\n\t\t}\n\t\t(*out)[key] = *newVal\n\t}\n} else {\n\tout.PatternProperties = nil\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 96 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 108, 107, 6 ],
      "decl-vars" : [ 107, 108 ],
      "line-start" : 1059,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "in"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        } ],
        "right" : [ {
          "go-type" : 110,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "PatternProperties",
              "variable" : 105
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }, {
          "go-type" : 111,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "PatternProperties",
              "variable" : 106
            },
            "go-type" : 49,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1059,
      "code" : "in, out := &in.PatternProperties, &out.PatternProperties",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 97 ],
      "in-vars" : [ 7, 108, 107, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 108, 107 ],
      "decl-vars" : [ ],
      "line-start" : 1060,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 49,
          "kind" : "expression",
          "target" : {
            "go-type" : 111,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 107
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 49,
            "key" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 36,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "JSONSchemaProps"
              }
            }
          },
          "go-type" : 49,
          "kind" : "expression",
          "rest" : [ {
            "arguments" : [ {
              "go-type" : 22,
              "kind" : "expression",
              "target" : {
                "go-type" : 110,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 108
                }
              },
              "type" : "star"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 112,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 66,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1060,
      "code" : "*out = make(map[string]JSONSchemaProps, len(*in))",
      "entry" : false,
      "use-vars" : [ 108 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 98, 104 ],
      "in-vars" : [ 6, 5, 7, 108, 107 ],
      "exit" : false,
      "out-vars" : [ 112, 107, 6, 5, 7, 108, 109 ],
      "decl-vars" : [ 109, 112 ],
      "line-start" : 1061,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "key"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 22,
          "kind" : "expression",
          "target" : {
            "go-type" : 110,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 108
            }
          },
          "type" : "star"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "val"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1067,
      "code" : "for key, val := range *in {\n\tnewVal := new(JSONSchemaProps)\n\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&val, newVal, s); err != nil {\n\t\treturn err\n\t}\n\t(*out)[key] = *newVal\n}",
      "entry" : false,
      "use-vars" : [ 108 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 100 ],
      "in-vars" : [ 109, 112, 107, 6, 5, 7, 108 ],
      "exit" : false,
      "out-vars" : [ 108, 109, 112, 107, 6, 5, 7, 110 ],
      "decl-vars" : [ 110 ],
      "line-start" : 1062,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "newVal"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 36,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 36,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "JSONSchemaProps"
            }
          },
          "go-type" : 35,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1062,
      "code" : "newVal := new(JSONSchemaProps)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 101, 102 ],
      "in-vars" : [ 7, 110, 111, 108, 112, 107, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 107, 6, 5, 7, 110, 111, 108, 112 ],
      "decl-vars" : [ ],
      "line-start" : 1063,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 111
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1065,
      "code" : "if err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&val, newVal, s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 111 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 99 ],
      "in-vars" : [ 5, 7, 110, 108, 109, 112, 107, 6 ],
      "exit" : false,
      "out-vars" : [ 107, 6, 5, 7, 110, 111, 108, 112 ],
      "decl-vars" : [ 111 ],
      "line-start" : 1063,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "val",
                "variable" : 109
              }
            },
            "type" : "unary"
          }, {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "newVal",
              "variable" : 110
            }
          }, {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps"
            }
          },
          "go-type" : 68,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1063,
      "code" : "err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&val, newVal, s)",
      "entry" : false,
      "use-vars" : [ 109, 110, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 111 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1064,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 68,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 111
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1064,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 111 ]
    }, {
      "update-vars" : [ 107 ],
      "successors" : [ 97 ],
      "in-vars" : [ 7, 110, 108, 112, 107, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 108, 107 ],
      "decl-vars" : [ ],
      "line-start" : 1066,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 36,
          "index" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 112
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 49,
            "kind" : "expression",
            "target" : {
              "go-type" : 49,
              "kind" : "expression",
              "target" : {
                "go-type" : 111,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "out",
                  "variable" : 107
                }
              },
              "type" : "star"
            },
            "type" : "paren"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 36,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "newVal",
              "variable" : 110
            }
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1066,
      "code" : "(*out)[key] = *newVal",
      "entry" : false,
      "use-vars" : [ 107, 112, 110 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 104 ],
      "in-vars" : [ 5, 7, 6 ],
      "exit" : false,
      "out-vars" : [ 7, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1069,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "PatternProperties",
            "variable" : 106
          },
          "go-type" : 49,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 89,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1069,
      "code" : "out.PatternProperties = nil",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 105, 113 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1071,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Dependencies",
              "variable" : 113
            },
            "go-type" : 26,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1083,
      "code" : "if in.Dependencies != nil {\n\tin, out := &in.Dependencies, &out.Dependencies\n\t*out = make(JSONSchemaDependencies, len(*in))\n\tfor key, val := range *in {\n\t\tnewVal := new(JSONSchemaPropsOrStringArray)\n\t\tif err := Convert_apiextensions_JSONSchemaPropsOrStringArray_To_v1beta1_JSONSchemaPropsOrStringArray(&val, newVal, s); err != nil {\n\t\t\treturn err\n\t\t}\n\t\t(*out)[key] = *newVal\n\t}\n} else {\n\tout.Dependencies = nil\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 106 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 115, 116 ],
      "decl-vars" : [ 115, 116 ],
      "line-start" : 1072,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "in"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        } ],
        "right" : [ {
          "go-type" : 118,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Dependencies",
              "variable" : 113
            },
            "go-type" : 26,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }, {
          "go-type" : 119,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Dependencies",
              "variable" : 114
            },
            "go-type" : 53,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1072,
      "code" : "in, out := &in.Dependencies, &out.Dependencies",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 107 ],
      "in-vars" : [ 115, 116, 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 115, 116, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1073,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 53,
          "kind" : "expression",
          "target" : {
            "go-type" : 119,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 115
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 53,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 53,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "JSONSchemaDependencies"
            }
          },
          "go-type" : 53,
          "kind" : "expression",
          "rest" : [ {
            "arguments" : [ {
              "go-type" : 26,
              "kind" : "expression",
              "target" : {
                "go-type" : 118,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 116
                }
              },
              "type" : "star"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 120,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 66,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1073,
      "code" : "*out = make(JSONSchemaDependencies, len(*in))",
      "entry" : false,
      "use-vars" : [ 116 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 108, 114 ],
      "in-vars" : [ 115, 116, 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 120, 117, 116, 6, 5, 7, 115 ],
      "decl-vars" : [ 117, 120 ],
      "line-start" : 1074,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "key"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 26,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 116
            }
          },
          "type" : "star"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "val"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1080,
      "code" : "for key, val := range *in {\n\tnewVal := new(JSONSchemaPropsOrStringArray)\n\tif err := Convert_apiextensions_JSONSchemaPropsOrStringArray_To_v1beta1_JSONSchemaPropsOrStringArray(&val, newVal, s); err != nil {\n\t\treturn err\n\t}\n\t(*out)[key] = *newVal\n}",
      "entry" : false,
      "use-vars" : [ 116 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 110 ],
      "in-vars" : [ 7, 115, 120, 117, 116, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 7, 115, 118, 120, 117, 116, 6, 5 ],
      "decl-vars" : [ 118 ],
      "line-start" : 1075,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "newVal"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 55,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 55,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "JSONSchemaPropsOrStringArray"
            }
          },
          "go-type" : 122,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1075,
      "code" : "newVal := new(JSONSchemaPropsOrStringArray)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 111, 112 ],
      "in-vars" : [ 118, 120, 119, 116, 6, 5, 7, 115 ],
      "exit" : false,
      "out-vars" : [ 120, 119, 116, 6, 5, 7, 115, 118 ],
      "decl-vars" : [ ],
      "line-start" : 1076,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 119
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1078,
      "code" : "if err := Convert_apiextensions_JSONSchemaPropsOrStringArray_To_v1beta1_JSONSchemaPropsOrStringArray(&val, newVal, s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 119 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 109 ],
      "in-vars" : [ 120, 117, 116, 6, 5, 7, 115, 118 ],
      "exit" : false,
      "out-vars" : [ 7, 115, 118, 120, 119, 116, 6, 5 ],
      "decl-vars" : [ 119 ],
      "line-start" : 1076,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 125,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 28,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "val",
                "variable" : 117
              }
            },
            "type" : "unary"
          }, {
            "go-type" : 122,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "newVal",
              "variable" : 118
            }
          }, {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 123,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_apiextensions_JSONSchemaPropsOrStringArray_To_v1beta1_JSONSchemaPropsOrStringArray"
            }
          },
          "go-type" : 68,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1076,
      "code" : "err := Convert_apiextensions_JSONSchemaPropsOrStringArray_To_v1beta1_JSONSchemaPropsOrStringArray(&val, newVal, s)",
      "entry" : false,
      "use-vars" : [ 117, 118, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 119 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1077,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 68,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 119
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1077,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 119 ]
    }, {
      "update-vars" : [ 115 ],
      "successors" : [ 107 ],
      "in-vars" : [ 116, 6, 5, 7, 115, 118, 120 ],
      "exit" : false,
      "out-vars" : [ 115, 116, 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1079,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 55,
          "index" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 120
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 53,
            "kind" : "expression",
            "target" : {
              "go-type" : 53,
              "kind" : "expression",
              "target" : {
                "go-type" : 119,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "out",
                  "variable" : 115
                }
              },
              "type" : "star"
            },
            "type" : "paren"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 55,
          "kind" : "expression",
          "target" : {
            "go-type" : 122,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "newVal",
              "variable" : 118
            }
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1079,
      "code" : "(*out)[key] = *newVal",
      "entry" : false,
      "use-vars" : [ 120, 118, 115 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 114 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1082,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Dependencies",
            "variable" : 114
          },
          "go-type" : 53,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 89,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1082,
      "code" : "out.Dependencies = nil",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 115, 120 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1084,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "AdditionalItems",
              "variable" : 121
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1092,
      "code" : "if in.AdditionalItems != nil {\n\tin, out := &in.AdditionalItems, &out.AdditionalItems\n\t*out = new(JSONSchemaPropsOrBool)\n\tif err := Convert_apiextensions_JSONSchemaPropsOrBool_To_v1beta1_JSONSchemaPropsOrBool(*in, *out, s); err != nil {\n\t\treturn err\n\t}\n} else {\n\tout.AdditionalItems = nil\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 116 ],
      "in-vars" : [ 7, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 124, 123 ],
      "decl-vars" : [ 124, 123 ],
      "line-start" : 1085,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "in"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        } ],
        "right" : [ {
          "go-type" : 114,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "AdditionalItems",
              "variable" : 121
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }, {
          "go-type" : 115,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "AdditionalItems",
              "variable" : 122
            },
            "go-type" : 50,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1085,
      "code" : "in, out := &in.AdditionalItems, &out.AdditionalItems",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 118 ],
      "in-vars" : [ 6, 5, 7, 124, 123 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 124, 123 ],
      "decl-vars" : [ ],
      "line-start" : 1086,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 50,
          "kind" : "expression",
          "target" : {
            "go-type" : 115,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 123
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 51,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 51,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "JSONSchemaPropsOrBool"
            }
          },
          "go-type" : 50,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1086,
      "code" : "*out = new(JSONSchemaPropsOrBool)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 119, 121 ],
      "in-vars" : [ 6, 5, 7, 125 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 125 ],
      "decl-vars" : [ ],
      "line-start" : 1087,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 125
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1089,
      "code" : "if err := Convert_apiextensions_JSONSchemaPropsOrBool_To_v1beta1_JSONSchemaPropsOrBool(*in, *out, s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 125 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 117 ],
      "in-vars" : [ 7, 124, 123, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 125, 6, 5, 7 ],
      "decl-vars" : [ 125 ],
      "line-start" : 1087,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "go-type" : 114,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 124
              }
            },
            "type" : "star"
          }, {
            "go-type" : 50,
            "kind" : "expression",
            "target" : {
              "go-type" : 115,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 123
              }
            },
            "type" : "star"
          }, {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 116,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_apiextensions_JSONSchemaPropsOrBool_To_v1beta1_JSONSchemaPropsOrBool"
            }
          },
          "go-type" : 68,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1087,
      "code" : "err := Convert_apiextensions_JSONSchemaPropsOrBool_To_v1beta1_JSONSchemaPropsOrBool(*in, *out, s)",
      "entry" : false,
      "use-vars" : [ 124, 123, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 125 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1088,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 68,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 125
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1088,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 125 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 121 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1091,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "AdditionalItems",
            "variable" : 122
          },
          "go-type" : 50,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 89,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1091,
      "code" : "out.AdditionalItems = nil",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 122, 130 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1093,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Definitions",
              "variable" : 126
            },
            "go-type" : 30,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1105,
      "code" : "if in.Definitions != nil {\n\tin, out := &in.Definitions, &out.Definitions\n\t*out = make(JSONSchemaDefinitions, len(*in))\n\tfor key, val := range *in {\n\t\tnewVal := new(JSONSchemaProps)\n\t\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&val, newVal, s); err != nil {\n\t\t\treturn err\n\t\t}\n\t\t(*out)[key] = *newVal\n\t}\n} else {\n\tout.Definitions = nil\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 123 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 129, 128, 6 ],
      "decl-vars" : [ 129, 128 ],
      "line-start" : 1094,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "in"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        } ],
        "right" : [ {
          "go-type" : 126,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Definitions",
              "variable" : 126
            },
            "go-type" : 30,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }, {
          "go-type" : 127,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Definitions",
              "variable" : 127
            },
            "go-type" : 57,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1094,
      "code" : "in, out := &in.Definitions, &out.Definitions",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 124 ],
      "in-vars" : [ 6, 5, 7, 129, 128 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 129, 128 ],
      "decl-vars" : [ ],
      "line-start" : 1095,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 57,
          "kind" : "expression",
          "target" : {
            "go-type" : 127,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 128
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 57,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 57,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "JSONSchemaDefinitions"
            }
          },
          "go-type" : 57,
          "kind" : "expression",
          "rest" : [ {
            "arguments" : [ {
              "go-type" : 30,
              "kind" : "expression",
              "target" : {
                "go-type" : 126,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 129
                }
              },
              "type" : "star"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 112,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 66,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1095,
      "code" : "*out = make(JSONSchemaDefinitions, len(*in))",
      "entry" : false,
      "use-vars" : [ 129 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 125, 131 ],
      "in-vars" : [ 129, 128, 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 130, 129, 128, 133 ],
      "decl-vars" : [ 130, 133 ],
      "line-start" : 1096,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "key"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 30,
          "kind" : "expression",
          "target" : {
            "go-type" : 126,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 129
            }
          },
          "type" : "star"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "val"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1102,
      "code" : "for key, val := range *in {\n\tnewVal := new(JSONSchemaProps)\n\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&val, newVal, s); err != nil {\n\t\treturn err\n\t}\n\t(*out)[key] = *newVal\n}",
      "entry" : false,
      "use-vars" : [ 129 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 127 ],
      "in-vars" : [ 130, 129, 128, 133, 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 131, 130, 129, 128, 133, 6, 5 ],
      "decl-vars" : [ 131 ],
      "line-start" : 1097,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "newVal"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 36,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 36,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "JSONSchemaProps"
            }
          },
          "go-type" : 35,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1097,
      "code" : "newVal := new(JSONSchemaProps)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 128, 129 ],
      "in-vars" : [ 132, 131, 129, 128, 133, 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 131, 129, 128, 133, 6, 5, 7, 132 ],
      "decl-vars" : [ ],
      "line-start" : 1098,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 132
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1100,
      "code" : "if err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&val, newVal, s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 132 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 126 ],
      "in-vars" : [ 131, 130, 129, 128, 133, 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 133, 6, 5, 7, 132, 131, 129, 128 ],
      "decl-vars" : [ 132 ],
      "line-start" : 1098,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "val",
                "variable" : 130
              }
            },
            "type" : "unary"
          }, {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "newVal",
              "variable" : 131
            }
          }, {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps"
            }
          },
          "go-type" : 68,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1098,
      "code" : "err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&val, newVal, s)",
      "entry" : false,
      "use-vars" : [ 131, 7, 130 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 132 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1099,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 68,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 132
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1099,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 132 ]
    }, {
      "update-vars" : [ 128 ],
      "successors" : [ 124 ],
      "in-vars" : [ 133, 6, 5, 7, 131, 129, 128 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7, 129, 128 ],
      "decl-vars" : [ ],
      "line-start" : 1101,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 36,
          "index" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 133
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 57,
            "kind" : "expression",
            "target" : {
              "go-type" : 57,
              "kind" : "expression",
              "target" : {
                "go-type" : 127,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "out",
                  "variable" : 128
                }
              },
              "type" : "star"
            },
            "type" : "paren"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 36,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "newVal",
              "variable" : 131
            }
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1101,
      "code" : "(*out)[key] = *newVal",
      "entry" : false,
      "use-vars" : [ 131, 133, 128 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 131 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1104,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Definitions",
            "variable" : 127
          },
          "go-type" : 57,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 89,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1104,
      "code" : "out.Definitions = nil",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 132 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1106,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ExternalDocs",
            "variable" : 134
          },
          "go-type" : 58,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 59,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 59,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "ExternalDocumentation"
              }
            },
            "go-type" : 58,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 58,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 87,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 87,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 87,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ExternalDocs",
                "variable" : 135
              },
              "go-type" : 31,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1106,
      "code" : "out.ExternalDocs = (*ExternalDocumentation)(unsafe.Pointer(in.ExternalDocs))",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 133, 138 ],
      "in-vars" : [ 5, 7, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1107,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Example",
              "variable" : 136
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1115,
      "code" : "if in.Example != nil {\n\tin, out := &in.Example, &out.Example\n\t*out = new(JSON)\n\tif err := Convert_apiextensions_JSON_To_v1beta1_JSON(*in, *out, s); err != nil {\n\t\treturn err\n\t}\n} else {\n\tout.Example = nil\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 134 ],
      "in-vars" : [ 6, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 138, 7, 6, 5, 139 ],
      "decl-vars" : [ 138, 139 ],
      "line-start" : 1108,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "in"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        } ],
        "right" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Example",
              "variable" : 136
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        }, {
          "go-type" : 91,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Example",
              "variable" : 137
            },
            "go-type" : 39,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1108,
      "code" : "in, out := &in.Example, &out.Example",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 136 ],
      "in-vars" : [ 6, 5, 139, 138, 7 ],
      "exit" : false,
      "out-vars" : [ 138, 7, 6, 5, 139 ],
      "decl-vars" : [ ],
      "line-start" : 1109,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 39,
          "kind" : "expression",
          "target" : {
            "go-type" : 91,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 138
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 40,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 40,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "JSON"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1109,
      "code" : "*out = new(JSON)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 137, 139 ],
      "in-vars" : [ 140, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 140 ],
      "decl-vars" : [ ],
      "line-start" : 1110,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 140
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1112,
      "code" : "if err := Convert_apiextensions_JSON_To_v1beta1_JSON(*in, *out, s); err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 140 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 135 ],
      "in-vars" : [ 5, 139, 138, 7, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 140 ],
      "decl-vars" : [ 140 ],
      "line-start" : 1110,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "go-type" : 90,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 139
              }
            },
            "type" : "star"
          }, {
            "go-type" : 39,
            "kind" : "expression",
            "target" : {
              "go-type" : 91,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 138
              }
            },
            "type" : "star"
          }, {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 92,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Convert_apiextensions_JSON_To_v1beta1_JSON"
            }
          },
          "go-type" : 68,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1110,
      "code" : "err := Convert_apiextensions_JSON_To_v1beta1_JSON(*in, *out, s)",
      "entry" : false,
      "use-vars" : [ 139, 138, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 140 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1111,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 68,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 140
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1111,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 140 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 139 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1114,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Example",
            "variable" : 137
          },
          "go-type" : 39,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 89,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1114,
      "code" : "out.Example = nil",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 140 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1116,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "XPreserveUnknownFields",
            "variable" : 141
          },
          "go-type" : 34,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 8,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 8,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "go-type" : 34,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 34,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 87,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 87,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 87,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "XPreserveUnknownFields",
                "variable" : 142
              },
              "go-type" : 34,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1116,
      "code" : "out.XPreserveUnknownFields = (*bool)(unsafe.Pointer(in.XPreserveUnknownFields))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 141 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1117,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "XEmbeddedResource",
            "variable" : 143
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "XEmbeddedResource",
            "variable" : 144
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1117,
      "code" : "out.XEmbeddedResource = in.XEmbeddedResource",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 142 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1118,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "XIntOrString",
            "variable" : 145
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "XIntOrString",
            "variable" : 146
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1118,
      "code" : "out.XIntOrString = in.XIntOrString",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 143 ],
      "in-vars" : [ 5, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1119,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "XListMapKeys",
            "variable" : 147
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 5,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 5,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "string"
                  }
                },
                "go-type" : 17,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 99,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 99,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 87,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 4,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 87,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 87,
              "kind" : "expression",
              "target" : {
                "go-type" : 99,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "XListMapKeys",
                    "variable" : 148
                  },
                  "go-type" : 17,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1119,
      "code" : "out.XListMapKeys = *(*[]string)(unsafe.Pointer(&in.XListMapKeys))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 144 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1120,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "XListType",
            "variable" : 149
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "go-type" : 7,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 87,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 87,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 87,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "XListType",
                "variable" : 150
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1120,
      "code" : "out.XListType = (*string)(unsafe.Pointer(in.XListType))",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 145 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1121,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "XMapType",
            "variable" : 151
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "go-type" : 7,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 87,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 87,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 87,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "XMapType",
                "variable" : 152
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1121,
      "code" : "out.XMapType = (*string)(unsafe.Pointer(in.XMapType))",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1122,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 89,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1122,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func autoConvert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(in *apiextensions.JSONSchemaProps, out *JSONSchemaProps, s conversion.Scope) error {\n\tout.ID = in.ID\n\tout.Schema = JSONSchemaURL(in.Schema)\n\tout.Ref = (*string)(unsafe.Pointer(in.Ref))\n\tout.Description = in.Description\n\tout.Type = in.Type\n\tout.Nullable = in.Nullable\n\tout.Format = in.Format\n\tout.Title = in.Title\n\tif in.Default != nil {\n\t\tin, out := &in.Default, &out.Default\n\t\t*out = new(JSON)\n\t\tif err := Convert_apiextensions_JSON_To_v1beta1_JSON(*in, *out, s); err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tout.Default = nil\n\t}\n\tout.Maximum = (*float64)(unsafe.Pointer(in.Maximum))\n\tout.ExclusiveMaximum = in.ExclusiveMaximum\n\tout.Minimum = (*float64)(unsafe.Pointer(in.Minimum))\n\tout.ExclusiveMinimum = in.ExclusiveMinimum\n\tout.MaxLength = (*int64)(unsafe.Pointer(in.MaxLength))\n\tout.MinLength = (*int64)(unsafe.Pointer(in.MinLength))\n\tout.Pattern = in.Pattern\n\tout.MaxItems = (*int64)(unsafe.Pointer(in.MaxItems))\n\tout.MinItems = (*int64)(unsafe.Pointer(in.MinItems))\n\tout.UniqueItems = in.UniqueItems\n\tout.MultipleOf = (*float64)(unsafe.Pointer(in.MultipleOf))\n\tif in.Enum != nil {\n\t\tin, out := &in.Enum, &out.Enum\n\t\t*out = make([]JSON, len(*in))\n\t\tfor i := range *in {\n\t\t\tif err := Convert_apiextensions_JSON_To_v1beta1_JSON(&(*in)[i], &(*out)[i], s); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t} else {\n\t\tout.Enum = nil\n\t}\n\tout.MaxProperties = (*int64)(unsafe.Pointer(in.MaxProperties))\n\tout.MinProperties = (*int64)(unsafe.Pointer(in.MinProperties))\n\tout.Required = *(*[]string)(unsafe.Pointer(&in.Required))\n\tif in.Items != nil {\n\t\tin, out := &in.Items, &out.Items\n\t\t*out = new(JSONSchemaPropsOrArray)\n\t\tif err := Convert_apiextensions_JSONSchemaPropsOrArray_To_v1beta1_JSONSchemaPropsOrArray(*in, *out, s); err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tout.Items = nil\n\t}\n\tif in.AllOf != nil {\n\t\tin, out := &in.AllOf, &out.AllOf\n\t\t*out = make([]JSONSchemaProps, len(*in))\n\t\tfor i := range *in {\n\t\t\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&(*in)[i], &(*out)[i], s); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t} else {\n\t\tout.AllOf = nil\n\t}\n\tif in.OneOf != nil {\n\t\tin, out := &in.OneOf, &out.OneOf\n\t\t*out = make([]JSONSchemaProps, len(*in))\n\t\tfor i := range *in {\n\t\t\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&(*in)[i], &(*out)[i], s); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t} else {\n\t\tout.OneOf = nil\n\t}\n\tif in.AnyOf != nil {\n\t\tin, out := &in.AnyOf, &out.AnyOf\n\t\t*out = make([]JSONSchemaProps, len(*in))\n\t\tfor i := range *in {\n\t\t\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&(*in)[i], &(*out)[i], s); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t} else {\n\t\tout.AnyOf = nil\n\t}\n\tif in.Not != nil {\n\t\tin, out := &in.Not, &out.Not\n\t\t*out = new(JSONSchemaProps)\n\t\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(*in, *out, s); err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tout.Not = nil\n\t}\n\tif in.Properties != nil {\n\t\tin, out := &in.Properties, &out.Properties\n\t\t*out = make(map[string]JSONSchemaProps, len(*in))\n\t\tfor key, val := range *in {\n\t\t\tnewVal := new(JSONSchemaProps)\n\t\t\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&val, newVal, s); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\t(*out)[key] = *newVal\n\t\t}\n\t} else {\n\t\tout.Properties = nil\n\t}\n\tif in.AdditionalProperties != nil {\n\t\tin, out := &in.AdditionalProperties, &out.AdditionalProperties\n\t\t*out = new(JSONSchemaPropsOrBool)\n\t\tif err := Convert_apiextensions_JSONSchemaPropsOrBool_To_v1beta1_JSONSchemaPropsOrBool(*in, *out, s); err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tout.AdditionalProperties = nil\n\t}\n\tif in.PatternProperties != nil {\n\t\tin, out := &in.PatternProperties, &out.PatternProperties\n\t\t*out = make(map[string]JSONSchemaProps, len(*in))\n\t\tfor key, val := range *in {\n\t\t\tnewVal := new(JSONSchemaProps)\n\t\t\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&val, newVal, s); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\t(*out)[key] = *newVal\n\t\t}\n\t} else {\n\t\tout.PatternProperties = nil\n\t}\n\tif in.Dependencies != nil {\n\t\tin, out := &in.Dependencies, &out.Dependencies\n\t\t*out = make(JSONSchemaDependencies, len(*in))\n\t\tfor key, val := range *in {\n\t\t\tnewVal := new(JSONSchemaPropsOrStringArray)\n\t\t\tif err := Convert_apiextensions_JSONSchemaPropsOrStringArray_To_v1beta1_JSONSchemaPropsOrStringArray(&val, newVal, s); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\t(*out)[key] = *newVal\n\t\t}\n\t} else {\n\t\tout.Dependencies = nil\n\t}\n\tif in.AdditionalItems != nil {\n\t\tin, out := &in.AdditionalItems, &out.AdditionalItems\n\t\t*out = new(JSONSchemaPropsOrBool)\n\t\tif err := Convert_apiextensions_JSONSchemaPropsOrBool_To_v1beta1_JSONSchemaPropsOrBool(*in, *out, s); err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tout.AdditionalItems = nil\n\t}\n\tif in.Definitions != nil {\n\t\tin, out := &in.Definitions, &out.Definitions\n\t\t*out = make(JSONSchemaDefinitions, len(*in))\n\t\tfor key, val := range *in {\n\t\t\tnewVal := new(JSONSchemaProps)\n\t\t\tif err := Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps(&val, newVal, s); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\t(*out)[key] = *newVal\n\t\t}\n\t} else {\n\t\tout.Definitions = nil\n\t}\n\tout.ExternalDocs = (*ExternalDocumentation)(unsafe.Pointer(in.ExternalDocs))\n\tif in.Example != nil {\n\t\tin, out := &in.Example, &out.Example\n\t\t*out = new(JSON)\n\t\tif err := Convert_apiextensions_JSON_To_v1beta1_JSON(*in, *out, s); err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tout.Example = nil\n\t}\n\tout.XPreserveUnknownFields = (*bool)(unsafe.Pointer(in.XPreserveUnknownFields))\n\tout.XEmbeddedResource = in.XEmbeddedResource\n\tout.XIntOrString = in.XIntOrString\n\tout.XListMapKeys = *(*[]string)(unsafe.Pointer(&in.XListMapKeys))\n\tout.XListType = (*string)(unsafe.Pointer(in.XListType))\n\tout.XMapType = (*string)(unsafe.Pointer(in.XMapType))\n\treturn nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "autoConvert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Convert_apiextensions_JSON_To_v1beta1_JSON",
      "package" : 0,
      "type" : 92,
      "exported" : true
    }, {
      "name" : "Convert_apiextensions_JSONSchemaPropsOrArray_To_v1beta1_JSONSchemaPropsOrArray",
      "package" : 0,
      "type" : 102,
      "exported" : true
    }, {
      "name" : "Convert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "Convert_apiextensions_JSONSchemaPropsOrBool_To_v1beta1_JSONSchemaPropsOrBool",
      "package" : 0,
      "type" : 116,
      "exported" : true
    }, {
      "name" : "Convert_apiextensions_JSONSchemaPropsOrStringArray_To_v1beta1_JSONSchemaPropsOrStringArray",
      "package" : 0,
      "type" : 123,
      "exported" : true
    } ],
    "line-end" : 1123,
    "line-start" : 942,
    "names" : [ "autoConvert_apiextensions_JSONSchemaProps_To_v1beta1_JSONSchemaProps" ],
    "package" : 0,
    "packages" : [ {
      "name" : "v1beta1",
      "path" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
    }, {
      "name" : "apiextensions",
      "path" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions"
    }, {
      "name" : "conversion",
      "path" : "k8s.io/apimachinery/pkg/conversion"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 5, 6, 7 ],
    "receivers" : [ ],
    "results" : [ 8 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(in *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps, out *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps, s k8s.io/apimachinery/pkg/conversion.Scope) error",
      "params" : 1,
      "recv" : -1,
      "results" : 67,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 2
      }, {
        "name" : "out",
        "type" : 35
      }, {
        "name" : "s",
        "type" : 61
      } ],
      "name" : "(in *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps, out *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps, s k8s.io/apimachinery/pkg/conversion.Scope)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "JSONSchemaProps",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps",
      "package" : 1,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "ID",
        "type" : 5
      }, {
        "name" : "Schema",
        "type" : 6
      }, {
        "name" : "Ref",
        "type" : 7
      }, {
        "name" : "Description",
        "type" : 5
      }, {
        "name" : "Type",
        "type" : 5
      }, {
        "name" : "Nullable",
        "type" : 8
      }, {
        "name" : "Format",
        "type" : 5
      }, {
        "name" : "Title",
        "type" : 5
      }, {
        "name" : "Default",
        "type" : 9
      }, {
        "name" : "Maximum",
        "type" : 12
      }, {
        "name" : "ExclusiveMaximum",
        "type" : 8
      }, {
        "name" : "Minimum",
        "type" : 12
      }, {
        "name" : "ExclusiveMinimum",
        "type" : 8
      }, {
        "name" : "MaxLength",
        "type" : 14
      }, {
        "name" : "MinLength",
        "type" : 14
      }, {
        "name" : "Pattern",
        "type" : 5
      }, {
        "name" : "MaxItems",
        "type" : 14
      }, {
        "name" : "MinItems",
        "type" : 14
      }, {
        "name" : "UniqueItems",
        "type" : 8
      }, {
        "name" : "MultipleOf",
        "type" : 12
      }, {
        "name" : "Enum",
        "type" : 16
      }, {
        "name" : "MaxProperties",
        "type" : 14
      }, {
        "name" : "MinProperties",
        "type" : 14
      }, {
        "name" : "Required",
        "type" : 17
      }, {
        "name" : "Items",
        "type" : 18
      }, {
        "name" : "AllOf",
        "type" : 21
      }, {
        "name" : "OneOf",
        "type" : 21
      }, {
        "name" : "AnyOf",
        "type" : 21
      }, {
        "name" : "Not",
        "type" : 2
      }, {
        "name" : "Properties",
        "type" : 22
      }, {
        "name" : "AdditionalProperties",
        "type" : 23
      }, {
        "name" : "PatternProperties",
        "type" : 22
      }, {
        "name" : "Dependencies",
        "type" : 26
      }, {
        "name" : "AdditionalItems",
        "type" : 23
      }, {
        "name" : "Definitions",
        "type" : 30
      }, {
        "name" : "ExternalDocs",
        "type" : 31
      }, {
        "name" : "Example",
        "type" : 9
      }, {
        "name" : "XPreserveUnknownFields",
        "type" : 34
      }, {
        "name" : "XEmbeddedResource",
        "type" : 8
      }, {
        "name" : "XIntOrString",
        "type" : 8
      }, {
        "name" : "XListMapKeys",
        "type" : 17
      }, {
        "name" : "XListType",
        "type" : 7
      }, {
        "name" : "XMapType",
        "type" : 7
      } ],
      "name" : "struct{ID string; Schema k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaURL; Ref *string; Description string; Type string; Nullable bool; Format string; Title string; Default *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSON; Maximum *float64; ExclusiveMaximum bool; Minimum *float64; ExclusiveMinimum bool; MaxLength *int64; MinLength *int64; Pattern string; MaxItems *int64; MinItems *int64; UniqueItems bool; MultipleOf *float64; Enum []k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSON; MaxProperties *int64; MinProperties *int64; Required []string; Items *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrArray; AllOf []k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps; OneOf []k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps; AnyOf []k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps; Not *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps; Properties map[string]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps; AdditionalProperties *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrBool; PatternProperties map[string]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps; Dependencies k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaDependencies; AdditionalItems *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrBool; Definitions k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaDefinitions; ExternalDocs *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.ExternalDocumentation; Example *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSON; XPreserveUnknownFields *bool; XEmbeddedResource bool; XIntOrString bool; XListMapKeys []string; XListType *string; XMapType *string}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "local-name" : "JSONSchemaURL",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaURL",
      "package" : 1,
      "type" : "Named",
      "underlying" : 5
    }, {
      "elem" : 5,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 7
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "elem" : 10,
      "name" : "*k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSON",
      "type" : "Pointer",
      "underlying" : 9
    }, {
      "local-name" : "JSON",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSON",
      "package" : 1,
      "type" : "Named",
      "underlying" : 11
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "*float64",
      "type" : "Pointer",
      "underlying" : 12
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "*int64",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 10,
      "name" : "[]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSON",
      "type" : "Slice",
      "underlying" : 16
    }, {
      "elem" : 5,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 17
    }, {
      "elem" : 19,
      "name" : "*k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrArray",
      "type" : "Pointer",
      "underlying" : 18
    }, {
      "local-name" : "JSONSchemaPropsOrArray",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrArray",
      "package" : 1,
      "type" : "Named",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "Schema",
        "type" : 2
      }, {
        "name" : "JSONSchemas",
        "type" : 21
      } ],
      "name" : "struct{Schema *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps; JSONSchemas []k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps}",
      "type" : "Struct",
      "underlying" : 20
    }, {
      "elem" : 3,
      "name" : "[]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps",
      "type" : "Slice",
      "underlying" : 21
    }, {
      "elem" : 3,
      "key" : 5,
      "name" : "map[string]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps",
      "type" : "Map",
      "underlying" : 22
    }, {
      "elem" : 24,
      "name" : "*k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrBool",
      "type" : "Pointer",
      "underlying" : 23
    }, {
      "local-name" : "JSONSchemaPropsOrBool",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrBool",
      "package" : 1,
      "type" : "Named",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "Allows",
        "type" : 8
      }, {
        "name" : "Schema",
        "type" : 2
      } ],
      "name" : "struct{Allows bool; Schema *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps}",
      "type" : "Struct",
      "underlying" : 25
    }, {
      "local-name" : "JSONSchemaDependencies",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaDependencies",
      "package" : 1,
      "type" : "Named",
      "underlying" : 27
    }, {
      "elem" : 28,
      "key" : 5,
      "name" : "map[string]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrStringArray",
      "type" : "Map",
      "underlying" : 27
    }, {
      "local-name" : "JSONSchemaPropsOrStringArray",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrStringArray",
      "package" : 1,
      "type" : "Named",
      "underlying" : 29
    }, {
      "fields" : [ {
        "name" : "Schema",
        "type" : 2
      }, {
        "name" : "Property",
        "type" : 17
      } ],
      "name" : "struct{Schema *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps; Property []string}",
      "type" : "Struct",
      "underlying" : 29
    }, {
      "local-name" : "JSONSchemaDefinitions",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaDefinitions",
      "package" : 1,
      "type" : "Named",
      "underlying" : 22
    }, {
      "elem" : 32,
      "name" : "*k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.ExternalDocumentation",
      "type" : "Pointer",
      "underlying" : 31
    }, {
      "local-name" : "ExternalDocumentation",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.ExternalDocumentation",
      "package" : 1,
      "type" : "Named",
      "underlying" : 33
    }, {
      "fields" : [ {
        "name" : "Description",
        "type" : 5
      }, {
        "name" : "URL",
        "type" : 5
      } ],
      "name" : "struct{Description string; URL string}",
      "type" : "Struct",
      "underlying" : 33
    }, {
      "elem" : 8,
      "name" : "*bool",
      "type" : "Pointer",
      "underlying" : 34
    }, {
      "elem" : 36,
      "name" : "*k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps",
      "type" : "Pointer",
      "underlying" : 35
    }, {
      "local-name" : "JSONSchemaProps",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps",
      "package" : 0,
      "type" : "Named",
      "underlying" : 37
    }, {
      "fields" : [ {
        "name" : "ID",
        "type" : 5
      }, {
        "name" : "Schema",
        "type" : 38
      }, {
        "name" : "Ref",
        "type" : 7
      }, {
        "name" : "Description",
        "type" : 5
      }, {
        "name" : "Type",
        "type" : 5
      }, {
        "name" : "Format",
        "type" : 5
      }, {
        "name" : "Title",
        "type" : 5
      }, {
        "name" : "Default",
        "type" : 39
      }, {
        "name" : "Maximum",
        "type" : 12
      }, {
        "name" : "ExclusiveMaximum",
        "type" : 8
      }, {
        "name" : "Minimum",
        "type" : 12
      }, {
        "name" : "ExclusiveMinimum",
        "type" : 8
      }, {
        "name" : "MaxLength",
        "type" : 14
      }, {
        "name" : "MinLength",
        "type" : 14
      }, {
        "name" : "Pattern",
        "type" : 5
      }, {
        "name" : "MaxItems",
        "type" : 14
      }, {
        "name" : "MinItems",
        "type" : 14
      }, {
        "name" : "UniqueItems",
        "type" : 8
      }, {
        "name" : "MultipleOf",
        "type" : 12
      }, {
        "name" : "Enum",
        "type" : 44
      }, {
        "name" : "MaxProperties",
        "type" : 14
      }, {
        "name" : "MinProperties",
        "type" : 14
      }, {
        "name" : "Required",
        "type" : 17
      }, {
        "name" : "Items",
        "type" : 45
      }, {
        "name" : "AllOf",
        "type" : 48
      }, {
        "name" : "OneOf",
        "type" : 48
      }, {
        "name" : "AnyOf",
        "type" : 48
      }, {
        "name" : "Not",
        "type" : 35
      }, {
        "name" : "Properties",
        "type" : 49
      }, {
        "name" : "AdditionalProperties",
        "type" : 50
      }, {
        "name" : "PatternProperties",
        "type" : 49
      }, {
        "name" : "Dependencies",
        "type" : 53
      }, {
        "name" : "AdditionalItems",
        "type" : 50
      }, {
        "name" : "Definitions",
        "type" : 57
      }, {
        "name" : "ExternalDocs",
        "type" : 58
      }, {
        "name" : "Example",
        "type" : 39
      }, {
        "name" : "Nullable",
        "type" : 8
      }, {
        "name" : "XPreserveUnknownFields",
        "type" : 34
      }, {
        "name" : "XEmbeddedResource",
        "type" : 8
      }, {
        "name" : "XIntOrString",
        "type" : 8
      }, {
        "name" : "XListMapKeys",
        "type" : 17
      }, {
        "name" : "XListType",
        "type" : 7
      }, {
        "name" : "XMapType",
        "type" : 7
      } ],
      "name" : "struct{ID string \"json:\\\"id,omitempty\\\" protobuf:\\\"bytes,1,opt,name=id\\\"\"; Schema k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaURL \"json:\\\"$schema,omitempty\\\" protobuf:\\\"bytes,2,opt,name=schema\\\"\"; Ref *string \"json:\\\"$ref,omitempty\\\" protobuf:\\\"bytes,3,opt,name=ref\\\"\"; Description string \"json:\\\"description,omitempty\\\" protobuf:\\\"bytes,4,opt,name=description\\\"\"; Type string \"json:\\\"type,omitempty\\\" protobuf:\\\"bytes,5,opt,name=type\\\"\"; Format string \"json:\\\"format,omitempty\\\" protobuf:\\\"bytes,6,opt,name=format\\\"\"; Title string \"json:\\\"title,omitempty\\\" protobuf:\\\"bytes,7,opt,name=title\\\"\"; Default *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSON \"json:\\\"default,omitempty\\\" protobuf:\\\"bytes,8,opt,name=default\\\"\"; Maximum *float64 \"json:\\\"maximum,omitempty\\\" protobuf:\\\"bytes,9,opt,name=maximum\\\"\"; ExclusiveMaximum bool \"json:\\\"exclusiveMaximum,omitempty\\\" protobuf:\\\"bytes,10,opt,name=exclusiveMaximum\\\"\"; Minimum *float64 \"json:\\\"minimum,omitempty\\\" protobuf:\\\"bytes,11,opt,name=minimum\\\"\"; ExclusiveMinimum bool \"json:\\\"exclusiveMinimum,omitempty\\\" protobuf:\\\"bytes,12,opt,name=exclusiveMinimum\\\"\"; MaxLength *int64 \"json:\\\"maxLength,omitempty\\\" protobuf:\\\"bytes,13,opt,name=maxLength\\\"\"; MinLength *int64 \"json:\\\"minLength,omitempty\\\" protobuf:\\\"bytes,14,opt,name=minLength\\\"\"; Pattern string \"json:\\\"pattern,omitempty\\\" protobuf:\\\"bytes,15,opt,name=pattern\\\"\"; MaxItems *int64 \"json:\\\"maxItems,omitempty\\\" protobuf:\\\"bytes,16,opt,name=maxItems\\\"\"; MinItems *int64 \"json:\\\"minItems,omitempty\\\" protobuf:\\\"bytes,17,opt,name=minItems\\\"\"; UniqueItems bool \"json:\\\"uniqueItems,omitempty\\\" protobuf:\\\"bytes,18,opt,name=uniqueItems\\\"\"; MultipleOf *float64 \"json:\\\"multipleOf,omitempty\\\" protobuf:\\\"bytes,19,opt,name=multipleOf\\\"\"; Enum []k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSON \"json:\\\"enum,omitempty\\\" protobuf:\\\"bytes,20,rep,name=enum\\\"\"; MaxProperties *int64 \"json:\\\"maxProperties,omitempty\\\" protobuf:\\\"bytes,21,opt,name=maxProperties\\\"\"; MinProperties *int64 \"json:\\\"minProperties,omitempty\\\" protobuf:\\\"bytes,22,opt,name=minProperties\\\"\"; Required []string \"json:\\\"required,omitempty\\\" protobuf:\\\"bytes,23,rep,name=required\\\"\"; Items *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrArray \"json:\\\"items,omitempty\\\" protobuf:\\\"bytes,24,opt,name=items\\\"\"; AllOf []k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps \"json:\\\"allOf,omitempty\\\" protobuf:\\\"bytes,25,rep,name=allOf\\\"\"; OneOf []k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps \"json:\\\"oneOf,omitempty\\\" protobuf:\\\"bytes,26,rep,name=oneOf\\\"\"; AnyOf []k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps \"json:\\\"anyOf,omitempty\\\" protobuf:\\\"bytes,27,rep,name=anyOf\\\"\"; Not *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps \"json:\\\"not,omitempty\\\" protobuf:\\\"bytes,28,opt,name=not\\\"\"; Properties map[string]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps \"json:\\\"properties,omitempty\\\" protobuf:\\\"bytes,29,rep,name=properties\\\"\"; AdditionalProperties *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrBool \"json:\\\"additionalProperties,omitempty\\\" protobuf:\\\"bytes,30,opt,name=additionalProperties\\\"\"; PatternProperties map[string]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps \"json:\\\"patternProperties,omitempty\\\" protobuf:\\\"bytes,31,rep,name=patternProperties\\\"\"; Dependencies k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaDependencies \"json:\\\"dependencies,omitempty\\\" protobuf:\\\"bytes,32,opt,name=dependencies\\\"\"; AdditionalItems *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrBool \"json:\\\"additionalItems,omitempty\\\" protobuf:\\\"bytes,33,opt,name=additionalItems\\\"\"; Definitions k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaDefinitions \"json:\\\"definitions,omitempty\\\" protobuf:\\\"bytes,34,opt,name=definitions\\\"\"; ExternalDocs *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.ExternalDocumentation \"json:\\\"externalDocs,omitempty\\\" protobuf:\\\"bytes,35,opt,name=externalDocs\\\"\"; Example *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSON \"json:\\\"example,omitempty\\\" protobuf:\\\"bytes,36,opt,name=example\\\"\"; Nullable bool \"json:\\\"nullable,omitempty\\\" protobuf:\\\"bytes,37,opt,name=nullable\\\"\"; XPreserveUnknownFields *bool \"json:\\\"x-kubernetes-preserve-unknown-fields,omitempty\\\" protobuf:\\\"bytes,38,opt,name=xKubernetesPreserveUnknownFields\\\"\"; XEmbeddedResource bool \"json:\\\"x-kubernetes-embedded-resource,omitempty\\\" protobuf:\\\"bytes,39,opt,name=xKubernetesEmbeddedResource\\\"\"; XIntOrString bool \"json:\\\"x-kubernetes-int-or-string,omitempty\\\" protobuf:\\\"bytes,40,opt,name=xKubernetesIntOrString\\\"\"; XListMapKeys []string \"json:\\\"x-kubernetes-list-map-keys,omitempty\\\" protobuf:\\\"bytes,41,rep,name=xKubernetesListMapKeys\\\"\"; XListType *string \"json:\\\"x-kubernetes-list-type,omitempty\\\" protobuf:\\\"bytes,42,opt,name=xKubernetesListType\\\"\"; XMapType *string \"json:\\\"x-kubernetes-map-type,omitempty\\\" protobuf:\\\"bytes,43,opt,name=xKubernetesMapType\\\"\"}",
      "type" : "Struct",
      "underlying" : 37
    }, {
      "local-name" : "JSONSchemaURL",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaURL",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "elem" : 40,
      "name" : "*k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSON",
      "type" : "Pointer",
      "underlying" : 39
    }, {
      "local-name" : "JSON",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSON",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "Raw",
        "type" : 42
      } ],
      "name" : "struct{Raw []byte \"protobuf:\\\"bytes,1,opt,name=raw\\\"\"}",
      "type" : "Struct",
      "underlying" : 41
    }, {
      "elem" : 43,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 42
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 43
    }, {
      "elem" : 40,
      "name" : "[]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSON",
      "type" : "Slice",
      "underlying" : 44
    }, {
      "elem" : 46,
      "name" : "*k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrArray",
      "type" : "Pointer",
      "underlying" : 45
    }, {
      "local-name" : "JSONSchemaPropsOrArray",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrArray",
      "package" : 0,
      "type" : "Named",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "Schema",
        "type" : 35
      }, {
        "name" : "JSONSchemas",
        "type" : 48
      } ],
      "name" : "struct{Schema *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps \"protobuf:\\\"bytes,1,opt,name=schema\\\"\"; JSONSchemas []k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps \"protobuf:\\\"bytes,2,rep,name=jSONSchemas\\\"\"}",
      "type" : "Struct",
      "underlying" : 47
    }, {
      "elem" : 36,
      "name" : "[]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps",
      "type" : "Slice",
      "underlying" : 48
    }, {
      "elem" : 36,
      "key" : 5,
      "name" : "map[string]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps",
      "type" : "Map",
      "underlying" : 49
    }, {
      "elem" : 51,
      "name" : "*k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrBool",
      "type" : "Pointer",
      "underlying" : 50
    }, {
      "local-name" : "JSONSchemaPropsOrBool",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrBool",
      "package" : 0,
      "type" : "Named",
      "underlying" : 52
    }, {
      "fields" : [ {
        "name" : "Allows",
        "type" : 8
      }, {
        "name" : "Schema",
        "type" : 35
      } ],
      "name" : "struct{Allows bool \"protobuf:\\\"varint,1,opt,name=allows\\\"\"; Schema *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps \"protobuf:\\\"bytes,2,opt,name=schema\\\"\"}",
      "type" : "Struct",
      "underlying" : 52
    }, {
      "local-name" : "JSONSchemaDependencies",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaDependencies",
      "package" : 0,
      "type" : "Named",
      "underlying" : 54
    }, {
      "elem" : 55,
      "key" : 5,
      "name" : "map[string]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrStringArray",
      "type" : "Map",
      "underlying" : 54
    }, {
      "local-name" : "JSONSchemaPropsOrStringArray",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrStringArray",
      "package" : 0,
      "type" : "Named",
      "underlying" : 56
    }, {
      "fields" : [ {
        "name" : "Schema",
        "type" : 35
      }, {
        "name" : "Property",
        "type" : 17
      } ],
      "name" : "struct{Schema *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps \"protobuf:\\\"bytes,1,opt,name=schema\\\"\"; Property []string \"protobuf:\\\"bytes,2,rep,name=property\\\"\"}",
      "type" : "Struct",
      "underlying" : 56
    }, {
      "local-name" : "JSONSchemaDefinitions",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaDefinitions",
      "package" : 0,
      "type" : "Named",
      "underlying" : 49
    }, {
      "elem" : 59,
      "name" : "*k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.ExternalDocumentation",
      "type" : "Pointer",
      "underlying" : 58
    }, {
      "local-name" : "ExternalDocumentation",
      "name" : "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.ExternalDocumentation",
      "package" : 0,
      "type" : "Named",
      "underlying" : 60
    }, {
      "fields" : [ {
        "name" : "Description",
        "type" : 5
      }, {
        "name" : "URL",
        "type" : 5
      } ],
      "name" : "struct{Description string \"json:\\\"description,omitempty\\\" protobuf:\\\"bytes,1,opt,name=description\\\"\"; URL string \"json:\\\"url,omitempty\\\" protobuf:\\\"bytes,2,opt,name=url\\\"\"}",
      "type" : "Struct",
      "underlying" : 60
    }, {
      "local-name" : "Scope",
      "name" : "k8s.io/apimachinery/pkg/conversion.Scope",
      "package" : 2,
      "type" : "Named",
      "underlying" : 62
    }, {
      "methods" : [ {
        "name" : "Convert",
        "type" : 63
      }, {
        "name" : "DestTag",
        "type" : 73
      }, {
        "name" : "Flags",
        "type" : 76
      }, {
        "name" : "Meta",
        "type" : 78
      }, {
        "name" : "SrcTag",
        "type" : 73
      } ],
      "name" : "interface{Convert(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags) error; DestTag() reflect.StructTag; Flags() k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags; Meta() *k8s.io/apimachinery/pkg/conversion.Meta; SrcTag() reflect.StructTag}",
      "type" : "Interface",
      "underlying" : 62
    }, {
      "name" : "func(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags) error",
      "params" : 64,
      "recv" : 1,
      "results" : 67,
      "type" : "Signature",
      "underlying" : 63,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "src",
        "type" : 11
      }, {
        "name" : "dest",
        "type" : 11
      }, {
        "name" : "flags",
        "type" : 65
      } ],
      "name" : "(src interface{}, dest interface{}, flags k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags)",
      "type" : "Tuple",
      "underlying" : 64
    }, {
      "local-name" : "FieldMatchingFlags",
      "name" : "k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags",
      "package" : 2,
      "type" : "Named",
      "underlying" : 66
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 66
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 68
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 67
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 69
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 70
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 69
    }, {
      "name" : "func() string",
      "params" : 71,
      "recv" : 0,
      "results" : 72,
      "type" : "Signature",
      "underlying" : 70,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 71
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 72
    }, {
      "name" : "func() reflect.StructTag",
      "params" : 71,
      "recv" : 2,
      "results" : 74,
      "type" : "Signature",
      "underlying" : 73,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 75
      } ],
      "name" : "(reflect.StructTag)",
      "type" : "Tuple",
      "underlying" : 74
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 3,
      "type" : "Named",
      "underlying" : 5
    }, {
      "name" : "func() k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags",
      "params" : 71,
      "recv" : 3,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 76,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 65
      } ],
      "name" : "(k8s.io/apimachinery/pkg/conversion.FieldMatchingFlags)",
      "type" : "Tuple",
      "underlying" : 77
    }, {
      "name" : "func() *k8s.io/apimachinery/pkg/conversion.Meta",
      "params" : 71,
      "recv" : 4,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 78,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(*k8s.io/apimachinery/pkg/conversion.Meta)",
      "type" : "Tuple",
      "underlying" : 79
    }, {
      "elem" : 81,
      "name" : "*k8s.io/apimachinery/pkg/conversion.Meta",
      "type" : "Pointer",
      "underlying" : 80
    }, {
      "local-name" : "Meta",
      "name" : "k8s.io/apimachinery/pkg/conversion.Meta",
      "package" : 2,
      "type" : "Named",
      "underlying" : 82
    }, {
      "fields" : [ {
        "name" : "KeyNameMapping",
        "type" : 83
      }, {
        "name" : "Context",
        "type" : 11
      } ],
      "name" : "struct{KeyNameMapping k8s.io/apimachinery/pkg/conversion.FieldMappingFunc; Context interface{}}",
      "type" : "Struct",
      "underlying" : 82
    }, {
      "local-name" : "FieldMappingFunc",
      "name" : "k8s.io/apimachinery/pkg/conversion.FieldMappingFunc",
      "package" : 2,
      "type" : "Named",
      "underlying" : 84
    }, {
      "name" : "func(key string, sourceTag reflect.StructTag, destTag reflect.StructTag) (source string, dest string)",
      "params" : 85,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 84,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 5
      }, {
        "name" : "sourceTag",
        "type" : 75
      }, {
        "name" : "destTag",
        "type" : 75
      } ],
      "name" : "(key string, sourceTag reflect.StructTag, destTag reflect.StructTag)",
      "type" : "Tuple",
      "underlying" : 85
    }, {
      "fields" : [ {
        "name" : "source",
        "type" : 5
      }, {
        "name" : "dest",
        "type" : 5
      } ],
      "name" : "(source string, dest string)",
      "type" : "Tuple",
      "underlying" : 86
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 4,
      "type" : "Basic",
      "underlying" : 87
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 88
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 89
    }, {
      "elem" : 9,
      "name" : "**k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSON",
      "type" : "Pointer",
      "underlying" : 90
    }, {
      "elem" : 39,
      "name" : "**k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSON",
      "type" : "Pointer",
      "underlying" : 91
    }, {
      "name" : "func(in *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSON, out *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSON, s k8s.io/apimachinery/pkg/conversion.Scope) error",
      "params" : 93,
      "recv" : -1,
      "results" : 67,
      "type" : "Signature",
      "underlying" : 92,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 9
      }, {
        "name" : "out",
        "type" : 39
      }, {
        "name" : "s",
        "type" : 61
      } ],
      "name" : "(in *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSON, out *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSON, s k8s.io/apimachinery/pkg/conversion.Scope)",
      "type" : "Tuple",
      "underlying" : 93
    }, {
      "elem" : 16,
      "name" : "*[]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSON",
      "type" : "Pointer",
      "underlying" : 94
    }, {
      "elem" : 44,
      "name" : "*[]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSON",
      "type" : "Pointer",
      "underlying" : 95
    }, {
      "name" : "func([]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSON) int",
      "params" : 97,
      "recv" : -1,
      "results" : 98,
      "type" : "Signature",
      "underlying" : 96,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      } ],
      "name" : "([]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSON)",
      "type" : "Tuple",
      "underlying" : 97
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 66
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 98
    }, {
      "elem" : 17,
      "name" : "*[]string",
      "type" : "Pointer",
      "underlying" : 99
    }, {
      "elem" : 18,
      "name" : "**k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrArray",
      "type" : "Pointer",
      "underlying" : 100
    }, {
      "elem" : 45,
      "name" : "**k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrArray",
      "type" : "Pointer",
      "underlying" : 101
    }, {
      "name" : "func(in *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrArray, out *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrArray, s k8s.io/apimachinery/pkg/conversion.Scope) error",
      "params" : 103,
      "recv" : -1,
      "results" : 67,
      "type" : "Signature",
      "underlying" : 102,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 18
      }, {
        "name" : "out",
        "type" : 45
      }, {
        "name" : "s",
        "type" : 61
      } ],
      "name" : "(in *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrArray, out *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrArray, s k8s.io/apimachinery/pkg/conversion.Scope)",
      "type" : "Tuple",
      "underlying" : 103
    }, {
      "elem" : 21,
      "name" : "*[]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps",
      "type" : "Pointer",
      "underlying" : 104
    }, {
      "elem" : 48,
      "name" : "*[]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps",
      "type" : "Pointer",
      "underlying" : 105
    }, {
      "name" : "func([]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps) int",
      "params" : 107,
      "recv" : -1,
      "results" : 98,
      "type" : "Signature",
      "underlying" : 106,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "([]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps)",
      "type" : "Tuple",
      "underlying" : 107
    }, {
      "elem" : 2,
      "name" : "**k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps",
      "type" : "Pointer",
      "underlying" : 108
    }, {
      "elem" : 35,
      "name" : "**k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps",
      "type" : "Pointer",
      "underlying" : 109
    }, {
      "elem" : 22,
      "name" : "*map[string]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps",
      "type" : "Pointer",
      "underlying" : 110
    }, {
      "elem" : 49,
      "name" : "*map[string]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaProps",
      "type" : "Pointer",
      "underlying" : 111
    }, {
      "name" : "func(map[string]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps) int",
      "params" : 113,
      "recv" : -1,
      "results" : 98,
      "type" : "Signature",
      "underlying" : 112,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 22
      } ],
      "name" : "(map[string]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaProps)",
      "type" : "Tuple",
      "underlying" : 113
    }, {
      "elem" : 23,
      "name" : "**k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrBool",
      "type" : "Pointer",
      "underlying" : 114
    }, {
      "elem" : 50,
      "name" : "**k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrBool",
      "type" : "Pointer",
      "underlying" : 115
    }, {
      "name" : "func(in *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrBool, out *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrBool, s k8s.io/apimachinery/pkg/conversion.Scope) error",
      "params" : 117,
      "recv" : -1,
      "results" : 67,
      "type" : "Signature",
      "underlying" : 116,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 23
      }, {
        "name" : "out",
        "type" : 50
      }, {
        "name" : "s",
        "type" : 61
      } ],
      "name" : "(in *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrBool, out *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrBool, s k8s.io/apimachinery/pkg/conversion.Scope)",
      "type" : "Tuple",
      "underlying" : 117
    }, {
      "elem" : 26,
      "name" : "*k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaDependencies",
      "type" : "Pointer",
      "underlying" : 118
    }, {
      "elem" : 53,
      "name" : "*k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaDependencies",
      "type" : "Pointer",
      "underlying" : 119
    }, {
      "name" : "func(map[string]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrStringArray) int",
      "params" : 121,
      "recv" : -1,
      "results" : 98,
      "type" : "Signature",
      "underlying" : 120,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 27
      } ],
      "name" : "(map[string]k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrStringArray)",
      "type" : "Tuple",
      "underlying" : 121
    }, {
      "elem" : 55,
      "name" : "*k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrStringArray",
      "type" : "Pointer",
      "underlying" : 122
    }, {
      "name" : "func(in *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrStringArray, out *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrStringArray, s k8s.io/apimachinery/pkg/conversion.Scope) error",
      "params" : 124,
      "recv" : -1,
      "results" : 67,
      "type" : "Signature",
      "underlying" : 123,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 125
      }, {
        "name" : "out",
        "type" : 122
      }, {
        "name" : "s",
        "type" : 61
      } ],
      "name" : "(in *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrStringArray, out *k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaPropsOrStringArray, s k8s.io/apimachinery/pkg/conversion.Scope)",
      "type" : "Tuple",
      "underlying" : 124
    }, {
      "elem" : 28,
      "name" : "*k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaPropsOrStringArray",
      "type" : "Pointer",
      "underlying" : 125
    }, {
      "elem" : 30,
      "name" : "*k8s.io/apiextensions-apiserver/pkg/apis/apiextensions.JSONSchemaDefinitions",
      "type" : "Pointer",
      "underlying" : 126
    }, {
      "elem" : 57,
      "name" : "*k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1.JSONSchemaDefinitions",
      "type" : "Pointer",
      "underlying" : 127
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 68,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 61,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 61,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 61,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 61,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 35,
      "exported" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 61,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 68,
      "exported" : false
    }, {
      "name" : "ID",
      "package" : 0,
      "type" : 5,
      "exported" : true
    }, {
      "name" : "ID",
      "package" : 1,
      "type" : 5,
      "exported" : true
    }, {
      "name" : "Schema",
      "package" : 0,
      "type" : 38,
      "exported" : true
    }, {
      "name" : "Schema",
      "package" : 1,
      "type" : 6,
      "exported" : true
    }, {
      "name" : "Ref",
      "package" : 0,
      "type" : 7,
      "exported" : true
    }, {
      "name" : "Ref",
      "package" : 1,
      "type" : 7,
      "exported" : true
    }, {
      "name" : "Description",
      "package" : 0,
      "type" : 5,
      "exported" : true
    }, {
      "name" : "Description",
      "package" : 1,
      "type" : 5,
      "exported" : true
    }, {
      "name" : "Type",
      "package" : 0,
      "type" : 5,
      "exported" : true
    }, {
      "name" : "Type",
      "package" : 1,
      "type" : 5,
      "exported" : true
    }, {
      "name" : "Nullable",
      "package" : 0,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "Nullable",
      "package" : 1,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "Format",
      "package" : 0,
      "type" : 5,
      "exported" : true
    }, {
      "name" : "Format",
      "package" : 1,
      "type" : 5,
      "exported" : true
    }, {
      "name" : "Title",
      "package" : 0,
      "type" : 5,
      "exported" : true
    }, {
      "name" : "Title",
      "package" : 1,
      "type" : 5,
      "exported" : true
    }, {
      "name" : "Default",
      "package" : 1,
      "type" : 9,
      "exported" : true
    }, {
      "name" : "Default",
      "package" : 0,
      "type" : 39,
      "exported" : true
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 91,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 90,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 68,
      "exported" : false
    }, {
      "name" : "Maximum",
      "package" : 0,
      "type" : 12,
      "exported" : true
    }, {
      "name" : "Maximum",
      "package" : 1,
      "type" : 12,
      "exported" : true
    }, {
      "name" : "ExclusiveMaximum",
      "package" : 0,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "ExclusiveMaximum",
      "package" : 1,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "Minimum",
      "package" : 0,
      "type" : 12,
      "exported" : true
    }, {
      "name" : "Minimum",
      "package" : 1,
      "type" : 12,
      "exported" : true
    }, {
      "name" : "ExclusiveMinimum",
      "package" : 0,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "ExclusiveMinimum",
      "package" : 1,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "MaxLength",
      "package" : 0,
      "type" : 14,
      "exported" : true
    }, {
      "name" : "MaxLength",
      "package" : 1,
      "type" : 14,
      "exported" : true
    }, {
      "name" : "MinLength",
      "package" : 0,
      "type" : 14,
      "exported" : true
    }, {
      "name" : "MinLength",
      "package" : 1,
      "type" : 14,
      "exported" : true
    }, {
      "name" : "Pattern",
      "package" : 0,
      "type" : 5,
      "exported" : true
    }, {
      "name" : "Pattern",
      "package" : 1,
      "type" : 5,
      "exported" : true
    }, {
      "name" : "MaxItems",
      "package" : 0,
      "type" : 14,
      "exported" : true
    }, {
      "name" : "MaxItems",
      "package" : 1,
      "type" : 14,
      "exported" : true
    }, {
      "name" : "MinItems",
      "package" : 0,
      "type" : 14,
      "exported" : true
    }, {
      "name" : "MinItems",
      "package" : 1,
      "type" : 14,
      "exported" : true
    }, {
      "name" : "UniqueItems",
      "package" : 0,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "UniqueItems",
      "package" : 1,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "MultipleOf",
      "package" : 0,
      "type" : 12,
      "exported" : true
    }, {
      "name" : "MultipleOf",
      "package" : 1,
      "type" : 12,
      "exported" : true
    }, {
      "name" : "Enum",
      "package" : 1,
      "type" : 16,
      "exported" : true
    }, {
      "name" : "Enum",
      "package" : 0,
      "type" : 44,
      "exported" : true
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 95,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 94,
      "exported" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 66,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 68,
      "exported" : false
    }, {
      "name" : "MaxProperties",
      "package" : 0,
      "type" : 14,
      "exported" : true
    }, {
      "name" : "MaxProperties",
      "package" : 1,
      "type" : 14,
      "exported" : true
    }, {
      "name" : "MinProperties",
      "package" : 0,
      "type" : 14,
      "exported" : true
    }, {
      "name" : "MinProperties",
      "package" : 1,
      "type" : 14,
      "exported" : true
    }, {
      "name" : "Required",
      "package" : 0,
      "type" : 17,
      "exported" : true
    }, {
      "name" : "Required",
      "package" : 1,
      "type" : 17,
      "exported" : true
    }, {
      "name" : "Items",
      "package" : 1,
      "type" : 18,
      "exported" : true
    }, {
      "name" : "Items",
      "package" : 0,
      "type" : 45,
      "exported" : true
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 101,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 100,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 68,
      "exported" : false
    }, {
      "name" : "AllOf",
      "package" : 1,
      "type" : 21,
      "exported" : true
    }, {
      "name" : "AllOf",
      "package" : 0,
      "type" : 48,
      "exported" : true
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 105,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 104,
      "exported" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 66,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 68,
      "exported" : false
    }, {
      "name" : "OneOf",
      "package" : 1,
      "type" : 21,
      "exported" : true
    }, {
      "name" : "OneOf",
      "package" : 0,
      "type" : 48,
      "exported" : true
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 105,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 104,
      "exported" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 66,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 68,
      "exported" : false
    }, {
      "name" : "AnyOf",
      "package" : 1,
      "type" : 21,
      "exported" : true
    }, {
      "name" : "AnyOf",
      "package" : 0,
      "type" : 48,
      "exported" : true
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 105,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 104,
      "exported" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 66,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 68,
      "exported" : false
    }, {
      "name" : "Not",
      "package" : 1,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "Not",
      "package" : 0,
      "type" : 35,
      "exported" : true
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 109,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 108,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 68,
      "exported" : false
    }, {
      "name" : "Properties",
      "package" : 1,
      "type" : 22,
      "exported" : true
    }, {
      "name" : "Properties",
      "package" : 0,
      "type" : 49,
      "exported" : true
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 111,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 110,
      "exported" : false
    }, {
      "name" : "val",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "newVal",
      "package" : 0,
      "type" : 35,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 68,
      "exported" : false
    }, {
      "name" : "key",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "AdditionalProperties",
      "package" : 1,
      "type" : 23,
      "exported" : true
    }, {
      "name" : "AdditionalProperties",
      "package" : 0,
      "type" : 50,
      "exported" : true
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 115,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 114,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 68,
      "exported" : false
    }, {
      "name" : "PatternProperties",
      "package" : 1,
      "type" : 22,
      "exported" : true
    }, {
      "name" : "PatternProperties",
      "package" : 0,
      "type" : 49,
      "exported" : true
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 111,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 110,
      "exported" : false
    }, {
      "name" : "val",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "newVal",
      "package" : 0,
      "type" : 35,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 68,
      "exported" : false
    }, {
      "name" : "key",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "Dependencies",
      "package" : 1,
      "type" : 26,
      "exported" : true
    }, {
      "name" : "Dependencies",
      "package" : 0,
      "type" : 53,
      "exported" : true
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 119,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 118,
      "exported" : false
    }, {
      "name" : "val",
      "package" : 0,
      "type" : 28,
      "exported" : false
    }, {
      "name" : "newVal",
      "package" : 0,
      "type" : 122,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 68,
      "exported" : false
    }, {
      "name" : "key",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "AdditionalItems",
      "package" : 1,
      "type" : 23,
      "exported" : true
    }, {
      "name" : "AdditionalItems",
      "package" : 0,
      "type" : 50,
      "exported" : true
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 115,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 114,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 68,
      "exported" : false
    }, {
      "name" : "Definitions",
      "package" : 1,
      "type" : 30,
      "exported" : true
    }, {
      "name" : "Definitions",
      "package" : 0,
      "type" : 57,
      "exported" : true
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 127,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 126,
      "exported" : false
    }, {
      "name" : "val",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "newVal",
      "package" : 0,
      "type" : 35,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 68,
      "exported" : false
    }, {
      "name" : "key",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "ExternalDocs",
      "package" : 0,
      "type" : 58,
      "exported" : true
    }, {
      "name" : "ExternalDocs",
      "package" : 1,
      "type" : 31,
      "exported" : true
    }, {
      "name" : "Example",
      "package" : 1,
      "type" : 9,
      "exported" : true
    }, {
      "name" : "Example",
      "package" : 0,
      "type" : 39,
      "exported" : true
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 91,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 90,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 68,
      "exported" : false
    }, {
      "name" : "XPreserveUnknownFields",
      "package" : 0,
      "type" : 34,
      "exported" : true
    }, {
      "name" : "XPreserveUnknownFields",
      "package" : 1,
      "type" : 34,
      "exported" : true
    }, {
      "name" : "XEmbeddedResource",
      "package" : 0,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "XEmbeddedResource",
      "package" : 1,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "XIntOrString",
      "package" : 0,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "XIntOrString",
      "package" : 1,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "XListMapKeys",
      "package" : 0,
      "type" : 17,
      "exported" : true
    }, {
      "name" : "XListMapKeys",
      "package" : 1,
      "type" : 17,
      "exported" : true
    }, {
      "name" : "XListType",
      "package" : 0,
      "type" : 7,
      "exported" : true
    }, {
      "name" : "XListType",
      "package" : 1,
      "type" : 7,
      "exported" : true
    }, {
      "name" : "XMapType",
      "package" : 0,
      "type" : 7,
      "exported" : true
    }, {
      "name" : "XMapType",
      "package" : 1,
      "type" : 7,
      "exported" : true
    } ]
  },
  "go-version" : "1.14.3"
}