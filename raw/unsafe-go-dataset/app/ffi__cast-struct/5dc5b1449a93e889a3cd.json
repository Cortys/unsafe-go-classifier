{
  "usage" : {
    "file" : "blas.go",
    "label1" : "cast-struct",
    "label2" : "ffi",
    "line" : "2805",
    "module" : "gorgonia.org/cu",
    "pkg" : "gorgonia.org/cu/blas",
    "project" : "gorgonia/gorgonia",
    "snippet" : "impl.e = status(C.cublasCsyr(C.cublasHandle_t(impl.h), uplo2cublasUplo(ul), C.int(n), (*C.cuComplex)(unsafe.Pointer(&alpha)), (*C.cuComplex)(unsafe.Pointer(&x[0])), C.int(incX), (*C.cuComplex)(unsafe.Pointer(&a[0])), C.int(lda)))",
    "version" : "v0.9.2"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 5, 4, 2, 0, 6, 7, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 7, 3, 1, 5, 4, 2 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 3, 1, 5, 4, 2, 0, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 5, 4, 2, 0, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 2792,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e",
              "variable" : 8
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "impl",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2794,
      "code" : "if impl.e != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2793,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 2793,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 6 ],
      "in-vars" : [ 0, 6, 7, 3, 1, 5, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 3, 1, 5, 4, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 2796,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 2
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 4,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2798,
      "code" : "if n < 0 {\n\tpanic(\"blas: n < 0\")\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 3, 1, 5, 4, 2, 0, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 3, 1, 5, 4, 2, 0, 6 ],
      "decl-vars" : [ ],
      "line-start" : 2797,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "blas: n < 0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 2797,
      "code" : "panic(\"blas: n < 0\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 8 ],
      "in-vars" : [ 0, 6, 7, 3, 1, 5, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 5, 4, 2, 0, 6, 7, 3 ],
      "decl-vars" : [ ],
      "line-start" : 2799,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "incX",
              "variable" : 5
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 4,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2801,
      "code" : "if incX == 0 {\n\tpanic(\"blas: zero x index increment\")\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 0, 6, 7, 3, 1, 5, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 5, 4, 2, 0, 6, 7, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 2800,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "blas: zero x index increment"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 2800,
      "code" : "panic(\"blas: zero x index increment\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 10 ],
      "in-vars" : [ 2, 0, 6, 7, 3, 1, 5, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 2, 0, 6, 7, 3, 1, 5 ],
      "decl-vars" : [ ],
      "line-start" : 2802,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 8,
              "kind" : "expression",
              "left" : {
                "go-type" : 8,
                "kind" : "expression",
                "left" : {
                  "go-type" : 4,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "incX",
                    "variable" : 5
                  }
                },
                "operator" : ">",
                "right" : {
                  "go-type" : 4,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "operator" : "&&",
              "right" : {
                "go-type" : 8,
                "kind" : "expression",
                "left" : {
                  "go-type" : 4,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 4,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 4,
                      "kind" : "expression",
                      "left" : {
                        "go-type" : 4,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "n",
                          "variable" : 2
                        }
                      },
                      "operator" : "-",
                      "right" : {
                        "go-type" : 4,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "1"
                        }
                      },
                      "type" : "binary"
                    },
                    "type" : "paren"
                  },
                  "operator" : "*",
                  "right" : {
                    "go-type" : 4,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "incX",
                      "variable" : 5
                    }
                  },
                  "type" : "binary"
                },
                "operator" : ">=",
                "right" : {
                  "arguments" : [ {
                    "go-type" : 6,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "x",
                      "variable" : 4
                    }
                  } ],
                  "ellipsis" : false,
                  "function" : {
                    "go-type" : 13,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Builtin",
                      "kind" : "ident",
                      "value" : "len"
                    }
                  },
                  "go-type" : 4,
                  "kind" : "expression",
                  "type" : "call"
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 8,
              "kind" : "expression",
              "left" : {
                "go-type" : 8,
                "kind" : "expression",
                "left" : {
                  "go-type" : 4,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "incX",
                    "variable" : 5
                  }
                },
                "operator" : "<",
                "right" : {
                  "go-type" : 4,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "operator" : "&&",
              "right" : {
                "go-type" : 8,
                "kind" : "expression",
                "left" : {
                  "go-type" : 4,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 4,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 4,
                      "kind" : "expression",
                      "left" : {
                        "go-type" : 4,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "1"
                        }
                      },
                      "operator" : "-",
                      "right" : {
                        "go-type" : 4,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "n",
                          "variable" : 2
                        }
                      },
                      "type" : "binary"
                    },
                    "type" : "paren"
                  },
                  "operator" : "*",
                  "right" : {
                    "go-type" : 4,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "incX",
                      "variable" : 5
                    }
                  },
                  "type" : "binary"
                },
                "operator" : ">=",
                "right" : {
                  "arguments" : [ {
                    "go-type" : 6,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "x",
                      "variable" : 4
                    }
                  } ],
                  "ellipsis" : false,
                  "function" : {
                    "go-type" : 13,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Builtin",
                      "kind" : "ident",
                      "value" : "len"
                    }
                  },
                  "go-type" : 4,
                  "kind" : "expression",
                  "type" : "call"
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2804,
      "code" : "if (incX > 0 && (n-1)*incX >= len(x)) || (incX < 0 && (1-n)*incX >= len(x)) {\n\tpanic(\"blas: x index out of range\")\n}",
      "entry" : false,
      "use-vars" : [ 5, 2, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 3, 1, 5, 4, 2, 0, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 5, 4, 2, 0, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 2803,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "blas: x index out of range"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 2803,
      "code" : "panic(\"blas: x index out of range\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 1 ],
      "in-vars" : [ 0, 6, 7, 3, 1, 5, 4, 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2805,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "e",
            "variable" : 8
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "impl",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "arguments" : [ {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 9
                },
                "go-type" : 3,
                "kind" : "expression",
                "target" : {
                  "go-type" : 0,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "impl",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : -1,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 5,
                  "value" : "C"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "cublasHandle_t"
                }
              },
              "go-type" : -1,
              "kind" : "expression",
              "type" : "call"
            }, {
              "arguments" : [ {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ul",
                  "variable" : 1
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 18,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "uplo2cublasUplo"
                }
              },
              "go-type" : 3,
              "kind" : "expression",
              "type" : "call"
            }, {
              "arguments" : [ {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "n",
                  "variable" : 2
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : -1,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 5,
                  "value" : "C"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "go-type" : -1,
              "kind" : "expression",
              "type" : "call"
            }, {
              "coerced-to" : {
                "contained" : {
                  "go-type" : -1,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 5,
                    "value" : "C"
                  },
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "NoKind",
                    "kind" : "ident",
                    "value" : "cuComplex"
                  }
                },
                "go-type" : -1,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : -1,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 103,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 103,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 103,
                "kind" : "expression",
                "target" : {
                  "go-type" : 21,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 5,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "alpha",
                      "variable" : 3
                    }
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            }, {
              "coerced-to" : {
                "contained" : {
                  "go-type" : -1,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 5,
                    "value" : "C"
                  },
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "NoKind",
                    "kind" : "ident",
                    "value" : "cuComplex"
                  }
                },
                "go-type" : -1,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : -1,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 103,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 103,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 103,
                "kind" : "expression",
                "target" : {
                  "go-type" : 21,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 5,
                    "index" : {
                      "go-type" : 4,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "0"
                      }
                    },
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 6,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "x",
                        "variable" : 4
                      }
                    },
                    "type" : "index"
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            }, {
              "arguments" : [ {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "incX",
                  "variable" : 5
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : -1,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 5,
                  "value" : "C"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "go-type" : -1,
              "kind" : "expression",
              "type" : "call"
            }, {
              "coerced-to" : {
                "contained" : {
                  "go-type" : -1,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 5,
                    "value" : "C"
                  },
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "NoKind",
                    "kind" : "ident",
                    "value" : "cuComplex"
                  }
                },
                "go-type" : -1,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : -1,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 103,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 103,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 103,
                "kind" : "expression",
                "target" : {
                  "go-type" : 21,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 5,
                    "index" : {
                      "go-type" : 4,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "0"
                      }
                    },
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 6,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "a",
                        "variable" : 6
                      }
                    },
                    "type" : "index"
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            }, {
              "arguments" : [ {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "lda",
                  "variable" : 7
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : -1,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 5,
                  "value" : "C"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "go-type" : -1,
              "kind" : "expression",
              "type" : "call"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 5,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "cublasCsyr"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "status"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2805,
      "code" : "impl.e = status(C.cublasCsyr(C.cublasHandle_t(impl.h), uplo2cublasUplo(ul), C.int(n), (*C.cuComplex)(unsafe.Pointer(&alpha)), (*C.cuComplex)(unsafe.Pointer(&x[0])), C.int(incX), (*C.cuComplex)(unsafe.Pointer(&a[0])), C.int(lda)))",
      "entry" : false,
      "use-vars" : [ 6, 4, 0, 7, 1, 3, 5, 2 ]
    } ],
    "code" : "func (impl *Standard) Csyr(ul blas.Uplo, n int, alpha complex64, x []complex64, incX int, a []complex64, lda int) {\n\n\tif impl.e != nil {\n\t\treturn\n\t}\n\n\tif n < 0 {\n\t\tpanic(\"blas: n < 0\")\n\t}\n\tif incX == 0 {\n\t\tpanic(\"blas: zero x index increment\")\n\t}\n\tif (incX > 0 && (n-1)*incX >= len(x)) || (incX < 0 && (1-n)*incX >= len(x)) {\n\t\tpanic(\"blas: x index out of range\")\n\t}\n\timpl.e = status(C.cublasCsyr(C.cublasHandle_t(impl.h), uplo2cublasUplo(ul), C.int(n), (*C.cuComplex)(unsafe.Pointer(&alpha)), (*C.cuComplex)(unsafe.Pointer(&x[0])), C.int(incX), (*C.cuComplex)(unsafe.Pointer(&a[0])), C.int(lda)))\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Csyr",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "status",
      "package" : 0,
      "type" : 16,
      "exported" : false
    }, {
      "name" : "uplo2cublasUplo",
      "package" : 0,
      "type" : 18,
      "exported" : false
    } ],
    "line-end" : 2806,
    "line-start" : 2790,
    "names" : [ "Csyr" ],
    "package" : 0,
    "packages" : [ {
      "name" : "cublas",
      "path" : "gorgonia.org/cu/blas"
    }, {
      "name" : "blas",
      "path" : "gonum.org/v1/gonum/blas"
    }, {
      "name" : "cu",
      "path" : "gorgonia.org/cu"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "C",
      "path" : "C"
    } ],
    "params" : [ 1, 2, 3, 4, 5, 6, 7 ],
    "receivers" : [ 0 ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(ul gonum.org/v1/gonum/blas.Uplo, n int, alpha complex64, x []complex64, incX int, a []complex64, lda int)",
      "params" : 1,
      "recv" : 0,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ul",
        "type" : 2
      }, {
        "name" : "n",
        "type" : 4
      }, {
        "name" : "alpha",
        "type" : 5
      }, {
        "name" : "x",
        "type" : 6
      }, {
        "name" : "incX",
        "type" : 4
      }, {
        "name" : "a",
        "type" : 6
      }, {
        "name" : "lda",
        "type" : 4
      } ],
      "name" : "(ul gonum.org/v1/gonum/blas.Uplo, n int, alpha complex64, x []complex64, incX int, a []complex64, lda int)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Uplo",
      "name" : "gonum.org/v1/gonum/blas.Uplo",
      "package" : 1,
      "type" : "Named",
      "underlying" : 3
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "name" : "complex64",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "elem" : 5,
      "name" : "[]complex64",
      "type" : "Slice",
      "underlying" : 6
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 7
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "func(interface{})",
      "params" : 11,
      "recv" : -1,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 10,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 12
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 12
    }, {
      "name" : "func([]complex64) int",
      "params" : 14,
      "recv" : -1,
      "results" : 15,
      "type" : "Signature",
      "underlying" : 13,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      } ],
      "name" : "([]complex64)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "name" : "func(x invalid type) error",
      "params" : 17,
      "recv" : -1,
      "results" : 44,
      "type" : "Signature",
      "underlying" : 16,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 3
      } ],
      "name" : "(x invalid type)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "name" : "func(u gonum.org/v1/gonum/blas.Uplo) invalid type",
      "params" : 19,
      "recv" : -1,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 2
      } ],
      "name" : "(u gonum.org/v1/gonum/blas.Uplo)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(invalid type)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "elem" : 5,
      "name" : "*complex64",
      "type" : "Pointer",
      "underlying" : 21
    } ],
    "variables" : [ {
      "name" : "impl",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "ul",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "alpha",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "x",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "incX",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "a",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "lda",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "e",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "h",
      "package" : 0,
      "type" : 3,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}