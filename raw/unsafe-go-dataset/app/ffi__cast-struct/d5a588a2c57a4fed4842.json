{
  "usage" : {
    "file" : "elf.go",
    "label1" : "cast-struct",
    "label2" : "ffi",
    "line" : "683",
    "module" : "github.com/iovisor/gobpf",
    "pkg" : "github.com/iovisor/gobpf/elf",
    "project" : "weaveworks/scope",
    "snippet" : "insns := (*C.struct_bpf_insn)(unsafe.Pointer(&data[0]))",
    "version" : "v0.0.0-20180826141936-4ece6c56f936"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 12, 13, 10, 9 ],
      "exit" : false,
      "out-vars" : [ 10, 9, 12, 13 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ 12, 13 ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 7 ],
      "in-vars" : [ 9, 12, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 13, 10, 9, 12 ],
      "decl-vars" : [ ],
      "line-start" : 477,
      "ast" : {
        "condition" : {
          "go-type" : 127,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fileName",
              "variable" : 14
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ""
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 484,
      "code" : "if b.fileName != \"\" {\n\tfileReader, err := os.Open(b.fileName)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer fileReader.Close()\n\tb.fileReader = fileReader\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 9, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 15, 12, 13, 10, 9 ],
      "decl-vars" : [ 15, 12 ],
      "line-start" : 478,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fileReader"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fileName",
              "variable" : 14
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 129,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "os"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Open"
            }
          },
          "go-type" : 128,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 478,
      "code" : "fileReader, err := os.Open(b.fileName)",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 6 ],
      "in-vars" : [ 9, 15, 12, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 12, 13, 10, 9, 15 ],
      "decl-vars" : [ ],
      "line-start" : 479,
      "ast" : {
        "condition" : {
          "go-type" : 127,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 15
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 131,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 481,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 15, 12, 13 ],
      "exit" : false,
      "out-vars" : [ 12, 13 ],
      "decl-vars" : [ ],
      "line-start" : 480,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 15
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 480,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 7 ],
      "in-vars" : [ 9, 12, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 10, 9, 12, 13 ],
      "decl-vars" : [ ],
      "line-start" : 483,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fileReader",
            "variable" : 16
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 106,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fileReader",
            "variable" : 12
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 483,
      "code" : "b.fileReader = fileReader",
      "entry" : false,
      "use-vars" : [ 9, 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 9, 12, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 10, 9, 12, 13 ],
      "decl-vars" : [ 17 ],
      "line-start" : 486,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 9,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 9,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "err"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 486,
      "code" : "var err error",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 17, 9 ],
      "successors" : [ 9 ],
      "in-vars" : [ 9, 12, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 13, 10, 9, 17, 12 ],
      "decl-vars" : [ ],
      "line-start" : 487,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "file",
            "variable" : 18
          },
          "go-type" : 25,
          "kind" : "expression",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 9
            }
          },
          "type" : "selector"
        }, {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 17
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fileReader",
              "variable" : 16
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 133,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "elf"
            },
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewFile"
            }
          },
          "go-type" : 132,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 17 ],
      "line-end" : 487,
      "code" : "b.file, err = elf.NewFile(b.fileReader)",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 11 ],
      "in-vars" : [ 12, 13, 10, 9, 17 ],
      "exit" : false,
      "out-vars" : [ 13, 10, 9, 17, 12 ],
      "decl-vars" : [ ],
      "line-start" : 488,
      "ast" : {
        "condition" : {
          "go-type" : 127,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 17
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 131,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 490,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 12, 13, 17 ],
      "exit" : false,
      "out-vars" : [ 12, 13 ],
      "decl-vars" : [ ],
      "line-start" : 489,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 17
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 489,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 9, 12, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 10, 9, 17, 12, 13, 19 ],
      "decl-vars" : [ 17, 19 ],
      "line-start" : 492,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "license"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 17
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "file",
              "variable" : 18
            },
            "go-type" : 25,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 136,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "elfReadLicense"
            }
          },
          "go-type" : 135,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 492,
      "code" : "license, err := elfReadLicense(b.file)",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 14 ],
      "in-vars" : [ 9, 17, 12, 13, 19, 10 ],
      "exit" : false,
      "out-vars" : [ 9, 17, 12, 13, 19, 10 ],
      "decl-vars" : [ ],
      "line-start" : 493,
      "ast" : {
        "condition" : {
          "go-type" : 127,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 17
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 131,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 495,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 12, 13 ],
      "exit" : false,
      "out-vars" : [ 12, 13 ],
      "decl-vars" : [ ],
      "line-start" : 494,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 17
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 494,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 9, 12, 19, 10 ],
      "exit" : false,
      "out-vars" : [ 10, 9, 12, 13 ],
      "decl-vars" : [ 13 ],
      "line-start" : 497,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "lp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 138,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 7,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 138,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "license",
                "variable" : 19
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 8,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "CString"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 497,
      "code" : "lp := unsafe.Pointer(C.CString(license))",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 10, 9, 12, 13 ],
      "exit" : false,
      "out-vars" : [ 9, 20, 17, 12, 13, 10 ],
      "decl-vars" : [ 17, 20 ],
      "line-start" : 500,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "version"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 17
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "file",
              "variable" : 18
            },
            "go-type" : 25,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 140,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "elfReadVersion"
            }
          },
          "go-type" : 139,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 500,
      "code" : "version, err := elfReadVersion(b.file)",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17, 18 ],
      "in-vars" : [ 13, 10, 9, 20, 17, 12 ],
      "exit" : false,
      "out-vars" : [ 9, 20, 17, 12, 13, 10 ],
      "decl-vars" : [ ],
      "line-start" : 501,
      "ast" : {
        "condition" : {
          "go-type" : 127,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 17
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 131,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 503,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 12, 13 ],
      "exit" : false,
      "out-vars" : [ 12, 13 ],
      "decl-vars" : [ ],
      "line-start" : 502,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 17
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 502,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19, 22 ],
      "in-vars" : [ 9, 20, 12, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 13, 10, 9, 20, 12 ],
      "decl-vars" : [ ],
      "line-start" : 504,
      "ast" : {
        "condition" : {
          "go-type" : 127,
          "kind" : "expression",
          "left" : {
            "go-type" : 42,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "version",
              "variable" : 20
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 42,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4294967294"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 509,
      "code" : "if version == useCurrentKernelVersion {\n\tversion, err = CurrentKernelVersion()\n\tif err != nil {\n\t\treturn err\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ 20, 17 ],
      "successors" : [ 20 ],
      "in-vars" : [ 12, 13, 10, 9 ],
      "exit" : false,
      "out-vars" : [ 9, 20, 17, 12, 13, 10 ],
      "decl-vars" : [ ],
      "line-start" : 505,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 42,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "version",
            "variable" : 20
          }
        }, {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 17
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 141,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "CurrentKernelVersion"
            }
          },
          "go-type" : 139,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 17, 20 ],
      "line-end" : 505,
      "code" : "version, err = CurrentKernelVersion()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21, 22 ],
      "in-vars" : [ 9, 20, 17, 12, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 17, 12, 13, 10, 9, 20 ],
      "decl-vars" : [ ],
      "line-start" : 506,
      "ast" : {
        "condition" : {
          "go-type" : 127,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 17
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 131,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 508,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 12, 13 ],
      "exit" : false,
      "out-vars" : [ 13, 12 ],
      "decl-vars" : [ ],
      "line-start" : 507,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 17
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 507,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 9, 20, 12, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 13, 10, 21, 9, 20, 17, 12 ],
      "decl-vars" : [ 21, 17 ],
      "line-start" : 511,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "maps"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 17
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "file",
              "variable" : 18
            },
            "go-type" : 25,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "parameters",
              "variable" : 10
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 143,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "elfReadMaps"
            }
          },
          "go-type" : 142,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 511,
      "code" : "maps, err := elfReadMaps(b.file, parameters)",
      "entry" : false,
      "use-vars" : [ 10, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24, 25 ],
      "in-vars" : [ 17, 12, 13, 10, 21, 9, 20 ],
      "exit" : false,
      "out-vars" : [ 10, 21, 9, 20, 17, 12, 13 ],
      "decl-vars" : [ ],
      "line-start" : 512,
      "ast" : {
        "condition" : {
          "go-type" : 127,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 17
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 131,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 514,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 12, 13 ],
      "exit" : false,
      "out-vars" : [ 12, 13 ],
      "decl-vars" : [ ],
      "line-start" : 513,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 17
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 513,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 26 ],
      "in-vars" : [ 9, 20, 12, 13, 10, 21 ],
      "exit" : false,
      "out-vars" : [ 12, 13, 10, 9, 20 ],
      "decl-vars" : [ ],
      "line-start" : 515,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "maps",
            "variable" : 22
          },
          "go-type" : 81,
          "kind" : "expression",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 81,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "maps",
            "variable" : 21
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 515,
      "code" : "b.maps = maps",
      "entry" : false,
      "use-vars" : [ 9, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 9, 20, 12, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 24, 12, 13, 10, 9, 20 ],
      "decl-vars" : [ 24 ],
      "line-start" : 517,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "processed"
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 6,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 6,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "go-type" : 145,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 145,
          "kind" : "expression",
          "rest" : [ {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Sections",
                "variable" : 23
              },
              "go-type" : 55,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "file",
                  "variable" : 18
                },
                "go-type" : 25,
                "kind" : "expression",
                "target" : {
                  "go-type" : 14,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "b",
                    "variable" : 9
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 146,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "make"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 517,
      "code" : "processed := make([]bool, len(b.file.Sections))",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28, 96 ],
      "in-vars" : [ 24, 12, 13, 10, 9, 20 ],
      "exit" : false,
      "out-vars" : [ 12, 26, 25, 13, 10, 9, 20, 24 ],
      "decl-vars" : [ 25, 26 ],
      "line-start" : 518,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Sections",
            "variable" : 23
          },
          "go-type" : 55,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "file",
              "variable" : 18
            },
            "go-type" : 25,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "section"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 635,
      "code" : "for i, section := range b.file.Sections {\n\tif processed[i] {\n\t\tcontinue\n\t}\n\n\tdata, err := section.Data()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif len(data) == 0 {\n\t\tcontinue\n\t}\n\n\tif section.Type == elf.SHT_REL {\n\t\trsection := b.file.Sections[section.Info]\n\n\t\tprocessed[i] = true\n\t\tprocessed[section.Info] = true\n\n\t\tsecName := rsection.Name\n\n\t\tisKprobe := strings.HasPrefix(secName, \"kprobe/\")\n\t\tisKretprobe := strings.HasPrefix(secName, \"kretprobe/\")\n\t\tisCgroupSkb := strings.HasPrefix(secName, \"cgroup/skb\")\n\t\tisCgroupSock := strings.HasPrefix(secName, \"cgroup/sock\")\n\t\tisSocketFilter := strings.HasPrefix(secName, \"socket\")\n\t\tisTracepoint := strings.HasPrefix(secName, \"tracepoint/\")\n\t\tisSchedCls := strings.HasPrefix(secName, \"sched_cls/\")\n\t\tisSchedAct := strings.HasPrefix(secName, \"sched_act/\")\n\n\t\tvar progType uint32\n\t\tswitch {\n\t\tcase isKprobe:\n\t\t\tfallthrough\n\t\tcase isKretprobe:\n\t\t\tprogType = uint32(C.BPF_PROG_TYPE_KPROBE)\n\t\tcase isCgroupSkb:\n\t\t\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SKB)\n\t\tcase isCgroupSock:\n\t\t\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SOCK)\n\t\tcase isSocketFilter:\n\t\t\tprogType = uint32(C.BPF_PROG_TYPE_SOCKET_FILTER)\n\t\tcase isTracepoint:\n\t\t\tprogType = uint32(C.BPF_PROG_TYPE_TRACEPOINT)\n\t\tcase isSchedCls:\n\t\t\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_CLS)\n\t\tcase isSchedAct:\n\t\t\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_ACT)\n\t\t}\n\n\t\tif isKprobe || isKretprobe || isCgroupSkb || isCgroupSock || isSocketFilter || isTracepoint || isSchedCls || isSchedAct {\n\t\t\trdata, err := rsection.Data()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tif len(rdata) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\terr = b.relocate(data, rdata)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tinsns := (*C.struct_bpf_insn)(unsafe.Pointer(&rdata[0]))\n\n\t\t\tprogFd, err := C.bpf_prog_load(progType,\n\t\t\t\tinsns, C.int(rsection.Size),\n\t\t\t\t(*C.char)(lp), C.int(version),\n\t\t\t\t(*C.char)(unsafe.Pointer(&b.log[0])), C.int(len(b.log)))\n\t\t\tif progFd < 0 {\n\t\t\t\treturn fmt.Errorf(\"error while loading %q (%v):\\n%s\", secName, err, b.log)\n\t\t\t}\n\n\t\t\tswitch {\n\t\t\tcase isKprobe:\n\t\t\t\tfallthrough\n\t\t\tcase isKretprobe:\n\t\t\t\tb.probes[secName] = &Kprobe{\n\t\t\t\t\tName:  secName,\n\t\t\t\t\tinsns: insns,\n\t\t\t\t\tfd:    int(progFd),\n\t\t\t\t\tefd:   -1,\n\t\t\t\t}\n\t\t\tcase isCgroupSkb:\n\t\t\t\tfallthrough\n\t\t\tcase isCgroupSock:\n\t\t\t\tb.cgroupPrograms[secName] = &CgroupProgram{\n\t\t\t\t\tName:  secName,\n\t\t\t\t\tinsns: insns,\n\t\t\t\t\tfd:    int(progFd),\n\t\t\t\t}\n\t\t\tcase isSocketFilter:\n\t\t\t\tb.socketFilters[secName] = &SocketFilter{\n\t\t\t\t\tName:  secName,\n\t\t\t\t\tinsns: insns,\n\t\t\t\t\tfd:    int(progFd),\n\t\t\t\t}\n\t\t\tcase isTracepoint:\n\t\t\t\tb.tracepointPrograms[secName] = &TracepointProgram{\n\t\t\t\t\tName:  secName,\n\t\t\t\t\tinsns: insns,\n\t\t\t\t\tfd:    int(progFd),\n\t\t\t\t}\n\t\t\tcase isSchedCls:\n\t\t\t\tfallthrough\n\t\t\tcase isSchedAct:\n\t\t\t\tb.schedPrograms[secName] = &SchedProgram{\n\t\t\t\t\tName:  secName,\n\t\t\t\t\tinsns: insns,\n\t\t\t\t\tfd:    int(progFd),\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29, 30 ],
      "in-vars" : [ 24, 12, 26, 25, 13, 10, 9, 20 ],
      "exit" : false,
      "out-vars" : [ 25, 13, 10, 9, 20, 24, 12, 26 ],
      "decl-vars" : [ ],
      "line-start" : 519,
      "ast" : {
        "condition" : {
          "go-type" : 6,
          "index" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 25
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 145,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "processed",
              "variable" : 24
            }
          },
          "type" : "index"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 521,
      "code" : "if processed[i] {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 24, 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 12, 13, 10, 9, 20, 24 ],
      "exit" : false,
      "out-vars" : [ 13, 10, 9, 20, 24, 12 ],
      "decl-vars" : [ ],
      "line-start" : 520,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 520,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 25, 13, 10, 9, 20, 24, 12, 26 ],
      "exit" : false,
      "out-vars" : [ 12, 26, 13, 28, 27, 9, 20, 24, 25, 10 ],
      "decl-vars" : [ 27, 28 ],
      "line-start" : 523,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Data"
            },
            "go-type" : 150,
            "kind" : "expression",
            "target" : {
              "go-type" : 56,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "section",
                "variable" : 26
              }
            },
            "type" : "selector"
          },
          "go-type" : 149,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 523,
      "code" : "data, err := section.Data()",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32, 33 ],
      "in-vars" : [ 9, 12, 13, 25, 10, 28, 27, 20, 24, 26 ],
      "exit" : false,
      "out-vars" : [ 26, 13, 10, 24, 12, 25, 28, 27, 9, 20 ],
      "decl-vars" : [ ],
      "line-start" : 524,
      "ast" : {
        "condition" : {
          "go-type" : 127,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 27
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 131,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 526,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 13, 27, 12 ],
      "exit" : false,
      "out-vars" : [ 12, 13 ],
      "decl-vars" : [ ],
      "line-start" : 525,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 27
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 525,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34, 35 ],
      "in-vars" : [ 12, 13, 10, 9, 20, 24, 26, 25, 28 ],
      "exit" : false,
      "out-vars" : [ 28, 20, 12, 26, 25, 13, 10, 9, 24 ],
      "decl-vars" : [ ],
      "line-start" : 528,
      "ast" : {
        "condition" : {
          "go-type" : 127,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 28
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 151,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 530,
      "code" : "if len(data) == 0 {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 24, 12, 13, 10, 9, 20 ],
      "exit" : false,
      "out-vars" : [ 13, 10, 9, 20, 24, 12 ],
      "decl-vars" : [ ],
      "line-start" : 529,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 529,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27, 36 ],
      "in-vars" : [ 25, 13, 10, 28, 20, 24, 12, 26, 9 ],
      "exit" : false,
      "out-vars" : [ 9, 12, 10, 20, 24, 26, 25, 13, 28 ],
      "decl-vars" : [ ],
      "line-start" : 532,
      "ast" : {
        "condition" : {
          "go-type" : 127,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Type",
              "variable" : 29
            },
            "go-type" : 61,
            "kind" : "expression",
            "target" : {
              "go-type" : 56,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "section",
                "variable" : 26
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 61,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "9"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 634,
      "code" : "if section.Type == elf.SHT_REL {\n\trsection := b.file.Sections[section.Info]\n\n\tprocessed[i] = true\n\tprocessed[section.Info] = true\n\n\tsecName := rsection.Name\n\n\tisKprobe := strings.HasPrefix(secName, \"kprobe/\")\n\tisKretprobe := strings.HasPrefix(secName, \"kretprobe/\")\n\tisCgroupSkb := strings.HasPrefix(secName, \"cgroup/skb\")\n\tisCgroupSock := strings.HasPrefix(secName, \"cgroup/sock\")\n\tisSocketFilter := strings.HasPrefix(secName, \"socket\")\n\tisTracepoint := strings.HasPrefix(secName, \"tracepoint/\")\n\tisSchedCls := strings.HasPrefix(secName, \"sched_cls/\")\n\tisSchedAct := strings.HasPrefix(secName, \"sched_act/\")\n\n\tvar progType uint32\n\tswitch {\n\tcase isKprobe:\n\t\tfallthrough\n\tcase isKretprobe:\n\t\tprogType = uint32(C.BPF_PROG_TYPE_KPROBE)\n\tcase isCgroupSkb:\n\t\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SKB)\n\tcase isCgroupSock:\n\t\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SOCK)\n\tcase isSocketFilter:\n\t\tprogType = uint32(C.BPF_PROG_TYPE_SOCKET_FILTER)\n\tcase isTracepoint:\n\t\tprogType = uint32(C.BPF_PROG_TYPE_TRACEPOINT)\n\tcase isSchedCls:\n\t\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_CLS)\n\tcase isSchedAct:\n\t\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_ACT)\n\t}\n\n\tif isKprobe || isKretprobe || isCgroupSkb || isCgroupSock || isSocketFilter || isTracepoint || isSchedCls || isSchedAct {\n\t\trdata, err := rsection.Data()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif len(rdata) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\terr = b.relocate(data, rdata)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tinsns := (*C.struct_bpf_insn)(unsafe.Pointer(&rdata[0]))\n\n\t\tprogFd, err := C.bpf_prog_load(progType,\n\t\t\tinsns, C.int(rsection.Size),\n\t\t\t(*C.char)(lp), C.int(version),\n\t\t\t(*C.char)(unsafe.Pointer(&b.log[0])), C.int(len(b.log)))\n\t\tif progFd < 0 {\n\t\t\treturn fmt.Errorf(\"error while loading %q (%v):\\n%s\", secName, err, b.log)\n\t\t}\n\n\t\tswitch {\n\t\tcase isKprobe:\n\t\t\tfallthrough\n\t\tcase isKretprobe:\n\t\t\tb.probes[secName] = &Kprobe{\n\t\t\t\tName:  secName,\n\t\t\t\tinsns: insns,\n\t\t\t\tfd:    int(progFd),\n\t\t\t\tefd:   -1,\n\t\t\t}\n\t\tcase isCgroupSkb:\n\t\t\tfallthrough\n\t\tcase isCgroupSock:\n\t\t\tb.cgroupPrograms[secName] = &CgroupProgram{\n\t\t\t\tName:  secName,\n\t\t\t\tinsns: insns,\n\t\t\t\tfd:    int(progFd),\n\t\t\t}\n\t\tcase isSocketFilter:\n\t\t\tb.socketFilters[secName] = &SocketFilter{\n\t\t\t\tName:  secName,\n\t\t\t\tinsns: insns,\n\t\t\t\tfd:    int(progFd),\n\t\t\t}\n\t\tcase isTracepoint:\n\t\t\tb.tracepointPrograms[secName] = &TracepointProgram{\n\t\t\t\tName:  secName,\n\t\t\t\tinsns: insns,\n\t\t\t\tfd:    int(progFd),\n\t\t\t}\n\t\tcase isSchedCls:\n\t\t\tfallthrough\n\t\tcase isSchedAct:\n\t\t\tb.schedPrograms[secName] = &SchedProgram{\n\t\t\t\tName:  secName,\n\t\t\t\tinsns: insns,\n\t\t\t\tfd:    int(progFd),\n\t\t\t}\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 13, 28, 20, 12, 26, 25, 9, 24, 10 ],
      "exit" : false,
      "out-vars" : [ 9, 20, 24, 26, 13, 10, 12, 25, 31, 28 ],
      "decl-vars" : [ 31 ],
      "line-start" : 533,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rsection"
          }
        } ],
        "right" : [ {
          "go-type" : 56,
          "index" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Info",
              "variable" : 30
            },
            "go-type" : 42,
            "kind" : "expression",
            "target" : {
              "go-type" : 56,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "section",
                "variable" : 26
              }
            },
            "type" : "selector"
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Sections",
              "variable" : 23
            },
            "go-type" : 55,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "file",
                "variable" : 18
              },
              "go-type" : 25,
              "kind" : "expression",
              "target" : {
                "go-type" : 14,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "b",
                  "variable" : 9
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 533,
      "code" : "rsection := b.file.Sections[section.Info]",
      "entry" : false,
      "use-vars" : [ 26, 9 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 38 ],
      "in-vars" : [ 24, 25, 13, 31, 28, 9, 12, 26, 10, 20 ],
      "exit" : false,
      "out-vars" : [ 20, 12, 10, 9, 24, 26, 13, 31, 28 ],
      "decl-vars" : [ ],
      "line-start" : 535,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "index" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 25
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 145,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "processed",
              "variable" : 24
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 535,
      "code" : "processed[i] = true",
      "entry" : false,
      "use-vars" : [ 24, 25 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 39 ],
      "in-vars" : [ 26, 10, 9, 20, 24, 12, 13, 31, 28 ],
      "exit" : false,
      "out-vars" : [ 20, 24, 12, 13, 31, 10, 28, 9 ],
      "decl-vars" : [ ],
      "line-start" : 536,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "index" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Info",
              "variable" : 30
            },
            "go-type" : 42,
            "kind" : "expression",
            "target" : {
              "go-type" : 56,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "section",
                "variable" : 26
              }
            },
            "type" : "selector"
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 145,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "processed",
              "variable" : 24
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 536,
      "code" : "processed[section.Info] = true",
      "entry" : false,
      "use-vars" : [ 26, 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 24, 12, 13, 31, 10, 28, 9, 20 ],
      "exit" : false,
      "out-vars" : [ 12, 28, 9, 33, 20, 24, 13, 31, 10 ],
      "decl-vars" : [ 33 ],
      "line-start" : 538,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "secName"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Name",
            "variable" : 32
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 56,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rsection",
              "variable" : 31
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 538,
      "code" : "secName := rsection.Name",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 13, 31, 28, 9, 33, 20, 12, 24, 10 ],
      "exit" : false,
      "out-vars" : [ 12, 13, 31, 28, 9, 33, 20, 24, 34, 10 ],
      "decl-vars" : [ 34 ],
      "line-start" : 540,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isKprobe"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 33
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "kprobe/"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 152,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "strings"
            },
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "HasPrefix"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 540,
      "code" : "isKprobe := strings.HasPrefix(secName, \"kprobe/\")",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42 ],
      "in-vars" : [ 28, 9, 34, 33, 20, 10, 24, 12, 13, 31 ],
      "exit" : false,
      "out-vars" : [ 12, 13, 28, 9, 36, 33, 20, 24, 31, 10, 34 ],
      "decl-vars" : [ 36 ],
      "line-start" : 541,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isKretprobe"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 33
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "kretprobe/"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 152,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "strings"
            },
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "HasPrefix"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 541,
      "code" : "isKretprobe := strings.HasPrefix(secName, \"kretprobe/\")",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 31, 28, 34, 24, 13, 20, 12, 10, 9, 36, 33 ],
      "exit" : false,
      "out-vars" : [ 34, 36, 10, 12, 13, 31, 9, 37, 33, 20, 24, 28 ],
      "decl-vars" : [ 37 ],
      "line-start" : 542,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isCgroupSkb"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 33
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "cgroup/skb"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 152,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "strings"
            },
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "HasPrefix"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 542,
      "code" : "isCgroupSkb := strings.HasPrefix(secName, \"cgroup/skb\")",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44 ],
      "in-vars" : [ 10, 9, 34, 36, 37, 33, 24, 31, 20, 12, 13, 28 ],
      "exit" : false,
      "out-vars" : [ 10, 28, 37, 38, 33, 24, 13, 31, 9, 34, 36, 20, 12 ],
      "decl-vars" : [ 38 ],
      "line-start" : 543,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isCgroupSock"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 33
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "cgroup/sock"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 152,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "strings"
            },
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "HasPrefix"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 543,
      "code" : "isCgroupSock := strings.HasPrefix(secName, \"cgroup/sock\")",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45 ],
      "in-vars" : [ 36, 20, 31, 10, 33, 24, 12, 13, 9, 34, 37, 38, 28 ],
      "exit" : false,
      "out-vars" : [ 9, 37, 31, 13, 28, 36, 38, 24, 10, 20, 12, 34, 39, 33 ],
      "decl-vars" : [ 39 ],
      "line-start" : 544,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isSocketFilter"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 33
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "socket"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 152,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "strings"
            },
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "HasPrefix"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 544,
      "code" : "isSocketFilter := strings.HasPrefix(secName, \"socket\")",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46 ],
      "in-vars" : [ 12, 10, 9, 37, 39, 20, 24, 28, 31, 36, 38, 33, 34, 13 ],
      "exit" : false,
      "out-vars" : [ 34, 33, 9, 12, 10, 36, 20, 40, 24, 13, 31, 28, 37, 38, 39 ],
      "decl-vars" : [ 40 ],
      "line-start" : 545,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isTracepoint"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 33
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "tracepoint/"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 152,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "strings"
            },
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "HasPrefix"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 545,
      "code" : "isTracepoint := strings.HasPrefix(secName, \"tracepoint/\")",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 9, 39, 40, 33, 31, 34, 36, 20, 13, 10, 37, 38, 24, 12, 28 ],
      "exit" : false,
      "out-vars" : [ 37, 13, 34, 36, 38, 40, 41, 39, 33, 20, 24, 31, 9, 12, 10, 28 ],
      "decl-vars" : [ 41 ],
      "line-start" : 546,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isSchedCls"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 33
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "sched_cls/"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 152,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "strings"
            },
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "HasPrefix"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 546,
      "code" : "isSchedCls := strings.HasPrefix(secName, \"sched_cls/\")",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 20, 28, 9, 34, 33, 13, 41, 37, 24, 12, 36, 38, 39, 40, 31, 10 ],
      "exit" : false,
      "out-vars" : [ 36, 37, 24, 12, 34, 42, 39, 20, 31, 9, 13, 40, 38, 33, 10, 28, 41 ],
      "decl-vars" : [ 42 ],
      "line-start" : 547,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isSchedAct"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 33
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "sched_act/"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 152,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "strings"
            },
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "HasPrefix"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 547,
      "code" : "isSchedAct := strings.HasPrefix(secName, \"sched_act/\")",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 33, 10, 28, 13, 41, 9, 36, 20, 12, 42, 24, 31, 34, 37, 38, 39, 40 ],
      "exit" : false,
      "out-vars" : [ 40, 41, 38, 39, 42, 37, 35, 12, 31, 10, 28, 33, 20, 24, 13, 9, 34, 36 ],
      "decl-vars" : [ 35 ],
      "line-start" : 549,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 42,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 42,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "progType"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 549,
      "code" : "var progType uint32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50, 52, 54, 56, 58, 60, 62, 64, 66 ],
      "in-vars" : [ 40, 24, 28, 12, 31, 41, 37, 38, 42, 36, 39, 20, 35, 13, 10, 9, 34, 33 ],
      "exit" : false,
      "out-vars" : [ 41, 38, 39, 24, 42, 40, 12, 10, 28, 36, 31, 35, 13, 9, 34, 37, 33, 20 ],
      "decl-vars" : [ ],
      "line-start" : 550,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 567,
      "code" : "switch {\ncase isKprobe:\n\tfallthrough\ncase isKretprobe:\n\tprogType = uint32(C.BPF_PROG_TYPE_KPROBE)\ncase isCgroupSkb:\n\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SKB)\ncase isCgroupSock:\n\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SOCK)\ncase isSocketFilter:\n\tprogType = uint32(C.BPF_PROG_TYPE_SOCKET_FILTER)\ncase isTracepoint:\n\tprogType = uint32(C.BPF_PROG_TYPE_TRACEPOINT)\ncase isSchedCls:\n\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_CLS)\ncase isSchedAct:\n\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_ACT)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51 ],
      "in-vars" : [ 9, 42, 39, 10, 40, 20, 24, 28, 41, 38, 33, 13, 34, 36, 37, 12, 31 ],
      "exit" : false,
      "out-vars" : [ 36, 37, 38, 33, 20, 24, 42, 34, 12, 13, 28, 41, 9, 39, 40, 31, 10 ],
      "decl-vars" : [ ],
      "line-start" : 551,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isKprobe",
            "variable" : 34
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 552,
      "code" : "case isKprobe:\n\tfallthrough",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 37, 40, 24, 13, 28, 9, 36, 34, 38, 20, 10, 41, 42, 31, 33, 12, 39 ],
      "exit" : false,
      "out-vars" : [ 39, 24, 12, 41, 34, 36, 40, 13, 28, 20, 9, 42, 38, 10, 37, 33, 31 ],
      "decl-vars" : [ ],
      "line-start" : 552,
      "ast" : {
        "kind" : "statement",
        "type" : "fallthrough"
      },
      "assign-vars" : [ ],
      "line-end" : 552,
      "code" : "fallthrough",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 28, 40, 36, 31, 9, 42, 37, 33, 20, 24, 13, 41, 38, 39, 12, 10, 34 ],
      "exit" : false,
      "out-vars" : [ 13, 31, 28, 9, 42, 24, 37, 38, 20, 12, 36, 33, 39, 40, 10, 41, 34 ],
      "decl-vars" : [ ],
      "line-start" : 553,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isKretprobe",
            "variable" : 36
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 554,
      "code" : "case isKretprobe:\n\tprogType = uint32(C.BPF_PROG_TYPE_KPROBE)",
      "entry" : false,
      "use-vars" : [ 36 ]
    }, {
      "update-vars" : [ 35 ],
      "successors" : [ 66 ],
      "in-vars" : [ 37, 40, 38, 33, 12, 41, 42, 36, 24, 13, 31, 9, 34, 39, 20, 10, 28 ],
      "exit" : false,
      "out-vars" : [ 37, 12, 13, 34, 36, 35, 39, 40, 24, 31, 10, 28, 9, 38, 33, 20, 41, 42 ],
      "decl-vars" : [ ],
      "line-start" : 554,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 42,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "progType",
            "variable" : 35
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 42,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 42,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "BPF_PROG_TYPE_KPROBE"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 35 ],
      "line-end" : 554,
      "code" : "progType = uint32(C.BPF_PROG_TYPE_KPROBE)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 41, 9, 36, 33, 24, 13, 34, 39, 10, 38, 40, 20, 42, 37, 12, 31, 28 ],
      "exit" : false,
      "out-vars" : [ 41, 9, 34, 39, 10, 42, 36, 37, 12, 13, 28, 38, 40, 33, 20, 24, 31 ],
      "decl-vars" : [ ],
      "line-start" : 555,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isCgroupSkb",
            "variable" : 37
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 556,
      "code" : "case isCgroupSkb:\n\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SKB)",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ 35 ],
      "successors" : [ 66 ],
      "in-vars" : [ 34, 37, 38, 40, 24, 13, 28, 41, 9, 42, 33, 31, 10, 36, 39, 20, 12 ],
      "exit" : false,
      "out-vars" : [ 34, 38, 33, 35, 28, 24, 12, 41, 42, 36, 37, 39, 40, 20, 13, 9, 31, 10 ],
      "decl-vars" : [ ],
      "line-start" : 556,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 42,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "progType",
            "variable" : 35
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 42,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 42,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "BPF_PROG_TYPE_CGROUP_SKB"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 35 ],
      "line-end" : 556,
      "code" : "progType = uint32(C.BPF_PROG_TYPE_CGROUP_SKB)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57 ],
      "in-vars" : [ 9, 37, 40, 33, 20, 13, 36, 39, 31, 41, 12, 28, 42, 34, 38, 24, 10 ],
      "exit" : false,
      "out-vars" : [ 38, 31, 42, 36, 37, 28, 39, 40, 24, 12, 13, 41, 9, 34, 33, 20, 10 ],
      "decl-vars" : [ ],
      "line-start" : 557,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isCgroupSock",
            "variable" : 38
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 558,
      "code" : "case isCgroupSock:\n\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SOCK)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 35 ],
      "successors" : [ 66 ],
      "in-vars" : [ 28, 36, 33, 13, 39, 31, 34, 38, 40, 20, 12, 41, 9, 42, 37, 24, 10 ],
      "exit" : false,
      "out-vars" : [ 41, 42, 20, 34, 33, 35, 31, 38, 39, 24, 13, 9, 36, 37, 40, 12, 10, 28 ],
      "decl-vars" : [ ],
      "line-start" : 558,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 42,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "progType",
            "variable" : 35
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 42,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 42,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "BPF_PROG_TYPE_CGROUP_SOCK"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 35 ],
      "line-end" : 558,
      "code" : "progType = uint32(C.BPF_PROG_TYPE_CGROUP_SOCK)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59 ],
      "in-vars" : [ 34, 37, 40, 28, 39, 20, 12, 41, 42, 36, 38, 33, 24, 31, 9, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 41, 42, 38, 24, 28, 36, 37, 33, 20, 13, 34, 40, 31, 9, 39, 12, 10 ],
      "decl-vars" : [ ],
      "line-start" : 559,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isSocketFilter",
            "variable" : 39
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 560,
      "code" : "case isSocketFilter:\n\tprogType = uint32(C.BPF_PROG_TYPE_SOCKET_FILTER)",
      "entry" : false,
      "use-vars" : [ 39 ]
    }, {
      "update-vars" : [ 35 ],
      "successors" : [ 66 ],
      "in-vars" : [ 34, 37, 12, 36, 40, 38, 33, 24, 28, 41, 9, 20, 13, 31, 10, 42, 39 ],
      "exit" : false,
      "out-vars" : [ 40, 12, 37, 36, 38, 20, 24, 35, 13, 42, 39, 10, 28, 9, 34, 33, 31, 41 ],
      "decl-vars" : [ ],
      "line-start" : 560,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 42,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "progType",
            "variable" : 35
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 42,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 42,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "BPF_PROG_TYPE_SOCKET_FILTER"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 35 ],
      "line-end" : 560,
      "code" : "progType = uint32(C.BPF_PROG_TYPE_SOCKET_FILTER)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61 ],
      "in-vars" : [ 12, 9, 36, 33, 20, 24, 42, 38, 39, 31, 10, 41, 34, 40, 37, 13, 28 ],
      "exit" : false,
      "out-vars" : [ 9, 24, 12, 13, 38, 41, 34, 36, 20, 31, 10, 42, 37, 39, 40, 33, 28 ],
      "decl-vars" : [ ],
      "line-start" : 561,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isTracepoint",
            "variable" : 40
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 562,
      "code" : "case isTracepoint:\n\tprogType = uint32(C.BPF_PROG_TYPE_TRACEPOINT)",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ 35 ],
      "successors" : [ 66 ],
      "in-vars" : [ 39, 13, 37, 40, 28, 34, 36, 33, 12, 10, 41, 9, 42, 31, 38, 20, 24 ],
      "exit" : false,
      "out-vars" : [ 42, 37, 39, 24, 31, 10, 35, 13, 28, 41, 9, 20, 34, 36, 38, 40, 33, 12 ],
      "decl-vars" : [ ],
      "line-start" : 562,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 42,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "progType",
            "variable" : 35
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 42,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 42,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "BPF_PROG_TYPE_TRACEPOINT"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 35 ],
      "line-end" : 562,
      "code" : "progType = uint32(C.BPF_PROG_TYPE_TRACEPOINT)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63 ],
      "in-vars" : [ 28, 9, 42, 39, 33, 34, 31, 10, 37, 38, 40, 12, 13, 41, 36, 20, 24 ],
      "exit" : false,
      "out-vars" : [ 40, 9, 42, 34, 37, 39, 33, 24, 41, 28, 12, 10, 38, 20, 13, 31, 36 ],
      "decl-vars" : [ ],
      "line-start" : 563,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isSchedCls",
            "variable" : 41
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 564,
      "code" : "case isSchedCls:\n\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_CLS)",
      "entry" : false,
      "use-vars" : [ 41 ]
    }, {
      "update-vars" : [ 35 ],
      "successors" : [ 66 ],
      "in-vars" : [ 38, 39, 31, 42, 40, 41, 36, 33, 24, 12, 28, 34, 37, 20, 13, 10, 9 ],
      "exit" : false,
      "out-vars" : [ 38, 40, 31, 10, 41, 36, 33, 20, 35, 9, 37, 28, 24, 13, 39, 12, 42, 34 ],
      "decl-vars" : [ ],
      "line-start" : 564,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 42,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "progType",
            "variable" : 35
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 42,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 42,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "BPF_PROG_TYPE_SCHED_CLS"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 35 ],
      "line-end" : 564,
      "code" : "progType = uint32(C.BPF_PROG_TYPE_SCHED_CLS)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65 ],
      "in-vars" : [ 36, 37, 40, 12, 13, 31, 28, 41, 38, 39, 24, 9, 42, 33, 10, 34, 20 ],
      "exit" : false,
      "out-vars" : [ 12, 13, 20, 38, 40, 33, 24, 31, 37, 34, 36, 28, 42, 9, 39, 10, 41 ],
      "decl-vars" : [ ],
      "line-start" : 565,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isSchedAct",
            "variable" : 42
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 566,
      "code" : "case isSchedAct:\n\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_ACT)",
      "entry" : false,
      "use-vars" : [ 42 ]
    }, {
      "update-vars" : [ 35 ],
      "successors" : [ 66 ],
      "in-vars" : [ 41, 42, 36, 40, 20, 24, 13, 31, 9, 34, 38, 39, 33, 10, 37, 12, 28 ],
      "exit" : false,
      "out-vars" : [ 10, 34, 39, 33, 24, 12, 13, 41, 42, 37, 40, 9, 36, 20, 28, 38, 35, 31 ],
      "decl-vars" : [ ],
      "line-start" : 566,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 42,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "progType",
            "variable" : 35
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 42,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 42,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "BPF_PROG_TYPE_SCHED_ACT"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 35 ],
      "line-end" : 566,
      "code" : "progType = uint32(C.BPF_PROG_TYPE_SCHED_ACT)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27, 67 ],
      "in-vars" : [ 40, 20, 10, 41, 42, 34, 39, 24, 9, 36, 37, 38, 12, 13, 28, 33, 35, 31 ],
      "exit" : false,
      "out-vars" : [ 9, 37, 33, 20, 10, 28, 12, 39, 40, 24, 31, 41, 42, 34, 36, 38, 35, 13 ],
      "decl-vars" : [ ],
      "line-start" : 569,
      "ast" : {
        "condition" : {
          "go-type" : 6,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "left" : {
              "go-type" : 6,
              "kind" : "expression",
              "left" : {
                "go-type" : 6,
                "kind" : "expression",
                "left" : {
                  "go-type" : 6,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 6,
                    "kind" : "expression",
                    "left" : {
                      "go-type" : 6,
                      "kind" : "expression",
                      "left" : {
                        "go-type" : 6,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "isKprobe",
                          "variable" : 34
                        }
                      },
                      "operator" : "||",
                      "right" : {
                        "go-type" : 6,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "isKretprobe",
                          "variable" : 36
                        }
                      },
                      "type" : "binary"
                    },
                    "operator" : "||",
                    "right" : {
                      "go-type" : 6,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "isCgroupSkb",
                        "variable" : 37
                      }
                    },
                    "type" : "binary"
                  },
                  "operator" : "||",
                  "right" : {
                    "go-type" : 6,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "isCgroupSock",
                      "variable" : 38
                    }
                  },
                  "type" : "binary"
                },
                "operator" : "||",
                "right" : {
                  "go-type" : 6,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "isSocketFilter",
                    "variable" : 39
                  }
                },
                "type" : "binary"
              },
              "operator" : "||",
              "right" : {
                "go-type" : 6,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "isTracepoint",
                  "variable" : 40
                }
              },
              "type" : "binary"
            },
            "operator" : "||",
            "right" : {
              "go-type" : 6,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "isSchedCls",
                "variable" : 41
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "isSchedAct",
              "variable" : 42
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 633,
      "code" : "if isKprobe || isKretprobe || isCgroupSkb || isCgroupSock || isSocketFilter || isTracepoint || isSchedCls || isSchedAct {\n\trdata, err := rsection.Data()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif len(rdata) == 0 {\n\t\tcontinue\n\t}\n\n\terr = b.relocate(data, rdata)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tinsns := (*C.struct_bpf_insn)(unsafe.Pointer(&rdata[0]))\n\n\tprogFd, err := C.bpf_prog_load(progType,\n\t\tinsns, C.int(rsection.Size),\n\t\t(*C.char)(lp), C.int(version),\n\t\t(*C.char)(unsafe.Pointer(&b.log[0])), C.int(len(b.log)))\n\tif progFd < 0 {\n\t\treturn fmt.Errorf(\"error while loading %q (%v):\\n%s\", secName, err, b.log)\n\t}\n\n\tswitch {\n\tcase isKprobe:\n\t\tfallthrough\n\tcase isKretprobe:\n\t\tb.probes[secName] = &Kprobe{\n\t\t\tName:  secName,\n\t\t\tinsns: insns,\n\t\t\tfd:    int(progFd),\n\t\t\tefd:   -1,\n\t\t}\n\tcase isCgroupSkb:\n\t\tfallthrough\n\tcase isCgroupSock:\n\t\tb.cgroupPrograms[secName] = &CgroupProgram{\n\t\t\tName:  secName,\n\t\t\tinsns: insns,\n\t\t\tfd:    int(progFd),\n\t\t}\n\tcase isSocketFilter:\n\t\tb.socketFilters[secName] = &SocketFilter{\n\t\t\tName:  secName,\n\t\t\tinsns: insns,\n\t\t\tfd:    int(progFd),\n\t\t}\n\tcase isTracepoint:\n\t\tb.tracepointPrograms[secName] = &TracepointProgram{\n\t\t\tName:  secName,\n\t\t\tinsns: insns,\n\t\t\tfd:    int(progFd),\n\t\t}\n\tcase isSchedCls:\n\t\tfallthrough\n\tcase isSchedAct:\n\t\tb.schedPrograms[secName] = &SchedProgram{\n\t\t\tName:  secName,\n\t\t\tinsns: insns,\n\t\t\tfd:    int(progFd),\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 41, 42, 34, 36, 37, 38, 39, 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 68 ],
      "in-vars" : [ 33, 24, 40, 13, 10, 42, 36, 38, 39, 28, 41, 9, 34, 12, 37, 20, 35, 31 ],
      "exit" : false,
      "out-vars" : [ 38, 39, 24, 10, 28, 9, 42, 36, 40, 43, 20, 35, 12, 31, 34, 37, 13, 44, 41, 33 ],
      "decl-vars" : [ 44, 43 ],
      "line-start" : 570,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rdata"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Data"
            },
            "go-type" : 150,
            "kind" : "expression",
            "target" : {
              "go-type" : 56,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsection",
                "variable" : 31
              }
            },
            "type" : "selector"
          },
          "go-type" : 149,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 570,
      "code" : "rdata, err := rsection.Data()",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 69, 70 ],
      "in-vars" : [ 42, 34, 12, 31, 41, 9, 39, 28, 36, 38, 40, 33, 43, 24, 35, 44, 37, 20, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 36, 37, 9, 42, 39, 13, 28, 34, 38, 40, 33, 24, 12, 44, 31, 10, 41, 43, 20, 35 ],
      "decl-vars" : [ ],
      "line-start" : 571,
      "ast" : {
        "condition" : {
          "go-type" : 127,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 43
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 131,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 573,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 43, 12, 13 ],
      "exit" : false,
      "out-vars" : [ 12, 13 ],
      "decl-vars" : [ ],
      "line-start" : 572,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 43
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 572,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 71, 72 ],
      "in-vars" : [ 9, 34, 37, 35, 31, 28, 41, 38, 39, 20, 42, 33, 44, 13, 10, 36, 40, 24, 12 ],
      "exit" : false,
      "out-vars" : [ 24, 35, 31, 20, 36, 38, 39, 40, 12, 41, 34, 37, 9, 33, 13, 44, 10, 28, 42 ],
      "decl-vars" : [ ],
      "line-start" : 575,
      "ast" : {
        "condition" : {
          "go-type" : 127,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rdata",
                "variable" : 44
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 151,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 577,
      "code" : "if len(rdata) == 0 {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 44 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 9, 20, 24, 12, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 9, 20, 24, 12, 13, 10 ],
      "decl-vars" : [ ],
      "line-start" : 576,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 576,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 43 ],
      "successors" : [ 73 ],
      "in-vars" : [ 38, 35, 10, 44, 31, 28, 39, 40, 20, 41, 24, 12, 36, 37, 33, 13, 9, 42, 34 ],
      "exit" : false,
      "out-vars" : [ 41, 36, 37, 20, 35, 10, 9, 24, 12, 44, 31, 33, 13, 42, 34, 38, 39, 40, 43 ],
      "decl-vars" : [ ],
      "line-start" : 579,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 28
            }
          }, {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rdata",
              "variable" : 44
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "relocate"
            },
            "go-type" : 155,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 43 ],
      "line-end" : 579,
      "code" : "err = b.relocate(data, rdata)",
      "entry" : false,
      "use-vars" : [ 9, 28, 44 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 74, 75 ],
      "in-vars" : [ 43, 12, 13, 31, 33, 42, 38, 39, 10, 41, 20, 35, 9, 36, 37, 40, 24, 44, 34 ],
      "exit" : false,
      "out-vars" : [ 34, 36, 40, 12, 13, 38, 24, 35, 31, 10, 9, 42, 37, 39, 33, 43, 44, 41, 20 ],
      "decl-vars" : [ ],
      "line-start" : 580,
      "ast" : {
        "condition" : {
          "go-type" : 127,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 43
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 131,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 582,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 12, 13, 43 ],
      "exit" : false,
      "out-vars" : [ 12, 13 ],
      "decl-vars" : [ ],
      "line-start" : 581,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 43
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 581,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 76 ],
      "in-vars" : [ 37, 10, 38, 24, 35, 9, 42, 36, 40, 20, 13, 44, 31, 41, 34, 39, 33, 12 ],
      "exit" : false,
      "out-vars" : [ 10, 42, 20, 12, 41, 33, 37, 45, 24, 31, 9, 34, 39, 40, 35, 13, 36, 38 ],
      "decl-vars" : [ 45 ],
      "line-start" : 584,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "insns"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : -1,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 8,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "struct_bpf_insn"
              }
            },
            "go-type" : -1,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 138,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 7,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 138,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 138,
            "kind" : "expression",
            "target" : {
              "go-type" : 123,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 22,
                "index" : {
                  "go-type" : 5,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 21,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "rdata",
                    "variable" : 44
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 584,
      "code" : "insns := (*C.struct_bpf_insn)(unsafe.Pointer(&rdata[0]))",
      "entry" : false,
      "use-vars" : [ 44 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 77 ],
      "in-vars" : [ 38, 12, 41, 37, 9, 40, 39, 20, 35, 31, 10, 42, 36, 45, 24, 13, 34, 33 ],
      "exit" : false,
      "out-vars" : [ 42, 38, 13, 41, 9, 37, 39, 40, 45, 43, 24, 48, 36, 33, 12, 10, 34, 20 ],
      "decl-vars" : [ 43, 48 ],
      "line-start" : 586,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "progFd"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 42,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "progType",
              "variable" : 35
            }
          }, {
            "go-type" : -1,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "insns",
              "variable" : 45
            }
          }, {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Size",
                "variable" : 46
              },
              "go-type" : 45,
              "kind" : "expression",
              "target" : {
                "go-type" : 56,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "rsection",
                  "variable" : 31
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 8,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "coerced-to" : {
              "contained" : {
                "go-type" : -1,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 8,
                  "value" : "C"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "char"
                }
              },
              "go-type" : -1,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : -1,
            "kind" : "expression",
            "target" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lp",
                "variable" : 13
              }
            },
            "type" : "cast"
          }, {
            "arguments" : [ {
              "go-type" : 42,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "version",
                "variable" : 20
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 8,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "coerced-to" : {
              "contained" : {
                "go-type" : -1,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 8,
                  "value" : "C"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "char"
                }
              },
              "go-type" : -1,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : -1,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 138,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 7,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 138,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 138,
              "kind" : "expression",
              "target" : {
                "go-type" : 123,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 22,
                  "index" : {
                    "go-type" : 5,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "log",
                      "variable" : 47
                    },
                    "go-type" : 21,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 14,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "b",
                        "variable" : 9
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "arguments" : [ {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "log",
                  "variable" : 47
                },
                "go-type" : 21,
                "kind" : "expression",
                "target" : {
                  "go-type" : 14,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "b",
                    "variable" : 9
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 151,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 5,
              "kind" : "expression",
              "type" : "call"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 8,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "bpf_prog_load"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 589,
      "code" : "progFd, err := C.bpf_prog_load(progType,\n\tinsns, C.int(rsection.Size),\n\t(*C.char)(lp), C.int(version),\n\t(*C.char)(unsafe.Pointer(&b.log[0])), C.int(len(b.log)))",
      "entry" : false,
      "use-vars" : [ 35, 13, 20, 9, 45, 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 78, 79 ],
      "in-vars" : [ 9, 42, 43, 48, 41, 34, 39, 33, 20, 13, 37, 45, 24, 12, 10, 36, 38, 40 ],
      "exit" : false,
      "out-vars" : [ 36, 24, 12, 48, 42, 34, 38, 45, 41, 39, 40, 33, 10, 9, 37, 43, 20, 13 ],
      "decl-vars" : [ ],
      "line-start" : 590,
      "ast" : {
        "condition" : {
          "go-type" : -1,
          "kind" : "expression",
          "left" : {
            "go-type" : -1,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "progFd",
              "variable" : 48
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 157,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 592,
      "code" : "if progFd < 0 {\n\treturn fmt.Errorf(\"error while loading %q (%v):\\n%s\", secName, err, b.log)\n}",
      "entry" : false,
      "use-vars" : [ 48 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 9, 33, 43, 12, 13 ],
      "exit" : false,
      "out-vars" : [ 12, 13 ],
      "decl-vars" : [ ],
      "line-start" : 591,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "error while loading %q (%v):\n%s"
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 33
            }
          }, {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 43
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "log",
              "variable" : 47
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 158,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 10,
              "value" : "fmt"
            },
            "type" : "identifier",
            "value" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 591,
      "code" : "return fmt.Errorf(\"error while loading %q (%v):\\n%s\", secName, err, b.log)",
      "entry" : false,
      "use-vars" : [ 43, 9, 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27, 80, 82, 84, 86, 88, 90, 92, 94 ],
      "in-vars" : [ 37, 45, 13, 10, 42, 33, 39, 41, 9, 34, 36, 38, 40, 48, 24, 12, 20 ],
      "exit" : false,
      "out-vars" : [ 9, 40, 45, 24, 13, 10, 34, 37, 39, 48, 41, 20, 12, 42, 36, 38, 33 ],
      "decl-vars" : [ ],
      "line-start" : 594,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 632,
      "code" : "switch {\ncase isKprobe:\n\tfallthrough\ncase isKretprobe:\n\tb.probes[secName] = &Kprobe{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t\tefd:   -1,\n\t}\ncase isCgroupSkb:\n\tfallthrough\ncase isCgroupSock:\n\tb.cgroupPrograms[secName] = &CgroupProgram{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t}\ncase isSocketFilter:\n\tb.socketFilters[secName] = &SocketFilter{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t}\ncase isTracepoint:\n\tb.tracepointPrograms[secName] = &TracepointProgram{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t}\ncase isSchedCls:\n\tfallthrough\ncase isSchedAct:\n\tb.schedPrograms[secName] = &SchedProgram{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t}\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 81 ],
      "in-vars" : [ 10, 48, 34, 33, 45, 13, 9, 20, 24, 12 ],
      "exit" : false,
      "out-vars" : [ 13, 10, 33, 9, 45, 20, 24, 12, 48 ],
      "decl-vars" : [ ],
      "line-start" : 595,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isKprobe",
            "variable" : 34
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 596,
      "code" : "case isKprobe:\n\tfallthrough",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 83 ],
      "in-vars" : [ 45, 20, 10, 48, 33, 12, 13, 9, 24 ],
      "exit" : false,
      "out-vars" : [ 48, 9, 24, 12, 13, 10, 33, 45, 20 ],
      "decl-vars" : [ ],
      "line-start" : 596,
      "ast" : {
        "kind" : "statement",
        "type" : "fallthrough"
      },
      "assign-vars" : [ ],
      "line-end" : 596,
      "code" : "fallthrough",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 83 ],
      "in-vars" : [ 24, 12, 48, 9, 36, 33, 45, 20, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 48, 9, 45, 20, 33, 24, 12, 13, 10 ],
      "decl-vars" : [ ],
      "line-start" : 597,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isKretprobe",
            "variable" : 36
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 603,
      "code" : "case isKretprobe:\n\tb.probes[secName] = &Kprobe{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t\tefd:   -1,\n\t}",
      "entry" : false,
      "use-vars" : [ 36 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 27 ],
      "in-vars" : [ 9, 20, 48, 33, 45, 24, 12, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 9, 20, 24, 12, 13, 10 ],
      "decl-vars" : [ ],
      "line-start" : 598,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 90,
          "index" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 33
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "probes",
              "variable" : 49
            },
            "go-type" : 89,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 91,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 91,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Kprobe"
              }
            },
            "go-type" : 91,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Name",
                  "variable" : 50
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "secName",
                  "variable" : 33
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 51
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 45
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fd",
                  "variable" : 52
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "coerced-to" : {
                  "go-type" : 5,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 5,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "go-type" : -1,
                "kind" : "expression",
                "target" : {
                  "go-type" : -1,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "progFd",
                    "variable" : 48
                  }
                },
                "type" : "cast"
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "efd",
                  "variable" : 53
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 5,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "-1"
                }
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 603,
      "code" : "b.probes[secName] = &Kprobe{\n\tName:  secName,\n\tinsns: insns,\n\tfd:    int(progFd),\n\tefd:   -1,\n}",
      "entry" : false,
      "use-vars" : [ 33, 45, 48, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 85 ],
      "in-vars" : [ 24, 12, 9, 37, 33, 45, 48, 20, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 48, 45, 20, 12, 10, 9, 33, 24, 13 ],
      "decl-vars" : [ ],
      "line-start" : 604,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isCgroupSkb",
            "variable" : 37
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 605,
      "code" : "case isCgroupSkb:\n\tfallthrough",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 87 ],
      "in-vars" : [ 10, 48, 20, 24, 13, 9, 33, 45, 12 ],
      "exit" : false,
      "out-vars" : [ 10, 33, 45, 24, 12, 48, 9, 20, 13 ],
      "decl-vars" : [ ],
      "line-start" : 605,
      "ast" : {
        "kind" : "statement",
        "type" : "fallthrough"
      },
      "assign-vars" : [ ],
      "line-end" : 605,
      "code" : "fallthrough",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 87 ],
      "in-vars" : [ 10, 20, 24, 12, 48, 9, 38, 33, 45, 13 ],
      "exit" : false,
      "out-vars" : [ 9, 33, 45, 20, 24, 12, 48, 13, 10 ],
      "decl-vars" : [ ],
      "line-start" : 606,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isCgroupSock",
            "variable" : 38
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 611,
      "code" : "case isCgroupSock:\n\tb.cgroupPrograms[secName] = &CgroupProgram{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t}",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 27 ],
      "in-vars" : [ 33, 45, 20, 12, 13, 48, 9, 24, 10 ],
      "exit" : false,
      "out-vars" : [ 24, 12, 13, 10, 9, 20 ],
      "decl-vars" : [ ],
      "line-start" : 607,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 94,
          "index" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 33
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cgroupPrograms",
              "variable" : 54
            },
            "go-type" : 93,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 94,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 95,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 95,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "CgroupProgram"
              }
            },
            "go-type" : 95,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Name",
                  "variable" : 55
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "secName",
                  "variable" : 33
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 56
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 45
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fd",
                  "variable" : 57
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "coerced-to" : {
                  "go-type" : 5,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 5,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "go-type" : -1,
                "kind" : "expression",
                "target" : {
                  "go-type" : -1,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "progFd",
                    "variable" : 48
                  }
                },
                "type" : "cast"
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 611,
      "code" : "b.cgroupPrograms[secName] = &CgroupProgram{\n\tName:  secName,\n\tinsns: insns,\n\tfd:    int(progFd),\n}",
      "entry" : false,
      "use-vars" : [ 9, 48, 33, 45 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 89 ],
      "in-vars" : [ 12, 13, 10, 9, 39, 33, 24, 48, 45, 20 ],
      "exit" : false,
      "out-vars" : [ 33, 45, 10, 24, 12, 13, 48, 9, 20 ],
      "decl-vars" : [ ],
      "line-start" : 612,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isSocketFilter",
            "variable" : 39
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 617,
      "code" : "case isSocketFilter:\n\tb.socketFilters[secName] = &SocketFilter{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t}",
      "entry" : false,
      "use-vars" : [ 39 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 27 ],
      "in-vars" : [ 45, 20, 12, 13, 48, 9, 33, 24, 10 ],
      "exit" : false,
      "out-vars" : [ 24, 12, 13, 10, 9, 20 ],
      "decl-vars" : [ ],
      "line-start" : 613,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 98,
          "index" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 33
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "socketFilters",
              "variable" : 58
            },
            "go-type" : 97,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 98,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 99,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 99,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SocketFilter"
              }
            },
            "go-type" : 99,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Name",
                  "variable" : 59
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "secName",
                  "variable" : 33
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 60
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 45
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fd",
                  "variable" : 61
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "coerced-to" : {
                  "go-type" : 5,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 5,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "go-type" : -1,
                "kind" : "expression",
                "target" : {
                  "go-type" : -1,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "progFd",
                    "variable" : 48
                  }
                },
                "type" : "cast"
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 617,
      "code" : "b.socketFilters[secName] = &SocketFilter{\n\tName:  secName,\n\tinsns: insns,\n\tfd:    int(progFd),\n}",
      "entry" : false,
      "use-vars" : [ 45, 48, 9, 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 91 ],
      "in-vars" : [ 20, 13, 10, 48, 33, 45, 24, 12, 9, 40 ],
      "exit" : false,
      "out-vars" : [ 24, 12, 13, 48, 9, 33, 45, 20, 10 ],
      "decl-vars" : [ ],
      "line-start" : 618,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isTracepoint",
            "variable" : 40
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 623,
      "code" : "case isTracepoint:\n\tb.tracepointPrograms[secName] = &TracepointProgram{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t}",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 27 ],
      "in-vars" : [ 48, 45, 20, 24, 13, 10, 9, 33, 12 ],
      "exit" : false,
      "out-vars" : [ 9, 20, 24, 12, 13, 10 ],
      "decl-vars" : [ ],
      "line-start" : 619,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 101,
          "index" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 33
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tracepointPrograms",
              "variable" : 62
            },
            "go-type" : 100,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 101,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 102,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 102,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "TracepointProgram"
              }
            },
            "go-type" : 102,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Name",
                  "variable" : 63
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "secName",
                  "variable" : 33
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 64
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 45
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fd",
                  "variable" : 65
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "coerced-to" : {
                  "go-type" : 5,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 5,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "go-type" : -1,
                "kind" : "expression",
                "target" : {
                  "go-type" : -1,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "progFd",
                    "variable" : 48
                  }
                },
                "type" : "cast"
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 623,
      "code" : "b.tracepointPrograms[secName] = &TracepointProgram{\n\tName:  secName,\n\tinsns: insns,\n\tfd:    int(progFd),\n}",
      "entry" : false,
      "use-vars" : [ 45, 48, 9, 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 93 ],
      "in-vars" : [ 48, 9, 33, 24, 10, 41, 45, 20, 12, 13 ],
      "exit" : false,
      "out-vars" : [ 9, 45, 12, 10, 13, 48, 33, 20, 24 ],
      "decl-vars" : [ ],
      "line-start" : 624,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isSchedCls",
            "variable" : 41
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 625,
      "code" : "case isSchedCls:\n\tfallthrough",
      "entry" : false,
      "use-vars" : [ 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 95 ],
      "in-vars" : [ 10, 9, 45, 24, 12, 13, 48, 33, 20 ],
      "exit" : false,
      "out-vars" : [ 10, 33, 20, 24, 12, 48, 9, 45, 13 ],
      "decl-vars" : [ ],
      "line-start" : 625,
      "ast" : {
        "kind" : "statement",
        "type" : "fallthrough"
      },
      "assign-vars" : [ ],
      "line-end" : 625,
      "code" : "fallthrough",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 95 ],
      "in-vars" : [ 10, 9, 45, 24, 20, 12, 13, 48, 42, 33 ],
      "exit" : false,
      "out-vars" : [ 9, 33, 45, 24, 13, 48, 20, 12, 10 ],
      "decl-vars" : [ ],
      "line-start" : 626,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isSchedAct",
            "variable" : 42
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 631,
      "code" : "case isSchedAct:\n\tb.schedPrograms[secName] = &SchedProgram{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t}",
      "entry" : false,
      "use-vars" : [ 42 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 27 ],
      "in-vars" : [ 9, 33, 45, 20, 12, 13, 48, 24, 10 ],
      "exit" : false,
      "out-vars" : [ 13, 10, 9, 20, 24, 12 ],
      "decl-vars" : [ ],
      "line-start" : 627,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 104,
          "index" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 33
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "schedPrograms",
              "variable" : 66
            },
            "go-type" : 103,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 104,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 105,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 105,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SchedProgram"
              }
            },
            "go-type" : 105,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Name",
                  "variable" : 67
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "secName",
                  "variable" : 33
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 68
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 45
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fd",
                  "variable" : 69
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "coerced-to" : {
                  "go-type" : 5,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 5,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "go-type" : -1,
                "kind" : "expression",
                "target" : {
                  "go-type" : -1,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "progFd",
                    "variable" : 48
                  }
                },
                "type" : "cast"
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 631,
      "code" : "b.schedPrograms[secName] = &SchedProgram{\n\tName:  secName,\n\tinsns: insns,\n\tfd:    int(progFd),\n}",
      "entry" : false,
      "use-vars" : [ 45, 48, 9, 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 97, 153 ],
      "in-vars" : [ 20, 24, 12, 13, 10, 9 ],
      "exit" : false,
      "out-vars" : [ 20, 70, 24, 12, 13, 10, 9, 71 ],
      "decl-vars" : [ 71, 70 ],
      "line-start" : 637,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Sections",
            "variable" : 23
          },
          "go-type" : 55,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "file",
              "variable" : 18
            },
            "go-type" : 25,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "section"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 733,
      "code" : "for i, section := range b.file.Sections {\n\tif processed[i] {\n\t\tcontinue\n\t}\n\n\tsecName := section.Name\n\n\tisKprobe := strings.HasPrefix(secName, \"kprobe/\")\n\tisKretprobe := strings.HasPrefix(secName, \"kretprobe/\")\n\tisCgroupSkb := strings.HasPrefix(secName, \"cgroup/skb\")\n\tisCgroupSock := strings.HasPrefix(secName, \"cgroup/sock\")\n\tisSocketFilter := strings.HasPrefix(secName, \"socket\")\n\tisTracepoint := strings.HasPrefix(secName, \"tracepoint/\")\n\tisSchedCls := strings.HasPrefix(secName, \"sched_cls/\")\n\tisSchedAct := strings.HasPrefix(secName, \"sched_act/\")\n\n\tvar progType uint32\n\tswitch {\n\tcase isKprobe:\n\t\tfallthrough\n\tcase isKretprobe:\n\t\tprogType = uint32(C.BPF_PROG_TYPE_KPROBE)\n\tcase isCgroupSkb:\n\t\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SKB)\n\tcase isCgroupSock:\n\t\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SOCK)\n\tcase isSocketFilter:\n\t\tprogType = uint32(C.BPF_PROG_TYPE_SOCKET_FILTER)\n\tcase isTracepoint:\n\t\tprogType = uint32(C.BPF_PROG_TYPE_TRACEPOINT)\n\tcase isSchedCls:\n\t\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_CLS)\n\tcase isSchedAct:\n\t\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_ACT)\n\t}\n\n\tif isKprobe || isKretprobe || isCgroupSkb || isCgroupSock || isSocketFilter || isTracepoint || isSchedCls || isSchedAct {\n\t\tdata, err := section.Data()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif len(data) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tinsns := (*C.struct_bpf_insn)(unsafe.Pointer(&data[0]))\n\n\t\tprogFd, err := C.bpf_prog_load(progType,\n\t\t\tinsns, C.int(section.Size),\n\t\t\t(*C.char)(lp), C.int(version),\n\t\t\t(*C.char)(unsafe.Pointer(&b.log[0])), C.int(len(b.log)))\n\t\tif progFd < 0 {\n\t\t\treturn fmt.Errorf(\"error while loading %q (%v):\\n%s\", section.Name, err, b.log)\n\t\t}\n\n\t\tswitch {\n\t\tcase isKprobe:\n\t\t\tfallthrough\n\t\tcase isKretprobe:\n\t\t\tb.probes[secName] = &Kprobe{\n\t\t\t\tName:  secName,\n\t\t\t\tinsns: insns,\n\t\t\t\tfd:    int(progFd),\n\t\t\t\tefd:   -1,\n\t\t\t}\n\t\tcase isCgroupSkb:\n\t\t\tfallthrough\n\t\tcase isCgroupSock:\n\t\t\tb.cgroupPrograms[secName] = &CgroupProgram{\n\t\t\t\tName:  secName,\n\t\t\t\tinsns: insns,\n\t\t\t\tfd:    int(progFd),\n\t\t\t}\n\t\tcase isSocketFilter:\n\t\t\tb.socketFilters[secName] = &SocketFilter{\n\t\t\t\tName:  secName,\n\t\t\t\tinsns: insns,\n\t\t\t\tfd:    int(progFd),\n\t\t\t}\n\t\tcase isTracepoint:\n\t\t\tb.tracepointPrograms[secName] = &TracepointProgram{\n\t\t\t\tName:  secName,\n\t\t\t\tinsns: insns,\n\t\t\t\tfd:    int(progFd),\n\t\t\t}\n\t\tcase isSchedCls:\n\t\t\tfallthrough\n\t\tcase isSchedAct:\n\t\t\tb.schedPrograms[secName] = &SchedProgram{\n\t\t\t\tName:  secName,\n\t\t\t\tinsns: insns,\n\t\t\t\tfd:    int(progFd),\n\t\t\t}\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 98, 99 ],
      "in-vars" : [ 13, 10, 9, 71, 20, 70, 24, 12 ],
      "exit" : false,
      "out-vars" : [ 9, 71, 20, 24, 12, 13, 10 ],
      "decl-vars" : [ ],
      "line-start" : 638,
      "ast" : {
        "condition" : {
          "go-type" : 6,
          "index" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 70
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 145,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "processed",
              "variable" : 24
            }
          },
          "type" : "index"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 640,
      "code" : "if processed[i] {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 24, 70 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 96 ],
      "in-vars" : [ 13, 10, 9, 20, 24, 12 ],
      "exit" : false,
      "out-vars" : [ 10, 9, 20, 24, 12, 13 ],
      "decl-vars" : [ ],
      "line-start" : 639,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 639,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 100 ],
      "in-vars" : [ 71, 20, 24, 12, 13, 10, 9 ],
      "exit" : false,
      "out-vars" : [ 13, 10, 9, 72, 71, 20, 24, 12 ],
      "decl-vars" : [ 72 ],
      "line-start" : 642,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "secName"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Name",
            "variable" : 32
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 56,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "section",
              "variable" : 71
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 642,
      "code" : "secName := section.Name",
      "entry" : false,
      "use-vars" : [ 71 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 101 ],
      "in-vars" : [ 71, 20, 24, 12, 13, 10, 9, 72 ],
      "exit" : false,
      "out-vars" : [ 73, 71, 20, 24, 12, 13, 10, 9, 72 ],
      "decl-vars" : [ 73 ],
      "line-start" : 644,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isKprobe"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 72
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "kprobe/"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 152,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "strings"
            },
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "HasPrefix"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 644,
      "code" : "isKprobe := strings.HasPrefix(secName, \"kprobe/\")",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 102 ],
      "in-vars" : [ 71, 24, 10, 12, 13, 73, 9, 72, 20 ],
      "exit" : false,
      "out-vars" : [ 75, 73, 10, 71, 20, 24, 12, 9, 72, 13 ],
      "decl-vars" : [ 75 ],
      "line-start" : 645,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isKretprobe"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 72
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "kretprobe/"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 152,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "strings"
            },
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "HasPrefix"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 645,
      "code" : "isKretprobe := strings.HasPrefix(secName, \"kretprobe/\")",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 103 ],
      "in-vars" : [ 9, 20, 12, 75, 73, 72, 71, 24, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 10, 9, 72, 75, 73, 76, 13, 71, 20, 24, 12 ],
      "decl-vars" : [ 76 ],
      "line-start" : 646,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isCgroupSkb"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 72
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "cgroup/skb"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 152,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "strings"
            },
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "HasPrefix"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 646,
      "code" : "isCgroupSkb := strings.HasPrefix(secName, \"cgroup/skb\")",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 104 ],
      "in-vars" : [ 20, 24, 76, 13, 10, 9, 72, 71, 12, 75, 73 ],
      "exit" : false,
      "out-vars" : [ 13, 73, 9, 71, 20, 77, 75, 10, 72, 24, 12, 76 ],
      "decl-vars" : [ 77 ],
      "line-start" : 647,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isCgroupSock"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 72
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "cgroup/sock"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 152,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "strings"
            },
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "HasPrefix"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 647,
      "code" : "isCgroupSock := strings.HasPrefix(secName, \"cgroup/sock\")",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 105 ],
      "in-vars" : [ 72, 20, 24, 77, 12, 73, 9, 71, 76, 75, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 9, 78, 12, 76, 75, 73, 72, 71, 20, 24, 77, 13, 10 ],
      "decl-vars" : [ 78 ],
      "line-start" : 648,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isSocketFilter"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 72
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "socket"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 152,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "strings"
            },
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "HasPrefix"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 648,
      "code" : "isSocketFilter := strings.HasPrefix(secName, \"socket\")",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 106 ],
      "in-vars" : [ 9, 72, 78, 24, 12, 76, 71, 20, 77, 75, 13, 73, 10 ],
      "exit" : false,
      "out-vars" : [ 77, 73, 13, 72, 24, 12, 78, 71, 75, 79, 10, 9, 20, 76 ],
      "decl-vars" : [ 79 ],
      "line-start" : 649,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isTracepoint"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 72
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "tracepoint/"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 152,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "strings"
            },
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "HasPrefix"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 649,
      "code" : "isTracepoint := strings.HasPrefix(secName, \"tracepoint/\")",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 107 ],
      "in-vars" : [ 9, 72, 78, 24, 12, 75, 73, 71, 20, 77, 76, 13, 10, 79 ],
      "exit" : false,
      "out-vars" : [ 80, 72, 78, 10, 20, 79, 24, 12, 77, 76, 75, 13, 73, 9, 71 ],
      "decl-vars" : [ 80 ],
      "line-start" : 650,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isSchedCls"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 72
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "sched_cls/"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 152,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "strings"
            },
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "HasPrefix"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 650,
      "code" : "isSchedCls := strings.HasPrefix(secName, \"sched_cls/\")",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 108 ],
      "in-vars" : [ 78, 24, 77, 79, 9, 72, 75, 73, 80, 71, 20, 12, 76, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 9, 71, 12, 75, 72, 24, 80, 13, 81, 78, 77, 76, 79, 20, 73, 10 ],
      "decl-vars" : [ 81 ],
      "line-start" : 651,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isSchedAct"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 72
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "sched_act/"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 152,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "strings"
            },
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "HasPrefix"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 651,
      "code" : "isSchedAct := strings.HasPrefix(secName, \"sched_act/\")",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 109 ],
      "in-vars" : [ 10, 9, 77, 76, 80, 73, 72, 24, 75, 71, 20, 79, 13, 81, 78, 12 ],
      "exit" : false,
      "out-vars" : [ 76, 79, 73, 81, 77, 12, 10, 71, 24, 20, 80, 13, 9, 78, 75, 72, 74 ],
      "decl-vars" : [ 74 ],
      "line-start" : 653,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 42,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 42,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "progType"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 653,
      "code" : "var progType uint32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 110, 112, 114, 116, 118, 120, 122, 124, 126 ],
      "in-vars" : [ 71, 20, 77, 13, 10, 12, 9, 72, 78, 74, 76, 75, 73, 81, 24, 79, 80 ],
      "exit" : false,
      "out-vars" : [ 20, 24, 77, 74, 75, 79, 78, 76, 80, 13, 71, 9, 72, 81, 73, 10, 12 ],
      "decl-vars" : [ ],
      "line-start" : 654,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 671,
      "code" : "switch {\ncase isKprobe:\n\tfallthrough\ncase isKretprobe:\n\tprogType = uint32(C.BPF_PROG_TYPE_KPROBE)\ncase isCgroupSkb:\n\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SKB)\ncase isCgroupSock:\n\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SOCK)\ncase isSocketFilter:\n\tprogType = uint32(C.BPF_PROG_TYPE_SOCKET_FILTER)\ncase isTracepoint:\n\tprogType = uint32(C.BPF_PROG_TYPE_TRACEPOINT)\ncase isSchedCls:\n\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_CLS)\ncase isSchedAct:\n\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_ACT)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 111 ],
      "in-vars" : [ 9, 78, 77, 79, 81, 73, 10, 75, 12, 80, 13, 24, 71, 20, 76, 72 ],
      "exit" : false,
      "out-vars" : [ 73, 10, 12, 75, 77, 78, 20, 76, 80, 81, 72, 24, 79, 13, 9, 71 ],
      "decl-vars" : [ ],
      "line-start" : 655,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isKprobe",
            "variable" : 73
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 656,
      "code" : "case isKprobe:\n\tfallthrough",
      "entry" : false,
      "use-vars" : [ 73 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 113 ],
      "in-vars" : [ 20, 24, 76, 13, 9, 77, 81, 75, 79, 72, 71, 12, 80, 73, 10, 78 ],
      "exit" : false,
      "out-vars" : [ 9, 72, 71, 20, 24, 73, 76, 75, 10, 81, 78, 77, 13, 12, 79, 80 ],
      "decl-vars" : [ ],
      "line-start" : 656,
      "ast" : {
        "kind" : "statement",
        "type" : "fallthrough"
      },
      "assign-vars" : [ ],
      "line-end" : 656,
      "code" : "fallthrough",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 113 ],
      "in-vars" : [ 72, 78, 20, 12, 73, 10, 9, 77, 76, 79, 80, 13, 81, 71, 24, 75 ],
      "exit" : false,
      "out-vars" : [ 78, 71, 12, 80, 79, 13, 73, 9, 72, 24, 76, 75, 81, 20, 77, 10 ],
      "decl-vars" : [ ],
      "line-start" : 657,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isKretprobe",
            "variable" : 75
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 658,
      "code" : "case isKretprobe:\n\tprogType = uint32(C.BPF_PROG_TYPE_KPROBE)",
      "entry" : false,
      "use-vars" : [ 75 ]
    }, {
      "update-vars" : [ 74 ],
      "successors" : [ 126 ],
      "in-vars" : [ 72, 71, 77, 12, 79, 80, 81, 9, 10, 13, 73, 76, 75, 20, 78, 24 ],
      "exit" : false,
      "out-vars" : [ 77, 75, 72, 80, 73, 78, 71, 20, 24, 12, 74, 81, 9, 13, 10, 76, 79 ],
      "decl-vars" : [ ],
      "line-start" : 658,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 42,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "progType",
            "variable" : 74
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 42,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 42,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "BPF_PROG_TYPE_KPROBE"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 74 ],
      "line-end" : 658,
      "code" : "progType = uint32(C.BPF_PROG_TYPE_KPROBE)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 115 ],
      "in-vars" : [ 81, 72, 20, 73, 24, 76, 75, 13, 9, 78, 71, 77, 12, 79, 80, 10 ],
      "exit" : false,
      "out-vars" : [ 81, 71, 73, 72, 78, 77, 80, 20, 12, 76, 75, 10, 9, 24, 79, 13 ],
      "decl-vars" : [ ],
      "line-start" : 659,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isCgroupSkb",
            "variable" : 76
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 660,
      "code" : "case isCgroupSkb:\n\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SKB)",
      "entry" : false,
      "use-vars" : [ 76 ]
    }, {
      "update-vars" : [ 74 ],
      "successors" : [ 126 ],
      "in-vars" : [ 10, 24, 12, 76, 79, 13, 9, 78, 77, 81, 72, 73, 80, 71, 20, 75 ],
      "exit" : false,
      "out-vars" : [ 81, 9, 71, 77, 13, 10, 20, 12, 74, 76, 75, 72, 78, 24, 79, 80, 73 ],
      "decl-vars" : [ ],
      "line-start" : 660,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 42,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "progType",
            "variable" : 74
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 42,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 42,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "BPF_PROG_TYPE_CGROUP_SKB"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 74 ],
      "line-end" : 660,
      "code" : "progType = uint32(C.BPF_PROG_TYPE_CGROUP_SKB)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 117 ],
      "in-vars" : [ 9, 72, 12, 81, 78, 71, 20, 24, 75, 13, 77, 76, 79, 80, 73, 10 ],
      "exit" : false,
      "out-vars" : [ 76, 80, 13, 71, 24, 79, 75, 78, 20, 77, 12, 73, 81, 9, 72, 10 ],
      "decl-vars" : [ ],
      "line-start" : 661,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isCgroupSock",
            "variable" : 77
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 662,
      "code" : "case isCgroupSock:\n\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SOCK)",
      "entry" : false,
      "use-vars" : [ 77 ]
    }, {
      "update-vars" : [ 74 ],
      "successors" : [ 126 ],
      "in-vars" : [ 81, 24, 13, 73, 20, 77, 12, 75, 10, 9, 72, 78, 79, 71, 76, 80 ],
      "exit" : false,
      "out-vars" : [ 72, 78, 20, 24, 79, 81, 71, 77, 76, 13, 10, 9, 74, 80, 12, 75, 73 ],
      "decl-vars" : [ ],
      "line-start" : 662,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 42,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "progType",
            "variable" : 74
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 42,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 42,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "BPF_PROG_TYPE_CGROUP_SOCK"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 74 ],
      "line-end" : 662,
      "code" : "progType = uint32(C.BPF_PROG_TYPE_CGROUP_SOCK)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 119 ],
      "in-vars" : [ 9, 71, 75, 80, 81, 72, 20, 13, 10, 24, 78, 77, 12, 76, 79, 73 ],
      "exit" : false,
      "out-vars" : [ 24, 77, 9, 12, 75, 13, 73, 10, 71, 76, 80, 20, 72, 78, 79, 81 ],
      "decl-vars" : [ ],
      "line-start" : 663,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isSocketFilter",
            "variable" : 78
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 664,
      "code" : "case isSocketFilter:\n\tprogType = uint32(C.BPF_PROG_TYPE_SOCKET_FILTER)",
      "entry" : false,
      "use-vars" : [ 78 ]
    }, {
      "update-vars" : [ 74 ],
      "successors" : [ 126 ],
      "in-vars" : [ 20, 75, 79, 73, 9, 71, 77, 81, 78, 13, 10, 72, 24, 12, 76, 80 ],
      "exit" : false,
      "out-vars" : [ 72, 74, 76, 10, 78, 20, 24, 77, 73, 81, 75, 79, 80, 13, 9, 71, 12 ],
      "decl-vars" : [ ],
      "line-start" : 664,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 42,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "progType",
            "variable" : 74
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 42,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 42,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "BPF_PROG_TYPE_SOCKET_FILTER"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 74 ],
      "line-end" : 664,
      "code" : "progType = uint32(C.BPF_PROG_TYPE_SOCKET_FILTER)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 121 ],
      "in-vars" : [ 9, 24, 76, 75, 80, 81, 12, 10, 72, 77, 79, 73, 78, 71, 20, 13 ],
      "exit" : false,
      "out-vars" : [ 77, 79, 10, 78, 24, 12, 75, 72, 71, 20, 81, 9, 13, 73, 76, 80 ],
      "decl-vars" : [ ],
      "line-start" : 665,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isTracepoint",
            "variable" : 79
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 666,
      "code" : "case isTracepoint:\n\tprogType = uint32(C.BPF_PROG_TYPE_TRACEPOINT)",
      "entry" : false,
      "use-vars" : [ 79 ]
    }, {
      "update-vars" : [ 74 ],
      "successors" : [ 126 ],
      "in-vars" : [ 76, 73, 9, 78, 71, 20, 75, 24, 77, 13, 10, 81, 72, 12, 79, 80 ],
      "exit" : false,
      "out-vars" : [ 77, 12, 74, 80, 13, 81, 78, 75, 71, 24, 20, 76, 73, 10, 9, 72, 79 ],
      "decl-vars" : [ ],
      "line-start" : 666,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 42,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "progType",
            "variable" : 74
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 42,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 42,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "BPF_PROG_TYPE_TRACEPOINT"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 74 ],
      "line-end" : 666,
      "code" : "progType = uint32(C.BPF_PROG_TYPE_TRACEPOINT)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 123 ],
      "in-vars" : [ 9, 75, 79, 80, 13, 73, 10, 72, 20, 81, 24, 77, 78, 71, 12, 76 ],
      "exit" : false,
      "out-vars" : [ 72, 79, 75, 73, 81, 78, 71, 77, 9, 10, 80, 13, 20, 24, 12, 76 ],
      "decl-vars" : [ ],
      "line-start" : 667,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isSchedCls",
            "variable" : 80
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 668,
      "code" : "case isSchedCls:\n\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_CLS)",
      "entry" : false,
      "use-vars" : [ 80 ]
    }, {
      "update-vars" : [ 74 ],
      "successors" : [ 126 ],
      "in-vars" : [ 12, 71, 24, 76, 10, 81, 9, 77, 75, 73, 78, 20, 80, 13, 72, 79 ],
      "exit" : false,
      "out-vars" : [ 71, 12, 74, 76, 73, 81, 20, 24, 75, 13, 72, 80, 10, 9, 78, 77, 79 ],
      "decl-vars" : [ ],
      "line-start" : 668,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 42,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "progType",
            "variable" : 74
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 42,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 42,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "BPF_PROG_TYPE_SCHED_CLS"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 74 ],
      "line-end" : 668,
      "code" : "progType = uint32(C.BPF_PROG_TYPE_SCHED_CLS)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 125 ],
      "in-vars" : [ 10, 81, 78, 12, 75, 80, 9, 24, 13, 71, 20, 77, 76, 79, 72, 73 ],
      "exit" : false,
      "out-vars" : [ 79, 9, 77, 12, 75, 13, 73, 72, 78, 71, 24, 80, 81, 20, 76, 10 ],
      "decl-vars" : [ ],
      "line-start" : 669,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isSchedAct",
            "variable" : 81
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 670,
      "code" : "case isSchedAct:\n\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_ACT)",
      "entry" : false,
      "use-vars" : [ 81 ]
    }, {
      "update-vars" : [ 74 ],
      "successors" : [ 126 ],
      "in-vars" : [ 75, 20, 24, 77, 76, 80, 72, 71, 10, 81, 9, 78, 12, 79, 13, 73 ],
      "exit" : false,
      "out-vars" : [ 74, 81, 20, 12, 13, 9, 71, 79, 80, 73, 24, 76, 75, 10, 72, 78, 77 ],
      "decl-vars" : [ ],
      "line-start" : 670,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 42,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "progType",
            "variable" : 74
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 42,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 42,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "BPF_PROG_TYPE_SCHED_ACT"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 74 ],
      "line-end" : 670,
      "code" : "progType = uint32(C.BPF_PROG_TYPE_SCHED_ACT)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 96, 127 ],
      "in-vars" : [ 75, 80, 72, 12, 74, 10, 81, 77, 20, 24, 73, 78, 71, 79, 13, 9, 76 ],
      "exit" : false,
      "out-vars" : [ 78, 20, 79, 80, 10, 77, 74, 9, 71, 24, 12, 13, 81, 72, 76, 75, 73 ],
      "decl-vars" : [ ],
      "line-start" : 673,
      "ast" : {
        "condition" : {
          "go-type" : 6,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "left" : {
              "go-type" : 6,
              "kind" : "expression",
              "left" : {
                "go-type" : 6,
                "kind" : "expression",
                "left" : {
                  "go-type" : 6,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 6,
                    "kind" : "expression",
                    "left" : {
                      "go-type" : 6,
                      "kind" : "expression",
                      "left" : {
                        "go-type" : 6,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "isKprobe",
                          "variable" : 73
                        }
                      },
                      "operator" : "||",
                      "right" : {
                        "go-type" : 6,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "isKretprobe",
                          "variable" : 75
                        }
                      },
                      "type" : "binary"
                    },
                    "operator" : "||",
                    "right" : {
                      "go-type" : 6,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "isCgroupSkb",
                        "variable" : 76
                      }
                    },
                    "type" : "binary"
                  },
                  "operator" : "||",
                  "right" : {
                    "go-type" : 6,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "isCgroupSock",
                      "variable" : 77
                    }
                  },
                  "type" : "binary"
                },
                "operator" : "||",
                "right" : {
                  "go-type" : 6,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "isSocketFilter",
                    "variable" : 78
                  }
                },
                "type" : "binary"
              },
              "operator" : "||",
              "right" : {
                "go-type" : 6,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "isTracepoint",
                  "variable" : 79
                }
              },
              "type" : "binary"
            },
            "operator" : "||",
            "right" : {
              "go-type" : 6,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "isSchedCls",
                "variable" : 80
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "isSchedAct",
              "variable" : 81
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 732,
      "code" : "if isKprobe || isKretprobe || isCgroupSkb || isCgroupSock || isSocketFilter || isTracepoint || isSchedCls || isSchedAct {\n\tdata, err := section.Data()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif len(data) == 0 {\n\t\tcontinue\n\t}\n\n\tinsns := (*C.struct_bpf_insn)(unsafe.Pointer(&data[0]))\n\n\tprogFd, err := C.bpf_prog_load(progType,\n\t\tinsns, C.int(section.Size),\n\t\t(*C.char)(lp), C.int(version),\n\t\t(*C.char)(unsafe.Pointer(&b.log[0])), C.int(len(b.log)))\n\tif progFd < 0 {\n\t\treturn fmt.Errorf(\"error while loading %q (%v):\\n%s\", section.Name, err, b.log)\n\t}\n\n\tswitch {\n\tcase isKprobe:\n\t\tfallthrough\n\tcase isKretprobe:\n\t\tb.probes[secName] = &Kprobe{\n\t\t\tName:  secName,\n\t\t\tinsns: insns,\n\t\t\tfd:    int(progFd),\n\t\t\tefd:   -1,\n\t\t}\n\tcase isCgroupSkb:\n\t\tfallthrough\n\tcase isCgroupSock:\n\t\tb.cgroupPrograms[secName] = &CgroupProgram{\n\t\t\tName:  secName,\n\t\t\tinsns: insns,\n\t\t\tfd:    int(progFd),\n\t\t}\n\tcase isSocketFilter:\n\t\tb.socketFilters[secName] = &SocketFilter{\n\t\t\tName:  secName,\n\t\t\tinsns: insns,\n\t\t\tfd:    int(progFd),\n\t\t}\n\tcase isTracepoint:\n\t\tb.tracepointPrograms[secName] = &TracepointProgram{\n\t\t\tName:  secName,\n\t\t\tinsns: insns,\n\t\t\tfd:    int(progFd),\n\t\t}\n\tcase isSchedCls:\n\t\tfallthrough\n\tcase isSchedAct:\n\t\tb.schedPrograms[secName] = &SchedProgram{\n\t\t\tName:  secName,\n\t\t\tinsns: insns,\n\t\t\tfd:    int(progFd),\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 77, 78, 79, 80, 81, 73, 75, 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 128 ],
      "in-vars" : [ 73, 13, 81, 78, 71, 24, 12, 76, 75, 72, 74, 79, 10, 9, 20, 77, 80 ],
      "exit" : false,
      "out-vars" : [ 13, 82, 20, 24, 74, 76, 75, 9, 71, 77, 12, 79, 80, 73, 10, 81, 72, 78, 83 ],
      "decl-vars" : [ 82, 83 ],
      "line-start" : 674,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "data"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Data"
            },
            "go-type" : 150,
            "kind" : "expression",
            "target" : {
              "go-type" : 56,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "section",
                "variable" : 71
              }
            },
            "type" : "selector"
          },
          "go-type" : 149,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 674,
      "code" : "data, err := section.Data()",
      "entry" : false,
      "use-vars" : [ 71 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 129, 130 ],
      "in-vars" : [ 71, 77, 12, 74, 13, 78, 79, 10, 9, 72, 20, 76, 75, 80, 73, 81, 83, 82, 24 ],
      "exit" : false,
      "out-vars" : [ 83, 24, 77, 75, 80, 81, 78, 79, 71, 20, 76, 13, 73, 10, 9, 72, 82, 12, 74 ],
      "decl-vars" : [ ],
      "line-start" : 675,
      "ast" : {
        "condition" : {
          "go-type" : 127,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 82
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 131,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 677,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 82 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 82, 12, 13 ],
      "exit" : false,
      "out-vars" : [ 12, 13 ],
      "decl-vars" : [ ],
      "line-start" : 676,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 82
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 676,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 82 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 131, 132 ],
      "in-vars" : [ 9, 72, 78, 83, 24, 75, 13, 71, 20, 77, 12, 74, 79, 80, 73, 10, 81, 76 ],
      "exit" : false,
      "out-vars" : [ 73, 24, 13, 75, 9, 83, 79, 10, 72, 12, 71, 20, 77, 74, 76, 80, 81, 78 ],
      "decl-vars" : [ ],
      "line-start" : 679,
      "ast" : {
        "condition" : {
          "go-type" : 127,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 83
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 151,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 681,
      "code" : "if len(data) == 0 {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 83 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 96 ],
      "in-vars" : [ 10, 9, 20, 24, 12, 13 ],
      "exit" : false,
      "out-vars" : [ 20, 24, 12, 13, 10, 9 ],
      "decl-vars" : [ ],
      "line-start" : 680,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 680,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 133 ],
      "in-vars" : [ 9, 24, 81, 71, 74, 78, 76, 13, 75, 79, 80, 72, 83, 20, 77, 12, 73, 10 ],
      "exit" : false,
      "out-vars" : [ 72, 78, 12, 74, 10, 9, 20, 24, 13, 80, 81, 84, 71, 77, 76, 75, 79, 73 ],
      "decl-vars" : [ 84 ],
      "line-start" : 683,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "insns"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : -1,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 8,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "struct_bpf_insn"
              }
            },
            "go-type" : -1,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 138,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 7,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 138,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 138,
            "kind" : "expression",
            "target" : {
              "go-type" : 123,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 22,
                "index" : {
                  "go-type" : 5,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 21,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "data",
                    "variable" : 83
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 683,
      "code" : "insns := (*C.struct_bpf_insn)(unsafe.Pointer(&data[0]))",
      "entry" : false,
      "use-vars" : [ 83 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 134 ],
      "in-vars" : [ 9, 72, 24, 74, 79, 81, 20, 80, 73, 84, 76, 75, 13, 12, 71, 77, 10, 78 ],
      "exit" : false,
      "out-vars" : [ 20, 71, 77, 12, 76, 75, 79, 73, 85, 84, 78, 80, 13, 81, 72, 82, 24, 10, 9 ],
      "decl-vars" : [ 82, 85 ],
      "line-start" : 685,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "progFd"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 82
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 42,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "progType",
              "variable" : 74
            }
          }, {
            "go-type" : -1,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "insns",
              "variable" : 84
            }
          }, {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Size",
                "variable" : 46
              },
              "go-type" : 45,
              "kind" : "expression",
              "target" : {
                "go-type" : 56,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "section",
                  "variable" : 71
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 8,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "coerced-to" : {
              "contained" : {
                "go-type" : -1,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 8,
                  "value" : "C"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "char"
                }
              },
              "go-type" : -1,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : -1,
            "kind" : "expression",
            "target" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lp",
                "variable" : 13
              }
            },
            "type" : "cast"
          }, {
            "arguments" : [ {
              "go-type" : 42,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "version",
                "variable" : 20
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 8,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "coerced-to" : {
              "contained" : {
                "go-type" : -1,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 8,
                  "value" : "C"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "char"
                }
              },
              "go-type" : -1,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : -1,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 138,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 7,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 138,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 138,
              "kind" : "expression",
              "target" : {
                "go-type" : 123,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 22,
                  "index" : {
                    "go-type" : 5,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "log",
                      "variable" : 47
                    },
                    "go-type" : 21,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 14,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "b",
                        "variable" : 9
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "arguments" : [ {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "log",
                  "variable" : 47
                },
                "go-type" : 21,
                "kind" : "expression",
                "target" : {
                  "go-type" : 14,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "b",
                    "variable" : 9
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 151,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 5,
              "kind" : "expression",
              "type" : "call"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 8,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "bpf_prog_load"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 688,
      "code" : "progFd, err := C.bpf_prog_load(progType,\n\tinsns, C.int(section.Size),\n\t(*C.char)(lp), C.int(version),\n\t(*C.char)(unsafe.Pointer(&b.log[0])), C.int(len(b.log)))",
      "entry" : false,
      "use-vars" : [ 20, 84, 74, 71, 9, 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 135, 136 ],
      "in-vars" : [ 80, 13, 85, 24, 77, 82, 76, 75, 9, 84, 71, 20, 12, 79, 73, 10, 81, 72, 78 ],
      "exit" : false,
      "out-vars" : [ 20, 76, 79, 80, 73, 9, 71, 12, 77, 75, 81, 72, 85, 78, 82, 24, 84, 13, 10 ],
      "decl-vars" : [ ],
      "line-start" : 689,
      "ast" : {
        "condition" : {
          "go-type" : -1,
          "kind" : "expression",
          "left" : {
            "go-type" : -1,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "progFd",
              "variable" : 85
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 157,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 691,
      "code" : "if progFd < 0 {\n\treturn fmt.Errorf(\"error while loading %q (%v):\\n%s\", section.Name, err, b.log)\n}",
      "entry" : false,
      "use-vars" : [ 85 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 9, 71, 82, 12, 13 ],
      "exit" : false,
      "out-vars" : [ 13, 12 ],
      "decl-vars" : [ ],
      "line-start" : 690,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "error while loading %q (%v):\n%s"
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Name",
              "variable" : 32
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 56,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "section",
                "variable" : 71
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 82
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "log",
              "variable" : 47
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 158,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 10,
              "value" : "fmt"
            },
            "type" : "identifier",
            "value" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 690,
      "code" : "return fmt.Errorf(\"error while loading %q (%v):\\n%s\", section.Name, err, b.log)",
      "entry" : false,
      "use-vars" : [ 9, 71, 82 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 96, 137, 139, 141, 143, 145, 147, 149, 151 ],
      "in-vars" : [ 12, 76, 78, 20, 77, 80, 72, 85, 79, 13, 73, 10, 81, 9, 84, 24, 75 ],
      "exit" : false,
      "out-vars" : [ 85, 78, 76, 13, 79, 80, 73, 9, 84, 20, 77, 81, 12, 10, 72, 24, 75 ],
      "decl-vars" : [ ],
      "line-start" : 693,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 731,
      "code" : "switch {\ncase isKprobe:\n\tfallthrough\ncase isKretprobe:\n\tb.probes[secName] = &Kprobe{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t\tefd:   -1,\n\t}\ncase isCgroupSkb:\n\tfallthrough\ncase isCgroupSock:\n\tb.cgroupPrograms[secName] = &CgroupProgram{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t}\ncase isSocketFilter:\n\tb.socketFilters[secName] = &SocketFilter{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t}\ncase isTracepoint:\n\tb.tracepointPrograms[secName] = &TracepointProgram{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t}\ncase isSchedCls:\n\tfallthrough\ncase isSchedAct:\n\tb.schedPrograms[secName] = &SchedProgram{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t}\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 138 ],
      "in-vars" : [ 85, 24, 73, 10, 72, 84, 20, 12, 13, 9 ],
      "exit" : false,
      "out-vars" : [ 24, 12, 20, 72, 84, 85, 13, 10, 9 ],
      "decl-vars" : [ ],
      "line-start" : 694,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isKprobe",
            "variable" : 73
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 695,
      "code" : "case isKprobe:\n\tfallthrough",
      "entry" : false,
      "use-vars" : [ 73 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 140 ],
      "in-vars" : [ 72, 84, 24, 13, 9, 85, 20, 12, 10 ],
      "exit" : false,
      "out-vars" : [ 72, 84, 85, 24, 12, 9, 20, 13, 10 ],
      "decl-vars" : [ ],
      "line-start" : 695,
      "ast" : {
        "kind" : "statement",
        "type" : "fallthrough"
      },
      "assign-vars" : [ ],
      "line-end" : 695,
      "code" : "fallthrough",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 140 ],
      "in-vars" : [ 20, 24, 12, 10, 9, 72, 85, 84, 75, 13 ],
      "exit" : false,
      "out-vars" : [ 20, 12, 13, 10, 9, 72, 85, 84, 24 ],
      "decl-vars" : [ ],
      "line-start" : 696,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isKretprobe",
            "variable" : 75
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 702,
      "code" : "case isKretprobe:\n\tb.probes[secName] = &Kprobe{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t\tefd:   -1,\n\t}",
      "entry" : false,
      "use-vars" : [ 75 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 96 ],
      "in-vars" : [ 72, 84, 85, 20, 12, 10, 9, 24, 13 ],
      "exit" : false,
      "out-vars" : [ 20, 24, 12, 13, 10, 9 ],
      "decl-vars" : [ ],
      "line-start" : 697,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 90,
          "index" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 72
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "probes",
              "variable" : 49
            },
            "go-type" : 89,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 91,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 91,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Kprobe"
              }
            },
            "go-type" : 91,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Name",
                  "variable" : 50
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "secName",
                  "variable" : 72
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 51
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 84
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fd",
                  "variable" : 52
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "coerced-to" : {
                  "go-type" : 5,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 5,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "go-type" : -1,
                "kind" : "expression",
                "target" : {
                  "go-type" : -1,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "progFd",
                    "variable" : 85
                  }
                },
                "type" : "cast"
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "efd",
                  "variable" : 53
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 5,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "-1"
                }
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 702,
      "code" : "b.probes[secName] = &Kprobe{\n\tName:  secName,\n\tinsns: insns,\n\tfd:    int(progFd),\n\tefd:   -1,\n}",
      "entry" : false,
      "use-vars" : [ 72, 84, 85, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 142 ],
      "in-vars" : [ 9, 72, 20, 24, 10, 84, 85, 12, 76, 13 ],
      "exit" : false,
      "out-vars" : [ 84, 20, 10, 12, 13, 9, 72, 85, 24 ],
      "decl-vars" : [ ],
      "line-start" : 703,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isCgroupSkb",
            "variable" : 76
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 704,
      "code" : "case isCgroupSkb:\n\tfallthrough",
      "entry" : false,
      "use-vars" : [ 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 144 ],
      "in-vars" : [ 85, 20, 24, 72, 84, 12, 13, 10, 9 ],
      "exit" : false,
      "out-vars" : [ 72, 85, 20, 13, 9, 84, 24, 12, 10 ],
      "decl-vars" : [ ],
      "line-start" : 704,
      "ast" : {
        "kind" : "statement",
        "type" : "fallthrough"
      },
      "assign-vars" : [ ],
      "line-end" : 704,
      "code" : "fallthrough",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 144 ],
      "in-vars" : [ 85, 12, 9, 72, 24, 77, 13, 10, 84, 20 ],
      "exit" : false,
      "out-vars" : [ 9, 72, 84, 12, 13, 85, 20, 24, 10 ],
      "decl-vars" : [ ],
      "line-start" : 705,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isCgroupSock",
            "variable" : 77
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 710,
      "code" : "case isCgroupSock:\n\tb.cgroupPrograms[secName] = &CgroupProgram{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t}",
      "entry" : false,
      "use-vars" : [ 77 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 96 ],
      "in-vars" : [ 84, 85, 24, 12, 13, 10, 9, 20, 72 ],
      "exit" : false,
      "out-vars" : [ 20, 24, 12, 13, 10, 9 ],
      "decl-vars" : [ ],
      "line-start" : 706,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 94,
          "index" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 72
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cgroupPrograms",
              "variable" : 54
            },
            "go-type" : 93,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 94,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 95,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 95,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "CgroupProgram"
              }
            },
            "go-type" : 95,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Name",
                  "variable" : 55
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "secName",
                  "variable" : 72
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 56
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 84
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fd",
                  "variable" : 57
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "coerced-to" : {
                  "go-type" : 5,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 5,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "go-type" : -1,
                "kind" : "expression",
                "target" : {
                  "go-type" : -1,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "progFd",
                    "variable" : 85
                  }
                },
                "type" : "cast"
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 710,
      "code" : "b.cgroupPrograms[secName] = &CgroupProgram{\n\tName:  secName,\n\tinsns: insns,\n\tfd:    int(progFd),\n}",
      "entry" : false,
      "use-vars" : [ 72, 9, 84, 85 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 146 ],
      "in-vars" : [ 72, 12, 13, 10, 9, 84, 85, 78, 20, 24 ],
      "exit" : false,
      "out-vars" : [ 24, 9, 72, 85, 13, 10, 84, 20, 12 ],
      "decl-vars" : [ ],
      "line-start" : 711,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isSocketFilter",
            "variable" : 78
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 716,
      "code" : "case isSocketFilter:\n\tb.socketFilters[secName] = &SocketFilter{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t}",
      "entry" : false,
      "use-vars" : [ 78 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 96 ],
      "in-vars" : [ 9, 12, 13, 10, 72, 84, 85, 20, 24 ],
      "exit" : false,
      "out-vars" : [ 9, 20, 24, 12, 13, 10 ],
      "decl-vars" : [ ],
      "line-start" : 712,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 98,
          "index" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 72
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "socketFilters",
              "variable" : 58
            },
            "go-type" : 97,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 98,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 99,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 99,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SocketFilter"
              }
            },
            "go-type" : 99,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Name",
                  "variable" : 59
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "secName",
                  "variable" : 72
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 60
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 84
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fd",
                  "variable" : 61
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "coerced-to" : {
                  "go-type" : 5,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 5,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "go-type" : -1,
                "kind" : "expression",
                "target" : {
                  "go-type" : -1,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "progFd",
                    "variable" : 85
                  }
                },
                "type" : "cast"
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 716,
      "code" : "b.socketFilters[secName] = &SocketFilter{\n\tName:  secName,\n\tinsns: insns,\n\tfd:    int(progFd),\n}",
      "entry" : false,
      "use-vars" : [ 9, 72, 84, 85 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 148 ],
      "in-vars" : [ 24, 13, 84, 85, 20, 79, 10, 9, 72, 12 ],
      "exit" : false,
      "out-vars" : [ 13, 9, 72, 84, 85, 20, 24, 12, 10 ],
      "decl-vars" : [ ],
      "line-start" : 717,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isTracepoint",
            "variable" : 79
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 722,
      "code" : "case isTracepoint:\n\tb.tracepointPrograms[secName] = &TracepointProgram{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t}",
      "entry" : false,
      "use-vars" : [ 79 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 96 ],
      "in-vars" : [ 84, 85, 20, 24, 13, 10, 9, 72, 12 ],
      "exit" : false,
      "out-vars" : [ 9, 20, 24, 12, 13, 10 ],
      "decl-vars" : [ ],
      "line-start" : 718,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 101,
          "index" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 72
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tracepointPrograms",
              "variable" : 62
            },
            "go-type" : 100,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 101,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 102,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 102,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "TracepointProgram"
              }
            },
            "go-type" : 102,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Name",
                  "variable" : 63
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "secName",
                  "variable" : 72
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 64
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 84
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fd",
                  "variable" : 65
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "coerced-to" : {
                  "go-type" : 5,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 5,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "go-type" : -1,
                "kind" : "expression",
                "target" : {
                  "go-type" : -1,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "progFd",
                    "variable" : 85
                  }
                },
                "type" : "cast"
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 722,
      "code" : "b.tracepointPrograms[secName] = &TracepointProgram{\n\tName:  secName,\n\tinsns: insns,\n\tfd:    int(progFd),\n}",
      "entry" : false,
      "use-vars" : [ 72, 85, 9, 84 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 150 ],
      "in-vars" : [ 85, 80, 13, 9, 84, 20, 24, 12, 10, 72 ],
      "exit" : false,
      "out-vars" : [ 24, 10, 72, 85, 20, 12, 13, 9, 84 ],
      "decl-vars" : [ ],
      "line-start" : 723,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isSchedCls",
            "variable" : 80
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 724,
      "code" : "case isSchedCls:\n\tfallthrough",
      "entry" : false,
      "use-vars" : [ 80 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 152 ],
      "in-vars" : [ 84, 10, 85, 20, 24, 12, 13, 9, 72 ],
      "exit" : false,
      "out-vars" : [ 12, 10, 84, 20, 85, 24, 13, 9, 72 ],
      "decl-vars" : [ ],
      "line-start" : 724,
      "ast" : {
        "kind" : "statement",
        "type" : "fallthrough"
      },
      "assign-vars" : [ ],
      "line-end" : 724,
      "code" : "fallthrough",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 152 ],
      "in-vars" : [ 81, 85, 20, 12, 10, 9, 72, 84, 24, 13 ],
      "exit" : false,
      "out-vars" : [ 72, 84, 20, 13, 9, 85, 24, 12, 10 ],
      "decl-vars" : [ ],
      "line-start" : 725,
      "ast" : {
        "expressions" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isSchedAct",
            "variable" : 81
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 730,
      "code" : "case isSchedAct:\n\tb.schedPrograms[secName] = &SchedProgram{\n\t\tName:  secName,\n\t\tinsns: insns,\n\t\tfd:    int(progFd),\n\t}",
      "entry" : false,
      "use-vars" : [ 81 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 96 ],
      "in-vars" : [ 72, 24, 13, 9, 85, 20, 12, 10, 84 ],
      "exit" : false,
      "out-vars" : [ 12, 13, 10, 9, 20, 24 ],
      "decl-vars" : [ ],
      "line-start" : 726,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 104,
          "index" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "secName",
              "variable" : 72
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "schedPrograms",
              "variable" : 66
            },
            "go-type" : 103,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 104,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 105,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 105,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SchedProgram"
              }
            },
            "go-type" : 105,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Name",
                  "variable" : 67
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "secName",
                  "variable" : 72
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 68
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "insns",
                  "variable" : 84
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fd",
                  "variable" : 69
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "coerced-to" : {
                  "go-type" : 5,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 5,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "go-type" : -1,
                "kind" : "expression",
                "target" : {
                  "go-type" : -1,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "progFd",
                    "variable" : 85
                  }
                },
                "type" : "cast"
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 730,
      "code" : "b.schedPrograms[secName] = &SchedProgram{\n\tName:  secName,\n\tinsns: insns,\n\tfd:    int(progFd),\n}",
      "entry" : false,
      "use-vars" : [ 85, 84, 9, 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 12, 13, 10, 9 ],
      "exit" : false,
      "out-vars" : [ 12, 13 ],
      "decl-vars" : [ ],
      "line-start" : 735,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "parameters",
              "variable" : 10
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "initializePerfMaps"
            },
            "go-type" : 0,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 735,
      "code" : "return b.initializePerfMaps(parameters)",
      "entry" : false,
      "use-vars" : [ 9, 10 ]
    } ],
    "code" : "// Load loads the BPF programs and BPF maps in the module. Each ELF section\n// can optionally have parameters that changes how it is configured.\nfunc (b *Module) Load(parameters map[string]SectionParams) error {\n\tif b.fileName != \"\" {\n\t\tfileReader, err := os.Open(b.fileName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer fileReader.Close()\n\t\tb.fileReader = fileReader\n\t}\n\n\tvar err error\n\tb.file, err = elf.NewFile(b.fileReader)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tlicense, err := elfReadLicense(b.file)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tlp := unsafe.Pointer(C.CString(license))\n\tdefer C.free(lp)\n\n\tversion, err := elfReadVersion(b.file)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif version == useCurrentKernelVersion {\n\t\tversion, err = CurrentKernelVersion()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tmaps, err := elfReadMaps(b.file, parameters)\n\tif err != nil {\n\t\treturn err\n\t}\n\tb.maps = maps\n\n\tprocessed := make([]bool, len(b.file.Sections))\n\tfor i, section := range b.file.Sections {\n\t\tif processed[i] {\n\t\t\tcontinue\n\t\t}\n\n\t\tdata, err := section.Data()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif len(data) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tif section.Type == elf.SHT_REL {\n\t\t\trsection := b.file.Sections[section.Info]\n\n\t\t\tprocessed[i] = true\n\t\t\tprocessed[section.Info] = true\n\n\t\t\tsecName := rsection.Name\n\n\t\t\tisKprobe := strings.HasPrefix(secName, \"kprobe/\")\n\t\t\tisKretprobe := strings.HasPrefix(secName, \"kretprobe/\")\n\t\t\tisCgroupSkb := strings.HasPrefix(secName, \"cgroup/skb\")\n\t\t\tisCgroupSock := strings.HasPrefix(secName, \"cgroup/sock\")\n\t\t\tisSocketFilter := strings.HasPrefix(secName, \"socket\")\n\t\t\tisTracepoint := strings.HasPrefix(secName, \"tracepoint/\")\n\t\t\tisSchedCls := strings.HasPrefix(secName, \"sched_cls/\")\n\t\t\tisSchedAct := strings.HasPrefix(secName, \"sched_act/\")\n\n\t\t\tvar progType uint32\n\t\t\tswitch {\n\t\t\tcase isKprobe:\n\t\t\t\tfallthrough\n\t\t\tcase isKretprobe:\n\t\t\t\tprogType = uint32(C.BPF_PROG_TYPE_KPROBE)\n\t\t\tcase isCgroupSkb:\n\t\t\t\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SKB)\n\t\t\tcase isCgroupSock:\n\t\t\t\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SOCK)\n\t\t\tcase isSocketFilter:\n\t\t\t\tprogType = uint32(C.BPF_PROG_TYPE_SOCKET_FILTER)\n\t\t\tcase isTracepoint:\n\t\t\t\tprogType = uint32(C.BPF_PROG_TYPE_TRACEPOINT)\n\t\t\tcase isSchedCls:\n\t\t\t\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_CLS)\n\t\t\tcase isSchedAct:\n\t\t\t\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_ACT)\n\t\t\t}\n\n\t\t\tif isKprobe || isKretprobe || isCgroupSkb || isCgroupSock || isSocketFilter || isTracepoint || isSchedCls || isSchedAct {\n\t\t\t\trdata, err := rsection.Data()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\n\t\t\t\tif len(rdata) == 0 {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\terr = b.relocate(data, rdata)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\n\t\t\t\tinsns := (*C.struct_bpf_insn)(unsafe.Pointer(&rdata[0]))\n\n\t\t\t\tprogFd, err := C.bpf_prog_load(progType,\n\t\t\t\t\tinsns, C.int(rsection.Size),\n\t\t\t\t\t(*C.char)(lp), C.int(version),\n\t\t\t\t\t(*C.char)(unsafe.Pointer(&b.log[0])), C.int(len(b.log)))\n\t\t\t\tif progFd < 0 {\n\t\t\t\t\treturn fmt.Errorf(\"error while loading %q (%v):\\n%s\", secName, err, b.log)\n\t\t\t\t}\n\n\t\t\t\tswitch {\n\t\t\t\tcase isKprobe:\n\t\t\t\t\tfallthrough\n\t\t\t\tcase isKretprobe:\n\t\t\t\t\tb.probes[secName] = &Kprobe{\n\t\t\t\t\t\tName:  secName,\n\t\t\t\t\t\tinsns: insns,\n\t\t\t\t\t\tfd:    int(progFd),\n\t\t\t\t\t\tefd:   -1,\n\t\t\t\t\t}\n\t\t\t\tcase isCgroupSkb:\n\t\t\t\t\tfallthrough\n\t\t\t\tcase isCgroupSock:\n\t\t\t\t\tb.cgroupPrograms[secName] = &CgroupProgram{\n\t\t\t\t\t\tName:  secName,\n\t\t\t\t\t\tinsns: insns,\n\t\t\t\t\t\tfd:    int(progFd),\n\t\t\t\t\t}\n\t\t\t\tcase isSocketFilter:\n\t\t\t\t\tb.socketFilters[secName] = &SocketFilter{\n\t\t\t\t\t\tName:  secName,\n\t\t\t\t\t\tinsns: insns,\n\t\t\t\t\t\tfd:    int(progFd),\n\t\t\t\t\t}\n\t\t\t\tcase isTracepoint:\n\t\t\t\t\tb.tracepointPrograms[secName] = &TracepointProgram{\n\t\t\t\t\t\tName:  secName,\n\t\t\t\t\t\tinsns: insns,\n\t\t\t\t\t\tfd:    int(progFd),\n\t\t\t\t\t}\n\t\t\t\tcase isSchedCls:\n\t\t\t\t\tfallthrough\n\t\t\t\tcase isSchedAct:\n\t\t\t\t\tb.schedPrograms[secName] = &SchedProgram{\n\t\t\t\t\t\tName:  secName,\n\t\t\t\t\t\tinsns: insns,\n\t\t\t\t\t\tfd:    int(progFd),\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfor i, section := range b.file.Sections {\n\t\tif processed[i] {\n\t\t\tcontinue\n\t\t}\n\n\t\tsecName := section.Name\n\n\t\tisKprobe := strings.HasPrefix(secName, \"kprobe/\")\n\t\tisKretprobe := strings.HasPrefix(secName, \"kretprobe/\")\n\t\tisCgroupSkb := strings.HasPrefix(secName, \"cgroup/skb\")\n\t\tisCgroupSock := strings.HasPrefix(secName, \"cgroup/sock\")\n\t\tisSocketFilter := strings.HasPrefix(secName, \"socket\")\n\t\tisTracepoint := strings.HasPrefix(secName, \"tracepoint/\")\n\t\tisSchedCls := strings.HasPrefix(secName, \"sched_cls/\")\n\t\tisSchedAct := strings.HasPrefix(secName, \"sched_act/\")\n\n\t\tvar progType uint32\n\t\tswitch {\n\t\tcase isKprobe:\n\t\t\tfallthrough\n\t\tcase isKretprobe:\n\t\t\tprogType = uint32(C.BPF_PROG_TYPE_KPROBE)\n\t\tcase isCgroupSkb:\n\t\t\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SKB)\n\t\tcase isCgroupSock:\n\t\t\tprogType = uint32(C.BPF_PROG_TYPE_CGROUP_SOCK)\n\t\tcase isSocketFilter:\n\t\t\tprogType = uint32(C.BPF_PROG_TYPE_SOCKET_FILTER)\n\t\tcase isTracepoint:\n\t\t\tprogType = uint32(C.BPF_PROG_TYPE_TRACEPOINT)\n\t\tcase isSchedCls:\n\t\t\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_CLS)\n\t\tcase isSchedAct:\n\t\t\tprogType = uint32(C.BPF_PROG_TYPE_SCHED_ACT)\n\t\t}\n\n\t\tif isKprobe || isKretprobe || isCgroupSkb || isCgroupSock || isSocketFilter || isTracepoint || isSchedCls || isSchedAct {\n\t\t\tdata, err := section.Data()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tif len(data) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tinsns := (*C.struct_bpf_insn)(unsafe.Pointer(&data[0]))\n\n\t\t\tprogFd, err := C.bpf_prog_load(progType,\n\t\t\t\tinsns, C.int(section.Size),\n\t\t\t\t(*C.char)(lp), C.int(version),\n\t\t\t\t(*C.char)(unsafe.Pointer(&b.log[0])), C.int(len(b.log)))\n\t\t\tif progFd < 0 {\n\t\t\t\treturn fmt.Errorf(\"error while loading %q (%v):\\n%s\", section.Name, err, b.log)\n\t\t\t}\n\n\t\t\tswitch {\n\t\t\tcase isKprobe:\n\t\t\t\tfallthrough\n\t\t\tcase isKretprobe:\n\t\t\t\tb.probes[secName] = &Kprobe{\n\t\t\t\t\tName:  secName,\n\t\t\t\t\tinsns: insns,\n\t\t\t\t\tfd:    int(progFd),\n\t\t\t\t\tefd:   -1,\n\t\t\t\t}\n\t\t\tcase isCgroupSkb:\n\t\t\t\tfallthrough\n\t\t\tcase isCgroupSock:\n\t\t\t\tb.cgroupPrograms[secName] = &CgroupProgram{\n\t\t\t\t\tName:  secName,\n\t\t\t\t\tinsns: insns,\n\t\t\t\t\tfd:    int(progFd),\n\t\t\t\t}\n\t\t\tcase isSocketFilter:\n\t\t\t\tb.socketFilters[secName] = &SocketFilter{\n\t\t\t\t\tName:  secName,\n\t\t\t\t\tinsns: insns,\n\t\t\t\t\tfd:    int(progFd),\n\t\t\t\t}\n\t\t\tcase isTracepoint:\n\t\t\t\tb.tracepointPrograms[secName] = &TracepointProgram{\n\t\t\t\t\tName:  secName,\n\t\t\t\t\tinsns: insns,\n\t\t\t\t\tfd:    int(progFd),\n\t\t\t\t}\n\t\t\tcase isSchedCls:\n\t\t\t\tfallthrough\n\t\t\tcase isSchedAct:\n\t\t\t\tb.schedPrograms[secName] = &SchedProgram{\n\t\t\t\t\tName:  secName,\n\t\t\t\t\tinsns: insns,\n\t\t\t\t\tfd:    int(progFd),\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn b.initializePerfMaps(parameters)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Load",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "Open",
      "package" : 4,
      "type" : 129,
      "exported" : true
    }, {
      "name" : "Close",
      "package" : 4,
      "type" : 77,
      "exported" : true
    }, {
      "name" : "NewFile",
      "package" : 2,
      "type" : 133,
      "exported" : true
    }, {
      "name" : "elfReadLicense",
      "package" : 0,
      "type" : 136,
      "exported" : false
    }, {
      "name" : "elfReadVersion",
      "package" : 0,
      "type" : 140,
      "exported" : false
    }, {
      "name" : "CurrentKernelVersion",
      "package" : 0,
      "type" : 141,
      "exported" : true
    }, {
      "name" : "elfReadMaps",
      "package" : 0,
      "type" : 143,
      "exported" : false
    }, {
      "name" : "Data",
      "package" : 2,
      "type" : 150,
      "exported" : true
    }, {
      "name" : "HasPrefix",
      "package" : 9,
      "type" : 152,
      "exported" : true
    }, {
      "name" : "relocate",
      "package" : 0,
      "type" : 155,
      "exported" : false
    }, {
      "name" : "Errorf",
      "package" : 10,
      "type" : 158,
      "exported" : true
    }, {
      "name" : "initializePerfMaps",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ],
    "line-end" : 736,
    "line-start" : 476,
    "names" : [ "Load" ],
    "package" : 0,
    "packages" : [ {
      "name" : "elf",
      "path" : "github.com/iovisor/gobpf/elf"
    }, {
      "name" : "io",
      "path" : "io"
    }, {
      "name" : "elf",
      "path" : "debug/elf"
    }, {
      "name" : "binary",
      "path" : "encoding/binary"
    }, {
      "name" : "os",
      "path" : "os"
    }, {
      "name" : "poll",
      "path" : "internal/poll"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "C",
      "path" : "C"
    }, {
      "name" : "strings",
      "path" : "strings"
    }, {
      "name" : "fmt",
      "path" : "fmt"
    } ],
    "params" : [ 10 ],
    "receivers" : [ 9 ],
    "results" : [ 11 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(parameters map[string]github.com/iovisor/gobpf/elf.SectionParams) error",
      "params" : 1,
      "recv" : 9,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "parameters",
        "type" : 2
      } ],
      "name" : "(parameters map[string]github.com/iovisor/gobpf/elf.SectionParams)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "key" : 7,
      "name" : "map[string]github.com/iovisor/gobpf/elf.SectionParams",
      "type" : "Map",
      "underlying" : 2
    }, {
      "local-name" : "SectionParams",
      "name" : "github.com/iovisor/gobpf/elf.SectionParams",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "PerfRingBufferPageCount",
        "type" : 5
      }, {
        "name" : "SkipPerfMapInitialization",
        "type" : 6
      }, {
        "name" : "PinPath",
        "type" : 7
      } ],
      "name" : "struct{PerfRingBufferPageCount int; SkipPerfMapInitialization bool; PinPath string}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 10
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 11
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 10
    }, {
      "name" : "func() string",
      "params" : 12,
      "recv" : 0,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "*github.com/iovisor/gobpf/elf.Module",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "local-name" : "Module",
      "name" : "github.com/iovisor/gobpf/elf.Module",
      "package" : 0,
      "type" : "Named",
      "underlying" : 16
    }, {
      "fields" : [ {
        "name" : "fileName",
        "type" : 7
      }, {
        "name" : "fileReader",
        "type" : 17
      }, {
        "name" : "file",
        "type" : 25
      }, {
        "name" : "log",
        "type" : 21
      }, {
        "name" : "maps",
        "type" : 81
      }, {
        "name" : "probes",
        "type" : 89
      }, {
        "name" : "cgroupPrograms",
        "type" : 93
      }, {
        "name" : "socketFilters",
        "type" : 97
      }, {
        "name" : "tracepointPrograms",
        "type" : 100
      }, {
        "name" : "schedPrograms",
        "type" : 103
      } ],
      "name" : "struct{fileName string; fileReader io.ReaderAt; file *debug/elf.File; log []byte; maps map[string]*github.com/iovisor/gobpf/elf.Map; probes map[string]*github.com/iovisor/gobpf/elf.Kprobe; cgroupPrograms map[string]*github.com/iovisor/gobpf/elf.CgroupProgram; socketFilters map[string]*github.com/iovisor/gobpf/elf.SocketFilter; tracepointPrograms map[string]*github.com/iovisor/gobpf/elf.TracepointProgram; schedPrograms map[string]*github.com/iovisor/gobpf/elf.SchedProgram}",
      "type" : "Struct",
      "underlying" : 16
    }, {
      "local-name" : "ReaderAt",
      "name" : "io.ReaderAt",
      "package" : 1,
      "type" : "Named",
      "underlying" : 18
    }, {
      "methods" : [ {
        "name" : "ReadAt",
        "type" : 19
      } ],
      "name" : "interface{ReadAt(p []byte, off int64) (n int, err error)}",
      "type" : "Interface",
      "underlying" : 18
    }, {
      "name" : "func(p []byte, off int64) (n int, err error)",
      "params" : 20,
      "recv" : 1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 19,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 21
      }, {
        "name" : "off",
        "type" : 23
      } ],
      "name" : "(p []byte, off int64)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "elem" : 22,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 21
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 5
      }, {
        "name" : "err",
        "type" : 9
      } ],
      "name" : "(n int, err error)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "elem" : 26,
      "name" : "*debug/elf.File",
      "type" : "Pointer",
      "underlying" : 25
    }, {
      "local-name" : "File",
      "name" : "debug/elf.File",
      "package" : 2,
      "type" : "Named",
      "underlying" : 27
    }, {
      "fields" : [ {
        "name" : "FileHeader",
        "type" : 28
      }, {
        "name" : "Sections",
        "type" : 55
      }, {
        "name" : "Progs",
        "type" : 67
      }, {
        "name" : "closer",
        "type" : 75
      }, {
        "name" : "gnuNeed",
        "type" : 78
      }, {
        "name" : "gnuVersym",
        "type" : 21
      } ],
      "name" : "struct{debug/elf.FileHeader; Sections []*debug/elf.Section; Progs []*debug/elf.Prog; closer io.Closer; gnuNeed []debug/elf.verneed; gnuVersym []byte}",
      "type" : "Struct",
      "underlying" : 27
    }, {
      "local-name" : "FileHeader",
      "name" : "debug/elf.FileHeader",
      "package" : 2,
      "type" : "Named",
      "underlying" : 29
    }, {
      "fields" : [ {
        "name" : "Class",
        "type" : 30
      }, {
        "name" : "Data",
        "type" : 31
      }, {
        "name" : "Version",
        "type" : 32
      }, {
        "name" : "OSABI",
        "type" : 33
      }, {
        "name" : "ABIVersion",
        "type" : 34
      }, {
        "name" : "ByteOrder",
        "type" : 35
      }, {
        "name" : "Type",
        "type" : 53
      }, {
        "name" : "Machine",
        "type" : 54
      }, {
        "name" : "Entry",
        "type" : 45
      } ],
      "name" : "struct{Class debug/elf.Class; Data debug/elf.Data; Version debug/elf.Version; OSABI debug/elf.OSABI; ABIVersion uint8; ByteOrder encoding/binary.ByteOrder; Type debug/elf.Type; Machine debug/elf.Machine; Entry uint64}",
      "type" : "Struct",
      "underlying" : 29
    }, {
      "local-name" : "Class",
      "name" : "debug/elf.Class",
      "package" : 2,
      "type" : "Named",
      "underlying" : 22
    }, {
      "local-name" : "Data",
      "name" : "debug/elf.Data",
      "package" : 2,
      "type" : "Named",
      "underlying" : 22
    }, {
      "local-name" : "Version",
      "name" : "debug/elf.Version",
      "package" : 2,
      "type" : "Named",
      "underlying" : 22
    }, {
      "local-name" : "OSABI",
      "name" : "debug/elf.OSABI",
      "package" : 2,
      "type" : "Named",
      "underlying" : 22
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 34
    }, {
      "local-name" : "ByteOrder",
      "name" : "encoding/binary.ByteOrder",
      "package" : 3,
      "type" : "Named",
      "underlying" : 36
    }, {
      "methods" : [ {
        "name" : "PutUint16",
        "type" : 37
      }, {
        "name" : "PutUint32",
        "type" : 40
      }, {
        "name" : "PutUint64",
        "type" : 43
      }, {
        "name" : "String",
        "type" : 11
      }, {
        "name" : "Uint16",
        "type" : 46
      }, {
        "name" : "Uint32",
        "type" : 49
      }, {
        "name" : "Uint64",
        "type" : 51
      } ],
      "name" : "interface{PutUint16([]byte, uint16); PutUint32([]byte, uint32); PutUint64([]byte, uint64); String() string; Uint16([]byte) uint16; Uint32([]byte) uint32; Uint64([]byte) uint64}",
      "type" : "Interface",
      "underlying" : 36
    }, {
      "name" : "func([]byte, uint16)",
      "params" : 38,
      "recv" : 2,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      }, {
        "name" : "",
        "type" : 39
      } ],
      "name" : "([]byte, uint16)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 39
    }, {
      "name" : "func([]byte, uint32)",
      "params" : 41,
      "recv" : 3,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 40,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      }, {
        "name" : "",
        "type" : 42
      } ],
      "name" : "([]byte, uint32)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 42
    }, {
      "name" : "func([]byte, uint64)",
      "params" : 44,
      "recv" : 4,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      }, {
        "name" : "",
        "type" : 45
      } ],
      "name" : "([]byte, uint64)",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 45
    }, {
      "name" : "func([]byte) uint16",
      "params" : 47,
      "recv" : 5,
      "results" : 48,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(uint16)",
      "type" : "Tuple",
      "underlying" : 48
    }, {
      "name" : "func([]byte) uint32",
      "params" : 47,
      "recv" : 6,
      "results" : 50,
      "type" : "Signature",
      "underlying" : 49,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 42
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "name" : "func([]byte) uint64",
      "params" : 47,
      "recv" : 7,
      "results" : 52,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 45
      } ],
      "name" : "(uint64)",
      "type" : "Tuple",
      "underlying" : 52
    }, {
      "local-name" : "Type",
      "name" : "debug/elf.Type",
      "package" : 2,
      "type" : "Named",
      "underlying" : 39
    }, {
      "local-name" : "Machine",
      "name" : "debug/elf.Machine",
      "package" : 2,
      "type" : "Named",
      "underlying" : 39
    }, {
      "elem" : 56,
      "name" : "[]*debug/elf.Section",
      "type" : "Slice",
      "underlying" : 55
    }, {
      "elem" : 57,
      "name" : "*debug/elf.Section",
      "type" : "Pointer",
      "underlying" : 56
    }, {
      "local-name" : "Section",
      "name" : "debug/elf.Section",
      "package" : 2,
      "type" : "Named",
      "underlying" : 58
    }, {
      "fields" : [ {
        "name" : "SectionHeader",
        "type" : 59
      }, {
        "name" : "ReaderAt",
        "type" : 17
      }, {
        "name" : "sr",
        "type" : 63
      }, {
        "name" : "compressionType",
        "type" : 66
      }, {
        "name" : "compressionOffset",
        "type" : 23
      } ],
      "name" : "struct{debug/elf.SectionHeader; io.ReaderAt; sr *io.SectionReader; compressionType debug/elf.CompressionType; compressionOffset int64}",
      "type" : "Struct",
      "underlying" : 58
    }, {
      "local-name" : "SectionHeader",
      "name" : "debug/elf.SectionHeader",
      "package" : 2,
      "type" : "Named",
      "underlying" : 60
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 7
      }, {
        "name" : "Type",
        "type" : 61
      }, {
        "name" : "Flags",
        "type" : 62
      }, {
        "name" : "Addr",
        "type" : 45
      }, {
        "name" : "Offset",
        "type" : 45
      }, {
        "name" : "Size",
        "type" : 45
      }, {
        "name" : "Link",
        "type" : 42
      }, {
        "name" : "Info",
        "type" : 42
      }, {
        "name" : "Addralign",
        "type" : 45
      }, {
        "name" : "Entsize",
        "type" : 45
      }, {
        "name" : "FileSize",
        "type" : 45
      } ],
      "name" : "struct{Name string; Type debug/elf.SectionType; Flags debug/elf.SectionFlag; Addr uint64; Offset uint64; Size uint64; Link uint32; Info uint32; Addralign uint64; Entsize uint64; FileSize uint64}",
      "type" : "Struct",
      "underlying" : 60
    }, {
      "local-name" : "SectionType",
      "name" : "debug/elf.SectionType",
      "package" : 2,
      "type" : "Named",
      "underlying" : 42
    }, {
      "local-name" : "SectionFlag",
      "name" : "debug/elf.SectionFlag",
      "package" : 2,
      "type" : "Named",
      "underlying" : 42
    }, {
      "elem" : 64,
      "name" : "*io.SectionReader",
      "type" : "Pointer",
      "underlying" : 63
    }, {
      "local-name" : "SectionReader",
      "name" : "io.SectionReader",
      "package" : 1,
      "type" : "Named",
      "underlying" : 65
    }, {
      "fields" : [ {
        "name" : "r",
        "type" : 17
      }, {
        "name" : "base",
        "type" : 23
      }, {
        "name" : "off",
        "type" : 23
      }, {
        "name" : "limit",
        "type" : 23
      } ],
      "name" : "struct{r io.ReaderAt; base int64; off int64; limit int64}",
      "type" : "Struct",
      "underlying" : 65
    }, {
      "local-name" : "CompressionType",
      "name" : "debug/elf.CompressionType",
      "package" : 2,
      "type" : "Named",
      "underlying" : 5
    }, {
      "elem" : 68,
      "name" : "[]*debug/elf.Prog",
      "type" : "Slice",
      "underlying" : 67
    }, {
      "elem" : 69,
      "name" : "*debug/elf.Prog",
      "type" : "Pointer",
      "underlying" : 68
    }, {
      "local-name" : "Prog",
      "name" : "debug/elf.Prog",
      "package" : 2,
      "type" : "Named",
      "underlying" : 70
    }, {
      "fields" : [ {
        "name" : "ProgHeader",
        "type" : 71
      }, {
        "name" : "ReaderAt",
        "type" : 17
      }, {
        "name" : "sr",
        "type" : 63
      } ],
      "name" : "struct{debug/elf.ProgHeader; io.ReaderAt; sr *io.SectionReader}",
      "type" : "Struct",
      "underlying" : 70
    }, {
      "local-name" : "ProgHeader",
      "name" : "debug/elf.ProgHeader",
      "package" : 2,
      "type" : "Named",
      "underlying" : 72
    }, {
      "fields" : [ {
        "name" : "Type",
        "type" : 73
      }, {
        "name" : "Flags",
        "type" : 74
      }, {
        "name" : "Off",
        "type" : 45
      }, {
        "name" : "Vaddr",
        "type" : 45
      }, {
        "name" : "Paddr",
        "type" : 45
      }, {
        "name" : "Filesz",
        "type" : 45
      }, {
        "name" : "Memsz",
        "type" : 45
      }, {
        "name" : "Align",
        "type" : 45
      } ],
      "name" : "struct{Type debug/elf.ProgType; Flags debug/elf.ProgFlag; Off uint64; Vaddr uint64; Paddr uint64; Filesz uint64; Memsz uint64; Align uint64}",
      "type" : "Struct",
      "underlying" : 72
    }, {
      "local-name" : "ProgType",
      "name" : "debug/elf.ProgType",
      "package" : 2,
      "type" : "Named",
      "underlying" : 5
    }, {
      "local-name" : "ProgFlag",
      "name" : "debug/elf.ProgFlag",
      "package" : 2,
      "type" : "Named",
      "underlying" : 42
    }, {
      "local-name" : "Closer",
      "name" : "io.Closer",
      "package" : 1,
      "type" : "Named",
      "underlying" : 76
    }, {
      "methods" : [ {
        "name" : "Close",
        "type" : 77
      } ],
      "name" : "interface{Close() error}",
      "type" : "Interface",
      "underlying" : 76
    }, {
      "name" : "func() error",
      "params" : 12,
      "recv" : 8,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 77,
      "variadic" : false
    }, {
      "elem" : 79,
      "name" : "[]debug/elf.verneed",
      "type" : "Slice",
      "underlying" : 78
    }, {
      "local-name" : "verneed",
      "name" : "debug/elf.verneed",
      "package" : 2,
      "type" : "Named",
      "underlying" : 80
    }, {
      "fields" : [ {
        "name" : "File",
        "type" : 7
      }, {
        "name" : "Name",
        "type" : 7
      } ],
      "name" : "struct{File string; Name string}",
      "type" : "Struct",
      "underlying" : 80
    }, {
      "elem" : 82,
      "key" : 7,
      "name" : "map[string]*github.com/iovisor/gobpf/elf.Map",
      "type" : "Map",
      "underlying" : 81
    }, {
      "elem" : 83,
      "name" : "*github.com/iovisor/gobpf/elf.Map",
      "type" : "Pointer",
      "underlying" : 82
    }, {
      "local-name" : "Map",
      "name" : "github.com/iovisor/gobpf/elf.Map",
      "package" : 0,
      "type" : "Named",
      "underlying" : 84
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 7
      }, {
        "name" : "m",
        "type" : 85
      }, {
        "name" : "pmuFDs",
        "type" : 87
      }, {
        "name" : "headers",
        "type" : 88
      }, {
        "name" : "pageCount",
        "type" : 5
      } ],
      "name" : "struct{Name string; m *invalid type; pmuFDs []invalid type; headers []*invalid type; pageCount int}",
      "type" : "Struct",
      "underlying" : 84
    }, {
      "elem" : 86,
      "name" : "*invalid type",
      "type" : "Pointer",
      "underlying" : 85
    }, {
      "name" : "invalid type",
      "type" : "Basic",
      "underlying" : 86
    }, {
      "elem" : 86,
      "name" : "[]invalid type",
      "type" : "Slice",
      "underlying" : 87
    }, {
      "elem" : 85,
      "name" : "[]*invalid type",
      "type" : "Slice",
      "underlying" : 88
    }, {
      "elem" : 90,
      "key" : 7,
      "name" : "map[string]*github.com/iovisor/gobpf/elf.Kprobe",
      "type" : "Map",
      "underlying" : 89
    }, {
      "elem" : 91,
      "name" : "*github.com/iovisor/gobpf/elf.Kprobe",
      "type" : "Pointer",
      "underlying" : 90
    }, {
      "local-name" : "Kprobe",
      "name" : "github.com/iovisor/gobpf/elf.Kprobe",
      "package" : 0,
      "type" : "Named",
      "underlying" : 92
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 7
      }, {
        "name" : "insns",
        "type" : 85
      }, {
        "name" : "fd",
        "type" : 5
      }, {
        "name" : "efd",
        "type" : 5
      } ],
      "name" : "struct{Name string; insns *invalid type; fd int; efd int}",
      "type" : "Struct",
      "underlying" : 92
    }, {
      "elem" : 94,
      "key" : 7,
      "name" : "map[string]*github.com/iovisor/gobpf/elf.CgroupProgram",
      "type" : "Map",
      "underlying" : 93
    }, {
      "elem" : 95,
      "name" : "*github.com/iovisor/gobpf/elf.CgroupProgram",
      "type" : "Pointer",
      "underlying" : 94
    }, {
      "local-name" : "CgroupProgram",
      "name" : "github.com/iovisor/gobpf/elf.CgroupProgram",
      "package" : 0,
      "type" : "Named",
      "underlying" : 96
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 7
      }, {
        "name" : "insns",
        "type" : 85
      }, {
        "name" : "fd",
        "type" : 5
      } ],
      "name" : "struct{Name string; insns *invalid type; fd int}",
      "type" : "Struct",
      "underlying" : 96
    }, {
      "elem" : 98,
      "key" : 7,
      "name" : "map[string]*github.com/iovisor/gobpf/elf.SocketFilter",
      "type" : "Map",
      "underlying" : 97
    }, {
      "elem" : 99,
      "name" : "*github.com/iovisor/gobpf/elf.SocketFilter",
      "type" : "Pointer",
      "underlying" : 98
    }, {
      "local-name" : "SocketFilter",
      "name" : "github.com/iovisor/gobpf/elf.SocketFilter",
      "package" : 0,
      "type" : "Named",
      "underlying" : 96
    }, {
      "elem" : 101,
      "key" : 7,
      "name" : "map[string]*github.com/iovisor/gobpf/elf.TracepointProgram",
      "type" : "Map",
      "underlying" : 100
    }, {
      "elem" : 102,
      "name" : "*github.com/iovisor/gobpf/elf.TracepointProgram",
      "type" : "Pointer",
      "underlying" : 101
    }, {
      "local-name" : "TracepointProgram",
      "name" : "github.com/iovisor/gobpf/elf.TracepointProgram",
      "package" : 0,
      "type" : "Named",
      "underlying" : 92
    }, {
      "elem" : 104,
      "key" : 7,
      "name" : "map[string]*github.com/iovisor/gobpf/elf.SchedProgram",
      "type" : "Map",
      "underlying" : 103
    }, {
      "elem" : 105,
      "name" : "*github.com/iovisor/gobpf/elf.SchedProgram",
      "type" : "Pointer",
      "underlying" : 104
    }, {
      "local-name" : "SchedProgram",
      "name" : "github.com/iovisor/gobpf/elf.SchedProgram",
      "package" : 0,
      "type" : "Named",
      "underlying" : 96
    }, {
      "elem" : 107,
      "name" : "*os.File",
      "type" : "Pointer",
      "underlying" : 106
    }, {
      "local-name" : "File",
      "name" : "os.File",
      "package" : 4,
      "type" : "Named",
      "underlying" : 108
    }, {
      "fields" : [ {
        "name" : "file",
        "type" : 109
      } ],
      "name" : "struct{*os.file}",
      "type" : "Struct",
      "underlying" : 108
    }, {
      "elem" : 110,
      "name" : "*os.file",
      "type" : "Pointer",
      "underlying" : 109
    }, {
      "local-name" : "file",
      "name" : "os.file",
      "package" : 4,
      "type" : "Named",
      "underlying" : 111
    }, {
      "fields" : [ {
        "name" : "pfd",
        "type" : 112
      }, {
        "name" : "name",
        "type" : 7
      }, {
        "name" : "dirinfo",
        "type" : 124
      }, {
        "name" : "nonblock",
        "type" : 6
      }, {
        "name" : "stdoutOrErr",
        "type" : 6
      }, {
        "name" : "appendMode",
        "type" : 6
      } ],
      "name" : "struct{pfd internal/poll.FD; name string; dirinfo *os.dirInfo; nonblock bool; stdoutOrErr bool; appendMode bool}",
      "type" : "Struct",
      "underlying" : 111
    }, {
      "local-name" : "FD",
      "name" : "internal/poll.FD",
      "package" : 5,
      "type" : "Named",
      "underlying" : 113
    }, {
      "fields" : [ {
        "name" : "fdmu",
        "type" : 114
      }, {
        "name" : "Sysfd",
        "type" : 5
      }, {
        "name" : "pd",
        "type" : 116
      }, {
        "name" : "iovecs",
        "type" : 119
      }, {
        "name" : "csema",
        "type" : 42
      }, {
        "name" : "isBlocking",
        "type" : 42
      }, {
        "name" : "IsStream",
        "type" : 6
      }, {
        "name" : "ZeroReadIsEOF",
        "type" : 6
      }, {
        "name" : "isFile",
        "type" : 6
      } ],
      "name" : "struct{fdmu internal/poll.fdMutex; Sysfd int; pd internal/poll.pollDesc; iovecs *[]syscall.Iovec; csema uint32; isBlocking uint32; IsStream bool; ZeroReadIsEOF bool; isFile bool}",
      "type" : "Struct",
      "underlying" : 113
    }, {
      "local-name" : "fdMutex",
      "name" : "internal/poll.fdMutex",
      "package" : 5,
      "type" : "Named",
      "underlying" : 115
    }, {
      "fields" : [ {
        "name" : "state",
        "type" : 45
      }, {
        "name" : "rsema",
        "type" : 42
      }, {
        "name" : "wsema",
        "type" : 42
      } ],
      "name" : "struct{state uint64; rsema uint32; wsema uint32}",
      "type" : "Struct",
      "underlying" : 115
    }, {
      "local-name" : "pollDesc",
      "name" : "internal/poll.pollDesc",
      "package" : 5,
      "type" : "Named",
      "underlying" : 117
    }, {
      "fields" : [ {
        "name" : "runtimeCtx",
        "type" : 118
      } ],
      "name" : "struct{runtimeCtx uintptr}",
      "type" : "Struct",
      "underlying" : 117
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 118
    }, {
      "elem" : 120,
      "name" : "*[]syscall.Iovec",
      "type" : "Pointer",
      "underlying" : 119
    }, {
      "elem" : 121,
      "name" : "[]syscall.Iovec",
      "type" : "Slice",
      "underlying" : 120
    }, {
      "local-name" : "Iovec",
      "name" : "syscall.Iovec",
      "package" : 6,
      "type" : "Named",
      "underlying" : 122
    }, {
      "fields" : [ {
        "name" : "Base",
        "type" : 123
      }, {
        "name" : "Len",
        "type" : 45
      } ],
      "name" : "struct{Base *byte; Len uint64}",
      "type" : "Struct",
      "underlying" : 122
    }, {
      "elem" : 22,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 123
    }, {
      "elem" : 125,
      "name" : "*os.dirInfo",
      "type" : "Pointer",
      "underlying" : 124
    }, {
      "local-name" : "dirInfo",
      "name" : "os.dirInfo",
      "package" : 4,
      "type" : "Named",
      "underlying" : 126
    }, {
      "fields" : [ {
        "name" : "buf",
        "type" : 21
      }, {
        "name" : "nbuf",
        "type" : 5
      }, {
        "name" : "bufp",
        "type" : 5
      } ],
      "name" : "struct{buf []byte; nbuf int; bufp int}",
      "type" : "Struct",
      "underlying" : 126
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 127
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 106
      }, {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(*os.File, error)",
      "type" : "Tuple",
      "underlying" : 128
    }, {
      "name" : "func(name string) (*os.File, error)",
      "params" : 130,
      "recv" : -1,
      "results" : 128,
      "type" : "Signature",
      "underlying" : 129,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 7
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 130
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 131
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      }, {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(*debug/elf.File, error)",
      "type" : "Tuple",
      "underlying" : 132
    }, {
      "name" : "func(r io.ReaderAt) (*debug/elf.File, error)",
      "params" : 134,
      "recv" : -1,
      "results" : 132,
      "type" : "Signature",
      "underlying" : 133,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "r",
        "type" : 17
      } ],
      "name" : "(r io.ReaderAt)",
      "type" : "Tuple",
      "underlying" : 134
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      }, {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(string, error)",
      "type" : "Tuple",
      "underlying" : 135
    }, {
      "name" : "func(file *debug/elf.File) (string, error)",
      "params" : 137,
      "recv" : -1,
      "results" : 135,
      "type" : "Signature",
      "underlying" : 136,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "file",
        "type" : 25
      } ],
      "name" : "(file *debug/elf.File)",
      "type" : "Tuple",
      "underlying" : 137
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 7,
      "type" : "Basic",
      "underlying" : 138
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 42
      }, {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(uint32, error)",
      "type" : "Tuple",
      "underlying" : 139
    }, {
      "name" : "func(file *debug/elf.File) (uint32, error)",
      "params" : 137,
      "recv" : -1,
      "results" : 139,
      "type" : "Signature",
      "underlying" : 140,
      "variadic" : false
    }, {
      "name" : "func() (uint32, error)",
      "params" : 12,
      "recv" : -1,
      "results" : 139,
      "type" : "Signature",
      "underlying" : 141,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 81
      }, {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(map[string]*github.com/iovisor/gobpf/elf.Map, error)",
      "type" : "Tuple",
      "underlying" : 142
    }, {
      "name" : "func(file *debug/elf.File, params map[string]github.com/iovisor/gobpf/elf.SectionParams) (map[string]*github.com/iovisor/gobpf/elf.Map, error)",
      "params" : 144,
      "recv" : -1,
      "results" : 142,
      "type" : "Signature",
      "underlying" : 143,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "file",
        "type" : 25
      }, {
        "name" : "params",
        "type" : 2
      } ],
      "name" : "(file *debug/elf.File, params map[string]github.com/iovisor/gobpf/elf.SectionParams)",
      "type" : "Tuple",
      "underlying" : 144
    }, {
      "elem" : 6,
      "name" : "[]bool",
      "type" : "Slice",
      "underlying" : 145
    }, {
      "name" : "func([]*debug/elf.Section) int",
      "params" : 147,
      "recv" : -1,
      "results" : 148,
      "type" : "Signature",
      "underlying" : 146,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 55
      } ],
      "name" : "([]*debug/elf.Section)",
      "type" : "Tuple",
      "underlying" : 147
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 148
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      }, {
        "name" : "",
        "type" : 9
      } ],
      "name" : "([]byte, error)",
      "type" : "Tuple",
      "underlying" : 149
    }, {
      "name" : "func() ([]byte, error)",
      "params" : 12,
      "recv" : -1,
      "results" : 149,
      "type" : "Signature",
      "underlying" : 150,
      "variadic" : false
    }, {
      "name" : "func([]byte) int",
      "params" : 47,
      "recv" : -1,
      "results" : 148,
      "type" : "Signature",
      "underlying" : 151,
      "variadic" : false
    }, {
      "name" : "func(s string, prefix string) bool",
      "params" : 153,
      "recv" : -1,
      "results" : 154,
      "type" : "Signature",
      "underlying" : 152,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 7
      }, {
        "name" : "prefix",
        "type" : 7
      } ],
      "name" : "(s string, prefix string)",
      "type" : "Tuple",
      "underlying" : 153
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 154
    }, {
      "name" : "func(data []byte, rdata []byte) error",
      "params" : 156,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 155,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 21
      }, {
        "name" : "rdata",
        "type" : 21
      } ],
      "name" : "(data []byte, rdata []byte)",
      "type" : "Tuple",
      "underlying" : 156
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 157
    }, {
      "name" : "func(format string, a ...interface{}) error",
      "params" : 159,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 158,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "format",
        "type" : 7
      }, {
        "name" : "a",
        "type" : 160
      } ],
      "name" : "(format string, a []interface{})",
      "type" : "Tuple",
      "underlying" : 159
    }, {
      "elem" : 161,
      "name" : "[]interface{}",
      "type" : "Slice",
      "underlying" : 160
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 161
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "parameters",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fileReader",
      "package" : 0,
      "type" : 106,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "lp",
      "package" : 0,
      "type" : 86,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fileName",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fileReader",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "file",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "license",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "version",
      "package" : 0,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "maps",
      "package" : 0,
      "type" : 81,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "maps",
      "package" : 0,
      "type" : 81,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Sections",
      "package" : 2,
      "type" : 55,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "processed",
      "package" : 0,
      "type" : 145,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "section",
      "package" : 0,
      "type" : 56,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Type",
      "package" : 2,
      "type" : 61,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Info",
      "package" : 2,
      "type" : 42,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "rsection",
      "package" : 0,
      "type" : 56,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Name",
      "package" : 2,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "secName",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isKprobe",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "progType",
      "package" : 0,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isKretprobe",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isCgroupSkb",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isCgroupSock",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isSocketFilter",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isTracepoint",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isSchedCls",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isSchedAct",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rdata",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "insns",
      "package" : 0,
      "type" : 86,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Size",
      "package" : 2,
      "type" : 45,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "log",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "progFd",
      "package" : 0,
      "type" : 86,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "probes",
      "package" : 0,
      "type" : 89,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Name",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "insns",
      "package" : 0,
      "type" : 85,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "efd",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "cgroupPrograms",
      "package" : 0,
      "type" : 93,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Name",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "insns",
      "package" : 0,
      "type" : 85,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "socketFilters",
      "package" : 0,
      "type" : 97,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Name",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "insns",
      "package" : 0,
      "type" : 85,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "tracepointPrograms",
      "package" : 0,
      "type" : 100,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Name",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "insns",
      "package" : 0,
      "type" : 85,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "schedPrograms",
      "package" : 0,
      "type" : 103,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Name",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "insns",
      "package" : 0,
      "type" : 85,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "section",
      "package" : 0,
      "type" : 56,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "secName",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isKprobe",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "progType",
      "package" : 0,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isKretprobe",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isCgroupSkb",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isCgroupSock",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isSocketFilter",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isTracepoint",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isSchedCls",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "isSchedAct",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "insns",
      "package" : 0,
      "type" : 86,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "progFd",
      "package" : 0,
      "type" : 86,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}