{
  "usage" : {
    "file" : "pcap.go",
    "label1" : "cast-struct",
    "label2" : "ffi",
    "line" : "438",
    "module" : "github.com/tsg/gopacket",
    "pkg" : "github.com/tsg/gopacket/pcap",
    "project" : "elastic/beats",
    "snippet" : "(*C.bpf_u_int32)(unsafe.Pointer(&maskp)),",
    "version" : "v0.0.0-20190320122513-dd3d0e41124a"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 4, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 4, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ 5, 6, 4 ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 1, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 2, 5 ],
      "decl-vars" : [ 5 ],
      "line-start" : 424,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "errorBuf"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : -1,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "char"
              }
            },
            "go-type" : -1,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 22,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "256"
              }
            }, {
              "go-type" : 22,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "calloc"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 424,
      "code" : "errorBuf := (*C.char)(C.calloc(errorBufferSize, 1))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 2, 5, 1, 4 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 1, 4, 2 ],
      "decl-vars" : [ 7 ],
      "line-start" : 427,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 18,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "netp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 427,
      "code" : "var netp uint32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 5, 7, 1, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 2, 5, 7, 1 ],
      "decl-vars" : [ 8 ],
      "line-start" : 428,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 18,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "maskp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 428,
      "code" : "var maskp uint32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 8 ],
      "in-vars" : [ 5, 7, 1, 8, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 2, 5, 7, 1 ],
      "decl-vars" : [ ],
      "line-start" : 432,
      "ast" : {
        "condition" : {
          "go-type" : 23,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "device",
                "variable" : 9
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 1
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 25,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 24,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 24,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 444,
      "code" : "if len(p.device) > 0 {\n\tdev := C.CString(p.device)\n\tdefer C.free(unsafe.Pointer(dev))\n\tif -1 == C.pcap_lookupnet(\n\t\tdev,\n\t\t(*C.bpf_u_int32)(unsafe.Pointer(&netp)),\n\t\t(*C.bpf_u_int32)(unsafe.Pointer(&maskp)),\n\t\terrorBuf,\n\t) {\n\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 5, 7, 1, 8, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 7, 1, 8, 4 ],
      "decl-vars" : [ 4 ],
      "line-start" : 433,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dev"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "device",
              "variable" : 9
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "CString"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 433,
      "code" : "dev := C.CString(p.device)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 2, 5, 7, 1, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 2, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 435,
      "ast" : {
        "condition" : {
          "go-type" : -1,
          "kind" : "expression",
          "left" : {
            "go-type" : 22,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "-1"
            }
          },
          "operator" : "==",
          "right" : {
            "arguments" : [ {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dev",
                "variable" : 4
              }
            }, {
              "coerced-to" : {
                "contained" : {
                  "go-type" : -1,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 2,
                    "value" : "C"
                  },
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "NoKind",
                    "kind" : "ident",
                    "value" : "bpf_u_int32"
                  }
                },
                "go-type" : -1,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : -1,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 27,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 27,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 27,
                "kind" : "expression",
                "target" : {
                  "go-type" : 28,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 18,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "netp",
                      "variable" : 7
                    }
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            }, {
              "coerced-to" : {
                "contained" : {
                  "go-type" : -1,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 2,
                    "value" : "C"
                  },
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "NoKind",
                    "kind" : "ident",
                    "value" : "bpf_u_int32"
                  }
                },
                "go-type" : -1,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : -1,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 27,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 27,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 27,
                "kind" : "expression",
                "target" : {
                  "go-type" : 28,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 18,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "maskp",
                      "variable" : 8
                    }
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            }, {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "errorBuf",
                "variable" : 5
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "pcap_lookupnet"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 443,
      "code" : "if -1 == C.pcap_lookupnet(\n\tdev,\n\t(*C.bpf_u_int32)(unsafe.Pointer(&netp)),\n\t(*C.bpf_u_int32)(unsafe.Pointer(&maskp)),\n\terrorBuf,\n) {\n\n}",
      "entry" : false,
      "use-vars" : [ 8, 5, 4, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 5, 1, 8, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 8, 10, 4, 2 ],
      "decl-vars" : [ 10 ],
      "line-start" : 446,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "struct_bpf_program"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "bpf"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 446,
      "code" : "var bpf C.struct_bpf_program",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 5, 1, 8, 10, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 8, 10, 6, 4 ],
      "decl-vars" : [ 6 ],
      "line-start" : 447,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "cexpr"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expr",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "CString"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 447,
      "code" : "cexpr := C.CString(expr)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 1, 8, 10, 6, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 10, 6, 4 ],
      "decl-vars" : [ ],
      "line-start" : 450,
      "ast" : {
        "condition" : {
          "go-type" : -1,
          "kind" : "expression",
          "left" : {
            "go-type" : 22,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "-1"
            }
          },
          "operator" : "==",
          "right" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cptr",
                "variable" : 11
              },
              "go-type" : 12,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 1
                }
              },
              "type" : "selector"
            }, {
              "go-type" : -1,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "bpf",
                  "variable" : 10
                }
              },
              "type" : "unary"
            }, {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cexpr",
                "variable" : 6
              }
            }, {
              "go-type" : 22,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            }, {
              "arguments" : [ {
                "go-type" : 18,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "maskp",
                  "variable" : 8
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : -1,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "C"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "bpf_u_int32"
                }
              },
              "go-type" : -1,
              "kind" : "expression",
              "type" : "call"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "pcap_compile"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 452,
      "code" : "if -1 == C.pcap_compile(p.cptr, &bpf, cexpr, 1, C.bpf_u_int32(maskp)) {\n\treturn p.Error()\n}",
      "entry" : false,
      "use-vars" : [ 1, 10, 6, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 6, 4, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 6, 4 ],
      "decl-vars" : [ ],
      "line-start" : 451,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Error"
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 451,
      "code" : "return p.Error()",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 15 ],
      "in-vars" : [ 4, 5, 1, 10, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 4, 5, 1, 10 ],
      "decl-vars" : [ ],
      "line-start" : 454,
      "ast" : {
        "condition" : {
          "go-type" : -1,
          "kind" : "expression",
          "left" : {
            "go-type" : 22,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "-1"
            }
          },
          "operator" : "==",
          "right" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cptr",
                "variable" : 11
              },
              "go-type" : 12,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 1
                }
              },
              "type" : "selector"
            }, {
              "go-type" : -1,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "bpf",
                  "variable" : 10
                }
              },
              "type" : "unary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "pcap_setfilter"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 457,
      "code" : "if -1 == C.pcap_setfilter(p.cptr, &bpf) {\n\tC.pcap_freecode(&bpf)\n\treturn p.Error()\n}",
      "entry" : false,
      "use-vars" : [ 1, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 5, 1, 10, 6, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 6, 4, 5 ],
      "decl-vars" : [ ],
      "line-start" : 455,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : -1,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "bpf",
                "variable" : 10
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "pcap_freecode"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 455,
      "code" : "C.pcap_freecode(&bpf)",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5, 1, 6, 4 ],
      "exit" : false,
      "out-vars" : [ 5, 6, 4 ],
      "decl-vars" : [ ],
      "line-start" : 456,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Error"
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 456,
      "code" : "return p.Error()",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 4, 5, 10, 6 ],
      "exit" : false,
      "out-vars" : [ 5, 6, 4 ],
      "decl-vars" : [ ],
      "line-start" : 459,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : -1,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "bpf",
                "variable" : 10
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "pcap_freecode"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 459,
      "code" : "C.pcap_freecode(&bpf)",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 4, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 5, 6, 4 ],
      "decl-vars" : [ ],
      "line-start" : 461,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 31,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 461,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// SetBPFFilter compiles and sets a BPF filter for the pcap handle.\nfunc (p *Handle) SetBPFFilter(expr string) (err error) {\n\terrorBuf := (*C.char)(C.calloc(errorBufferSize, 1))\n\tdefer C.free(unsafe.Pointer(errorBuf))\n\n\tvar netp uint32\n\tvar maskp uint32\n\n\tif len(p.device) > 0 {\n\t\tdev := C.CString(p.device)\n\t\tdefer C.free(unsafe.Pointer(dev))\n\t\tif -1 == C.pcap_lookupnet(\n\t\t\tdev,\n\t\t\t(*C.bpf_u_int32)(unsafe.Pointer(&netp)),\n\t\t\t(*C.bpf_u_int32)(unsafe.Pointer(&maskp)),\n\t\t\terrorBuf,\n\t\t) {\n\n\t\t}\n\t}\n\n\tvar bpf C.struct_bpf_program\n\tcexpr := C.CString(expr)\n\tdefer C.free(unsafe.Pointer(cexpr))\n\n\tif -1 == C.pcap_compile(p.cptr, &bpf, cexpr, 1, C.bpf_u_int32(maskp)) {\n\t\treturn p.Error()\n\t}\n\n\tif -1 == C.pcap_setfilter(p.cptr, &bpf) {\n\t\tC.pcap_freecode(&bpf)\n\t\treturn p.Error()\n\t}\n\n\tC.pcap_freecode(&bpf)\n\n\treturn nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "SetBPFFilter",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "Error",
      "package" : 0,
      "type" : 29,
      "exported" : true
    } ],
    "line-end" : 462,
    "line-start" : 423,
    "names" : [ "SetBPFFilter" ],
    "package" : 0,
    "packages" : [ {
      "name" : "pcap",
      "path" : "github.com/tsg/gopacket/pcap"
    }, {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "C",
      "path" : "C"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 2 ],
    "receivers" : [ 1 ],
    "results" : [ 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(expr string) (err error)",
      "params" : 1,
      "recv" : 1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "expr",
        "type" : 2
      } ],
      "name" : "(expr string)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 4
      } ],
      "name" : "(err error)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 5
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 6
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 5
    }, {
      "name" : "func() string",
      "params" : 7,
      "recv" : 0,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 6,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "elem" : 10,
      "name" : "*github.com/tsg/gopacket/pcap.Handle",
      "type" : "Pointer",
      "underlying" : 9
    }, {
      "local-name" : "Handle",
      "name" : "github.com/tsg/gopacket/pcap.Handle",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "cptr",
        "type" : 12
      }, {
        "name" : "blockForever",
        "type" : 14
      }, {
        "name" : "device",
        "type" : 2
      }, {
        "name" : "mu",
        "type" : 15
      }, {
        "name" : "pkthdr",
        "type" : 12
      }, {
        "name" : "buf_ptr",
        "type" : 12
      }, {
        "name" : "packetPoller",
        "type" : 19
      } ],
      "name" : "struct{cptr *invalid type; blockForever bool; device string; mu sync.Mutex; pkthdr *invalid type; buf_ptr *invalid type; packetPoller *github.com/tsg/gopacket/pcap.packetPoll}",
      "type" : "Struct",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "*invalid type",
      "type" : "Pointer",
      "underlying" : 12
    }, {
      "name" : "invalid type",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "local-name" : "Mutex",
      "name" : "sync.Mutex",
      "package" : 1,
      "type" : "Named",
      "underlying" : 16
    }, {
      "fields" : [ {
        "name" : "state",
        "type" : 17
      }, {
        "name" : "sema",
        "type" : 18
      } ],
      "name" : "struct{state int32; sema uint32}",
      "type" : "Struct",
      "underlying" : 16
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "elem" : 20,
      "name" : "*github.com/tsg/gopacket/pcap.packetPoll",
      "type" : "Pointer",
      "underlying" : 19
    }, {
      "local-name" : "packetPoll",
      "name" : "github.com/tsg/gopacket/pcap.packetPoll",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "pollfd",
        "type" : 13
      }, {
        "name" : "timeout",
        "type" : 13
      } ],
      "name" : "struct{pollfd invalid type; timeout invalid type}",
      "type" : "Struct",
      "underlying" : 21
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "name" : "func(string) int",
      "params" : 8,
      "recv" : -1,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 25,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 24
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 3,
      "type" : "Basic",
      "underlying" : 27
    }, {
      "elem" : 18,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 28
    }, {
      "name" : "func() error",
      "params" : 7,
      "recv" : -1,
      "results" : 30,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 31
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "expr",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dev",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "errorBuf",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "cexpr",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "netp",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "maskp",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "device",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "bpf",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "cptr",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}