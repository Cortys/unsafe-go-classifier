{
  "usage" : {
    "file" : "perf.go",
    "label1" : "cast-basic",
    "label2" : "serialization",
    "line" : "1269",
    "module" : "github.com/elastic/go-perf",
    "pkg" : "github.com/elastic/go-perf",
    "project" : "elastic/beats",
    "snippet" : "*a = *(*uint32)(unsafe.Pointer(&(*f)[0]))",
    "version" : "v0.0.0-20191212140718-9c656876f595"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 1269,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "a",
              "variable" : 1
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "go-type" : 2,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 9,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 9,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 9,
              "kind" : "expression",
              "target" : {
                "go-type" : 10,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 8,
                  "index" : {
                    "go-type" : 11,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 6,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 6,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 5,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "f",
                          "variable" : 0
                        }
                      },
                      "type" : "star"
                    },
                    "type" : "paren"
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1269,
      "code" : "*a = *(*uint32)(unsafe.Pointer(&(*f)[0]))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 1270,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 2
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "go-type" : 2,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 9,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 9,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 9,
              "kind" : "expression",
              "target" : {
                "go-type" : 10,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 8,
                  "index" : {
                    "go-type" : 11,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "4"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 6,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 6,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 5,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "f",
                          "variable" : 0
                        }
                      },
                      "type" : "star"
                    },
                    "type" : "paren"
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1270,
      "code" : "*b = *(*uint32)(unsafe.Pointer(&(*f)[4]))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1271,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "advance"
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1271,
      "code" : "f.advance(8)",
      "entry" : false,
      "use-vars" : [ 0 ]
    } ],
    "code" : "// uint32 decodes a pair of uint32s into a and b.\nfunc (f *fields) uint32(a, b *uint32) {\n\t*a = *(*uint32)(unsafe.Pointer(&(*f)[0]))\n\t*b = *(*uint32)(unsafe.Pointer(&(*f)[4]))\n\tf.advance(8)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "uint32",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "advance",
      "package" : 0,
      "type" : 14,
      "exported" : false
    } ],
    "line-end" : 1272,
    "line-start" : 1268,
    "names" : [ "uint32" ],
    "package" : 0,
    "packages" : [ {
      "name" : "perf",
      "path" : "github.com/elastic/go-perf"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 1, 2 ],
    "receivers" : [ 0 ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "(*github.com/elastic/go-perf.fields) func(a *uint32, b *uint32)",
      "params" : 1,
      "recv" : 0,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 2
      }, {
        "name" : "b",
        "type" : 2
      } ],
      "name" : "(a *uint32, b *uint32)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "*github.com/elastic/go-perf.fields",
      "type" : "Pointer",
      "underlying" : 5
    }, {
      "local-name" : "fields",
      "name" : "github.com/elastic/go-perf.fields",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "elem" : 8,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 7
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 9
    }, {
      "elem" : 8,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 10
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "func(n int)",
      "params" : 13,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 11
      } ],
      "name" : "(n int)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "name" : "(*github.com/elastic/go-perf.fields) func(n int)",
      "params" : 13,
      "recv" : 3,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 14,
      "variadic" : false
    } ],
    "variables" : [ {
      "name" : "f",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "a",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}