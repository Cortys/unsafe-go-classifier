{
  "usage" : {
    "file" : "helper_unsafe.go",
    "label1" : "cast-basic",
    "label2" : "serialization",
    "line" : "189",
    "module" : "github.com/ugorji/go",
    "pkg" : "github.com/ugorji/go/codec",
    "project" : "weaveworks/scope",
    "snippet" : "urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))",
    "version" : "v0.0.0-20170918222552-54210f4e076c"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ 2 ],
      "line-start" : 189,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "urv"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 24,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 24,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "unsafeReflectValue"
              }
            },
            "go-type" : 23,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 23,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "rv",
                  "variable" : 1
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 189,
      "code" : "urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 190,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 200,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 200,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 200,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int8"
                }
              },
              "go-type" : 27,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 27,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptr",
                "variable" : 3
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 23,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "urv",
                  "variable" : 2
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 200,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 200,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int8"
            }
          },
          "go-type" : 200,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "DecodeInt"
              },
              "go-type" : 36,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "d",
                  "variable" : 5
                },
                "go-type" : 6,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "d",
                    "variable" : 4
                  },
                  "go-type" : 3,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 0,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "f",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 39,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 190,
      "code" : "*(*int8)(urv.ptr) = int8(f.d.d.DecodeInt(8))",
      "entry" : false,
      "use-vars" : [ 0 ]
    } ],
    "code" : "func (f *decFnInfo) kInt8(rv reflect.Value) {\n\turv := (*unsafeReflectValue)(unsafe.Pointer(&rv))\n\t*(*int8)(urv.ptr) = int8(f.d.d.DecodeInt(8))\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "kInt8",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "DecodeInt",
      "package" : 0,
      "type" : 36,
      "exported" : true
    } ],
    "line-end" : 191,
    "line-start" : 188,
    "names" : [ "kInt8" ],
    "package" : 0,
    "packages" : [ {
      "name" : "codec",
      "path" : "github.com/ugorji/go/codec"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "io",
      "path" : "io"
    }, {
      "name" : "time",
      "path" : "time"
    } ],
    "params" : [ 1 ],
    "receivers" : [ 0 ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(rv reflect.Value)",
      "params" : 1,
      "recv" : 0,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "rv",
        "type" : 2
      } ],
      "name" : "(rv reflect.Value)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 1,
      "type" : "Named",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 4
      }, {
        "name" : "ptr",
        "type" : 13
      }, {
        "name" : "flag",
        "type" : 21
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 4
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 1,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      }, {
        "name" : "ptrdata",
        "type" : 7
      }, {
        "name" : "hash",
        "type" : 8
      }, {
        "name" : "tflag",
        "type" : 9
      }, {
        "name" : "align",
        "type" : 10
      }, {
        "name" : "fieldAlign",
        "type" : 10
      }, {
        "name" : "kind",
        "type" : 10
      }, {
        "name" : "equal",
        "type" : 11
      }, {
        "name" : "gcdata",
        "type" : 16
      }, {
        "name" : "str",
        "type" : 18
      }, {
        "name" : "ptrToThis",
        "type" : 20
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 10
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 12,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 19
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 19
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "elem" : 24,
      "name" : "*github.com/ugorji/go/codec.unsafeReflectValue",
      "type" : "Pointer",
      "underlying" : 23
    }, {
      "local-name" : "unsafeReflectValue",
      "name" : "github.com/ugorji/go/codec.unsafeReflectValue",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 13
      }, {
        "name" : "ptr",
        "type" : 13
      }, {
        "name" : "flag",
        "type" : 7
      } ],
      "name" : "struct{typ unsafe.Pointer; ptr unsafe.Pointer; flag uintptr}",
      "type" : "Struct",
      "underlying" : 25
    }, {
      "elem" : 2,
      "name" : "*reflect.Value",
      "type" : "Pointer",
      "underlying" : 26
    }, {
      "elem" : 200,
      "name" : "*int8",
      "type" : "Pointer",
      "underlying" : 27
    } ],
    "variables" : [ {
      "name" : "f",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "rv",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "urv",
      "package" : 0,
      "type" : 23,
      "exported" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 13,
      "exported" : false
    }, {
      "name" : "d",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "d",
      "package" : 0,
      "type" : 6,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}