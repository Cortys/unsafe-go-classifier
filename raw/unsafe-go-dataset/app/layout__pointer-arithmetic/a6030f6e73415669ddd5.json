{
  "usage" : {
    "file" : "aliasing.go",
    "label1" : "pointer-arithmetic",
    "label2" : "layout",
    "line" : "18",
    "module" : "golang.org/x/crypto",
    "pkg" : "golang.org/x/crypto/internal/subtle",
    "project" : "elastic/beats",
    "snippet" : "uintptr(unsafe.Pointer(&y[0])) <= uintptr(unsafe.Pointer(&x[len(x)-1]))",
    "version" : "v0.0.0-20200510223506-06a226fb4e37"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 16,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "left" : {
              "go-type" : 5,
              "kind" : "expression",
              "left" : {
                "go-type" : 5,
                "kind" : "expression",
                "left" : {
                  "arguments" : [ {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "x",
                      "variable" : 0
                    }
                  } ],
                  "ellipsis" : false,
                  "function" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Builtin",
                      "kind" : "ident",
                      "value" : "len"
                    }
                  },
                  "go-type" : 6,
                  "kind" : "expression",
                  "type" : "call"
                },
                "operator" : ">",
                "right" : {
                  "go-type" : 6,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "operator" : "&&",
              "right" : {
                "go-type" : 5,
                "kind" : "expression",
                "left" : {
                  "arguments" : [ {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "y",
                      "variable" : 1
                    }
                  } ],
                  "ellipsis" : false,
                  "function" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Builtin",
                      "kind" : "ident",
                      "value" : "len"
                    }
                  },
                  "go-type" : 6,
                  "kind" : "expression",
                  "type" : "call"
                },
                "operator" : ">",
                "right" : {
                  "go-type" : 6,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 5,
              "kind" : "expression",
              "left" : {
                "coerced-to" : {
                  "go-type" : 10,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 10,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "coerced-to" : {
                    "go-type" : 11,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 1,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 11,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 11,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 12,
                    "kind" : "expression",
                    "operator" : "&",
                    "target" : {
                      "go-type" : 3,
                      "index" : {
                        "go-type" : 6,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "0"
                        }
                      },
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 2,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "x",
                          "variable" : 0
                        }
                      },
                      "type" : "index"
                    },
                    "type" : "unary"
                  },
                  "type" : "cast"
                },
                "type" : "cast"
              },
              "operator" : "<=",
              "right" : {
                "coerced-to" : {
                  "go-type" : 10,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 10,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "coerced-to" : {
                    "go-type" : 11,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 1,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 11,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 11,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 12,
                    "kind" : "expression",
                    "operator" : "&",
                    "target" : {
                      "go-type" : 3,
                      "index" : {
                        "go-type" : 6,
                        "kind" : "expression",
                        "left" : {
                          "arguments" : [ {
                            "go-type" : 2,
                            "kind" : "expression",
                            "type" : "identifier",
                            "value" : {
                              "ident-kind" : "Var",
                              "kind" : "ident",
                              "value" : "y",
                              "variable" : 1
                            }
                          } ],
                          "ellipsis" : false,
                          "function" : {
                            "go-type" : 7,
                            "kind" : "expression",
                            "type" : "identifier",
                            "value" : {
                              "ident-kind" : "Builtin",
                              "kind" : "ident",
                              "value" : "len"
                            }
                          },
                          "go-type" : 6,
                          "kind" : "expression",
                          "type" : "call"
                        },
                        "operator" : "-",
                        "right" : {
                          "go-type" : 6,
                          "kind" : "constant",
                          "value" : {
                            "type" : "INT",
                            "value" : "1"
                          }
                        },
                        "type" : "binary"
                      },
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 2,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "y",
                          "variable" : 1
                        }
                      },
                      "type" : "index"
                    },
                    "type" : "unary"
                  },
                  "type" : "cast"
                },
                "type" : "cast"
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 5,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 10,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 10,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 11,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 11,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 11,
                "kind" : "expression",
                "target" : {
                  "go-type" : 12,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 3,
                    "index" : {
                      "go-type" : 6,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "0"
                      }
                    },
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 2,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "y",
                        "variable" : 1
                      }
                    },
                    "type" : "index"
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "operator" : "<=",
            "right" : {
              "coerced-to" : {
                "go-type" : 10,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 10,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 11,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 11,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 11,
                "kind" : "expression",
                "target" : {
                  "go-type" : 12,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 3,
                    "index" : {
                      "go-type" : 6,
                      "kind" : "expression",
                      "left" : {
                        "arguments" : [ {
                          "go-type" : 2,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "x",
                            "variable" : 0
                          }
                        } ],
                        "ellipsis" : false,
                        "function" : {
                          "go-type" : 7,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Builtin",
                            "kind" : "ident",
                            "value" : "len"
                          }
                        },
                        "go-type" : 6,
                        "kind" : "expression",
                        "type" : "call"
                      },
                      "operator" : "-",
                      "right" : {
                        "go-type" : 6,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "1"
                        }
                      },
                      "type" : "binary"
                    },
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 2,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "x",
                        "variable" : 0
                      }
                    },
                    "type" : "index"
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 18,
      "code" : "return len(x) > 0 && len(y) > 0 &&\n\tuintptr(unsafe.Pointer(&x[0])) <= uintptr(unsafe.Pointer(&y[len(y)-1])) &&\n\tuintptr(unsafe.Pointer(&y[0])) <= uintptr(unsafe.Pointer(&x[len(x)-1]))",
      "entry" : false,
      "use-vars" : [ 1, 0 ]
    } ],
    "code" : "// AnyOverlap reports whether x and y share memory at any (not necessarily\n// corresponding) index. The memory beyond the slice length is ignored.\nfunc AnyOverlap(x, y []byte) bool {\n\treturn len(x) > 0 && len(y) > 0 &&\n\t\tuintptr(unsafe.Pointer(&x[0])) <= uintptr(unsafe.Pointer(&y[len(y)-1])) &&\n\t\tuintptr(unsafe.Pointer(&y[0])) <= uintptr(unsafe.Pointer(&x[len(x)-1]))\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "AnyOverlap",
      "package" : 0,
      "type" : 0,
      "exported" : true
    } ],
    "line-end" : 19,
    "line-start" : 15,
    "names" : [ "AnyOverlap" ],
    "package" : 0,
    "packages" : [ {
      "name" : "subtle",
      "path" : "golang.org/x/crypto/internal/subtle"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1 ],
    "receivers" : [ ],
    "results" : [ 2 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(x []byte, y []byte) bool",
      "params" : 1,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 2
      }, {
        "name" : "y",
        "type" : 2
      } ],
      "name" : "(x []byte, y []byte)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 2
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "name" : "func([]byte) int",
      "params" : 8,
      "recv" : -1,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 7,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 11
    }, {
      "elem" : 3,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 12
    } ],
    "variables" : [ {
      "name" : "x",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "y",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}