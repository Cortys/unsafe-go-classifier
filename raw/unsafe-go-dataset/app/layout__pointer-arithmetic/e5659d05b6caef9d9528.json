{
  "usage" : {
    "file" : "ccache.go",
    "label1" : "pointer-arithmetic",
    "label2" : "layout",
    "line" : "335",
    "module" : "gopkg.in/jcmturner/gokrb5.v7",
    "pkg" : "gopkg.in/jcmturner/gokrb5.v7/credentials",
    "project" : "elastic/beats",
    "snippet" : "var p = unsafe.Pointer(&x)",
    "version" : "v7.5.0"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ 1 ],
      "line-start" : 334,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : null,
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "x"
            } ],
            "type" : "var",
            "values" : [ {
              "go-type" : 4,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "305419896"
              }
            } ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 334,
      "code" : "var x = 0x012345678",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ 2, 1 ],
      "line-start" : 335,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : null,
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "p"
            } ],
            "type" : "var",
            "values" : [ {
              "coerced-to" : {
                "go-type" : 5,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 5,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 6,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 4,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "x",
                    "variable" : 1
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            } ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 335,
      "code" : "var p = unsafe.Pointer(&x)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ 3, 2 ],
      "line-start" : 336,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : null,
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "bp"
            } ],
            "type" : "var",
            "values" : [ {
              "coerced-to" : {
                "contained" : {
                  "element" : {
                    "go-type" : 9,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 9,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "byte"
                    }
                  },
                  "go-type" : 8,
                  "kind" : "type",
                  "length" : {
                    "go-type" : 10,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "4"
                    }
                  },
                  "type" : "array"
                },
                "go-type" : 7,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 2
                }
              },
              "type" : "cast"
            } ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 336,
      "code" : "var bp = (*[4]byte)(p)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ 4 ],
      "line-start" : 338,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 3,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "endian"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 338,
      "code" : "var endian bool",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 8 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 339,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 9,
            "index" : {
              "go-type" : 4,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "bp",
                "variable" : 3
              }
            },
            "type" : "index"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 346,
      "code" : "if 0x01 == bp[0] {\n\tendian = false\n} else if (0x78 & 0xff) == (bp[0] & 0xff) {\n\tendian = true\n} else {\n\n\tendian = false\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 11 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 340,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "endian",
            "variable" : 4
          }
        } ],
        "right" : [ {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 340,
      "code" : "endian = false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 10 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 341,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "120"
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "left" : {
                "go-type" : 9,
                "index" : {
                  "go-type" : 4,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "bp",
                    "variable" : 3
                  }
                },
                "type" : "index"
              },
              "operator" : "&",
              "right" : {
                "go-type" : 9,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "255"
                }
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 346,
      "code" : "if (0x78 & 0xff) == (bp[0] & 0xff) {\n\tendian = true\n} else {\n\n\tendian = false\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 11 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 342,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "endian",
            "variable" : 4
          }
        } ],
        "right" : [ {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 342,
      "code" : "endian = true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 11 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 345,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "endian",
            "variable" : 4
          }
        } ],
        "right" : [ {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 345,
      "code" : "endian = false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 347,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "endian",
            "variable" : 4
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 347,
      "code" : "return endian",
      "entry" : false,
      "use-vars" : [ 4 ]
    } ],
    "code" : "func isNativeEndianLittle() bool {\n\tvar x = 0x012345678\n\tvar p = unsafe.Pointer(&x)\n\tvar bp = (*[4]byte)(p)\n\n\tvar endian bool\n\tif 0x01 == bp[0] {\n\t\tendian = false\n\t} else if (0x78 & 0xff) == (bp[0] & 0xff) {\n\t\tendian = true\n\t} else {\n\n\t\tendian = false\n\t}\n\treturn endian\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "isNativeEndianLittle",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ],
    "line-end" : 348,
    "line-start" : 333,
    "names" : [ "isNativeEndianLittle" ],
    "package" : 0,
    "packages" : [ {
      "name" : "credentials",
      "path" : "gopkg.in/jcmturner/gokrb5.v7/credentials"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ ],
    "receivers" : [ ],
    "results" : [ 0 ],
    "type" : "function",
    "types" : [ {
      "name" : "func() bool",
      "params" : 1,
      "recv" : -1,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 5
    }, {
      "elem" : 4,
      "name" : "*int",
      "type" : "Pointer",
      "underlying" : 6
    }, {
      "elem" : 8,
      "name" : "*[4]byte",
      "type" : "Pointer",
      "underlying" : 7
    }, {
      "elem" : 9,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 8
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 11
    } ],
    "variables" : [ {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "x",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "bp",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "endian",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}