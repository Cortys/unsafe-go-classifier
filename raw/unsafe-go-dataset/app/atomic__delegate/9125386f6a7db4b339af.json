{
  "usage" : {
    "file" : "one_to_one.go",
    "label1" : "delegate",
    "label2" : "atomic",
    "line" : "65",
    "module" : "code.cloudfoundry.org/go-diodes",
    "pkg" : "code.cloudfoundry.org/go-diodes",
    "project" : "elastic/beats",
    "snippet" : "atomic.StorePointer(&d.buffer[idx], unsafe.Pointer(newBucket))",
    "version" : "v0.0.0-20190809170250-f77fb823c7ee"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 4 ],
      "decl-vars" : [ 4 ],
      "line-start" : 57,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "writeIndex",
              "variable" : 2
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "d",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "%",
          "right" : {
            "coerced-to" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint64"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "buffer",
                  "variable" : 3
                },
                "go-type" : 3,
                "kind" : "expression",
                "target" : {
                  "go-type" : 0,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "d",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 9,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 57,
      "code" : "idx := d.writeIndex % uint64(len(d.buffer))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 1, 0, 4 ],
      "exit" : false,
      "out-vars" : [ 7, 0, 4 ],
      "decl-vars" : [ 7 ],
      "line-start" : 59,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "newBucket"
          }
        } ],
        "right" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 9,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 9,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bucket"
              }
            },
            "go-type" : 9,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "data",
                  "variable" : 5
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "data",
                  "variable" : 1
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "seq",
                  "variable" : 6
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "writeIndex",
                  "variable" : 2
                },
                "go-type" : 4,
                "kind" : "expression",
                "target" : {
                  "go-type" : 0,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "d",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 62,
      "code" : "newBucket := &bucket{\n\tdata: data,\n\tseq:  d.writeIndex,\n}",
      "entry" : false,
      "use-vars" : [ 1, 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 5 ],
      "in-vars" : [ 0, 4, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 0, 4 ],
      "decl-vars" : [ ],
      "line-start" : 63,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "writeIndex",
            "variable" : 2
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 0
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 63,
      "code" : "d.writeIndex++",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0, 4, 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 65,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 3,
              "index" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "idx",
                  "variable" : 4
                }
              },
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "buffer",
                  "variable" : 3
                },
                "go-type" : 3,
                "kind" : "expression",
                "target" : {
                  "go-type" : 0,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "d",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "index"
            },
            "type" : "unary"
          }, {
            "coerced-to" : {
              "go-type" : 3,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "newBucket",
                "variable" : 7
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 11,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "StorePointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 65,
      "code" : "atomic.StorePointer(&d.buffer[idx], unsafe.Pointer(newBucket))",
      "entry" : false,
      "use-vars" : [ 0, 4, 7 ]
    } ],
    "code" : "// Set sets the data in the next slot of the ring buffer.\nfunc (d *OneToOne) Set(data GenericDataType) {\n\tidx := d.writeIndex % uint64(len(d.buffer))\n\n\tnewBucket := &bucket{\n\t\tdata: data,\n\t\tseq:  d.writeIndex,\n\t}\n\td.writeIndex++\n\n\tatomic.StorePointer(&d.buffer[idx], unsafe.Pointer(newBucket))\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Set",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "StorePointer",
      "package" : 2,
      "type" : 11,
      "exported" : true
    } ],
    "line-end" : 66,
    "line-start" : 56,
    "names" : [ "Set" ],
    "package" : 0,
    "packages" : [ {
      "name" : "diodes",
      "path" : "code.cloudfoundry.org/go-diodes"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "atomic",
      "path" : "sync/atomic"
    } ],
    "params" : [ 1 ],
    "receivers" : [ 0 ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(data code.cloudfoundry.org/go-diodes.GenericDataType)",
      "params" : 1,
      "recv" : 0,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 2
      } ],
      "name" : "(data code.cloudfoundry.org/go-diodes.GenericDataType)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "GenericDataType",
      "name" : "code.cloudfoundry.org/go-diodes.GenericDataType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 3
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 3
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "name" : "func([]unsafe.Pointer) int",
      "params" : 6,
      "recv" : -1,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 5,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "([]unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 7
    }, {
      "elem" : 9,
      "name" : "*code.cloudfoundry.org/go-diodes.bucket",
      "type" : "Pointer",
      "underlying" : 8
    }, {
      "local-name" : "bucket",
      "name" : "code.cloudfoundry.org/go-diodes.bucket",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 2
      }, {
        "name" : "seq",
        "type" : 4
      } ],
      "name" : "struct{data code.cloudfoundry.org/go-diodes.GenericDataType; seq uint64}",
      "type" : "Struct",
      "underlying" : 10
    }, {
      "name" : "func(addr *unsafe.Pointer, val unsafe.Pointer)",
      "params" : 12,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 13
      }, {
        "name" : "val",
        "type" : 3
      } ],
      "name" : "(addr *unsafe.Pointer, val unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "elem" : 3,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 13
    } ],
    "variables" : [ {
      "name" : "d",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "writeIndex",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "buffer",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "seq",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "newBucket",
      "package" : 0,
      "type" : 8,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}