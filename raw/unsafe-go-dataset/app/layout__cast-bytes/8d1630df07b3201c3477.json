{
  "usage" : {
    "file" : "sys.go",
    "label1" : "cast-bytes",
    "label2" : "layout",
    "line" : "22",
    "module" : "golang.org/x/net",
    "pkg" : "golang.org/x/net/internal/socket",
    "project" : "elastic/beats",
    "snippet" : "b := (*[4]byte)(unsafe.Pointer(&i))",
    "version" : "v0.0.0-20200202094626-16171245cfb2"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ 0 ],
      "line-start" : 21,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 21,
      "code" : "i := uint32(1)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ 1 ],
      "line-start" : 22,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "b"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "element" : {
                "go-type" : 5,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 5,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 4,
              "kind" : "type",
              "length" : {
                "go-type" : 6,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "4"
                }
              },
              "type" : "array"
            },
            "go-type" : 3,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 8,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 0
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 22,
      "code" : "b := (*[4]byte)(unsafe.Pointer(&i))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 6 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 23,
      "ast" : {
        "condition" : {
          "go-type" : 9,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "index" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 1
              }
            },
            "type" : "index"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 27,
      "code" : "if b[0] == 1 {\n\tNativeEndian = binary.LittleEndian\n} else {\n\tNativeEndian = binary.BigEndian\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 7 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 24,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "NativeEndian",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "go-type" : 32,
          "kind" : "expression",
          "qualifier" : {
            "ident-kind" : "PkgName",
            "kind" : "ident",
            "package" : 2,
            "value" : "binary"
          },
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "LittleEndian",
            "variable" : 10
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 24,
      "code" : "NativeEndian = binary.LittleEndian",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 7 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 26,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "NativeEndian",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "go-type" : 34,
          "kind" : "expression",
          "qualifier" : {
            "ident-kind" : "PkgName",
            "kind" : "ident",
            "package" : 2,
            "value" : "binary"
          },
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "BigEndian",
            "variable" : 11
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 26,
      "code" : "NativeEndian = binary.BigEndian",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 28,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "kernelAlign",
            "variable" : 12
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "probeProtocolStack"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 12 ],
      "line-end" : 28,
      "code" : "kernelAlign = probeProtocolStack()",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func init() {\n\ti := uint32(1)\n\tb := (*[4]byte)(unsafe.Pointer(&i))\n\tif b[0] == 1 {\n\t\tNativeEndian = binary.LittleEndian\n\t} else {\n\t\tNativeEndian = binary.BigEndian\n\t}\n\tkernelAlign = probeProtocolStack()\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "init",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "probeProtocolStack",
      "package" : 0,
      "type" : 35,
      "exported" : false
    } ],
    "line-end" : 29,
    "line-start" : 20,
    "names" : [ "init" ],
    "package" : 0,
    "packages" : [ {
      "name" : "socket",
      "path" : "golang.org/x/net/internal/socket"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "binary",
      "path" : "encoding/binary"
    } ],
    "params" : [ ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func()",
      "params" : 1,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "*[4]byte",
      "type" : "Pointer",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 4
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 7
    }, {
      "elem" : 2,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 8
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "local-name" : "ByteOrder",
      "name" : "encoding/binary.ByteOrder",
      "package" : 2,
      "type" : "Named",
      "underlying" : 12
    }, {
      "methods" : [ {
        "name" : "PutUint16",
        "type" : 13
      }, {
        "name" : "PutUint32",
        "type" : 17
      }, {
        "name" : "PutUint64",
        "type" : 19
      }, {
        "name" : "String",
        "type" : 22
      }, {
        "name" : "Uint16",
        "type" : 25
      }, {
        "name" : "Uint32",
        "type" : 28
      }, {
        "name" : "Uint64",
        "type" : 30
      } ],
      "name" : "interface{PutUint16([]byte, uint16); PutUint32([]byte, uint32); PutUint64([]byte, uint64); String() string; Uint16([]byte) uint16; Uint32([]byte) uint32; Uint64([]byte) uint64}",
      "type" : "Interface",
      "underlying" : 12
    }, {
      "name" : "func([]byte, uint16)",
      "params" : 14,
      "recv" : 2,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 13,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      }, {
        "name" : "",
        "type" : 16
      } ],
      "name" : "([]byte, uint16)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "elem" : 5,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 15
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "name" : "func([]byte, uint32)",
      "params" : 18,
      "recv" : 3,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 17,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      }, {
        "name" : "",
        "type" : 2
      } ],
      "name" : "([]byte, uint32)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "name" : "func([]byte, uint64)",
      "params" : 20,
      "recv" : 4,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 19,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      }, {
        "name" : "",
        "type" : 21
      } ],
      "name" : "([]byte, uint64)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "name" : "func() string",
      "params" : 1,
      "recv" : 5,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 24
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "name" : "func([]byte) uint16",
      "params" : 26,
      "recv" : 6,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 25,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(uint16)",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "name" : "func([]byte) uint32",
      "params" : 26,
      "recv" : 7,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 28,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "name" : "func([]byte) uint64",
      "params" : 26,
      "recv" : 8,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(uint64)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "local-name" : "littleEndian",
      "name" : "encoding/binary.littleEndian",
      "package" : 2,
      "type" : "Named",
      "underlying" : 33
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 33
    }, {
      "local-name" : "bigEndian",
      "name" : "encoding/binary.bigEndian",
      "package" : 2,
      "type" : "Named",
      "underlying" : 33
    }, {
      "name" : "func() int",
      "params" : 1,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 36
    } ],
    "variables" : [ {
      "name" : "i",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "NativeEndian",
      "package" : 0,
      "type" : 11,
      "exported" : true
    }, {
      "name" : "LittleEndian",
      "package" : 2,
      "type" : 32,
      "exported" : true
    }, {
      "name" : "BigEndian",
      "package" : 2,
      "type" : 34,
      "exported" : true
    }, {
      "name" : "kernelAlign",
      "package" : 0,
      "type" : 10,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}