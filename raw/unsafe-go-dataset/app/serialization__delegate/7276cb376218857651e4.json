{
  "usage" : {
    "file" : "reflect_map.go",
    "label1" : "delegate",
    "label2" : "serialization",
    "line" : "328",
    "module" : "github.com/json-iterator/go",
    "pkg" : "github.com/json-iterator/go",
    "project" : "rook/rook",
    "snippet" : "func (encoder *sortKeysMapEncoder) IsEmpty(ptr unsafe.Pointer) bool {",
    "version" : "v1.1.8"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 6 ],
      "decl-vars" : [ 6 ],
      "line-start" : 329,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "iter"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 1
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "UnsafeIterate"
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapType",
                "variable" : 5
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "encoder",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 329,
      "code" : "iter := encoder.mapType.UnsafeIterate(ptr)",
      "entry" : false,
      "use-vars" : [ 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 330,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "HasNext"
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "iter",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "go-type" : 4,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 330,
      "code" : "return !iter.HasNext()",
      "entry" : false,
      "use-vars" : [ 6 ]
    } ],
    "code" : "func (encoder *sortKeysMapEncoder) IsEmpty(ptr unsafe.Pointer) bool {\n\titer := encoder.mapType.UnsafeIterate(ptr)\n\treturn !iter.HasNext()\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "IsEmpty",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "UnsafeIterate",
      "package" : 2,
      "type" : 11,
      "exported" : true
    }, {
      "name" : "HasNext",
      "package" : 2,
      "type" : 21,
      "exported" : true
    } ],
    "line-end" : 331,
    "line-start" : 328,
    "names" : [ "IsEmpty" ],
    "package" : 0,
    "packages" : [ {
      "name" : "jsoniter",
      "path" : "github.com/json-iterator/go"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "reflect2",
      "path" : "github.com/modern-go/reflect2"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "concurrent",
      "path" : "github.com/modern-go/concurrent"
    }, {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "atomic",
      "path" : "sync/atomic"
    }, {
      "name" : "io",
      "path" : "io"
    } ],
    "params" : [ 1 ],
    "receivers" : [ 0 ],
    "results" : [ 2 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(ptr unsafe.Pointer) bool",
      "params" : 1,
      "recv" : 0,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 2
      } ],
      "name" : "(ptr unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "local-name" : "MapIterator",
      "name" : "github.com/modern-go/reflect2.MapIterator",
      "package" : 2,
      "type" : "Named",
      "underlying" : 6
    }, {
      "methods" : [ {
        "name" : "HasNext",
        "type" : 21
      }, {
        "name" : "Next",
        "type" : 7
      }, {
        "name" : "UnsafeNext",
        "type" : 9
      } ],
      "name" : "interface{HasNext() bool; Next() (key interface{}, elem interface{}); UnsafeNext() (key unsafe.Pointer, elem unsafe.Pointer)}",
      "type" : "Interface",
      "underlying" : 6
    }, {
      "name" : "func() (key interface{}, elem interface{})",
      "params" : 13,
      "recv" : 3,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 7,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 92
      }, {
        "name" : "elem",
        "type" : 92
      } ],
      "name" : "(key interface{}, elem interface{})",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "name" : "func() (key unsafe.Pointer, elem unsafe.Pointer)",
      "params" : 13,
      "recv" : 4,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 2
      }, {
        "name" : "elem",
        "type" : 2
      } ],
      "name" : "(key unsafe.Pointer, elem unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "name" : "func(obj unsafe.Pointer) github.com/modern-go/reflect2.MapIterator",
      "params" : 173,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(github.com/modern-go/reflect2.MapIterator)",
      "type" : "Tuple",
      "underlying" : 12
    } ],
    "variables" : [ {
      "name" : "encoder",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "mapType",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "iter",
      "package" : 0,
      "type" : 5,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}