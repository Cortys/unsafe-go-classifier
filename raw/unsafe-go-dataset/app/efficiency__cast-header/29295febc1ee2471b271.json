{
  "usage" : {
    "file" : "writer_unsafe.go",
    "label1" : "cast-header",
    "label2" : "efficiency",
    "line" : "13",
    "module" : "github.com/philhofer/fwd",
    "pkg" : "github.com/philhofer/fwd",
    "project" : "mattermost/mattermost-server",
    "snippet" : "return *(*[]byte)(unsafe.Pointer(&reflect.SliceHeader{",
    "version" : "v1.0.0"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ 2 ],
      "line-start" : 12,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "l"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 12,
      "code" : "l := len(b)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2, 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 13,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 5,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 5,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "byte"
                  }
                },
                "go-type" : 4,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 10,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "declared" : {
                    "go-type" : 13,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 2,
                      "value" : "reflect"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 13,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "SliceHeader"
                    }
                  },
                  "go-type" : 13,
                  "kind" : "literal",
                  "type" : "composite",
                  "values" : [ {
                    "go-type" : -1,
                    "key" : {
                      "go-type" : -1,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "Len",
                        "variable" : 3
                      }
                    },
                    "kind" : "expression",
                    "type" : "key-value",
                    "value" : {
                      "go-type" : 6,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "l",
                        "variable" : 2
                      }
                    }
                  }, {
                    "go-type" : -1,
                    "key" : {
                      "go-type" : -1,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "Cap",
                        "variable" : 4
                      }
                    },
                    "kind" : "expression",
                    "type" : "key-value",
                    "value" : {
                      "go-type" : 6,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "l",
                        "variable" : 2
                      }
                    }
                  }, {
                    "go-type" : -1,
                    "key" : {
                      "go-type" : -1,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "Data",
                        "variable" : 5
                      }
                    },
                    "kind" : "expression",
                    "type" : "key-value",
                    "value" : {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "Data",
                        "variable" : 6
                      },
                      "go-type" : 15,
                      "kind" : "expression",
                      "target" : {
                        "coerced-to" : {
                          "contained" : {
                            "go-type" : 17,
                            "kind" : "type",
                            "qualifier" : {
                              "ident-kind" : "PkgName",
                              "kind" : "ident",
                              "package" : 2,
                              "value" : "reflect"
                            },
                            "type" : "identifier",
                            "value" : {
                              "go-type" : 17,
                              "ident-kind" : "TypeName",
                              "kind" : "ident",
                              "value" : "StringHeader"
                            }
                          },
                          "go-type" : 16,
                          "kind" : "type",
                          "type" : "pointer"
                        },
                        "go-type" : 16,
                        "kind" : "expression",
                        "target" : {
                          "coerced-to" : {
                            "go-type" : 11,
                            "kind" : "type",
                            "qualifier" : {
                              "ident-kind" : "PkgName",
                              "kind" : "ident",
                              "package" : 1,
                              "value" : "unsafe"
                            },
                            "type" : "identifier",
                            "value" : {
                              "go-type" : 11,
                              "ident-kind" : "TypeName",
                              "kind" : "ident",
                              "value" : "Pointer"
                            }
                          },
                          "go-type" : 11,
                          "kind" : "expression",
                          "target" : {
                            "go-type" : 19,
                            "kind" : "expression",
                            "operator" : "&",
                            "target" : {
                              "go-type" : 2,
                              "kind" : "expression",
                              "type" : "identifier",
                              "value" : {
                                "ident-kind" : "Var",
                                "kind" : "ident",
                                "value" : "b",
                                "variable" : 0
                              }
                            },
                            "type" : "unary"
                          },
                          "type" : "cast"
                        },
                        "type" : "cast"
                      },
                      "type" : "selector"
                    }
                  } ]
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 17,
      "code" : "return *(*[]byte)(unsafe.Pointer(&reflect.SliceHeader{\n\tLen:  l,\n\tCap:  l,\n\tData: (*reflect.StringHeader)(unsafe.Pointer(&b)).Data,\n}))",
      "entry" : false,
      "use-vars" : [ 0, 2 ]
    } ],
    "code" : "// unsafe cast string as []byte\nfunc unsafestr(b string) []byte {\n\tl := len(b)\n\treturn *(*[]byte)(unsafe.Pointer(&reflect.SliceHeader{\n\t\tLen:  l,\n\t\tCap:  l,\n\t\tData: (*reflect.StringHeader)(unsafe.Pointer(&b)).Data,\n\t}))\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "unsafestr",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ],
    "line-end" : 18,
    "line-start" : 11,
    "names" : [ "unsafestr" ],
    "package" : 0,
    "packages" : [ {
      "name" : "fwd",
      "path" : "github.com/philhofer/fwd"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    } ],
    "params" : [ 0 ],
    "receivers" : [ ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(b string) []byte",
      "params" : 1,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 2
      } ],
      "name" : "(b string)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 4
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "name" : "func(string) int",
      "params" : 8,
      "recv" : -1,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 7,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "elem" : 4,
      "name" : "*[]byte",
      "type" : "Pointer",
      "underlying" : 10
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "*reflect.SliceHeader",
      "type" : "Pointer",
      "underlying" : 12
    }, {
      "local-name" : "SliceHeader",
      "name" : "reflect.SliceHeader",
      "package" : 2,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 15
      }, {
        "name" : "Len",
        "type" : 6
      }, {
        "name" : "Cap",
        "type" : 6
      } ],
      "name" : "struct{Data uintptr; Len int; Cap int}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "*reflect.StringHeader",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "local-name" : "StringHeader",
      "name" : "reflect.StringHeader",
      "package" : 2,
      "type" : "Named",
      "underlying" : 18
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 15
      }, {
        "name" : "Len",
        "type" : 6
      } ],
      "name" : "struct{Data uintptr; Len int}",
      "type" : "Struct",
      "underlying" : 18
    }, {
      "elem" : 2,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 19
    } ],
    "variables" : [ {
      "name" : "b",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "l",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "Len",
      "package" : 2,
      "type" : 6,
      "exported" : true
    }, {
      "name" : "Cap",
      "package" : 2,
      "type" : 6,
      "exported" : true
    }, {
      "name" : "Data",
      "package" : 2,
      "type" : 15,
      "exported" : true
    }, {
      "name" : "Data",
      "package" : 2,
      "type" : 15,
      "exported" : true
    } ]
  },
  "go-version" : "1.14.3"
}