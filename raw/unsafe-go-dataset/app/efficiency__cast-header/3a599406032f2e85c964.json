{
  "usage" : {
    "file" : "label.go",
    "label1" : "cast-header",
    "label2" : "efficiency",
    "line" : "117",
    "module" : "golang.org/x/tools",
    "pkg" : "golang.org/x/tools/internal/event/label",
    "project" : "mattermost/mattermost-server",
    "snippet" : "hdr := (*reflect.StringHeader)(unsafe.Pointer(&v))",
    "version" : "v0.0.0-20200428021058-7ae4988eb4d9"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ 2 ],
      "line-start" : 116,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 3,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "v"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 116,
      "code" : "var v string",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 2, 0 ],
      "exit" : false,
      "out-vars" : [ 3, 0 ],
      "decl-vars" : [ 3 ],
      "line-start" : 117,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "hdr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 5,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "reflect"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "StringHeader"
              }
            },
            "go-type" : 4,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 8,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 8,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 2
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 117,
      "code" : "hdr := (*reflect.StringHeader)(unsafe.Pointer(&v))",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 5 ],
      "in-vars" : [ 3, 0 ],
      "exit" : false,
      "out-vars" : [ 3, 0 ],
      "decl-vars" : [ ],
      "line-start" : 118,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Data",
            "variable" : 4
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hdr",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 7,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 7,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "asserted" : {
              "go-type" : 8,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 8,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "untyped",
                "variable" : 5
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "type-assert"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 118,
      "code" : "hdr.Data = uintptr(t.untyped.(unsafe.Pointer))",
      "entry" : false,
      "use-vars" : [ 0, 3 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 6 ],
      "in-vars" : [ 3, 0 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 119,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Len",
            "variable" : 6
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hdr",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 13,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 13,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "packed",
              "variable" : 7
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 119,
      "code" : "hdr.Len = int(t.packed)",
      "entry" : false,
      "use-vars" : [ 3, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 120,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "go-type" : 9,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 8,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 3,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 8,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "hdr",
                  "variable" : 3
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 120,
      "code" : "return *(*string)(unsafe.Pointer(hdr))",
      "entry" : false,
      "use-vars" : [ 3 ]
    } ],
    "code" : "// UnpackString assumes the label was built using LabelOfString and returns the\n// value that was passed to that constructor.\n// This method is for implementing new key types, for type safety normal\n// access should be done with the From method of the key.\nfunc (t Label) UnpackString() string {\n\tvar v string\n\thdr := (*reflect.StringHeader)(unsafe.Pointer(&v))\n\thdr.Data = uintptr(t.untyped.(unsafe.Pointer))\n\thdr.Len = int(t.packed)\n\treturn *(*string)(unsafe.Pointer(hdr))\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "UnpackString",
      "package" : 0,
      "type" : 0,
      "exported" : true
    } ],
    "line-end" : 121,
    "line-start" : 115,
    "names" : [ "UnpackString" ],
    "package" : 0,
    "packages" : [ {
      "name" : "label",
      "path" : "golang.org/x/tools/internal/event/label"
    }, {
      "name" : "io",
      "path" : "io"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ ],
    "receivers" : [ 0 ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func() string",
      "params" : 1,
      "recv" : 0,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "*reflect.StringHeader",
      "type" : "Pointer",
      "underlying" : 4
    }, {
      "local-name" : "StringHeader",
      "name" : "reflect.StringHeader",
      "package" : 2,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 7
      }, {
        "name" : "Len",
        "type" : 13
      } ],
      "name" : "struct{Data uintptr; Len int}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 3,
      "type" : "Basic",
      "underlying" : 8
    }, {
      "elem" : 3,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 9
    } ],
    "variables" : [ {
      "name" : "t",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "hdr",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "Data",
      "package" : 2,
      "type" : 7,
      "exported" : true
    }, {
      "name" : "untyped",
      "package" : 0,
      "type" : 17,
      "exported" : false
    }, {
      "name" : "Len",
      "package" : 2,
      "type" : 13,
      "exported" : true
    }, {
      "name" : "packed",
      "package" : 0,
      "type" : 16,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}