{
  "usage" : {
    "file" : "helper_unsafe.go",
    "label1" : "cast-header",
    "label2" : "efficiency",
    "line" : "52",
    "module" : "github.com/hashicorp/go-msgpack",
    "pkg" : "github.com/hashicorp/go-msgpack/codec",
    "project" : "mattermost/mattermost-server",
    "snippet" : "return *(*string)(unsafe.Pointer(&unsafeString{bx.Data, bx.Len}))",
    "version" : "v1.1.5"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 48,
      "ast" : {
        "condition" : {
          "go-type" : 6,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 0
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 50,
      "code" : "if len(v) == 0 {\n\treturn \"\"\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 49,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : ""
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 49,
      "code" : "return \"\"",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ 2 ],
      "line-start" : 51,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "bx"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 12,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 12,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "unsafeSlice"
              }
            },
            "go-type" : 11,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 14,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 15,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 51,
      "code" : "bx := (*unsafeSlice)(unsafe.Pointer(&v))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 52,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 5,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 5,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "go-type" : 16,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 14,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 14,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 17,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "declared" : {
                    "go-type" : 18,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 18,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "unsafeString"
                    }
                  },
                  "go-type" : 18,
                  "kind" : "literal",
                  "type" : "composite",
                  "values" : [ {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "Data",
                      "variable" : 3
                    },
                    "go-type" : 14,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 11,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "bx",
                        "variable" : 2
                      }
                    },
                    "type" : "selector"
                  }, {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "Len",
                      "variable" : 4
                    },
                    "go-type" : 7,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 11,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "bx",
                        "variable" : 2
                      }
                    },
                    "type" : "selector"
                  } ]
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 52,
      "code" : "return *(*string)(unsafe.Pointer(&unsafeString{bx.Data, bx.Len}))",
      "entry" : false,
      "use-vars" : [ 2 ]
    } ],
    "code" : "func stringView(v []byte) string {\n\tif len(v) == 0 {\n\t\treturn \"\"\n\t}\n\tbx := (*unsafeSlice)(unsafe.Pointer(&v))\n\treturn *(*string)(unsafe.Pointer(&unsafeString{bx.Data, bx.Len}))\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "stringView",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ],
    "line-end" : 53,
    "line-start" : 47,
    "names" : [ "stringView" ],
    "package" : 0,
    "packages" : [ {
      "name" : "codec",
      "path" : "github.com/hashicorp/go-msgpack/codec"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0 ],
    "receivers" : [ ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(v []byte) string",
      "params" : 1,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 2
      } ],
      "name" : "(v []byte)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 2
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "func([]byte) int",
      "params" : 9,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "elem" : 12,
      "name" : "*github.com/hashicorp/go-msgpack/codec.unsafeSlice",
      "type" : "Pointer",
      "underlying" : 11
    }, {
      "local-name" : "unsafeSlice",
      "name" : "github.com/hashicorp/go-msgpack/codec.unsafeSlice",
      "package" : 0,
      "type" : "Named",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 14
      }, {
        "name" : "Len",
        "type" : 7
      }, {
        "name" : "Cap",
        "type" : 7
      } ],
      "name" : "struct{Data unsafe.Pointer; Len int; Cap int}",
      "type" : "Struct",
      "underlying" : 13
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 14
    }, {
      "elem" : 2,
      "name" : "*[]byte",
      "type" : "Pointer",
      "underlying" : 15
    }, {
      "elem" : 5,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "elem" : 18,
      "name" : "*github.com/hashicorp/go-msgpack/codec.unsafeString",
      "type" : "Pointer",
      "underlying" : 17
    }, {
      "local-name" : "unsafeString",
      "name" : "github.com/hashicorp/go-msgpack/codec.unsafeString",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 14
      }, {
        "name" : "Len",
        "type" : 7
      } ],
      "name" : "struct{Data unsafe.Pointer; Len int}",
      "type" : "Struct",
      "underlying" : 19
    } ],
    "variables" : [ {
      "name" : "v",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "bx",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "Data",
      "package" : 0,
      "type" : 14,
      "exported" : true
    }, {
      "name" : "Len",
      "package" : 0,
      "type" : 7,
      "exported" : true
    } ]
  },
  "go-version" : "1.14.3"
}