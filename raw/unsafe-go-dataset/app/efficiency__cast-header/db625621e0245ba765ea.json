{
  "usage" : {
    "file" : "xxhash_unsafe.go",
    "label1" : "cast-header",
    "label2" : "efficiency",
    "line" : "30",
    "module" : "github.com/cespare/xxhash/v2",
    "pkg" : "github.com/cespare/xxhash/v2",
    "project" : "cilium/cilium",
    "snippet" : "bh := (*reflect.SliceHeader)(unsafe.Pointer(&b))",
    "version" : "v2.1.0"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ 2 ],
      "line-start" : 29,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 6,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 6,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 5,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "b"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 29,
      "code" : "var b []byte",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 0, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 0 ],
      "decl-vars" : [ 3 ],
      "line-start" : 30,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "bh"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 8,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "reflect"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 8,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SliceHeader"
              }
            },
            "go-type" : 7,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 12,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 12,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "go-type" : 13,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "b",
                  "variable" : 2
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 30,
      "code" : "bh := (*reflect.SliceHeader)(unsafe.Pointer(&b))",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 5 ],
      "in-vars" : [ 3, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 31,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Data",
            "variable" : 4
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "bh",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Data",
            "variable" : 5
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 15,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "reflect"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 15,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "StringHeader"
                }
              },
              "go-type" : 14,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 12,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 12,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 12,
              "kind" : "expression",
              "target" : {
                "go-type" : 17,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "s",
                    "variable" : 0
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 31,
      "code" : "bh.Data = (*reflect.StringHeader)(unsafe.Pointer(&s)).Data",
      "entry" : false,
      "use-vars" : [ 0, 3 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 6 ],
      "in-vars" : [ 3, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 32,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Len",
            "variable" : 6
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "bh",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 32,
      "code" : "bh.Len = len(s)",
      "entry" : false,
      "use-vars" : [ 3, 0 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 7 ],
      "in-vars" : [ 3, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 33,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Cap",
            "variable" : 7
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "bh",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 33,
      "code" : "bh.Cap = len(s)",
      "entry" : false,
      "use-vars" : [ 3, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 34,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Sum64"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 34,
      "code" : "return Sum64(b)",
      "entry" : false,
      "use-vars" : [ 2 ]
    } ],
    "code" : "// Sum64String computes the 64-bit xxHash digest of s.\n// It may be faster than Sum64([]byte(s)) by avoiding a copy.\nfunc Sum64String(s string) uint64 {\n\tvar b []byte\n\tbh := (*reflect.SliceHeader)(unsafe.Pointer(&b))\n\tbh.Data = (*reflect.StringHeader)(unsafe.Pointer(&s)).Data\n\tbh.Len = len(s)\n\tbh.Cap = len(s)\n\treturn Sum64(b)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Sum64String",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "Sum64",
      "package" : 0,
      "type" : 21,
      "exported" : true
    } ],
    "line-end" : 35,
    "line-start" : 28,
    "names" : [ "Sum64String" ],
    "package" : 0,
    "packages" : [ {
      "name" : "xxhash",
      "path" : "github.com/cespare/xxhash/v2"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0 ],
    "receivers" : [ ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(s string) uint64",
      "params" : 1,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 2
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(uint64)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 5
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "elem" : 8,
      "name" : "*reflect.SliceHeader",
      "type" : "Pointer",
      "underlying" : 7
    }, {
      "local-name" : "SliceHeader",
      "name" : "reflect.SliceHeader",
      "package" : 1,
      "type" : "Named",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 10
      }, {
        "name" : "Len",
        "type" : 11
      }, {
        "name" : "Cap",
        "type" : 11
      } ],
      "name" : "struct{Data uintptr; Len int; Cap int}",
      "type" : "Struct",
      "underlying" : 9
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 12
    }, {
      "elem" : 5,
      "name" : "*[]byte",
      "type" : "Pointer",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "*reflect.StringHeader",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "local-name" : "StringHeader",
      "name" : "reflect.StringHeader",
      "package" : 1,
      "type" : "Named",
      "underlying" : 16
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 10
      }, {
        "name" : "Len",
        "type" : 11
      } ],
      "name" : "struct{Data uintptr; Len int}",
      "type" : "Struct",
      "underlying" : 16
    }, {
      "elem" : 2,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 17
    }, {
      "name" : "func(string) int",
      "params" : 19,
      "recv" : -1,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "name" : "func(b []byte) uint64",
      "params" : 22,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 5
      } ],
      "name" : "(b []byte)",
      "type" : "Tuple",
      "underlying" : 22
    } ],
    "variables" : [ {
      "name" : "s",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "bh",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Data",
      "package" : 1,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Data",
      "package" : 1,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Len",
      "package" : 1,
      "type" : 11,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Cap",
      "package" : 1,
      "type" : 11,
      "exported" : true,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}