{
  "usage" : {
    "file" : "pcap.go",
    "label1" : "cast-header",
    "label2" : "efficiency",
    "line" : "355",
    "module" : "github.com/google/gopacket",
    "pkg" : "github.com/google/gopacket/pcap",
    "project" : "weaveworks/scope",
    "snippet" : "slice := (*reflect.SliceHeader)(unsafe.Pointer(&data))",
    "version" : "v1.1.17"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 3, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 2 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 1, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 352,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Lock"
            },
            "go-type" : 31,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mu",
                "variable" : 5
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 352,
      "code" : "p.mu.Lock()",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 4 ],
      "in-vars" : [ 1, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 1, 3, 2 ],
      "decl-vars" : [ ],
      "line-start" : 353,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 4
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 34,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ci",
                "variable" : 3
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getNextBufPtrLocked"
            },
            "go-type" : 32,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 27,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 353,
      "code" : "err = p.getNextBufPtrLocked(&ci)",
      "entry" : false,
      "use-vars" : [ 1, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 9 ],
      "in-vars" : [ 4, 1, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 4, 1 ],
      "decl-vars" : [ ],
      "line-start" : 354,
      "ast" : {
        "condition" : {
          "go-type" : 36,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 4
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 37,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 359,
      "code" : "if err == nil {\n\tslice := (*reflect.SliceHeader)(unsafe.Pointer(&data))\n\tslice.Data = uintptr(unsafe.Pointer(p.bufptr))\n\tslice.Len = ci.CaptureLength\n\tslice.Cap = ci.CaptureLength\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 1, 3, 2, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 6, 4, 1 ],
      "decl-vars" : [ 6 ],
      "line-start" : 355,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "slice"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 39,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "reflect"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 39,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SliceHeader"
              }
            },
            "go-type" : 38,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 38,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 42,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 5,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 42,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 42,
            "kind" : "expression",
            "target" : {
              "go-type" : 43,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "data",
                  "variable" : 2
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 355,
      "code" : "slice := (*reflect.SliceHeader)(unsafe.Pointer(&data))",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 7 ],
      "in-vars" : [ 6, 4, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 4, 1, 3, 6 ],
      "decl-vars" : [ ],
      "line-start" : 356,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Data",
            "variable" : 7
          },
          "go-type" : 41,
          "kind" : "expression",
          "target" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "slice",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 41,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 41,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 41,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 42,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 5,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 42,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 42,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "bufptr",
                "variable" : 8
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 356,
      "code" : "slice.Data = uintptr(unsafe.Pointer(p.bufptr))",
      "entry" : false,
      "use-vars" : [ 6, 1 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 8 ],
      "in-vars" : [ 4, 1, 3, 6 ],
      "exit" : false,
      "out-vars" : [ 4, 1, 3, 6 ],
      "decl-vars" : [ ],
      "line-start" : 357,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Len",
            "variable" : 9
          },
          "go-type" : 18,
          "kind" : "expression",
          "target" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "slice",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "CaptureLength",
            "variable" : 10
          },
          "go-type" : 18,
          "kind" : "expression",
          "target" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ci",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 357,
      "code" : "slice.Len = ci.CaptureLength",
      "entry" : false,
      "use-vars" : [ 3, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 9 ],
      "in-vars" : [ 4, 1, 3, 6 ],
      "exit" : false,
      "out-vars" : [ 4, 1 ],
      "decl-vars" : [ ],
      "line-start" : 358,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Cap",
            "variable" : 11
          },
          "go-type" : 18,
          "kind" : "expression",
          "target" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "slice",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "CaptureLength",
            "variable" : 10
          },
          "go-type" : 18,
          "kind" : "expression",
          "target" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ci",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 358,
      "code" : "slice.Cap = ci.CaptureLength",
      "entry" : false,
      "use-vars" : [ 3, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 4, 1 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 360,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Unlock"
            },
            "go-type" : 31,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mu",
                "variable" : 5
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 360,
      "code" : "p.mu.Unlock()",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 361,
      "ast" : {
        "condition" : {
          "go-type" : 36,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 4
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 44,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 363,
      "code" : "if err == NextErrorTimeoutExpired {\n\truntime.Gosched()\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 362,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 31,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 6,
              "value" : "runtime"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Gosched"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 362,
      "code" : "runtime.Gosched()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 364,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 364,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// ZeroCopyReadPacketData reads the next packet off the wire, and returns its data.\n// The slice returned by ZeroCopyReadPacketData points to bytes owned by the\n// the Handle.  Each call to ZeroCopyReadPacketData invalidates any data previously\n// returned by ZeroCopyReadPacketData.  Care must be taken not to keep pointers\n// to old bytes when using ZeroCopyReadPacketData... if you need to keep data past\n// the next time you call ZeroCopyReadPacketData, use ReadPacketData, which copies\n// the bytes into a new buffer for you.\n//  data1, _, _ := handle.ZeroCopyReadPacketData()\n//  // do everything you want with data1 here, copying bytes out of it if you'd like to keep them around.\n//  data2, _, _ := handle.ZeroCopyReadPacketData()  // invalidates bytes in data1\nfunc (p *Handle) ZeroCopyReadPacketData() (data []byte, ci gopacket.CaptureInfo, err error) {\n\tp.mu.Lock()\n\terr = p.getNextBufPtrLocked(&ci)\n\tif err == nil {\n\t\tslice := (*reflect.SliceHeader)(unsafe.Pointer(&data))\n\t\tslice.Data = uintptr(unsafe.Pointer(p.bufptr))\n\t\tslice.Len = ci.CaptureLength\n\t\tslice.Cap = ci.CaptureLength\n\t}\n\tp.mu.Unlock()\n\tif err == NextErrorTimeoutExpired {\n\t\truntime.Gosched()\n\t}\n\treturn\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "ZeroCopyReadPacketData",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "Lock",
      "package" : 3,
      "type" : 31,
      "exported" : true
    }, {
      "name" : "getNextBufPtrLocked",
      "package" : 0,
      "type" : 32,
      "exported" : false
    }, {
      "name" : "Unlock",
      "package" : 3,
      "type" : 31,
      "exported" : true
    }, {
      "name" : "Gosched",
      "package" : 6,
      "type" : 31,
      "exported" : true
    } ],
    "line-end" : 365,
    "line-start" : 351,
    "names" : [ "ZeroCopyReadPacketData" ],
    "package" : 0,
    "packages" : [ {
      "name" : "pcap",
      "path" : "github.com/google/gopacket/pcap"
    }, {
      "name" : "gopacket",
      "path" : "github.com/google/gopacket"
    }, {
      "name" : "time",
      "path" : "time"
    }, {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "runtime",
      "path" : "runtime"
    } ],
    "params" : [ ],
    "receivers" : [ 1 ],
    "results" : [ 2, 3, 4 ],
    "type" : "function",
    "types" : [ {
      "name" : "func() (data []byte, ci github.com/google/gopacket.CaptureInfo, err error)",
      "params" : 1,
      "recv" : 1,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 3
      }, {
        "name" : "ci",
        "type" : 5
      }, {
        "name" : "err",
        "type" : 27
      } ],
      "name" : "(data []byte, ci github.com/google/gopacket.CaptureInfo, err error)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 3
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "local-name" : "CaptureInfo",
      "name" : "github.com/google/gopacket.CaptureInfo",
      "package" : 1,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "Timestamp",
        "type" : 7
      }, {
        "name" : "CaptureLength",
        "type" : 18
      }, {
        "name" : "Length",
        "type" : 18
      }, {
        "name" : "InterfaceIndex",
        "type" : 18
      }, {
        "name" : "AncillaryData",
        "type" : 25
      } ],
      "name" : "struct{Timestamp time.Time; CaptureLength int; Length int; InterfaceIndex int; AncillaryData []interface{}}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "local-name" : "Time",
      "name" : "time.Time",
      "package" : 2,
      "type" : "Named",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "wall",
        "type" : 9
      }, {
        "name" : "ext",
        "type" : 10
      }, {
        "name" : "loc",
        "type" : 11
      } ],
      "name" : "struct{wall uint64; ext int64; loc *time.Location}",
      "type" : "Struct",
      "underlying" : 8
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "elem" : 12,
      "name" : "*time.Location",
      "type" : "Pointer",
      "underlying" : 11
    }, {
      "local-name" : "Location",
      "name" : "time.Location",
      "package" : 2,
      "type" : "Named",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 14
      }, {
        "name" : "zone",
        "type" : 15
      }, {
        "name" : "tx",
        "type" : 20
      }, {
        "name" : "cacheStart",
        "type" : 10
      }, {
        "name" : "cacheEnd",
        "type" : 10
      }, {
        "name" : "cacheZone",
        "type" : 24
      } ],
      "name" : "struct{name string; zone []time.zone; tx []time.zoneTrans; cacheStart int64; cacheEnd int64; cacheZone *time.zone}",
      "type" : "Struct",
      "underlying" : 13
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "elem" : 16,
      "name" : "[]time.zone",
      "type" : "Slice",
      "underlying" : 15
    }, {
      "local-name" : "zone",
      "name" : "time.zone",
      "package" : 2,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 14
      }, {
        "name" : "offset",
        "type" : 18
      }, {
        "name" : "isDST",
        "type" : 19
      } ],
      "name" : "struct{name string; offset int; isDST bool}",
      "type" : "Struct",
      "underlying" : 17
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "elem" : 21,
      "name" : "[]time.zoneTrans",
      "type" : "Slice",
      "underlying" : 20
    }, {
      "local-name" : "zoneTrans",
      "name" : "time.zoneTrans",
      "package" : 2,
      "type" : "Named",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "when",
        "type" : 10
      }, {
        "name" : "index",
        "type" : 23
      }, {
        "name" : "isstd",
        "type" : 19
      }, {
        "name" : "isutc",
        "type" : 19
      } ],
      "name" : "struct{when int64; index uint8; isstd bool; isutc bool}",
      "type" : "Struct",
      "underlying" : 22
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "elem" : 16,
      "name" : "*time.zone",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "elem" : 26,
      "name" : "[]interface{}",
      "type" : "Slice",
      "underlying" : 25
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 26
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 28
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 29
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 28
    }, {
      "name" : "func() string",
      "params" : 1,
      "recv" : 0,
      "results" : 30,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "name" : "func()",
      "params" : 1,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 31,
      "variadic" : false
    }, {
      "name" : "func(ci *github.com/google/gopacket.CaptureInfo) error",
      "params" : 33,
      "recv" : -1,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ci",
        "type" : 34
      } ],
      "name" : "(ci *github.com/google/gopacket.CaptureInfo)",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "elem" : 5,
      "name" : "*github.com/google/gopacket.CaptureInfo",
      "type" : "Pointer",
      "underlying" : 34
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 27
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 36
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 37
    }, {
      "elem" : 39,
      "name" : "*reflect.SliceHeader",
      "type" : "Pointer",
      "underlying" : 38
    }, {
      "local-name" : "SliceHeader",
      "name" : "reflect.SliceHeader",
      "package" : 4,
      "type" : "Named",
      "underlying" : 40
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 41
      }, {
        "name" : "Len",
        "type" : 18
      }, {
        "name" : "Cap",
        "type" : 18
      } ],
      "name" : "struct{Data uintptr; Len int; Cap int}",
      "type" : "Struct",
      "underlying" : 40
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 41
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 5,
      "type" : "Basic",
      "underlying" : 42
    }, {
      "elem" : 3,
      "name" : "*[]byte",
      "type" : "Pointer",
      "underlying" : 43
    }, {
      "local-name" : "NextError",
      "name" : "github.com/google/gopacket/pcap.NextError",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 27,
      "exported" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "ci",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 27,
      "exported" : false
    }, {
      "name" : "mu",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "slice",
      "package" : 0,
      "type" : 38,
      "exported" : false
    }, {
      "name" : "Data",
      "package" : 4,
      "type" : 41,
      "exported" : true
    }, {
      "name" : "bufptr",
      "package" : 0,
      "type" : 13,
      "exported" : false
    }, {
      "name" : "Len",
      "package" : 4,
      "type" : 18,
      "exported" : true
    }, {
      "name" : "CaptureLength",
      "package" : 1,
      "type" : 18,
      "exported" : true
    }, {
      "name" : "Cap",
      "package" : 4,
      "type" : 18,
      "exported" : true
    } ]
  },
  "go-version" : "1.14.3"
}