{
  "usage" : {
    "file" : "alloc.go",
    "label1" : "cast-header",
    "label2" : "efficiency",
    "line" : "62",
    "module" : "github.com/yuin/gopher-lua",
    "pkg" : "github.com/yuin/gopher-lua",
    "project" : "elastic/beats",
    "snippet" : "al.fheader = (*reflect.SliceHeader)(unsafe.Pointer(&al.fptrs))",
    "version" : "v0.0.0-20170403160031-b402f3114ec7"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 9, 12, 10, 13 ],
      "exit" : false,
      "out-vars" : [ 12, 10, 13, 9 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 10, 13, 9, 12 ],
      "exit" : false,
      "out-vars" : [ 10, 13, 9, 12 ],
      "decl-vars" : [ ],
      "line-start" : 54,
      "ast" : {
        "condition" : {
          "go-type" : 142,
          "kind" : "expression",
          "left" : {
            "go-type" : 142,
            "kind" : "expression",
            "left" : {
              "go-type" : 142,
              "kind" : "expression",
              "left" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 10
                }
              },
              "operator" : ">=",
              "right" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "denominator" : {
                    "type" : "INT",
                    "value" : "1"
                  },
                  "numerator" : {
                    "type" : "INT",
                    "value" : "0"
                  },
                  "type" : "FLOAT"
                }
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 142,
              "kind" : "expression",
              "left" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 10
                }
              },
              "operator" : "<",
              "right" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "denominator" : {
                    "type" : "INT",
                    "value" : "1"
                  },
                  "numerator" : {
                    "type" : "INT",
                    "value" : "128"
                  },
                  "type" : "FLOAT"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 142,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "float64"
                }
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 10
                }
              },
              "type" : "cast"
            },
            "operator" : "==",
            "right" : {
              "coerced-to" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "float64"
                }
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 115,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 115,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int64"
                  }
                },
                "go-type" : 115,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "v",
                    "variable" : 10
                  }
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 56,
      "code" : "if v >= 0 && v < preloadLimit && float64(v) == float64(int64(v)) {\n\treturn al.preloads[int(v)]\n}",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 9, 10 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 55,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "index" : {
            "coerced-to" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 10
              }
            },
            "type" : "cast"
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "preloads",
              "variable" : 14
            },
            "go-type" : 96,
            "kind" : "expression",
            "target" : {
              "go-type" : 88,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "al",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 55,
      "code" : "return al.preloads[int(v)]",
      "entry" : false,
      "use-vars" : [ 10, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 10 ],
      "in-vars" : [ 13, 9, 12, 10 ],
      "exit" : false,
      "out-vars" : [ 9, 12, 10, 13 ],
      "decl-vars" : [ ],
      "line-start" : 57,
      "ast" : {
        "condition" : {
          "go-type" : 142,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "top",
              "variable" : 15
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 88,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "al",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 14,
            "kind" : "expression",
            "left" : {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "nptrs",
                  "variable" : 16
                },
                "go-type" : 26,
                "kind" : "expression",
                "target" : {
                  "go-type" : 88,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "al",
                    "variable" : 9
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 143,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 14,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "-",
            "right" : {
              "go-type" : 14,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 63,
      "code" : "if al.top == len(al.nptrs)-1 {\n\tal.top = 0\n\tal.nptrs = make([]LValue, al.size)\n\tal.nheader = (*reflect.SliceHeader)(unsafe.Pointer(&al.nptrs))\n\tal.fptrs = make([]float64, al.size)\n\tal.fheader = (*reflect.SliceHeader)(unsafe.Pointer(&al.fptrs))\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 6 ],
      "in-vars" : [ 9, 12, 10, 13 ],
      "exit" : false,
      "out-vars" : [ 9, 12, 10, 13 ],
      "decl-vars" : [ ],
      "line-start" : 58,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "top",
            "variable" : 15
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 88,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "al",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 14,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 58,
      "code" : "al.top = 0",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 7 ],
      "in-vars" : [ 12, 10, 13, 9 ],
      "exit" : false,
      "out-vars" : [ 9, 12, 10, 13 ],
      "decl-vars" : [ ],
      "line-start" : 59,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nptrs",
            "variable" : 16
          },
          "go-type" : 26,
          "kind" : "expression",
          "target" : {
            "go-type" : 88,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "al",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "LValue"
              }
            },
            "go-type" : 26,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 26,
          "kind" : "expression",
          "rest" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 17
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 88,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "al",
                "variable" : 9
              }
            },
            "type" : "selector"
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 59,
      "code" : "al.nptrs = make([]LValue, al.size)",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 8 ],
      "in-vars" : [ 9, 12, 10, 13 ],
      "exit" : false,
      "out-vars" : [ 9, 12, 10, 13 ],
      "decl-vars" : [ ],
      "line-start" : 60,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nheader",
            "variable" : 18
          },
          "go-type" : 91,
          "kind" : "expression",
          "target" : {
            "go-type" : 88,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "al",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 92,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "reflect"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 92,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SliceHeader"
              }
            },
            "go-type" : 91,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 91,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 95,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 5,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 95,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 95,
            "kind" : "expression",
            "target" : {
              "go-type" : 145,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "nptrs",
                  "variable" : 16
                },
                "go-type" : 26,
                "kind" : "expression",
                "target" : {
                  "go-type" : 88,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "al",
                    "variable" : 9
                  }
                },
                "type" : "selector"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 60,
      "code" : "al.nheader = (*reflect.SliceHeader)(unsafe.Pointer(&al.nptrs))",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 9 ],
      "in-vars" : [ 9, 12, 10, 13 ],
      "exit" : false,
      "out-vars" : [ 9, 12, 10, 13 ],
      "decl-vars" : [ ],
      "line-start" : 61,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fptrs",
            "variable" : 19
          },
          "go-type" : 94,
          "kind" : "expression",
          "target" : {
            "go-type" : 88,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "al",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 3,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float64"
              }
            },
            "go-type" : 94,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 94,
          "kind" : "expression",
          "rest" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 17
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 88,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "al",
                "variable" : 9
              }
            },
            "type" : "selector"
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 61,
      "code" : "al.fptrs = make([]float64, al.size)",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 10 ],
      "in-vars" : [ 9, 12, 10, 13 ],
      "exit" : false,
      "out-vars" : [ 9, 12, 10, 13 ],
      "decl-vars" : [ ],
      "line-start" : 62,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fheader",
            "variable" : 20
          },
          "go-type" : 91,
          "kind" : "expression",
          "target" : {
            "go-type" : 88,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "al",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 92,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "reflect"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 92,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SliceHeader"
              }
            },
            "go-type" : 91,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 91,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 95,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 5,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 95,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 95,
            "kind" : "expression",
            "target" : {
              "go-type" : 146,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fptrs",
                  "variable" : 19
                },
                "go-type" : 94,
                "kind" : "expression",
                "target" : {
                  "go-type" : 88,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "al",
                    "variable" : 9
                  }
                },
                "type" : "selector"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 62,
      "code" : "al.fheader = (*reflect.SliceHeader)(unsafe.Pointer(&al.fptrs))",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 12, 10, 13, 9 ],
      "exit" : false,
      "out-vars" : [ 12, 10, 9, 22 ],
      "decl-vars" : [ 22 ],
      "line-start" : 64,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 3,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float64"
              }
            },
            "go-type" : 147,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 147,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 95,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 5,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 95,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 95,
            "kind" : "expression",
            "target" : {
              "go-type" : 70,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Data",
                  "variable" : 21
                },
                "go-type" : 70,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "fheader",
                    "variable" : 20
                  },
                  "go-type" : 91,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 88,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "al",
                      "variable" : 9
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "operator" : "+",
              "right" : {
                "go-type" : 70,
                "kind" : "expression",
                "left" : {
                  "coerced-to" : {
                    "go-type" : 70,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 70,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uintptr"
                    }
                  },
                  "go-type" : 70,
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "top",
                      "variable" : 15
                    },
                    "go-type" : 14,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 88,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "al",
                        "variable" : 9
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "cast"
                },
                "operator" : "*",
                "right" : {
                  "go-type" : 70,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "8"
                  }
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 64,
      "code" : "fptr := (*float64)(unsafe.Pointer(al.fheader.Data + uintptr(al.top)*unsafe.Sizeof(_fv)))",
      "entry" : false,
      "use-vars" : [ 9, 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 10, 9, 22, 12 ],
      "exit" : false,
      "out-vars" : [ 9, 22, 23, 10 ],
      "decl-vars" : [ 23 ],
      "line-start" : 65,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "e"
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 5,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 5,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "LValue"
                }
              },
              "go-type" : 148,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 148,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 95,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 5,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 95,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 95,
              "kind" : "expression",
              "target" : {
                "go-type" : 70,
                "kind" : "expression",
                "left" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Data",
                    "variable" : 21
                  },
                  "go-type" : 70,
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "nheader",
                      "variable" : 18
                    },
                    "go-type" : 91,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 88,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "al",
                        "variable" : 9
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "selector"
                },
                "operator" : "+",
                "right" : {
                  "go-type" : 70,
                  "kind" : "expression",
                  "left" : {
                    "coerced-to" : {
                      "go-type" : 70,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 70,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "uintptr"
                      }
                    },
                    "go-type" : 70,
                    "kind" : "expression",
                    "target" : {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "top",
                        "variable" : 15
                      },
                      "go-type" : 14,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 88,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "al",
                          "variable" : 9
                        }
                      },
                      "type" : "selector"
                    },
                    "type" : "cast"
                  },
                  "operator" : "*",
                  "right" : {
                    "go-type" : 70,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "8"
                    }
                  },
                  "type" : "binary"
                },
                "type" : "binary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 65,
      "code" : "e := *(*LValue)(unsafe.Pointer(al.nheader.Data + uintptr(al.top)*unsafe.Sizeof(_uv)))",
      "entry" : false,
      "use-vars" : [ 12, 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 13 ],
      "in-vars" : [ 10, 9, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 9, 22, 23, 10 ],
      "decl-vars" : [ ],
      "line-start" : 66,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "top",
            "variable" : 15
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 88,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "al",
              "variable" : 9
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 66,
      "code" : "al.top++",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 10, 9, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 22, 23, 10, 9, 24 ],
      "decl-vars" : [ 24 ],
      "line-start" : 68,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ep"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 150,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 150,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "iface"
              }
            },
            "go-type" : 149,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 149,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 95,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 5,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 95,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 95,
            "kind" : "expression",
            "target" : {
              "go-type" : 148,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "e",
                  "variable" : 23
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 68,
      "code" : "ep := (*iface)(unsafe.Pointer(&e))",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 15 ],
      "in-vars" : [ 23, 10, 9, 24, 22 ],
      "exit" : false,
      "out-vars" : [ 23, 10, 24, 22 ],
      "decl-vars" : [ ],
      "line-start" : 69,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "itab",
            "variable" : 25
          },
          "go-type" : 95,
          "kind" : "expression",
          "target" : {
            "go-type" : 149,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ep",
              "variable" : 24
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "itabLNumber",
            "variable" : 26
          },
          "go-type" : 95,
          "kind" : "expression",
          "target" : {
            "go-type" : 88,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "al",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 69,
      "code" : "ep.itab = al.itabLNumber",
      "entry" : false,
      "use-vars" : [ 24, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 24, 22, 23, 10 ],
      "exit" : false,
      "out-vars" : [ 24, 22, 23 ],
      "decl-vars" : [ ],
      "line-start" : 70,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 147,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fptr",
              "variable" : 22
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 3,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 3,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "float64"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 10
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 70,
      "code" : "*fptr = float64(v)",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 17 ],
      "in-vars" : [ 24, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 71,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "word",
            "variable" : 27
          },
          "go-type" : 95,
          "kind" : "expression",
          "target" : {
            "go-type" : 149,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ep",
              "variable" : 24
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 95,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 5,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 95,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 95,
          "kind" : "expression",
          "target" : {
            "go-type" : 147,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fptr",
              "variable" : 22
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 71,
      "code" : "ep.word = unsafe.Pointer(fptr)",
      "entry" : false,
      "use-vars" : [ 22, 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 72,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "e",
            "variable" : 23
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 72,
      "code" : "return e",
      "entry" : false,
      "use-vars" : [ 23 ]
    } ],
    "code" : "func (al *allocator) LNumber2I(v LNumber) LValue {\n\tif v >= 0 && v < preloadLimit && float64(v) == float64(int64(v)) {\n\t\treturn al.preloads[int(v)]\n\t}\n\tif al.top == len(al.nptrs)-1 {\n\t\tal.top = 0\n\t\tal.nptrs = make([]LValue, al.size)\n\t\tal.nheader = (*reflect.SliceHeader)(unsafe.Pointer(&al.nptrs))\n\t\tal.fptrs = make([]float64, al.size)\n\t\tal.fheader = (*reflect.SliceHeader)(unsafe.Pointer(&al.fptrs))\n\t}\n\tfptr := (*float64)(unsafe.Pointer(al.fheader.Data + uintptr(al.top)*unsafe.Sizeof(_fv)))\n\te := *(*LValue)(unsafe.Pointer(al.nheader.Data + uintptr(al.top)*unsafe.Sizeof(_uv)))\n\tal.top++\n\n\tep := (*iface)(unsafe.Pointer(&e))\n\tep.itab = al.itabLNumber\n\t*fptr = float64(v)\n\tep.word = unsafe.Pointer(fptr)\n\treturn e\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "LNumber2I",
      "package" : 0,
      "type" : 0,
      "exported" : true
    } ],
    "line-end" : 73,
    "line-start" : 53,
    "names" : [ "LNumber2I" ],
    "package" : 0,
    "packages" : [ {
      "name" : "lua",
      "path" : "github.com/yuin/gopher-lua"
    }, {
      "name" : "os",
      "path" : "os"
    }, {
      "name" : "poll",
      "path" : "internal/poll"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "context",
      "path" : "context"
    }, {
      "name" : "time",
      "path" : "time"
    } ],
    "params" : [ 10 ],
    "receivers" : [ 9 ],
    "results" : [ 11 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(v github.com/yuin/gopher-lua.LNumber) github.com/yuin/gopher-lua.LValue",
      "params" : 1,
      "recv" : 9,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 2
      } ],
      "name" : "(v github.com/yuin/gopher-lua.LNumber)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "LNumber",
      "name" : "github.com/yuin/gopher-lua.LNumber",
      "package" : 0,
      "type" : "Named",
      "underlying" : 3
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(github.com/yuin/gopher-lua.LValue)",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "local-name" : "LValue",
      "name" : "github.com/yuin/gopher-lua.LValue",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "methods" : [ {
        "name" : "String",
        "type" : 7
      }, {
        "name" : "Type",
        "type" : 11
      }, {
        "name" : "assertFloat64",
        "type" : 15
      }, {
        "name" : "assertFunction",
        "type" : 18
      }, {
        "name" : "assertString",
        "type" : 140
      } ],
      "name" : "interface{String() string; Type() github.com/yuin/gopher-lua.LValueType; assertFloat64() (float64, bool); assertFunction() (*github.com/yuin/gopher-lua.LFunction, bool); assertString() (string, bool)}",
      "type" : "Interface",
      "underlying" : 6
    }, {
      "name" : "func() string",
      "params" : 8,
      "recv" : 0,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 7,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "func() github.com/yuin/gopher-lua.LValueType",
      "params" : 8,
      "recv" : 1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(github.com/yuin/gopher-lua.LValueType)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "local-name" : "LValueType",
      "name" : "github.com/yuin/gopher-lua.LValueType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "name" : "func() (float64, bool)",
      "params" : 8,
      "recv" : 2,
      "results" : 16,
      "type" : "Signature",
      "underlying" : 15,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      }, {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(float64, bool)",
      "type" : "Tuple",
      "underlying" : 16
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "name" : "func() (*github.com/yuin/gopher-lua.LFunction, bool)",
      "params" : 8,
      "recv" : 7,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 20
      }, {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(*github.com/yuin/gopher-lua.LFunction, bool)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "elem" : 21,
      "name" : "*github.com/yuin/gopher-lua.LFunction",
      "type" : "Pointer",
      "underlying" : 20
    }, {
      "local-name" : "LFunction",
      "name" : "github.com/yuin/gopher-lua.LFunction",
      "package" : 0,
      "type" : "Named",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "IsG",
        "type" : 17
      }, {
        "name" : "Env",
        "type" : 23
      }, {
        "name" : "Proto",
        "type" : 30
      }, {
        "name" : "GFunction",
        "type" : 46
      }, {
        "name" : "Upvalues",
        "type" : 139
      } ],
      "name" : "struct{IsG bool; Env *github.com/yuin/gopher-lua.LTable; Proto *github.com/yuin/gopher-lua.FunctionProto; GFunction github.com/yuin/gopher-lua.LGFunction; Upvalues []*github.com/yuin/gopher-lua.Upvalue}",
      "type" : "Struct",
      "underlying" : 22
    }, {
      "elem" : 24,
      "name" : "*github.com/yuin/gopher-lua.LTable",
      "type" : "Pointer",
      "underlying" : 23
    }, {
      "local-name" : "LTable",
      "name" : "github.com/yuin/gopher-lua.LTable",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "Metatable",
        "type" : 5
      }, {
        "name" : "array",
        "type" : 26
      }, {
        "name" : "dict",
        "type" : 27
      }, {
        "name" : "strdict",
        "type" : 28
      }, {
        "name" : "keys",
        "type" : 26
      }, {
        "name" : "k2i",
        "type" : 29
      } ],
      "name" : "struct{Metatable github.com/yuin/gopher-lua.LValue; array []github.com/yuin/gopher-lua.LValue; dict map[github.com/yuin/gopher-lua.LValue]github.com/yuin/gopher-lua.LValue; strdict map[string]github.com/yuin/gopher-lua.LValue; keys []github.com/yuin/gopher-lua.LValue; k2i map[github.com/yuin/gopher-lua.LValue]int}",
      "type" : "Struct",
      "underlying" : 25
    }, {
      "elem" : 5,
      "name" : "[]github.com/yuin/gopher-lua.LValue",
      "type" : "Slice",
      "underlying" : 26
    }, {
      "elem" : 5,
      "key" : 5,
      "name" : "map[github.com/yuin/gopher-lua.LValue]github.com/yuin/gopher-lua.LValue",
      "type" : "Map",
      "underlying" : 27
    }, {
      "elem" : 5,
      "key" : 10,
      "name" : "map[string]github.com/yuin/gopher-lua.LValue",
      "type" : "Map",
      "underlying" : 28
    }, {
      "elem" : 14,
      "key" : 5,
      "name" : "map[github.com/yuin/gopher-lua.LValue]int",
      "type" : "Map",
      "underlying" : 29
    }, {
      "elem" : 31,
      "name" : "*github.com/yuin/gopher-lua.FunctionProto",
      "type" : "Pointer",
      "underlying" : 30
    }, {
      "local-name" : "FunctionProto",
      "name" : "github.com/yuin/gopher-lua.FunctionProto",
      "package" : 0,
      "type" : "Named",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "SourceName",
        "type" : 10
      }, {
        "name" : "LineDefined",
        "type" : 14
      }, {
        "name" : "LastLineDefined",
        "type" : 14
      }, {
        "name" : "NumUpvalues",
        "type" : 33
      }, {
        "name" : "NumParameters",
        "type" : 33
      }, {
        "name" : "IsVarArg",
        "type" : 33
      }, {
        "name" : "NumUsedRegisters",
        "type" : 33
      }, {
        "name" : "Code",
        "type" : 34
      }, {
        "name" : "Constants",
        "type" : 26
      }, {
        "name" : "FunctionPrototypes",
        "type" : 36
      }, {
        "name" : "DbgSourcePositions",
        "type" : 37
      }, {
        "name" : "DbgLocals",
        "type" : 38
      }, {
        "name" : "DbgCalls",
        "type" : 42
      }, {
        "name" : "DbgUpvalues",
        "type" : 45
      }, {
        "name" : "stringConstants",
        "type" : 45
      } ],
      "name" : "struct{SourceName string; LineDefined int; LastLineDefined int; NumUpvalues uint8; NumParameters uint8; IsVarArg uint8; NumUsedRegisters uint8; Code []uint32; Constants []github.com/yuin/gopher-lua.LValue; FunctionPrototypes []*github.com/yuin/gopher-lua.FunctionProto; DbgSourcePositions []int; DbgLocals []*github.com/yuin/gopher-lua.DbgLocalInfo; DbgCalls []github.com/yuin/gopher-lua.DbgCall; DbgUpvalues []string; stringConstants []string}",
      "type" : "Struct",
      "underlying" : 32
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 33
    }, {
      "elem" : 35,
      "name" : "[]uint32",
      "type" : "Slice",
      "underlying" : 34
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 35
    }, {
      "elem" : 30,
      "name" : "[]*github.com/yuin/gopher-lua.FunctionProto",
      "type" : "Slice",
      "underlying" : 36
    }, {
      "elem" : 14,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 37
    }, {
      "elem" : 39,
      "name" : "[]*github.com/yuin/gopher-lua.DbgLocalInfo",
      "type" : "Slice",
      "underlying" : 38
    }, {
      "elem" : 40,
      "name" : "*github.com/yuin/gopher-lua.DbgLocalInfo",
      "type" : "Pointer",
      "underlying" : 39
    }, {
      "local-name" : "DbgLocalInfo",
      "name" : "github.com/yuin/gopher-lua.DbgLocalInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 10
      }, {
        "name" : "StartPc",
        "type" : 14
      }, {
        "name" : "EndPc",
        "type" : 14
      } ],
      "name" : "struct{Name string; StartPc int; EndPc int}",
      "type" : "Struct",
      "underlying" : 41
    }, {
      "elem" : 43,
      "name" : "[]github.com/yuin/gopher-lua.DbgCall",
      "type" : "Slice",
      "underlying" : 42
    }, {
      "local-name" : "DbgCall",
      "name" : "github.com/yuin/gopher-lua.DbgCall",
      "package" : 0,
      "type" : "Named",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 10
      }, {
        "name" : "Pc",
        "type" : 14
      } ],
      "name" : "struct{Name string; Pc int}",
      "type" : "Struct",
      "underlying" : 44
    }, {
      "elem" : 10,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 45
    }, {
      "local-name" : "LGFunction",
      "name" : "github.com/yuin/gopher-lua.LGFunction",
      "package" : 0,
      "type" : "Named",
      "underlying" : 47
    }, {
      "name" : "func(*github.com/yuin/gopher-lua.LState) int",
      "params" : 48,
      "recv" : -1,
      "results" : 138,
      "type" : "Signature",
      "underlying" : 47,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 49
      } ],
      "name" : "(*github.com/yuin/gopher-lua.LState)",
      "type" : "Tuple",
      "underlying" : 48
    }, {
      "elem" : 50,
      "name" : "*github.com/yuin/gopher-lua.LState",
      "type" : "Pointer",
      "underlying" : 49
    }, {
      "local-name" : "LState",
      "name" : "github.com/yuin/gopher-lua.LState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 51
    }, {
      "fields" : [ {
        "name" : "G",
        "type" : 52
      }, {
        "name" : "Parent",
        "type" : 49
      }, {
        "name" : "Env",
        "type" : 23
      }, {
        "name" : "Panic",
        "type" : 82
      }, {
        "name" : "Dead",
        "type" : 17
      }, {
        "name" : "Options",
        "type" : 83
      }, {
        "name" : "stop",
        "type" : 81
      }, {
        "name" : "reg",
        "type" : 85
      }, {
        "name" : "stack",
        "type" : 97
      }, {
        "name" : "alloc",
        "type" : 88
      }, {
        "name" : "currentFrame",
        "type" : 103
      }, {
        "name" : "wrapped",
        "type" : 17
      }, {
        "name" : "uvcache",
        "type" : 104
      }, {
        "name" : "hasErrorFunc",
        "type" : 17
      }, {
        "name" : "mainLoop",
        "type" : 107
      }, {
        "name" : "ctx",
        "type" : 109
      } ],
      "name" : "struct{G *github.com/yuin/gopher-lua.Global; Parent *github.com/yuin/gopher-lua.LState; Env *github.com/yuin/gopher-lua.LTable; Panic func(*github.com/yuin/gopher-lua.LState); Dead bool; Options github.com/yuin/gopher-lua.Options; stop int32; reg *github.com/yuin/gopher-lua.registry; stack *github.com/yuin/gopher-lua.callFrameStack; alloc *github.com/yuin/gopher-lua.allocator; currentFrame *github.com/yuin/gopher-lua.callFrame; wrapped bool; uvcache *github.com/yuin/gopher-lua.Upvalue; hasErrorFunc bool; mainLoop func(*github.com/yuin/gopher-lua.LState, *github.com/yuin/gopher-lua.callFrame); ctx context.Context}",
      "type" : "Struct",
      "underlying" : 51
    }, {
      "elem" : 53,
      "name" : "*github.com/yuin/gopher-lua.Global",
      "type" : "Pointer",
      "underlying" : 52
    }, {
      "local-name" : "Global",
      "name" : "github.com/yuin/gopher-lua.Global",
      "package" : 0,
      "type" : "Named",
      "underlying" : 54
    }, {
      "fields" : [ {
        "name" : "MainThread",
        "type" : 49
      }, {
        "name" : "CurrentThread",
        "type" : 49
      }, {
        "name" : "Registry",
        "type" : 23
      }, {
        "name" : "Global",
        "type" : 23
      }, {
        "name" : "builtinMts",
        "type" : 55
      }, {
        "name" : "tempFiles",
        "type" : 56
      }, {
        "name" : "gccount",
        "type" : 81
      } ],
      "name" : "struct{MainThread *github.com/yuin/gopher-lua.LState; CurrentThread *github.com/yuin/gopher-lua.LState; Registry *github.com/yuin/gopher-lua.LTable; Global *github.com/yuin/gopher-lua.LTable; builtinMts map[int]github.com/yuin/gopher-lua.LValue; tempFiles []*os.File; gccount int32}",
      "type" : "Struct",
      "underlying" : 54
    }, {
      "elem" : 5,
      "key" : 14,
      "name" : "map[int]github.com/yuin/gopher-lua.LValue",
      "type" : "Map",
      "underlying" : 55
    }, {
      "elem" : 57,
      "name" : "[]*os.File",
      "type" : "Slice",
      "underlying" : 56
    }, {
      "elem" : 58,
      "name" : "*os.File",
      "type" : "Pointer",
      "underlying" : 57
    }, {
      "local-name" : "File",
      "name" : "os.File",
      "package" : 1,
      "type" : "Named",
      "underlying" : 59
    }, {
      "fields" : [ {
        "name" : "file",
        "type" : 60
      } ],
      "name" : "struct{*os.file}",
      "type" : "Struct",
      "underlying" : 59
    }, {
      "elem" : 61,
      "name" : "*os.file",
      "type" : "Pointer",
      "underlying" : 60
    }, {
      "local-name" : "file",
      "name" : "os.file",
      "package" : 1,
      "type" : "Named",
      "underlying" : 62
    }, {
      "fields" : [ {
        "name" : "pfd",
        "type" : 63
      }, {
        "name" : "name",
        "type" : 10
      }, {
        "name" : "dirinfo",
        "type" : 77
      }, {
        "name" : "nonblock",
        "type" : 17
      }, {
        "name" : "stdoutOrErr",
        "type" : 17
      }, {
        "name" : "appendMode",
        "type" : 17
      } ],
      "name" : "struct{pfd internal/poll.FD; name string; dirinfo *os.dirInfo; nonblock bool; stdoutOrErr bool; appendMode bool}",
      "type" : "Struct",
      "underlying" : 62
    }, {
      "local-name" : "FD",
      "name" : "internal/poll.FD",
      "package" : 2,
      "type" : "Named",
      "underlying" : 64
    }, {
      "fields" : [ {
        "name" : "fdmu",
        "type" : 65
      }, {
        "name" : "Sysfd",
        "type" : 14
      }, {
        "name" : "pd",
        "type" : 68
      }, {
        "name" : "iovecs",
        "type" : 71
      }, {
        "name" : "csema",
        "type" : 35
      }, {
        "name" : "isBlocking",
        "type" : 35
      }, {
        "name" : "IsStream",
        "type" : 17
      }, {
        "name" : "ZeroReadIsEOF",
        "type" : 17
      }, {
        "name" : "isFile",
        "type" : 17
      } ],
      "name" : "struct{fdmu internal/poll.fdMutex; Sysfd int; pd internal/poll.pollDesc; iovecs *[]syscall.Iovec; csema uint32; isBlocking uint32; IsStream bool; ZeroReadIsEOF bool; isFile bool}",
      "type" : "Struct",
      "underlying" : 64
    }, {
      "local-name" : "fdMutex",
      "name" : "internal/poll.fdMutex",
      "package" : 2,
      "type" : "Named",
      "underlying" : 66
    }, {
      "fields" : [ {
        "name" : "state",
        "type" : 67
      }, {
        "name" : "rsema",
        "type" : 35
      }, {
        "name" : "wsema",
        "type" : 35
      } ],
      "name" : "struct{state uint64; rsema uint32; wsema uint32}",
      "type" : "Struct",
      "underlying" : 66
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 67
    }, {
      "local-name" : "pollDesc",
      "name" : "internal/poll.pollDesc",
      "package" : 2,
      "type" : "Named",
      "underlying" : 69
    }, {
      "fields" : [ {
        "name" : "runtimeCtx",
        "type" : 70
      } ],
      "name" : "struct{runtimeCtx uintptr}",
      "type" : "Struct",
      "underlying" : 69
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 70
    }, {
      "elem" : 72,
      "name" : "*[]syscall.Iovec",
      "type" : "Pointer",
      "underlying" : 71
    }, {
      "elem" : 73,
      "name" : "[]syscall.Iovec",
      "type" : "Slice",
      "underlying" : 72
    }, {
      "local-name" : "Iovec",
      "name" : "syscall.Iovec",
      "package" : 3,
      "type" : "Named",
      "underlying" : 74
    }, {
      "fields" : [ {
        "name" : "Base",
        "type" : 75
      }, {
        "name" : "Len",
        "type" : 67
      } ],
      "name" : "struct{Base *byte; Len uint64}",
      "type" : "Struct",
      "underlying" : 74
    }, {
      "elem" : 76,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 75
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 76
    }, {
      "elem" : 78,
      "name" : "*os.dirInfo",
      "type" : "Pointer",
      "underlying" : 77
    }, {
      "local-name" : "dirInfo",
      "name" : "os.dirInfo",
      "package" : 1,
      "type" : "Named",
      "underlying" : 79
    }, {
      "fields" : [ {
        "name" : "buf",
        "type" : 80
      }, {
        "name" : "nbuf",
        "type" : 14
      }, {
        "name" : "bufp",
        "type" : 14
      } ],
      "name" : "struct{buf []byte; nbuf int; bufp int}",
      "type" : "Struct",
      "underlying" : 79
    }, {
      "elem" : 76,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 80
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 81
    }, {
      "name" : "func(*github.com/yuin/gopher-lua.LState)",
      "params" : 48,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 82,
      "variadic" : false
    }, {
      "local-name" : "Options",
      "name" : "github.com/yuin/gopher-lua.Options",
      "package" : 0,
      "type" : "Named",
      "underlying" : 84
    }, {
      "fields" : [ {
        "name" : "CallStackSize",
        "type" : 14
      }, {
        "name" : "RegistrySize",
        "type" : 14
      }, {
        "name" : "SkipOpenLibs",
        "type" : 17
      }, {
        "name" : "IncludeGoStackTrace",
        "type" : 17
      } ],
      "name" : "struct{CallStackSize int; RegistrySize int; SkipOpenLibs bool; IncludeGoStackTrace bool}",
      "type" : "Struct",
      "underlying" : 84
    }, {
      "elem" : 86,
      "name" : "*github.com/yuin/gopher-lua.registry",
      "type" : "Pointer",
      "underlying" : 85
    }, {
      "local-name" : "registry",
      "name" : "github.com/yuin/gopher-lua.registry",
      "package" : 0,
      "type" : "Named",
      "underlying" : 87
    }, {
      "fields" : [ {
        "name" : "array",
        "type" : 26
      }, {
        "name" : "top",
        "type" : 14
      }, {
        "name" : "alloc",
        "type" : 88
      } ],
      "name" : "struct{array []github.com/yuin/gopher-lua.LValue; top int; alloc *github.com/yuin/gopher-lua.allocator}",
      "type" : "Struct",
      "underlying" : 87
    }, {
      "elem" : 89,
      "name" : "*github.com/yuin/gopher-lua.allocator",
      "type" : "Pointer",
      "underlying" : 88
    }, {
      "local-name" : "allocator",
      "name" : "github.com/yuin/gopher-lua.allocator",
      "package" : 0,
      "type" : "Named",
      "underlying" : 90
    }, {
      "fields" : [ {
        "name" : "top",
        "type" : 14
      }, {
        "name" : "size",
        "type" : 14
      }, {
        "name" : "nptrs",
        "type" : 26
      }, {
        "name" : "nheader",
        "type" : 91
      }, {
        "name" : "fptrs",
        "type" : 94
      }, {
        "name" : "fheader",
        "type" : 91
      }, {
        "name" : "itabLNumber",
        "type" : 95
      }, {
        "name" : "preloads",
        "type" : 96
      } ],
      "name" : "struct{top int; size int; nptrs []github.com/yuin/gopher-lua.LValue; nheader *reflect.SliceHeader; fptrs []float64; fheader *reflect.SliceHeader; itabLNumber unsafe.Pointer; preloads [128]github.com/yuin/gopher-lua.LValue}",
      "type" : "Struct",
      "underlying" : 90
    }, {
      "elem" : 92,
      "name" : "*reflect.SliceHeader",
      "type" : "Pointer",
      "underlying" : 91
    }, {
      "local-name" : "SliceHeader",
      "name" : "reflect.SliceHeader",
      "package" : 4,
      "type" : "Named",
      "underlying" : 93
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 70
      }, {
        "name" : "Len",
        "type" : 14
      }, {
        "name" : "Cap",
        "type" : 14
      } ],
      "name" : "struct{Data uintptr; Len int; Cap int}",
      "type" : "Struct",
      "underlying" : 93
    }, {
      "elem" : 3,
      "name" : "[]float64",
      "type" : "Slice",
      "underlying" : 94
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 5,
      "type" : "Basic",
      "underlying" : 95
    }, {
      "elem" : 5,
      "name" : "[128]github.com/yuin/gopher-lua.LValue",
      "type" : "Array",
      "underlying" : 96
    }, {
      "elem" : 98,
      "name" : "*github.com/yuin/gopher-lua.callFrameStack",
      "type" : "Pointer",
      "underlying" : 97
    }, {
      "local-name" : "callFrameStack",
      "name" : "github.com/yuin/gopher-lua.callFrameStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 99
    }, {
      "fields" : [ {
        "name" : "array",
        "type" : 100
      }, {
        "name" : "sp",
        "type" : 14
      } ],
      "name" : "struct{array []github.com/yuin/gopher-lua.callFrame; sp int}",
      "type" : "Struct",
      "underlying" : 99
    }, {
      "elem" : 101,
      "name" : "[]github.com/yuin/gopher-lua.callFrame",
      "type" : "Slice",
      "underlying" : 100
    }, {
      "local-name" : "callFrame",
      "name" : "github.com/yuin/gopher-lua.callFrame",
      "package" : 0,
      "type" : "Named",
      "underlying" : 102
    }, {
      "fields" : [ {
        "name" : "Idx",
        "type" : 14
      }, {
        "name" : "Fn",
        "type" : 20
      }, {
        "name" : "Parent",
        "type" : 103
      }, {
        "name" : "Pc",
        "type" : 14
      }, {
        "name" : "Base",
        "type" : 14
      }, {
        "name" : "LocalBase",
        "type" : 14
      }, {
        "name" : "ReturnBase",
        "type" : 14
      }, {
        "name" : "NArgs",
        "type" : 14
      }, {
        "name" : "NRet",
        "type" : 14
      }, {
        "name" : "TailCall",
        "type" : 14
      } ],
      "name" : "struct{Idx int; Fn *github.com/yuin/gopher-lua.LFunction; Parent *github.com/yuin/gopher-lua.callFrame; Pc int; Base int; LocalBase int; ReturnBase int; NArgs int; NRet int; TailCall int}",
      "type" : "Struct",
      "underlying" : 102
    }, {
      "elem" : 101,
      "name" : "*github.com/yuin/gopher-lua.callFrame",
      "type" : "Pointer",
      "underlying" : 103
    }, {
      "elem" : 105,
      "name" : "*github.com/yuin/gopher-lua.Upvalue",
      "type" : "Pointer",
      "underlying" : 104
    }, {
      "local-name" : "Upvalue",
      "name" : "github.com/yuin/gopher-lua.Upvalue",
      "package" : 0,
      "type" : "Named",
      "underlying" : 106
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 104
      }, {
        "name" : "reg",
        "type" : 85
      }, {
        "name" : "index",
        "type" : 14
      }, {
        "name" : "value",
        "type" : 5
      }, {
        "name" : "closed",
        "type" : 17
      } ],
      "name" : "struct{next *github.com/yuin/gopher-lua.Upvalue; reg *github.com/yuin/gopher-lua.registry; index int; value github.com/yuin/gopher-lua.LValue; closed bool}",
      "type" : "Struct",
      "underlying" : 106
    }, {
      "name" : "func(*github.com/yuin/gopher-lua.LState, *github.com/yuin/gopher-lua.callFrame)",
      "params" : 108,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 107,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 49
      }, {
        "name" : "",
        "type" : 103
      } ],
      "name" : "(*github.com/yuin/gopher-lua.LState, *github.com/yuin/gopher-lua.callFrame)",
      "type" : "Tuple",
      "underlying" : 108
    }, {
      "local-name" : "Context",
      "name" : "context.Context",
      "package" : 6,
      "type" : "Named",
      "underlying" : 110
    }, {
      "methods" : [ {
        "name" : "Deadline",
        "type" : 111
      }, {
        "name" : "Done",
        "type" : 126
      }, {
        "name" : "Err",
        "type" : 130
      }, {
        "name" : "Value",
        "type" : 134
      } ],
      "name" : "interface{Deadline() (deadline time.Time, ok bool); Done() <-chan struct{}; Err() error; Value(key interface{}) interface{}}",
      "type" : "Interface",
      "underlying" : 110
    }, {
      "name" : "func() (deadline time.Time, ok bool)",
      "params" : 8,
      "recv" : 3,
      "results" : 112,
      "type" : "Signature",
      "underlying" : 111,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "deadline",
        "type" : 113
      }, {
        "name" : "ok",
        "type" : 17
      } ],
      "name" : "(deadline time.Time, ok bool)",
      "type" : "Tuple",
      "underlying" : 112
    }, {
      "local-name" : "Time",
      "name" : "time.Time",
      "package" : 7,
      "type" : "Named",
      "underlying" : 114
    }, {
      "fields" : [ {
        "name" : "wall",
        "type" : 67
      }, {
        "name" : "ext",
        "type" : 115
      }, {
        "name" : "loc",
        "type" : 116
      } ],
      "name" : "struct{wall uint64; ext int64; loc *time.Location}",
      "type" : "Struct",
      "underlying" : 114
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 115
    }, {
      "elem" : 117,
      "name" : "*time.Location",
      "type" : "Pointer",
      "underlying" : 116
    }, {
      "local-name" : "Location",
      "name" : "time.Location",
      "package" : 7,
      "type" : "Named",
      "underlying" : 118
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 10
      }, {
        "name" : "zone",
        "type" : 119
      }, {
        "name" : "tx",
        "type" : 122
      }, {
        "name" : "cacheStart",
        "type" : 115
      }, {
        "name" : "cacheEnd",
        "type" : 115
      }, {
        "name" : "cacheZone",
        "type" : 125
      } ],
      "name" : "struct{name string; zone []time.zone; tx []time.zoneTrans; cacheStart int64; cacheEnd int64; cacheZone *time.zone}",
      "type" : "Struct",
      "underlying" : 118
    }, {
      "elem" : 120,
      "name" : "[]time.zone",
      "type" : "Slice",
      "underlying" : 119
    }, {
      "local-name" : "zone",
      "name" : "time.zone",
      "package" : 7,
      "type" : "Named",
      "underlying" : 121
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 10
      }, {
        "name" : "offset",
        "type" : 14
      }, {
        "name" : "isDST",
        "type" : 17
      } ],
      "name" : "struct{name string; offset int; isDST bool}",
      "type" : "Struct",
      "underlying" : 121
    }, {
      "elem" : 123,
      "name" : "[]time.zoneTrans",
      "type" : "Slice",
      "underlying" : 122
    }, {
      "local-name" : "zoneTrans",
      "name" : "time.zoneTrans",
      "package" : 7,
      "type" : "Named",
      "underlying" : 124
    }, {
      "fields" : [ {
        "name" : "when",
        "type" : 115
      }, {
        "name" : "index",
        "type" : 33
      }, {
        "name" : "isstd",
        "type" : 17
      }, {
        "name" : "isutc",
        "type" : 17
      } ],
      "name" : "struct{when int64; index uint8; isstd bool; isutc bool}",
      "type" : "Struct",
      "underlying" : 124
    }, {
      "elem" : 120,
      "name" : "*time.zone",
      "type" : "Pointer",
      "underlying" : 125
    }, {
      "name" : "func() <-chan struct{}",
      "params" : 8,
      "recv" : 4,
      "results" : 127,
      "type" : "Signature",
      "underlying" : 126,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 128
      } ],
      "name" : "(<-chan struct{})",
      "type" : "Tuple",
      "underlying" : 127
    }, {
      "dir" : "recv",
      "elem" : 129,
      "name" : "<-chan struct{}",
      "type" : "Chan",
      "underlying" : 128
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 129
    }, {
      "name" : "func() error",
      "params" : 8,
      "recv" : 5,
      "results" : 131,
      "type" : "Signature",
      "underlying" : 130,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 132
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 131
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 133
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 7
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 133
    }, {
      "name" : "func(key interface{}) interface{}",
      "params" : 135,
      "recv" : 6,
      "results" : 137,
      "type" : "Signature",
      "underlying" : 134,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 136
      } ],
      "name" : "(key interface{})",
      "type" : "Tuple",
      "underlying" : 135
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 136
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 136
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 137
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 138
    }, {
      "elem" : 104,
      "name" : "[]*github.com/yuin/gopher-lua.Upvalue",
      "type" : "Slice",
      "underlying" : 139
    }, {
      "name" : "func() (string, bool)",
      "params" : 8,
      "recv" : 8,
      "results" : 141,
      "type" : "Signature",
      "underlying" : 140,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      }, {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(string, bool)",
      "type" : "Tuple",
      "underlying" : 141
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 142
    }, {
      "name" : "func([]github.com/yuin/gopher-lua.LValue) int",
      "params" : 144,
      "recv" : -1,
      "results" : 138,
      "type" : "Signature",
      "underlying" : 143,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 26
      } ],
      "name" : "([]github.com/yuin/gopher-lua.LValue)",
      "type" : "Tuple",
      "underlying" : 144
    }, {
      "elem" : 26,
      "name" : "*[]github.com/yuin/gopher-lua.LValue",
      "type" : "Pointer",
      "underlying" : 145
    }, {
      "elem" : 94,
      "name" : "*[]float64",
      "type" : "Pointer",
      "underlying" : 146
    }, {
      "elem" : 3,
      "name" : "*float64",
      "type" : "Pointer",
      "underlying" : 147
    }, {
      "elem" : 5,
      "name" : "*github.com/yuin/gopher-lua.LValue",
      "type" : "Pointer",
      "underlying" : 148
    }, {
      "elem" : 150,
      "name" : "*github.com/yuin/gopher-lua.iface",
      "type" : "Pointer",
      "underlying" : 149
    }, {
      "local-name" : "iface",
      "name" : "github.com/yuin/gopher-lua.iface",
      "package" : 0,
      "type" : "Named",
      "underlying" : 151
    }, {
      "fields" : [ {
        "name" : "itab",
        "type" : 95
      }, {
        "name" : "word",
        "type" : 95
      } ],
      "name" : "struct{itab unsafe.Pointer; word unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 151
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "al",
      "package" : 0,
      "type" : 88,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_uv",
      "package" : 0,
      "type" : 70,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_fv",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "preloads",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "top",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "nptrs",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "nheader",
      "package" : 0,
      "type" : 91,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fptrs",
      "package" : 0,
      "type" : 94,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fheader",
      "package" : 0,
      "type" : 91,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Data",
      "package" : 4,
      "type" : 70,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fptr",
      "package" : 0,
      "type" : 147,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "e",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ep",
      "package" : 0,
      "type" : 149,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "itab",
      "package" : 0,
      "type" : 95,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "itabLNumber",
      "package" : 0,
      "type" : 95,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "word",
      "package" : 0,
      "type" : 95,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}