{
  "usage" : {
    "file" : "generic_reduce.go",
    "label1" : "delegate",
    "label2" : "efficiency",
    "line" : "1698",
    "module" : "gorgonia.org/tensor",
    "pkg" : "gorgonia.org/tensor/internal/execution",
    "project" : "gorgonia/gorgonia",
    "snippet" : "func reduceDefaultUnsafePointer(data, retVal []unsafe.Pointer, dim0, dimSize, outerStride, stride, expected int, fn func(a, b unsafe.Pointer) unsafe.Pointer) {",
    "version" : "v0.9.6"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 7, 2, 3, 5, 0, 4, 6, 1 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 3, 5, 0, 4, 6, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1, 5 ],
      "in-vars" : [ 6, 1, 2, 0, 8, 7, 3, 5, 4 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 6, 1, 7, 5, 8, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1699,
      "ast" : {
        "condition" : {
          "go-type" : 9,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 8
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dim0",
              "variable" : 2
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 1717,
      "code" : "for i := 0; i < dim0; i++ {\n\tstart := i * outerStride\n\tsliced := data[start : start+outerStride]\n\tvar innerStart, strideTrack int\n\tfor j := 0; j < expected; j++ {\n\t\twriteTo := i*expected + j\n\t\tretVal[writeTo] = sliced[innerStart]\n\t\tfor k := 1; k < dimSize; k++ {\n\t\t\treadFrom := innerStart + k*stride\n\t\t\tretVal[writeTo] = fn(retVal[writeTo], sliced[readFrom])\n\t\t}\n\t\tstrideTrack++\n\t\tif strideTrack >= stride {\n\t\t\tstrideTrack = 0\n\t\t\tinnerStart += stride\n\t\t}\n\t\tinnerStart++\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 8, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 5, 0, 4, 6, 1, 7, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 7, 3, 5, 0, 6, 4, 1, 2, 8 ],
      "decl-vars" : [ 8 ],
      "line-start" : 1699,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1699,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 2, 3, 5, 1, 7, 8, 4, 6 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 4, 6, 7, 2, 5, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1699,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 8
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 1699,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 6, 7, 8, 4, 3, 5, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 9, 4, 1, 2, 5, 0, 8, 6, 7 ],
      "decl-vars" : [ 9 ],
      "line-start" : 1700,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "start"
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 8
            }
          },
          "operator" : "*",
          "right" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "outerStride",
              "variable" : 4
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1700,
      "code" : "start := i * outerStride",
      "entry" : false,
      "use-vars" : [ 4, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 1, 2, 0, 8, 9, 4, 5, 6, 7, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 7, 2, 5, 3, 8, 4, 1, 12 ],
      "decl-vars" : [ 12 ],
      "line-start" : 1701,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sliced"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "type" : "slice",
          "three" : false,
          "high" : {
            "go-type" : 4,
            "kind" : "expression",
            "left" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "start",
                "variable" : 9
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "outerStride",
                "variable" : 4
              }
            },
            "type" : "binary"
          },
          "max" : null,
          "kind" : "expression",
          "low" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "start",
              "variable" : 9
            }
          },
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 0
            }
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1701,
      "code" : "sliced := data[start : start+outerStride]",
      "entry" : false,
      "use-vars" : [ 0, 9, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 6, 1, 2, 3, 8, 4, 7, 12, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 7, 12, 2, 0, 4, 6, 1, 13, 3, 16, 5, 8 ],
      "decl-vars" : [ 13, 16 ],
      "line-start" : 1702,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "innerStart"
            }, {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "strideTrack"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1702,
      "code" : "var innerStart, strideTrack int",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 11 ],
      "in-vars" : [ 6, 1, 7, 2, 3, 16, 5, 8, 4, 10, 12, 13, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 7, 2, 5, 12, 13, 3, 16, 8, 4, 6, 10, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1703,
      "ast" : {
        "condition" : {
          "go-type" : 9,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "j",
              "variable" : 10
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "expected",
              "variable" : 6
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 1716,
      "code" : "for j := 0; j < expected; j++ {\n\twriteTo := i*expected + j\n\tretVal[writeTo] = sliced[innerStart]\n\tfor k := 1; k < dimSize; k++ {\n\t\treadFrom := innerStart + k*stride\n\t\tretVal[writeTo] = fn(retVal[writeTo], sliced[readFrom])\n\t}\n\tstrideTrack++\n\tif strideTrack >= stride {\n\t\tstrideTrack = 0\n\t\tinnerStart += stride\n\t}\n\tinnerStart++\n}",
      "entry" : false,
      "use-vars" : [ 10, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 1, 12, 2, 16, 5, 0, 8, 6, 13, 3, 4, 7 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 7, 3, 0, 2, 16, 5, 6, 10, 1, 12, 13 ],
      "decl-vars" : [ 10 ],
      "line-start" : 1703,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "j"
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1703,
      "code" : "j := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 10 ],
      "successors" : [ 8 ],
      "in-vars" : [ 13, 3, 16, 5, 8, 6, 7, 12, 0, 4, 10, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 7, 12, 13, 3, 0, 6, 10, 1, 2, 16, 5, 8, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1703,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "j",
            "variable" : 10
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 10 ],
      "line-end" : 1703,
      "code" : "j++",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 12, 2, 16, 0, 8, 4, 6, 10, 5, 1, 7, 13, 3 ],
      "exit" : false,
      "out-vars" : [ 16, 12, 2, 3, 10, 1, 8, 4, 6, 11, 13, 0, 7, 5 ],
      "decl-vars" : [ 11 ],
      "line-start" : 1704,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "writeTo"
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "left" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 8
              }
            },
            "operator" : "*",
            "right" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "expected",
                "variable" : 6
              }
            },
            "type" : "binary"
          },
          "operator" : "+",
          "right" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "j",
              "variable" : 10
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1704,
      "code" : "writeTo := i*expected + j",
      "entry" : false,
      "use-vars" : [ 8, 6, 10 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 14 ],
      "in-vars" : [ 3, 8, 11, 10, 6, 7, 12, 5, 0, 4, 13, 2, 1, 16 ],
      "exit" : false,
      "out-vars" : [ 11, 10, 2, 5, 0, 8, 1, 7, 4, 6, 13, 3, 12, 16 ],
      "decl-vars" : [ ],
      "line-start" : 1705,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "index" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "writeTo",
              "variable" : 11
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "retVal",
              "variable" : 1
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 3,
          "index" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "innerStart",
              "variable" : 13
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sliced",
              "variable" : 12
            }
          },
          "type" : "index"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1705,
      "code" : "retVal[writeTo] = sliced[innerStart]",
      "entry" : false,
      "use-vars" : [ 1, 11, 12, 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16, 18 ],
      "in-vars" : [ 14, 16, 4, 10, 3, 5, 0, 11, 7, 12, 2, 8, 1, 13, 6 ],
      "exit" : false,
      "out-vars" : [ 4, 13, 2, 5, 8, 11, 7, 12, 0, 10, 1, 16, 6, 14, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1706,
      "ast" : {
        "condition" : {
          "go-type" : 9,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 14
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 3
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 1709,
      "code" : "for k := 1; k < dimSize; k++ {\n\treadFrom := innerStart + k*stride\n\tretVal[writeTo] = fn(retVal[writeTo], sliced[readFrom])\n}",
      "entry" : false,
      "use-vars" : [ 14, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 0, 12, 16, 5, 10, 13, 2, 7, 8, 4, 6, 11, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 11, 6, 10, 7, 2, 16, 14, 3, 5, 1, 12, 13, 0 ],
      "decl-vars" : [ 14 ],
      "line-start" : 1706,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "k"
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1706,
      "code" : "k := 1",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 14 ],
      "successors" : [ 13 ],
      "in-vars" : [ 13, 11, 14, 1, 7, 4, 10, 16, 0, 8, 2, 3, 6, 12, 5 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 8, 5, 11, 10, 7, 3, 0, 16, 14, 1, 12, 13, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1706,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k",
            "variable" : 14
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 14 ],
      "line-end" : 1706,
      "code" : "k++",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 16, 5, 6, 14, 2, 0, 8, 7, 4, 11, 12, 13, 3, 10, 1 ],
      "exit" : false,
      "out-vars" : [ 12, 13, 5, 14, 15, 7, 3, 11, 6, 2, 10, 16, 0, 8, 4, 1 ],
      "decl-vars" : [ 15 ],
      "line-start" : 1707,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "readFrom"
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "innerStart",
              "variable" : 13
            }
          },
          "operator" : "+",
          "right" : {
            "go-type" : 4,
            "kind" : "expression",
            "left" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "k",
                "variable" : 14
              }
            },
            "operator" : "*",
            "right" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "stride",
                "variable" : 5
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1707,
      "code" : "readFrom := innerStart + k*stride",
      "entry" : false,
      "use-vars" : [ 14, 5, 13 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 15 ],
      "in-vars" : [ 7, 3, 11, 6, 10, 2, 1, 15, 12, 8, 4, 14, 13, 16, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 6, 2, 16, 0, 14, 5, 8, 4, 11, 10, 1, 12, 3, 7, 13 ],
      "decl-vars" : [ ],
      "line-start" : 1708,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "index" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "writeTo",
              "variable" : 11
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "retVal",
              "variable" : 1
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 3,
            "index" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "writeTo",
                "variable" : 11
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 1
              }
            },
            "type" : "index"
          }, {
            "go-type" : 3,
            "index" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "readFrom",
                "variable" : 15
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sliced",
                "variable" : 12
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 7
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1708,
      "code" : "retVal[writeTo] = fn(retVal[writeTo], sliced[readFrom])",
      "entry" : false,
      "use-vars" : [ 12, 15, 1, 7, 11 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 19 ],
      "in-vars" : [ 10, 7, 2, 3, 16, 8, 4, 6, 5, 0, 1, 12, 13 ],
      "exit" : false,
      "out-vars" : [ 8, 6, 10, 12, 2, 3, 16, 5, 4, 1, 7, 13, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1710,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "strideTrack",
            "variable" : 16
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 16 ],
      "line-end" : 1710,
      "code" : "strideTrack++",
      "entry" : false,
      "use-vars" : [ 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20, 22 ],
      "in-vars" : [ 4, 10, 1, 7, 12, 13, 2, 3, 16, 5, 0, 8, 6 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 16, 0, 4, 6, 10, 12, 5, 8, 1, 7, 13 ],
      "decl-vars" : [ ],
      "line-start" : 1711,
      "ast" : {
        "condition" : {
          "go-type" : 9,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "strideTrack",
              "variable" : 16
            }
          },
          "operator" : ">=",
          "right" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stride",
              "variable" : 5
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1714,
      "code" : "if strideTrack >= stride {\n\tstrideTrack = 0\n\tinnerStart += stride\n}",
      "entry" : false,
      "use-vars" : [ 16, 5 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 21 ],
      "in-vars" : [ 3, 6, 10, 1, 7, 13, 2, 8, 4, 12, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 13, 2, 3, 16, 10, 1, 7, 12, 0, 8, 4, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1712,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "strideTrack",
            "variable" : 16
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 16 ],
      "line-end" : 1712,
      "code" : "strideTrack = 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 13 ],
      "successors" : [ 22 ],
      "in-vars" : [ 0, 8, 4, 7, 13, 2, 16, 6, 10, 1, 12, 3, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 10, 12, 0, 8, 1, 7, 13, 2, 3, 16, 5, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1713,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "innerStart",
            "variable" : 13
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "stride",
            "variable" : 5
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 13 ],
      "line-end" : 1713,
      "code" : "innerStart += stride",
      "entry" : false,
      "use-vars" : [ 5, 13 ]
    }, {
      "update-vars" : [ 13 ],
      "successors" : [ 10 ],
      "in-vars" : [ 10, 13, 2, 5, 8, 6, 1, 7, 12, 3, 16, 0, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 10, 1, 7, 12, 16, 0, 8, 6, 13, 2, 3, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1715,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "innerStart",
            "variable" : 13
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 13 ],
      "line-end" : 1715,
      "code" : "innerStart++",
      "entry" : false,
      "use-vars" : [ 13 ]
    } ],
    "code" : "func reduceDefaultUnsafePointer(data, retVal []unsafe.Pointer, dim0, dimSize, outerStride, stride, expected int, fn func(a, b unsafe.Pointer) unsafe.Pointer) {\n\tfor i := 0; i < dim0; i++ {\n\t\tstart := i * outerStride\n\t\tsliced := data[start : start+outerStride]\n\t\tvar innerStart, strideTrack int\n\t\tfor j := 0; j < expected; j++ {\n\t\t\twriteTo := i*expected + j\n\t\t\tretVal[writeTo] = sliced[innerStart]\n\t\t\tfor k := 1; k < dimSize; k++ {\n\t\t\t\treadFrom := innerStart + k*stride\n\t\t\t\tretVal[writeTo] = fn(retVal[writeTo], sliced[readFrom])\n\t\t\t}\n\t\t\tstrideTrack++\n\t\t\tif strideTrack >= stride {\n\t\t\t\tstrideTrack = 0\n\t\t\t\tinnerStart += stride\n\t\t\t}\n\t\t\tinnerStart++\n\t\t}\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "reduceDefaultUnsafePointer",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ],
    "line-end" : 1718,
    "line-start" : 1698,
    "names" : [ "reduceDefaultUnsafePointer" ],
    "package" : 0,
    "packages" : [ {
      "name" : "execution",
      "path" : "gorgonia.org/tensor/internal/execution"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1, 2, 3, 4, 5, 6, 7 ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(data []unsafe.Pointer, retVal []unsafe.Pointer, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a unsafe.Pointer, b unsafe.Pointer) unsafe.Pointer)",
      "params" : 1,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 2
      }, {
        "name" : "retVal",
        "type" : 2
      }, {
        "name" : "dim0",
        "type" : 4
      }, {
        "name" : "dimSize",
        "type" : 4
      }, {
        "name" : "outerStride",
        "type" : 4
      }, {
        "name" : "stride",
        "type" : 4
      }, {
        "name" : "expected",
        "type" : 4
      }, {
        "name" : "fn",
        "type" : 5
      } ],
      "name" : "(data []unsafe.Pointer, retVal []unsafe.Pointer, dim0 int, dimSize int, outerStride int, stride int, expected int, fn func(a unsafe.Pointer, b unsafe.Pointer) unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "[]unsafe.Pointer",
      "type" : "Slice",
      "underlying" : 2
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 3
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "name" : "func(a unsafe.Pointer, b unsafe.Pointer) unsafe.Pointer",
      "params" : 6,
      "recv" : -1,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 5,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 3
      }, {
        "name" : "b",
        "type" : 3
      } ],
      "name" : "(a unsafe.Pointer, b unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 7
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 9
    } ],
    "variables" : [ {
      "name" : "data",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "retVal",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "dim0",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "dimSize",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "outerStride",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "stride",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "expected",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "start",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "j",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "writeTo",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "sliced",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "innerStart",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "k",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "readFrom",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "strideTrack",
      "package" : 0,
      "type" : 4,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}