{
  "usage" : {
    "file" : "tracer.go",
    "label1" : "delegate",
    "label2" : "efficiency",
    "line" : "141",
    "module" : "github.com/weaveworks/tcptracer-bpf",
    "pkg" : "github.com/weaveworks/tcptracer-bpf/pkg/tracer",
    "project" : "weaveworks/scope",
    "snippet" : "err = t.m.DeleteElement(mapFdInstall, unsafe.Pointer(&pid))",
    "version" : "v0.0.0-20200114145059-84a08fc667c0"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 2 ],
      "decl-vars" : [ 5 ],
      "line-start" : 140,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mapFdInstall"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 9,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "fdinstall_pids"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Map"
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 4
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 72,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 140,
      "code" : "mapFdInstall := t.m.Map(\"fdinstall_pids\")",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 4 ],
      "in-vars" : [ 5, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 141,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 3
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 72,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapFdInstall",
              "variable" : 5
            }
          }, {
            "coerced-to" : {
              "go-type" : 15,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 5,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 15,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "go-type" : 16,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pid",
                  "variable" : 2
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "DeleteElement"
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 4
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 141,
      "code" : "err = t.m.DeleteElement(mapFdInstall, unsafe.Pointer(&pid))",
      "entry" : false,
      "use-vars" : [ 5, 2, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 142,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 3
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 142,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 3 ]
    } ],
    "code" : "func (t *Tracer) RemoveFdInstallWatcher(pid uint32) (err error) {\n\tmapFdInstall := t.m.Map(\"fdinstall_pids\")\n\terr = t.m.DeleteElement(mapFdInstall, unsafe.Pointer(&pid))\n\treturn err\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "RemoveFdInstallWatcher",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "Map",
      "package" : 1,
      "type" : 10,
      "exported" : true
    }, {
      "name" : "DeleteElement",
      "package" : 1,
      "type" : 13,
      "exported" : true
    } ],
    "line-end" : 143,
    "line-start" : 139,
    "names" : [ "RemoveFdInstallWatcher" ],
    "package" : 0,
    "packages" : [ {
      "name" : "tracer",
      "path" : "github.com/weaveworks/tcptracer-bpf/pkg/tracer"
    }, {
      "name" : "elf",
      "path" : "github.com/iovisor/gobpf/elf"
    }, {
      "name" : "io",
      "path" : "io"
    }, {
      "name" : "elf",
      "path" : "debug/elf"
    }, {
      "name" : "binary",
      "path" : "encoding/binary"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 2 ],
    "receivers" : [ 1 ],
    "results" : [ 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(pid uint32) (err error)",
      "params" : 1,
      "recv" : 1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pid",
        "type" : 2
      } ],
      "name" : "(pid uint32)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 4
      } ],
      "name" : "(err error)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 5
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 6
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 5
    }, {
      "name" : "func() string",
      "params" : 7,
      "recv" : 0,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 6,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "func(name string) *github.com/iovisor/gobpf/elf.Map",
      "params" : 11,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 10,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 9
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 72
      } ],
      "name" : "(*github.com/iovisor/gobpf/elf.Map)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "name" : "func(mp *github.com/iovisor/gobpf/elf.Map, key unsafe.Pointer) error",
      "params" : 14,
      "recv" : -1,
      "results" : 67,
      "type" : "Signature",
      "underlying" : 13,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "mp",
        "type" : 72
      }, {
        "name" : "key",
        "type" : 15
      } ],
      "name" : "(mp *github.com/iovisor/gobpf/elf.Map, key unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 5,
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 2,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 16
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "pid",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "mapFdInstall",
      "package" : 0,
      "type" : 72,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}