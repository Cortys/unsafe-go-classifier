{
  "usage" : {
    "file" : "perf.go",
    "label1" : "delegate",
    "label2" : "efficiency",
    "line" : "512",
    "module" : "github.com/elastic/go-perf",
    "pkg" : "github.com/elastic/go-perf",
    "project" : "elastic/beats",
    "snippet" : "err := ev.ioctlPointer(unix.PERF_EVENT_IOC_QUERY_BPF, unsafe.Pointer(&buf[0]))",
    "version" : "v0.0.0-20191212140718-9c656876f595"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 5, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 507,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 5
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 509,
      "code" : "if err := ev.ok(); err != nil {\n\treturn nil, err\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 2, 1 ],
      "decl-vars" : [ 5 ],
      "line-start" : 507,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ok"
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ev",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 507,
      "code" : "err := ev.ok()",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 508,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 14,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 5
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 508,
      "code" : "return nil, err",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ 6, 2, 1 ],
      "decl-vars" : [ 6 ],
      "line-start" : 510,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "buf"
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "go-type" : 4,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 4,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "2"
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "max",
                "variable" : 2
              }
            },
            "type" : "binary"
          } ],
          "type" : "make"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 510,
      "code" : "buf := make([]uint32, 2+max)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 7 ],
      "in-vars" : [ 6, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 6, 1 ],
      "decl-vars" : [ ],
      "line-start" : 511,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "index" : {
            "go-type" : 4,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "buf",
              "variable" : 6
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "max",
            "variable" : 2
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 511,
      "code" : "buf[0] = max",
      "entry" : false,
      "use-vars" : [ 6, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 6, 1 ],
      "exit" : false,
      "out-vars" : [ 6, 7 ],
      "decl-vars" : [ 7 ],
      "line-start" : 512,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3221758986"
            }
          }, {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 2,
                "index" : {
                  "go-type" : 4,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 4,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "buf",
                    "variable" : 6
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ioctlPointer"
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ev",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 512,
      "code" : "err := ev.ioctlPointer(unix.PERF_EVENT_IOC_QUERY_BPF, unsafe.Pointer(&buf[0]))",
      "entry" : false,
      "use-vars" : [ 1, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 10 ],
      "in-vars" : [ 6, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 513,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 7
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 515,
      "code" : "if err != nil {\n\treturn nil, wrapIoctlError(\"PERF_EVENT_IOC_QUERY_BPF\", err)\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 514,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 14,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "PERF_EVENT_IOC_QUERY_BPF"
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 20,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "wrapIoctlError"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 514,
      "code" : "return nil, wrapIoctlError(\"PERF_EVENT_IOC_QUERY_BPF\", err)",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ 6, 8 ],
      "decl-vars" : [ 8 ],
      "line-start" : 516,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "count"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "index" : {
            "go-type" : 4,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "buf",
              "variable" : 6
            }
          },
          "type" : "index"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 516,
      "code" : "count := buf[1]",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 6, 8 ],
      "exit" : false,
      "out-vars" : [ 6, 8, 9 ],
      "decl-vars" : [ 9 ],
      "line-start" : 517,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fds"
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "go-type" : 4,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 4,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "count",
              "variable" : 8
            }
          } ],
          "type" : "make"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 517,
      "code" : "fds := make([]uint32, count)",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 6, 8, 9 ],
      "exit" : false,
      "out-vars" : [ 9 ],
      "decl-vars" : [ ],
      "line-start" : 518,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fds",
              "variable" : 9
            }
          }, {
            "go-type" : 4,
            "type" : "slice",
            "three" : false,
            "high" : {
              "go-type" : 2,
              "kind" : "expression",
              "left" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "2"
                }
              },
              "operator" : "+",
              "right" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "count",
                  "variable" : 8
                }
              },
              "type" : "binary"
            },
            "max" : null,
            "kind" : "expression",
            "low" : {
              "go-type" : 4,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "2"
              }
            },
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buf",
                "variable" : 6
              }
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 518,
      "code" : "copy(fds, buf[2:2+count])",
      "entry" : false,
      "use-vars" : [ 6, 8, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 9 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 519,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fds",
            "variable" : 9
          }
        }, {
          "go-type" : 14,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 519,
      "code" : "return fds, nil",
      "entry" : false,
      "use-vars" : [ 9 ]
    } ],
    "code" : "// QueryBPF queries the event for BPF program file descriptors attached to\n// the same tracepoint as ev. max is the maximum number of file descriptors\n// to return.\nfunc (ev *Event) QueryBPF(max uint32) ([]uint32, error) {\n\tif err := ev.ok(); err != nil {\n\t\treturn nil, err\n\t}\n\tbuf := make([]uint32, 2+max)\n\tbuf[0] = max\n\terr := ev.ioctlPointer(unix.PERF_EVENT_IOC_QUERY_BPF, unsafe.Pointer(&buf[0]))\n\tif err != nil {\n\t\treturn nil, wrapIoctlError(\"PERF_EVENT_IOC_QUERY_BPF\", err)\n\t}\n\tcount := buf[1]\n\tfds := make([]uint32, count)\n\tcopy(fds, buf[2:2+count])\n\treturn fds, nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "QueryBPF",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "ioctlPointer",
      "package" : 0,
      "type" : 15,
      "exported" : false
    }, {
      "name" : "wrapIoctlError",
      "package" : 0,
      "type" : 20,
      "exported" : false
    } ],
    "line-end" : 520,
    "line-start" : 506,
    "names" : [ "QueryBPF" ],
    "package" : 0,
    "packages" : [ {
      "name" : "perf",
      "path" : "github.com/elastic/go-perf"
    }, {
      "name" : "unix",
      "path" : "golang.org/x/sys/unix"
    }, {
      "name" : "time",
      "path" : "time"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 2 ],
    "receivers" : [ 1 ],
    "results" : [ 3, 4 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(max uint32) ([]uint32, error)",
      "params" : 1,
      "recv" : 1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "max",
        "type" : 2
      } ],
      "name" : "(max uint32)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      }, {
        "name" : "",
        "type" : 5
      } ],
      "name" : "([]uint32, error)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "elem" : 2,
      "name" : "[]uint32",
      "type" : "Slice",
      "underlying" : 4
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 6
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 7
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 6
    }, {
      "name" : "func() string",
      "params" : 8,
      "recv" : 0,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 7,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "func() error",
      "params" : 8,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "name" : "func(number uintptr, arg unsafe.Pointer) error",
      "params" : 16,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 15,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "number",
        "type" : 17
      }, {
        "name" : "arg",
        "type" : 18
      } ],
      "name" : "(number uintptr, arg unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 16
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 3,
      "type" : "Basic",
      "underlying" : 18
    }, {
      "elem" : 2,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 19
    }, {
      "name" : "func(ioctl string, err error) error",
      "params" : 21,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 20,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ioctl",
        "type" : 10
      }, {
        "name" : "err",
        "type" : 5
      } ],
      "name" : "(ioctl string, err error)",
      "type" : "Tuple",
      "underlying" : 21
    }, {
      "name" : "func([]uint32, []uint32) int",
      "params" : 23,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      }, {
        "name" : "",
        "type" : 4
      } ],
      "name" : "([]uint32, []uint32)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 24
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "ev",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "max",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "count",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "fds",
      "package" : 0,
      "type" : 4,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}